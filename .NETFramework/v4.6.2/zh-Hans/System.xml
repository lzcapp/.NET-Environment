<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System</name>
  </assembly>
  <members>
    <member name="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanged">
      <summary>当用户更改显示设置时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanging">
      <summary>更改显示设置时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.EventsThreadShutdown">
      <summary>在侦听系统事件的线程终止之前发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.InstalledFontsChanged">
      <summary>当用户添加或删除从系统中的字体时出现。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.LowMemory">
      <summary>系统运行超出可用 RAM 时出现。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.PaletteChanged">
      <summary>当用户切换到使用不同的调色板的应用程序时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.PowerModeChanged">
      <summary>当用户挂起或恢复系统时出现。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionEnded">
      <summary>当用户注销或关闭系统时出现。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionEnding">
      <summary>当用户尝试注销或关闭系统时出现。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.SessionSwitch">
      <summary>当前登录的用户已更改时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.TimeChanged">
      <summary>当用户更改系统时钟的时间时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.TimerElapsed">
      <summary>在 windows 的计时器间隔已过期时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged">
      <summary>当用户首选项已更改时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging">
      <summary>当用户首选项更改时发生。</summary>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary>第一次，将生成一个事件 <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> 访问集合。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary>第一次，将生成一个事件 <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> 访问集合。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary>第一次，将生成一个事件 <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> 访问集合。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary>第一次，将生成一个事件 <see cref="P:System.CodeDom.CodeNamespace.Comments" /> 访问集合。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary>第一次，将生成一个事件 <see cref="P:System.CodeDom.CodeNamespace.Imports" /> 访问集合。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary>第一次，将生成一个事件 <see cref="P:System.CodeDom.CodeNamespace.Types" /> 访问集合。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary>发生时 <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> 第一次访问集合。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary>发生时 <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> 第一次访问集合。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged">
      <summary>当添加、移除、变更、移动了某个项时，或当刷新了整个列表时发生。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>添加或删除项时发生。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>当集合更改时发生。</summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged">
      <summary>当集合更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.DoWork">
      <summary>发生时 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> 调用。</summary>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.ProgressChanged">
      <summary>发生时 <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> 调用。</summary>
    </member>
    <member name="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted">
      <summary>后台操作已完成、 已取消或引发异常时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary>在某项添加到列表之前发生。</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary>当列表中的项更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Component.Disposed">
      <summary>通过调用释放组件时发生 <see cref="M:System.ComponentModel.Component.Dispose" /> 方法。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary>添加了组件时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary>组件的过程中正在添加时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary>组件已被更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary>组件的过程中被更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary>删除该组件时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary>组件是正被删除时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary>当组件重命名时出现。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary>在更改当前根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary>在创建根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary>在释放文档的根设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary>在更改当前设计器视图选择时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary>激活此设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary>停用此设计器时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary>此设计器加载完文档时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary>添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 事件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary>添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary>添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> 事件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary>添加事件处理程序 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> 事件。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary>当前所选内容更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary>要更改当前所选内容时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary>菜单命令更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary>当 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> 无法在序列化管理器的名称表中找到指定名称时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary>在序列化完成时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary>当列表或列表中的项更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>表示处理组件的 <see cref="E:System.ComponentModel.IComponent.Disposed" /> 事件的方法。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged">
      <summary>当验证错误针对属性或整个实体更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging">
      <summary>在属性值更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary>组件初始化完成后发生。</summary>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary>添加一个事件处理程序，用于侦听 <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> 组件上的事件。</summary>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary>清除了组件的缓存时发生。</summary>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.PropertyChanged">
      <summary>应用程序设置属性的值更改后发生。</summary>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingChanging">
      <summary>更改应用程序设置属性的值之前发生。</summary>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded">
      <summary>从存储中检索应用程序设置后发生。</summary>
    </member>
    <member name="E:System.Configuration.ApplicationSettingsBase.SettingsSaving">
      <summary>值保存到数据存储区之前发生。</summary>
    </member>
    <member name="E:System.Diagnostics.EventLog.EntryWritten">
      <summary>向本地计算机上的事件日志写入项时发生。</summary>
    </member>
    <member name="E:System.Diagnostics.Process.ErrorDataReceived">
      <summary>当应用程序写入其重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中时发生。</summary>
    </member>
    <member name="E:System.Diagnostics.Process.Exited">
      <summary>在进程退出时发生。</summary>
    </member>
    <member name="E:System.Diagnostics.Process.OutputDataReceived">
      <summary>每次应用程序向其重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流中写入行时发生。</summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Changed">
      <summary>当更改指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中的文件和目录时发生。</summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Created">
      <summary>当在指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中创建文件和目录时发生。</summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Deleted">
      <summary>删除指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中的文件或目录时发生。</summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Error">
      <summary>当 <see cref="T:System.IO.FileSystemWatcher" /> 的实例无法继续监视更改或内部缓冲区溢出时发生。</summary>
    </member>
    <member name="E:System.IO.FileSystemWatcher.Renamed">
      <summary>重命名指定 <see cref="P:System.IO.FileSystemWatcher.Path" /> 中的文件或目录时发生。</summary>
    </member>
    <member name="E:System.IO.Ports.SerialPort.DataReceived">
      <summary>指示已通过由 <see cref="T:System.IO.Ports.SerialPort" /> 对象表示的端口接收了数据。</summary>
    </member>
    <member name="E:System.IO.Ports.SerialPort.ErrorReceived">
      <summary>指示由 <see cref="T:System.IO.Ports.SerialPort" /> 对象表示的端口上发生了错误。</summary>
    </member>
    <member name="E:System.IO.Ports.SerialPort.PinChanged">
      <summary>指示由 <see cref="T:System.IO.Ports.SerialPort" /> 对象表示的端口上发生了非数据信号事件。</summary>
    </member>
    <member name="E:System.Media.SoundPlayer.LoadCompleted">
      <summary>.Wav 文件已成功或失败加载时发生。</summary>
    </member>
    <member name="E:System.Media.SoundPlayer.SoundLocationChanged">
      <summary>当新的音频源路径时发生此 <see cref="T:System.Media.SoundPlayer" /> 已设置。</summary>
    </member>
    <member name="E:System.Media.SoundPlayer.StreamChanged">
      <summary>当新时发生 <see cref="T:System.IO.Stream" /> 音频源 <see cref="T:System.Media.SoundPlayer" /> 已设置。</summary>
    </member>
    <member name="E:System.Net.Mail.SmtpClient.SendCompleted">
      <summary>当异步电子邮件发送操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAddressChanged">
      <summary>网络接口的 IP 地址发生更改时发生。</summary>
    </member>
    <member name="E:System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged">
      <summary>当网络的可用性更改时发生。</summary>
    </member>
    <member name="E:System.Net.NetworkInformation.Ping.PingCompleted">
      <summary>当用于发送 Internet 控制消息协议 (ICMP) 回显消息和接收相应的 ICMP 回显回复消息的异步操作完成或被取消时出现。</summary>
    </member>
    <member name="E:System.Net.Sockets.SocketAsyncEventArgs.Completed">
      <summary>用于完成异步操作的事件。</summary>
    </member>
    <member name="E:System.Net.WebClient.DownloadDataCompleted">
      <summary>当异步数据下载操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.DownloadFileCompleted">
      <summary>异步文件下载操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.DownloadProgressChanged">
      <summary>在异步下载操作成功转换部分或全部数据时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.DownloadStringCompleted">
      <summary>当异步资源下载操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.OpenReadCompleted">
      <summary>若要打开包含资源的流的异步操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.OpenWriteCompleted">
      <summary>若要打开一个流以将数据写入到资源的异步操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.UploadDataCompleted">
      <summary>在异步数据上载操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.UploadFileCompleted">
      <summary>异步文件上载操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.UploadProgressChanged">
      <summary>在异步上载操作已成功转换部分或全部数据时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.UploadStringCompleted">
      <summary>在异步字符串上载操作完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.UploadValuesCompleted">
      <summary>名称/值集合的异步上载完成时发生。</summary>
    </member>
    <member name="E:System.Net.WebClient.WriteStreamClosed">
      <summary>当一个异步操作以将数据写入到的资源使用写入流关闭时发生。</summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary>达到间隔时发生。</summary>
    </member>
    <member name="E:System.Windows.Input.ICommand.CanExecuteChanged">
      <summary>当出现影响是否应执行该命令的更改时发生。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.IndentedTextWriter.DefaultTabString">
      <summary>指定默认选项卡上字符串。 此字段为常数。</summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary>指定可以使用一个空集合，而不是创建一个新。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.BindableAttribute" />, ，即 <see cref="F:System.ComponentModel.BindableAttribute.No" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary>指定不通常使用绑定属性。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary>指定一个属性，属性通常用于绑定。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.BrowsableAttribute" />, ，即 <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>指定属性或事件，不能在设计时修改。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>指定可以在设计时修改属性或事件。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary>表示的默认值为 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary>指示此类是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary>表示默认值的 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类，该类表示的类是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary>指示此类不是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary>表示的默认值为 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.DefaultEventAttribute" />, ，即 null。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />, ，即 null。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.DescriptionAttribute" />, ，这是一个空字符串 ("")。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类，该类指定签出已取消。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary>表示的默认值为 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary>表示空成员关系。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignBottom 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignHorizontalCenters 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignLeft 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignRight 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignToGrid 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignTop 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> AlignVerticalCenters 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ArrangeBottom 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ArrangeIcons 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ArrangeRight 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> BringForward 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> BringToFront 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> CenterHorizontally 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> CenterVertically 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 的复制命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为剪切命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 执行删除命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为文档大纲命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> f1 帮助命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 组命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> HorizSpaceConcatenate 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> HorizSpaceDecrease 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> HorizSpaceIncrease 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> HorizSpaceMakeEqual 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> LineupIcons 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> LockControls 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> MultiLevelRedo 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> MultiLevelUndo 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为粘贴命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 的属性命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> PropertiesWindow 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 重做命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 为替换命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 全选命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SendBackward 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SendToBack 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ShowGrid 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ShowLargeIcons 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToControl 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToControlHeight 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToControlWidth 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToFit 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> SizeToGrid 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 网格线对齐命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> TabOrder 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 的撤消命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 取消组合的命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary>获取一组谓词的第一个。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary>获取的最后一组谓词。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceConcatenate 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceDecrease 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceIncrease 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> VertSpaceMakeEqual 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ViewCode 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> ViewGrid 命令。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary>对象浏览器中获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary>对于输出窗口获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary>解决方案资源管理器中获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary>对于属性窗口获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary>相关的链接框架获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary>服务器资源管理器中获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary>对于任务列表中获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary>工具箱中获取的 GUID。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Component">
      <summary>指定标记的组件类别使用此组件设计器。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Default">
      <summary>指定标记为此类别的组件不能使用可视化设计器中。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Form">
      <summary>指定标记的组件使用此类别，请使用窗体设计器。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Generic">
      <summary>指定标记的组件使用此类别，请使用通用设计器。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Content">
      <summary>指定序列化程序应序列化的属性，而不是属性本身的内容。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Default">
      <summary>指定默认值，即 <see cref="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible" />, ，可视化设计器中，它是使用默认规则来生成一个属性的值。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Hidden">
      <summary>指定序列化程序不应该序列属性的值。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible">
      <summary>指定应允许序列化程序进行序列化属性的值。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />, ，即 <see cref="F:System.ComponentModel.DesignOnlyAttribute.No" />。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.No">
      <summary>指定在设计时或在运行时，可以设置一个属性。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Yes">
      <summary>指定可以仅在设计时设置一个属性。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary>这是默认可见 Yes。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary>将标记为在可视化设计器中不可见的组件。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary>将标记为在可视化设计器中可见的组件。</summary>
    </member>
    <member name="F:System.ComponentModel.DisplayNameAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.DisplayNameAttribute" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary>指定一个空集合，而不是创建一个新不具有任何项。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Default">
      <summary>表示的默认值为 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" />。</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.No">
      <summary>指定某一对象具有至少一个可编辑的子属性。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Yes">
      <summary>指定某一对象具有没有可编辑的子属性。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 是 <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary>指定该组件被继承。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary>指定该组件被继承，并且是只读的。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary>指定不继承的组件。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary>指定默认值，即无提供程序。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary>表示的默认值为 <see cref="T:System.ComponentModel.ListBindableAttribute" />。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary>指定该列表不是可绑定。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary>指定该列表是可绑定。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Default">
      <summary>指定默认值，即 <see cref="F:System.ComponentModel.LocalizableAttribute.No" />。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.No">
      <summary>指定不应本地化属性。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Yes">
      <summary>指定应本地化属性。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary>表示的默认值为 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类。</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Default">
      <summary>指定默认值，即 <see cref="F:System.ComponentModel.MergablePropertyAttribute.Yes" />, ，该属性可以与属于属性窗口中的其他对象的属性组合。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.No">
      <summary>指定属性不能组合与属于属性窗口中的其他对象的属性。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Yes">
      <summary>指定属性可以与属于属性窗口中的其他对象的属性进行组合。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Default">
      <summary>指示该属性不应通知对它的值的更改的父属性的默认属性状态。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.No">
      <summary>指示父属性不会对该属性的值的更改通知。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Yes">
      <summary>指示父属性属性的值发生更改的通知。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.ParenthesizePropertyNameAttribute.Default">
      <summary>初始化新实例的 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 类的默认值，该值指示关联的属性不应该用括号显示。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary>指定 text 属性不用作密码。 这 static (Shared 在 Visual Basic) 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary>指定 text 属性用作密码。 这 static (Shared 在 Visual Basic) 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary>指定可以使用而不是创建一个具有任何项的新的空集合。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.ReadOnlyAttribute" />, ，即 <see cref="F:System.ComponentModel.ReadOnlyAttribute.No" /> （也就是说，此属性绑定到的属性是读/写）。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.No">
      <summary>指定此属性绑定到该属性是读/写，并可以进行修改。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Yes">
      <summary>指定此属性绑定到的属性是只读的并且不能在服务器资源管理器修改。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary>指定的默认值为 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" />, ，即 <see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary>指定一个属性不能用作应用程序设置。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary>指定一个属性可以用作应用程序设置。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.All">
      <summary>指示所有属性重新查询，并可刷新属性值更改时。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Default">
      <summary>指示属性值更改时刷新的任何其他属性。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Repaint">
      <summary>指示属性值更改时重新绘制的所有属性。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary>指定默认的可见性，即 <see cref="F:System.ComponentModel.RunInstallerAttribute.No" />。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary>指定 Visual Studio 自定义操作安装程序或 Installutil.exe（安装程序工具） 时安装的程序集不应调用。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary>指定 Visual Studio 自定义操作安装程序或 Installutil.exe（安装程序工具） 时安装的程序集时要调用。 这 static 字段是只读的。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary>指定一个属性不是适合绑定到设置。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary>指定适合将绑定到设置属性。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类，并将类型设置为默认情况下， <see cref="T:System.Drawing.Design.ToolboxItem" />。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类，并将类型设置为 null。 此字段为只读。</summary>
    </member>
    <member name="F:System.ComponentModel.TypeConverterAttribute.Default">
      <summary>指定要用作此属性绑定到的对象的转换器的类型。</summary>
    </member>
    <member name="F:System.Diagnostics.CounterSample.Empty">
      <summary>定义类型的空的、 未初始化性能计数器样本 NumberOfItems32。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounter.DefaultFileMappingSize">
      <summary>指定大小，以字节为单位的性能计数器共享的全局内存。 默认大小为 524288 字节。</summary>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.Frequency">
      <summary>获取以每秒刻度数表示的计时器频率。 此字段为只读。</summary>
    </member>
    <member name="F:System.Diagnostics.Stopwatch.IsHighResolution">
      <summary>指示计时器是否基于高分辨率性能计数器。 此字段为只读。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPort.InfiniteTimeout">
      <summary>指示不应该发生超时。</summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLengthLimit">
      <summary>表示的默认最大大小，以字节为单位， <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。 此字段为常数。</summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultCookieLimit">
      <summary>表示默认最大数量的 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。 此字段为常数。</summary>
    </member>
    <member name="F:System.Net.CookieContainer.DefaultPerDomainCookieLimit">
      <summary>表示默认最大数量的 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以引用每个域。 此字段为常数。</summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version10">
      <summary>定义 <see cref="T:System.Version" /> HTTP 1.0 的实例。</summary>
    </member>
    <member name="F:System.Net.HttpVersion.Version11">
      <summary>定义 <see cref="T:System.Version" /> HTTP 1.1 的实例。</summary>
    </member>
    <member name="F:System.Net.IPAddress.Any">
      <summary>提供了一个指示服务器必须侦听的所有网络接口上的客户端活动的 IP 地址。 此字段为只读。</summary>
    </member>
    <member name="F:System.Net.IPAddress.Broadcast">
      <summary>提供 IP 广播的地址。 此字段为只读。</summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Any">
      <summary>
        <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 方法使用 <see cref="F:System.Net.IPAddress.IPv6Any" /> 字段指示 <see cref="T:System.Net.Sockets.Socket" /> 必须侦听的所有网络接口上的客户端活动。</summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Loopback">
      <summary>提供 IP 环回地址。 此属性是只读的。</summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6None">
      <summary>提供了一个指示应使用任何网络接口的 IP 地址。 此属性是只读的。</summary>
    </member>
    <member name="F:System.Net.IPAddress.Loopback">
      <summary>提供 IP 环回地址。 此字段为只读。</summary>
    </member>
    <member name="F:System.Net.IPAddress.None">
      <summary>提供了一个指示应使用任何网络接口的 IP 地址。 此字段为只读。</summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MaxPort">
      <summary>指定可以分配给最大值 <see cref="P:System.Net.IPEndPoint.Port" /> 属性。 MaxPort 值设置为 0x0000FFFF。 此字段为只读。</summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MinPort">
      <summary>指定可以分配给最小值 <see cref="P:System.Net.IPEndPoint.Port" /> 属性。 此字段为只读。</summary>
    </member>
    <member name="F:System.Net.Mime.DispositionTypeNames.Attachment">
      <summary>指定要显示为附加到电子邮件的文件附件。</summary>
    </member>
    <member name="F:System.Net.Mime.DispositionTypeNames.Inline">
      <summary>指定要显示为电子邮件正文的一部分附件。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Octet">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 数据不会被解释。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Pdf">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 采用可移植文档格式 (PDF) 的数据。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Rtf">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 丰富文本格式 (RTF) 中的数据。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Soap">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 数据是一个 SOAP 文档。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Application.Zip">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Application" /> 压缩数据。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Gif">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Image" /> 数据是在图形交换格式 (GIF)。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Jpeg">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Image" /> 数据是联合图像专家组 (JPEG) 格式。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Image.Tiff">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Image" /> 标记图像文件格式 (TIFF) 中的数据。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Html">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 以 HTML 格式的数据。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Plain">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 数据是以纯文本格式。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.RichText">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 丰富文本格式 (RTF) 中的数据。</summary>
    </member>
    <member name="F:System.Net.Mime.MediaTypeNames.Text.Xml">
      <summary>指定 <see cref="T:System.Net.Mime.MediaTypeNames.Text" /> 数据采用 XML 格式。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PhysicalAddress.None">
      <summary>返回一个新 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 具有零长度地址实例。 此字段为只读。</summary>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultNonPersistentConnectionLimit">
      <summary>在连接到 HTTP/1.0 或更高版本服务器的 <see cref="T:System.Net.ServicePoint" /> 对象上允许存在的非持久性连接的默认数目 (4)。 此字段为常量，但在 .NET Framework 2.0 中不再使用。</summary>
    </member>
    <member name="F:System.Net.ServicePointManager.DefaultPersistentConnectionLimit">
      <summary>在连接到 HTTP/1.1 或更高版本服务器的 <see cref="T:System.Net.ServicePoint" /> 对象上允许存在的持久性连接的默认数目 (2)。 如果未以直接方式或通过配置设置 <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> 属性的值，则此字段为常量，用于初始化 <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> 属性。</summary>
    </member>
    <member name="F:System.Net.SocketPermission.AllPorts">
      <summary>定义一个常量，它表示所有端口。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.DownloadFile">
      <summary>表示用于从指定位置检索文件的文件时，变协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.File.UploadFile">
      <summary>表示用于将文件复制到指定位置的文件将放协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.AppendFile">
      <summary>表示用于将文件附加到 FTP 服务器上的现有文件的 FTP APPE 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DeleteFile">
      <summary>表示用于删除 FTP 服务器上的文件的 FTP DELE 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.DownloadFile">
      <summary>表示用于从 FTP 服务器下载文件的 FTP RETR 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetDateTimestamp">
      <summary>表示要用于从 FTP 服务器上的文件检索日期时间戳的 FTP MDTM 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.GetFileSize">
      <summary>表示用于检索 FTP 服务器上的文件的大小的 FTP SIZE 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectory">
      <summary>代表获取 FTP 服务器上的文件的简短列表的 FTP NLIST 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails">
      <summary>代表获取 FTP 服务器上的文件的详细的列表的 FTP LIST 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.MakeDirectory">
      <summary>表示 FTP MKD 协议方法在 FTP 服务器上创建一个目录。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.PrintWorkingDirectory">
      <summary>代表打印当前工作目录的名称的 FTP PWD 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.RemoveDirectory">
      <summary>代表删除目录的 FTP RMD 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.Rename">
      <summary>表示重命名一个目录的 FTP RENAME 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFile">
      <summary>表示将文件上载到 FTP 服务器的 FTP STOR 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Ftp.UploadFileWithUniqueName">
      <summary>表示将具有唯一名称的文件上载到 FTP 服务器的 FTP STOU 协议。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Connect">
      <summary>表示与一个代理，它可以动态切换到隧道，如下所示的 SSL 隧道的情况下使用的 HTTP 连接协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Get">
      <summary>代表 HTTP GET 协议方法 ў。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Head">
      <summary>表示 HTTP H e a d 协议方法。 HEAD 方法等同于 GET 只是服务器仅在响应中，但不包括消息正文中返回消息头。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.MkCol">
      <summary>表示在由请求统一资源标识符 (URI) 指定的位置创建一个新集合 （如页的集合） 的 HTTP MKCOL 请求。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Post">
      <summary>表示用于将新实体添加作为发布到的 URI 的 HTTP POST 协议方法。</summary>
    </member>
    <member name="F:System.Net.WebRequestMethods.Http.Put">
      <summary>表示用来替换实体由 URI 标识的 HTTP PUT 协议方法。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>指定感兴趣的特定剪贴板格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>指定的一种 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举常量，该值指示应在呈现中包含的多少细节。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>指定的方面的一部分时必须跨页边界拆分数据。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>指定一个指向 DVTARGETDEVICE 结构，它包含有关所构成的数据的目标设备的信息。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>指定的一种 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举常量，指示用于传输对象的数据的存储介质的类型。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 枚举值，该值确定何时通知接收器通知的数据中的更改。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 将接收更改通知的接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>表示唯一地标识通知连接的令牌。 通过设置通知连接的方法将返回此标记。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>表示 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 指向通知接收器的感兴趣的数据的结构。 通知接收器将接收此指定的数据发生更改的通知 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>表示指向允许发送进程来控制当接收进程调用释放存储的方法以界面实例的指针 ReleaseStgMedium 函数。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 是 null, ，ReleaseStgMedium ，则使用默认过程来释放存储; 否则为 ReleaseStgMedium 使用指定 IUnknown 接口。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>指定的存储介质的类型。 封送处理和取消封送例程使用此值来确定使用的联合成员。 此值必须是元素之一 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 枚举。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>表示句柄、 字符串或接收进程可用于访问正在传输的数据的接口指针。</summary>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Any">
      <summary>指定要用于表示任何通配符字符的字符。</summary>
    </member>
    <member name="F:System.Security.Permissions.ResourcePermissionBase.Local">
      <summary>指定要用于表示本地引用的字符。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capnames">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.caps">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capsize">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.capslist">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.factory">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout">
      <summary>指定模式匹配操作不应超时。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.internalMatchTimeout">
      <summary>操作超时之前在一个模式匹配操作中可以经过的最长时间。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.pattern">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.Regex.roptions">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawl">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runcrawlpos">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runmatch">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runregex">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstack">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runstackpos">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtext">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextbeg">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextend">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextpos">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtextstart">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrack">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackcount">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexRunner.runtrackpos">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="F:System.Uri.SchemeDelimiter">
      <summary>指定将通讯协议方案同 URI 的地址部分分开的字符。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFile">
      <summary>指定 URI 是指向文件的指针。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeFtp">
      <summary>指定通过文件传输协议 (FTP) 访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeGopher">
      <summary>指定通过 Gopher 协议访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttp">
      <summary>指定通过超文本传输协议 (HTTP) 访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeHttps">
      <summary>指定通过安全超文本传输协议 (HTTPS) 访问 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeMailto">
      <summary>指定 URI 是一个电子邮件地址，需通过简单邮件传输协议 (SMTP) 访问。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetPipe">
      <summary>指明通过 Windows Communication Foundation (WCF) 使用的 NetPipe 方案访问该 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNetTcp">
      <summary>指明通过 Windows Communication Foundation (WCF) 使用的 NetTcp 方案访问该 URI。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNews">
      <summary>指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。 此字段为只读。</summary>
    </member>
    <member name="F:System.Uri.UriSchemeNntp">
      <summary>指定 URI 是 Internet 新闻组，而且可以通过 Network 新闻传输协议 (NNTP) 进行访问。 此字段为只读。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的提供程序选项初始化 <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> 类的新实例。</summary>
      <param name="providerOptions">包含配置文件中的提供程序选项的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary>获取 C# 代码编译器的实例。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 实现的实例。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary>获取 C# 代码生成器的实例。</summary>
      <returns>C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 实现的实例。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。</summary>
      <param name="member">要为其生成代码的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">生成代码时要使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary>获取指定对象类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">要为其检索类型转换器的对象类型。</param>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary>初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>使用指定的提供程序选项初始化 <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> 类的新实例。</summary>
      <param name="providerOptions">包含配置文件中的提供程序选项的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions" /> 为 null。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary>获取 Visual Basic 代码编译器的实例。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 实现的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary>获取 Visual Basic 代码生成器的实例。</summary>
      <returns>Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 实现的实例。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。</summary>
      <param name="member">要为其生成代码的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer">要向其中进行写入的 <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options">生成代码时要使用的 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary>获取指定对象类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</summary>
      <param name="type">要为其检索类型转换器的对象类型。</param>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:Microsoft.Win32.IntranetZoneCredentialPolicy.#ctor">
      <summary>初始化 <see cref="T:Microsoft.Win32.IntranetZoneCredentialPolicy" /> 类的新实例。</summary>
    </member>
    <member name="M:Microsoft.Win32.IntranetZoneCredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)">
      <summary>返回 <see cref="T:System.Boolean" /> 用于指示客户端的凭据使用请求的资源的使用进行发送 <see cref="T:System.Net.WebRequest" />。</summary>
      <param name="challengeUri">
        <see cref="T:System.Uri" /> 中将接收该请求。</param>
      <param name="request">
        <see cref="T:System.Net.WebRequest" /> ，表示所请求的资源。</param>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 如果此方法返回时将随请求发送的 true。</param>
      <param name="authModule">
        <see cref="T:System.Net.IAuthenticationModule" /> 将执行身份验证时，如果需要身份验证。</param>
      <returns>true 如果请求的资源是与客户端发出请求; 位于同一域中否则为 false。</returns>
    </member>
    <member name="M:Microsoft.Win32.PowerModeChangedEventArgs.#ctor(Microsoft.Win32.PowerModes)">
      <summary>新实例初始化 <see cref="T:Microsoft.Win32.PowerModeChangedEventArgs" /> 类使用指定的电源模式的事件类型。</summary>
      <param name="mode">其中一个 <see cref="T:Microsoft.Win32.PowerModes" /> 表示电源模式事件的类型的值。</param>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeProcessHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>从指定句柄初始化 <see cref="T:Microsoft.Win32.SafeHandles.SafeProcessHandle" /> 类的新实例，这指示在完成阶段是否释放句柄。</summary>
      <param name="existingHandle">要包装的句柄。</param>
      <param name="ownsHandle">若要可靠地允许 <see cref="T:Microsoft.Win32.SafeHandles.SafeProcessHandle" /> 在完成阶段释放句柄,则为 true；否则为 false。</param>
    </member>
    <member name="M:Microsoft.Win32.SessionEndedEventArgs.#ctor(Microsoft.Win32.SessionEndReasons)">
      <summary>初始化 <see cref="T:Microsoft.Win32.SessionEndedEventArgs" /> 类的新实例。</summary>
      <param name="reason">其中一个 <see cref="T:Microsoft.Win32.SessionEndReasons" /> 值，该值指示会话结束方式。</param>
    </member>
    <member name="M:Microsoft.Win32.SessionEndingEventArgs.#ctor(Microsoft.Win32.SessionEndReasons)">
      <summary>新实例初始化 <see cref="T:Microsoft.Win32.SessionEndingEventArgs" /> 类使用指定的值，该值指示正在进行的会话关闭事件的类型。</summary>
      <param name="reason">其中一个 <see cref="T:Microsoft.Win32.SessionEndReasons" /> ，它指定如何在会话结束。</param>
    </member>
    <member name="M:Microsoft.Win32.SessionSwitchEventArgs.#ctor(Microsoft.Win32.SessionSwitchReason)">
      <summary>新实例初始化 <see cref="T:Microsoft.Win32.SessionSwitchEventArgs" /> 类使用指定的会话更改事件类型标识符。</summary>
      <param name="reason">一个 <see cref="T:Microsoft.Win32.SessionSwitchReason" /> ，该值指示会话更改事件的类型。</param>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)">
      <summary>创建一个新的窗口计时器，与系统事件窗口相关联。</summary>
      <param name="interval">指定的时间间隔计时器通知，以毫秒为单位。</param>
      <returns>新的计时器的 ID。</returns>
      <exception cref="T:System.ArgumentException">时间间隔小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功，或创建计时器的尝试未成功。</exception>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)">
      <summary>调用指定的委托使用侦听系统事件的线程。</summary>
      <param name="method">要使用侦听系统事件的线程调用的委托。</param>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功。</exception>
    </member>
    <member name="M:Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)">
      <summary>终止指定由给定 id 的计时器。</summary>
      <param name="timerId">要终止的计时器的 ID。</param>
      <exception cref="T:System.InvalidOperationException">系统事件通知不支持在当前上下文中。 例如，服务器进程，可能不支持全局系统事件通知。</exception>
      <exception cref="T:System.Runtime.InteropServices.ExternalException">尝试创建系统事件窗口线程未成功，或尝试终止计时器未成功。</exception>
    </member>
    <member name="M:Microsoft.Win32.TimerElapsedEventArgs.#ctor(System.IntPtr)">
      <summary>初始化 <see cref="T:Microsoft.Win32.TimerElapsedEventArgs" /> 类的新实例。</summary>
      <param name="timerId">计时器 ID 号。</param>
    </member>
    <member name="M:Microsoft.Win32.UserPreferenceChangedEventArgs.#ctor(Microsoft.Win32.UserPreferenceCategory)">
      <summary>新实例初始化 <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" /> 类使用指定的用户首选项类别标识符。</summary>
      <param name="category">其中一个 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 值，该值指示已更改的用户首选项类别。</param>
    </member>
    <member name="M:Microsoft.Win32.UserPreferenceChangingEventArgs.#ctor(Microsoft.Win32.UserPreferenceCategory)">
      <summary>新实例初始化 <see cref="T:Microsoft.Win32.UserPreferenceChangingEventArgs" /> 类使用指定的用户首选项类别标识符。</summary>
      <param name="category">其中一个 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 值，用于指示正在更改的用户首选项类别。</param>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> 类使用指定的参数名称。</summary>
      <param name="parameterName">要引用的参数的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用指定的数组的数据类型和代码表达式，该值指示该数组的索引的数目。</summary>
      <param name="createType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要创建的数组的数据类型。</param>
      <param name="size">指示要创建的数组的索引数的表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用指定的数组的数据类型和初始化表达式。</summary>
      <param name="createType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要创建的数组的数据类型。</param>
      <param name="initializers">一个表达式，以使用用于初始化该数组的数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用的索引数以及指定的数组的数据类型的数组。</summary>
      <param name="createType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要创建的数组的数据类型。</param>
      <param name="size">要创建的数组的索引的数目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用指定的数组的数据类型名称和代码表达式，该值指示该数组的索引的数目。</summary>
      <param name="createType">要创建的数组的数据类型的名称。</param>
      <param name="size">指示要创建的数组的索引数的表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用指定的数组的数据类型名称和初始值设定项。</summary>
      <param name="createType">要创建的数组的数据类型的名称。</param>
      <param name="initializers">一个表达式，以使用用于初始化该数组的数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类阵列使用指定的数组的数据类型名称和索引的数目。</summary>
      <param name="createType">要创建的数组的数据类型的名称。</param>
      <param name="size">要创建的数组的索引的数目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用指定的数组的数据类型和代码表达式，该值指示该数组的索引的数目。</summary>
      <param name="createType">要创建的数组数据类型。</param>
      <param name="size">指示要创建的数组的索引数的表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用指定的数组的数据类型和初始值设定项。</summary>
      <param name="createType">要创建的数组数据类型。</param>
      <param name="initializers">一个表达式，以使用用于初始化该数组的数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> 类使用的索引数以及指定的数组的数据类型的数组。</summary>
      <param name="createType">要创建的数组数据类型。</param>
      <param name="size">要创建的数组的索引的数目。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> 类使用指定的目标对象和索引。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示该数组的索引器目标。</param>
      <param name="indices">或多个索引来引用。</param>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAssignStatement" /> 类使用指定的表达式。</summary>
      <param name="left">要将分配给的变量。</param>
      <param name="right">要分配的值。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类使用指定的事件和委托。</summary>
      <param name="eventRef">一个 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> ，该值指示要对其附加到一个事件处理程序。</param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示新的事件处理程序。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> 类使用指定的对象包含事件、 事件名称和事件处理程序委托。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含该事件的对象。</param>
      <param name="eventName">要对其附加到一个事件处理程序的名称。</param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示新的事件处理程序。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的值初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeExpression" /> 表示参数的值。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 类使用指定的名称和值。</summary>
      <param name="name">参数适用于将 attribute 属性的名称。</param>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeExpression" /> 表示参数的值。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象都 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeAttributeArgument" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary>将另一个的内容复制 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 要在集合中定位对象。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象在集合中，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 要在集合中定位对象。</param>
      <returns>索引指定的对象，如果找到，集合中的否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类使用指定的代码类型引用。</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 标识属性。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类使用指定的代码类型引用和参数。</summary>
      <param name="attributeType">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 标识属性。</param>
      <param name="arguments">类型的数组 <see cref="T:System.CodeDom.CodeAttributeArgument" /> ，其中包含该属性的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类的新实例。</summary>
      <param name="name">属性名。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 类使用指定的名称和参数。</summary>
      <param name="name">属性名。</param>
      <param name="arguments">类型的数组 <see cref="T:System.CodeDom.CodeAttributeArgument" />  ，其中包含该属性的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象都 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary>添加 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 具有指定值对集合对象。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>将另一个的内容复制 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary>获取或设置一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 要查找对象。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象在集合中，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 要在集合中定位对象。</param>
      <returns>指定对象的集合中的索引如果找到，则否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> 类使用指定的参数。</summary>
      <param name="left">
        <see cref="T:System.CodeDom.CodeExpression" /> 运算符的左侧。</param>
      <param name="op">一个 <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> 指示类型的运算符。</param>
      <param name="right">
        <see cref="T:System.CodeDom.CodeExpression" /> 右侧的运算符。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类使用指定的目标类型和表达式。</summary>
      <param name="targetType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示强制转换的目标类型。</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> 要强制转换。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类使用指定的目标类型和表达式。</summary>
      <param name="targetType">强制转换的目标类型的名称。</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> 要强制转换。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCastExpression" /> 类使用指定的目标类型和表达式。</summary>
      <param name="targetType">目标数据类型转换运算。</param>
      <param name="expression">
        <see cref="T:System.CodeDom.CodeExpression" /> 要强制转换。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类使用异常指定的本地变量名称。</summary>
      <param name="localName">该异常的 catch 子句中声明本地变量的名称。 这是可选项。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类使用有关异常和异常类型指定的本地变量名称。</summary>
      <param name="localName">该异常的 catch 子句中声明本地变量的名称。 这是可选项。</param>
      <param name="catchExceptionType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要捕获的异常类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCatchClause" /> 类使用指定的本地变量名称，对于异常，异常类型和语句的集合。</summary>
      <param name="localName">该异常的 catch 子句中声明本地变量的名称。 这是可选项。</param>
      <param name="catchExceptionType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要捕获的异常类型。</param>
      <param name="statements">一个数组 <see cref="T:System.CodeDom.CodeStatement" /> 这些对象表示在 catch 块的内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeCatchClause" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象都 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeCatchClause" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeCatchClause" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary>将另一个的内容复制 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 要在集合中定位对象。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象在集合中，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 要在集合中定位对象。</param>
      <returns>索引指定的对象，如果找到，集合中的否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCatchClause" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeChecksumPragma" /> 类使用的文件名称，表示校验和算法，并表示校验和数据的字节流的 GUID。</summary>
      <param name="fileName">校验和文件的路径。</param>
      <param name="checksumAlgorithmId">一个 <see cref="T:System.Guid" /> ，它标识要使用的校验和算法。</param>
      <param name="checksumData">包含校验和数据的字节数组。</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeComment" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeComment" /> 用指定的文本作为内容的类。</summary>
      <param name="text">注释的内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeComment" /> 类用指定的文本和文档注释标记。</summary>
      <param name="text">注释的内容。</param>
      <param name="docComment">true 当注释位于文档注释。否则为 false。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类使用指定的注释。</summary>
      <param name="comment">一个 <see cref="T:System.CodeDom.CodeComment" /> ，指示注释。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类作为内容使用指定的文本。</summary>
      <param name="text">注释的内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCommentStatement" /> 类用指定的文本和文档注释标记。</summary>
      <param name="text">注释的内容。</param>
      <param name="docComment">true 当注释位于文档注释。否则为 false。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeCommentStatement" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象都 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeCommentStatement" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeCommentStatement" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary>将另一个的内容复制 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 要在集合中搜索。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary>将集合对象复制到指定一维 <see cref="T:System.Array" /> 指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象在集合中，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 要查找对象。</param>
      <returns>索引指定的对象，如果找到，集合中的否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary>将插入 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入项的位置的从零开始索引。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeCompileUnit" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类使用指定的条件和语句。</summary>
      <param name="condition">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要计算的表达式。</param>
      <param name="trueStatements">类型的数组 <see cref="T:System.CodeDom.CodeStatement" /> 其中包含的语句执行如果条件为 true。</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeConditionStatement" /> 类使用指定的条件和语句。</summary>
      <param name="condition">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要计算的条件。</param>
      <param name="trueStatements">类型的数组 <see cref="T:System.CodeDom.CodeStatement" /> 其中包含的语句执行如果条件为 true。</param>
      <param name="falseStatements">类型的数组 <see cref="T:System.CodeDom.CodeStatement" /> 其中包含的语句执行如果条件为 false。</param>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeConstructor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> 类使用指定的代码类型引用。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，它指定对值类型的引用。</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> 类的新实例。</summary>
      <param name="delegateType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该委托的数据类型。</param>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含的事件处理程序方法的对象。</param>
      <param name="methodName">事件处理程序方法的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类使用指定的目标对象。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示目标对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> 类使用指定的目标对象和参数。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示目标对象。</param>
      <param name="parameters">一个数组 <see cref="T:System.CodeDom.CodeExpression" /> 对象，指示的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeDirectionExpression" /> 类使用指定的字段方向和表达式。</summary>
      <param name="direction">一个 <see cref="T:System.CodeDom.FieldDirection" /> ，该值指示该表达式的字段方向。</param>
      <param name="expression">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要表示的代码表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirective" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 与指定数组中的代码指令对象的类。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeDirective" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 类，具有指定的代码指令集合中的元素。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <returns>在该位置插入新元素的索引位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary>添加一个数组 <see cref="T:System.CodeDom.CodeDirective" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeDirective" /> 要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary>将指定的内容添加 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，其中包含 <see cref="T:System.CodeDom.CodeDirective" /> 要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeDirective" /> 要在集合中搜索对象。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary>将集合的内容复制到指定索引处开头的一维数组。</summary>
      <param name="array">类型的数组 <see cref="T:System.CodeDom.CodeDirective" /> 从集合复制的值的目标。</param>
      <param name="index">从此处开始插入的集合对象的数组中的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary>获取指定的集合中的索引 <see cref="T:System.CodeDom.CodeDirective" /> 对象时，如果它存在于集合。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeDirective" /> 要在集合中定位对象。</param>
      <returns>如果使用指定的对象的集合中的索引位置; 如果找到否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeDirective" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象中的从零开始的索引位置。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeDirective" /> 要插入对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.CollectionBase.Count" />。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeDirective" /> 对象。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEntryPointMethod" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> 类使用指定的目标对象和事件名称。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含该事件的对象。</param>
      <param name="eventName">要引用的事件的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeExpression" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象都 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeExpression" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary>将另一个的内容复制 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> 要在集合中定位对象。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeExpression" /> 对象在集合中，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> 要在集合中定位对象。</param>
      <returns>索引指定的对象，如果找到，集合中的否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeExpression" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeExpression" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeExpressionStatement" /> 类通过使用指定的表达式。</summary>
      <param name="expression">一个 <see cref="T:System.CodeDom.CodeExpression" /> 语句。</param>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> 类使用指定的目标对象和字段名称。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含字段的对象。</param>
      <param name="fieldName">字段的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeGotoStatement" /> 类使用指定的标签名称。</summary>
      <param name="label">处继续执行程序的标签的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="Label" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeIndexerExpression" /> 类使用指定的目标对象和索引。</summary>
      <param name="targetObject">目标对象。</param>
      <param name="indices">或多个索引的索引器表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeIterationStatement" /> 类使用指定的参数。</summary>
      <param name="initStatement">一个 <see cref="T:System.CodeDom.CodeStatement" /> 包含循环的初始化语句。</param>
      <param name="testExpression">一个 <see cref="T:System.CodeDom.CodeExpression" /> 包含要测试退出条件的表达式。</param>
      <param name="incrementStatement">一个 <see cref="T:System.CodeDom.CodeStatement" /> 包含每个循环递增的语句。</param>
      <param name="statements">类型的数组 <see cref="T:System.CodeDom.CodeStatement" /> 其中包含在循环内的语句。</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类使用指定的标签名称。</summary>
      <param name="label">标签的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeLabeledStatement" /> 类使用指定的标签的名称和语句。</summary>
      <param name="label">标签的名称。</param>
      <param name="statement">
        <see cref="T:System.CodeDom.CodeStatement" /> 要标签相关联。</param>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeLinePragma" /> 类的新实例。</summary>
      <param name="fileName">关联的文件的文件名。</param>
      <param name="lineNumber">要存储对引用的行号。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberEvent" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类使用指定的字段类型和字段名称。</summary>
      <param name="type">一个对象，指示该字段的类型。</param>
      <param name="name">字段的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类使用指定的字段类型和字段名称。</summary>
      <param name="type">字段的类型。</param>
      <param name="name">字段的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeMemberField" /> 类使用指定的字段类型和字段名称。</summary>
      <param name="type">字段的类型。</param>
      <param name="name">字段的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberMethod" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMemberProperty" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类使用指定的目标对象、 方法名称和参数。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> 指示要调用的方法与目标对象。</param>
      <param name="methodName">要调用的方法的名称。</param>
      <param name="parameters">一个数组 <see cref="T:System.CodeDom.CodeExpression" /> 对象，以指示要调用该方法的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> 类使用指定的方法和参数。</summary>
      <param name="method">一个 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> ，该值指示要调用的方法。</param>
      <param name="parameters">一个数组 <see cref="T:System.CodeDom.CodeExpression" /> 对象，以指示用来调用该方法的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类使用指定的目标对象和方法名称。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示目标的对象。</param>
      <param name="methodName">要调用的方法的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 类使用指定的目标对象、 方法名称和泛型类型参数。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示目标的对象。</param>
      <param name="methodName">要调用的方法的名称。</param>
      <param name="typeParameters">一个数组 <see cref="T:System.CodeDom.CodeTypeReference" /> 值用来指定 <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> 此 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>使用指定的表达式初始化 <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> 类的新实例。</summary>
      <param name="expression">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示返回的值。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary>使用指定的名称初始化 <see cref="T:System.CodeDom.CodeNamespace" /> 类的新实例。</summary>
      <param name="name">所声明的命名空间的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类，其中包含指定的数组 <see cref="T:System.CodeDom.CodeNamespace" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeNamespace" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象都 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 类，其中包含指定的源集合中的元素。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeNamespace" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeNamespace" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary>将指定的内容添加 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeNamespace" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeNamespace" /> 要在集合中搜索。</param>
      <returns>true 如果 <see cref="T:System.CodeDom.CodeNamespace" /> 包含在集合; 否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例，指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeNamespace" /> 对象在 <see cref="T:System.CodeDom.CodeNamespaceCollection" />, ，如果它在集合中存在。</summary>
      <param name="value">要查找的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns>指定的索引 <see cref="T:System.CodeDom.CodeNamespace" />, ，如果它是，在集合中找到; 否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeNamespace" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入新项的位置的从零开始索引。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeNamespace" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 类使用指定的命名空间导入。</summary>
      <param name="nameSpace">要导入的命名空间名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary>将 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象添加到集合中。</summary>
      <param name="value">要添加到集合的 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary>将一组添加 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 到集合的对象。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeNamespaceImport" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary>清除集合中的成员。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary>获取枚举集合成员的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> ，该值指示集合成员。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.ICollection" /> 所复制的元素的目标数组。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary>将对象添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除所有项。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>true 如果在列表中; 值为否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定 <see cref="T:System.Collections.IList" /> 中特定项的索引。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.IList" />。</param>
      <returns>索引 <paramref name="value" /> 是否在列表中找到; 否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将在某个项插入 <see cref="T:System.Collections.IList" /> 中指定的位置。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Object" /> 要插入到 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IList" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.IList" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类使用指定的类型和参数。</summary>
      <param name="createType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要创建的对象的数据类型。</param>
      <param name="parameters">一个数组 <see cref="T:System.CodeDom.CodeExpression" /> 对象，该值指示要用于创建对象的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类使用指定的类型和参数。</summary>
      <param name="createType">要创建的对象的数据类型的名称。</param>
      <param name="parameters">一个数组 <see cref="T:System.CodeDom.CodeExpression" /> 对象，该值指示要用于创建对象的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> 类使用指定的类型和参数。</summary>
      <param name="createType">要创建的对象数据类型。</param>
      <param name="parameters">一个数组 <see cref="T:System.CodeDom.CodeExpression" /> 对象，该值指示要用于创建对象的参数。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类使用指定的参数类型和名称。</summary>
      <param name="type">一个对象，指示要声明的参数的类型。</param>
      <param name="name">要声明的参数的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类使用指定的参数类型和名称。</summary>
      <param name="type">要声明的参数的类型。</param>
      <param name="name">要声明的参数的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 类使用指定的参数类型和名称。</summary>
      <param name="type">要声明的参数的类型。</param>
      <param name="name">要声明的参数的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">数组中的一个或多个对象都 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 用来初始化集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>将另一个的内容添加 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 要在集合中搜索。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>获取指定的集合中的索引 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />, ，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 要在集合中查找。</param>
      <returns>指定对象的集合中的索引如果找到，则否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodePrimitiveExpression" /> 类使用指定的对象。</summary>
      <param name="value">要表示的对象。</param>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> 类使用指定的目标对象和属性名称。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含要引用的属性的对象。</param>
      <param name="propertyName">要引用的属性的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeRegionDirective" /> 类，同时指定它的模式和名称。</summary>
      <param name="regionMode">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 值之一。</param>
      <param name="regionText">区域名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类，具有指定的事件和事件处理程序。</summary>
      <param name="eventRef">一个 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> ，该值指示要分离从事件处理程序的事件。</param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要删除的事件处理程序。</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> 类使用指定的目标对象、 事件名称和事件处理程序。</summary>
      <param name="targetObject">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含该事件的对象。</param>
      <param name="eventName">事件的名称。</param>
      <param name="listener">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要删除的事件处理程序。</param>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> 类的新实例。</summary>
      <param name="value">要表示的原义代码片段。</param>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeSnippetExpression" /> 类使用指定的文字表达式。</summary>
      <param name="value">要表示的文字表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeSnippetStatement" /> 类使用指定的代码片段。</summary>
      <param name="value">要表示的语句文本的代码片段。</param>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> 类使用指定的文本。</summary>
      <param name="text">类型成员的代码片段。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类，其中包含指定的数组 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeStatement" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeStatementCollection" /> 类，其中包含指定的源集合中的元素。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeExpression" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeExpression" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary>将一组添加 <see cref="T:System.CodeDom.CodeStatement" /> 到集合的对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeStatement" /> 要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary>将另一个的内容添加 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 对象，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatement" /> 要在集合中搜索对象。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.CodeDom.CodeStatementCollection" /> 到一维对象 <see cref="T:System.Array" /> 实例，指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeStatementCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeStatement" /> 对象在 <see cref="T:System.CodeDom.CodeStatementCollection" />, ，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatement" /> 要在集合中查找。</param>
      <returns>如果找到，集合中的指定对象的索引否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeStatement" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeStatement" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeStatement" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> 与指定的异常类型实例的类。</summary>
      <param name="toThrow">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要引发的异常。</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类尝试使用指定的语句和 catch 子句。</summary>
      <param name="tryStatements">一个数组 <see cref="T:System.CodeDom.CodeStatement" /> 对象，以指示要尝试的语句。</param>
      <param name="catchClauses">一个数组 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象，以指示要捕获的子句。</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> 类尝试使用指定的语句中，捕获子句，并且最后语句。</summary>
      <param name="tryStatements">一个数组 <see cref="T:System.CodeDom.CodeStatement" /> 对象，以指示要尝试的语句。</param>
      <param name="catchClauses">一个数组 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象，以指示要捕获的子句。</param>
      <param name="finallyStatements">一个数组 <see cref="T:System.CodeDom.CodeStatement" /> 对象，以指示 finally 语句的使用。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeConstructor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary>用指定的名称初始化 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 类的新实例。</summary>
      <param name="name">新的类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类，其中包含指定的数组 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 用来初始化集合的对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 类，其中包含指定的源集合中的元素。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 用来初始化集合的对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary>将指定数组的元素复制到该集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary>将另一个的内容添加 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象传递给集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 对象，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 要在集合中搜索对象。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 到一维对象 <see cref="T:System.Array" /> 实例，指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象在 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />, ，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 要在集合中查找。</param>
      <returns>如果找到，集合中的指定对象的索引否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeDelegate" /> 类的新实例。</summary>
      <param name="name">该委托的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMember" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeTypeMember" /> 用来初始化集合的对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary>添加 <see cref="T:System.CodeDom.CodeTypeMember" /> 用到的集合指定的值。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeTypeMember" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeTypeMember" /> 包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary>将另一个的内容添加 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeTypeMember" />。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 要在集合中搜索。</param>
      <returns>true 如果集合包含指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary>将集合对象复制到一维 <see cref="T:System.Array" /> 实例，指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">目标数组是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary>获取指定的集合中的索引 <see cref="T:System.CodeDom.CodeTypeMember" />, ，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeMember" /> 要在集合中查找。</param>
      <returns>指定对象的集合中的索引如果找到，则否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeTypeMember" /> 插入集合中的指定索引处。</summary>
      <param name="index">应插入指定的对象的位置的从零开始索引。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary>中移除特定 <see cref="T:System.CodeDom.CodeTypeMember" /> 集合中。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示的数据类型 typeof 表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">数据类型的名称 typeof 表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeOfExpression" /> 类的新实例。</summary>
      <param name="type">数据类型的数据类型 typeof 表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeParameter" /> 初始化具有指定的类型参数名称。</summary>
      <param name="name">类型参数的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary>初始化新的空实例 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 类。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeTypeParameter" /> 用来初始化集合的对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
      <returns>从零开始的索引，在该位置插入新元素。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary>添加指定 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象传递给使用指定的数据类型名称的集合。</summary>
      <param name="value">若要添加的数据类型的名称 <see cref="T:System.CodeDom.CodeTypeParameter" /> 到集合的对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeTypeParameter" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeTypeParameter" /> 包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 包含 <see cref="T:System.CodeDom.CodeTypeParameter" /> 要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary>确定集合是否包含指定 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 要在集合中搜索对象。</param>
      <returns>true 如果 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象是包含在集合; 否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary>一维到指定集合中的项复制 <see cref="T:System.Array" /> 中指定索引处。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于目标数组的索引最小。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary>获取指定的集合中的索引 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象时，如果它存在于集合。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 要在集合中定位对象。</param>
      <returns>指定的从零开始的索引 <see cref="T:System.CodeDom.CodeTypeParameter" /> 集合中的对象，如果找到; 否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary>将指定 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象插入集合中的指定索引处。</summary>
      <param name="index">从零开始的索引，项将插入到此处。</param>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 要插入对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</summary>
      <param name="value">要从集合中移除的 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类使用指定的代码类型参数。</summary>
      <param name="typeParameter">一个 <see cref="T:System.CodeDom.CodeTypeParameter" /> 表示类型形参的类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类使用指定的数组类型和秩。</summary>
      <param name="arrayType">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示数组的类型。</param>
      <param name="rank">数组中的维度数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类使用指定的类型名称。</summary>
      <param name="typeName">要引用的类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类使用指定的类型名称和类型参数。</summary>
      <param name="typeName">要引用的类型的名称。</param>
      <param name="typeArguments">一个数组 <see cref="T:System.CodeDom.CodeTypeReference" /> 值。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类使用指定的类型名称和代码类型引用选项。</summary>
      <param name="typeName">要引用的类型的名称。</param>
      <param name="codeTypeReferenceOption">代码类型引用选项，其中一个 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类使用指定的数组类型名称和级别。</summary>
      <param name="baseType">该数组的元素的类型的名称。</param>
      <param name="rank">数组维度数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类的新实例。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 为引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type " />是 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReference" /> 类使用指定的类型和代码类型引用。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 为引用。</param>
      <param name="codeTypeReferenceOption">代码类型引用选项，其中一个 <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 包含指定的数组类 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.CodeTypeReference" /> 用来初始化集合的对象。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 包含指定的源集合元素的类。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 用来初始化集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary>将指定的 <see cref="T:System.CodeDom.CodeTypeReference" /> 添加到集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary>添加 <see cref="T:System.CodeDom.CodeTypeReference" /> 到使用指定的数据类型名称的集合。</summary>
      <param name="value">若要添加的数据类型的名称 <see cref="T:System.CodeDom.CodeTypeReference" /> 到集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary>添加 <see cref="T:System.CodeDom.CodeTypeReference" /> 到使用指定的数据类型的集合。</summary>
      <param name="value">数据类型为其添加 <see cref="T:System.CodeDom.CodeTypeReference" /> 到集合。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary>将指定的元素复制 <see cref="T:System.CodeDom.CodeTypeReference" /> 数组转换为集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.CodeTypeReference" /> 包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary>将指定的内容添加 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 到集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 要在集合中搜索。</param>
      <returns>true 如果 <see cref="T:System.CodeDom.CodeTypeReference" /> 包含在集合; 否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary>一维到指定集合中的项复制 <see cref="T:System.Array" /> 中指定索引处。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">插入的开始处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数多维。- 或 - 中的元素数 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 大于指定的目标数组的索引之间的可用空间 <paramref name="index" /> 参数和目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于目标数组的最小索引。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary>获取指定的集合中的索引 <see cref="T:System.CodeDom.CodeTypeReference" />, ，如果它在集合中存在。</summary>
      <param name="value">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 要在集合中查找。</param>
      <returns>指定的索引 <see cref="T:System.CodeDom.CodeTypeReference" /> 中的集合，如果找到; 否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary>将插入 <see cref="T:System.CodeDom.CodeTypeReference" /> 插入集合中的指定索引处。</summary>
      <param name="index">应插入项的位置的从零开始索引。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary>从集合中移除指定的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary>使用指定的类型初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要引用的数据类型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类使用指定的数据类型名称。</summary>
      <param name="type">要引用的数据类型的名称。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> 类使用指定的数据类型。</summary>
      <param name="type">要引用的数据类型的实例。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类使用指定的类型和名称。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该变量的数据类型。</param>
      <param name="name">变量名。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类使用指定的数据类型、 变量名称和初始化表达式。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示变量的类型。</param>
      <param name="name">变量名。</param>
      <param name="initExpression">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示该变量的初始化表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类使用指定的数据类型名称和变量名称。</summary>
      <param name="type">该变量的数据类型的名称。</param>
      <param name="name">变量名。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类使用指定的数据类型、 变量名称和初始化表达式。</summary>
      <param name="type">该变量的数据类型的名称。</param>
      <param name="name">变量名。</param>
      <param name="initExpression">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示该变量的初始化表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类使用指定的数据类型和变量名。</summary>
      <param name="type">数据类型的变量。</param>
      <param name="name">变量名。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> 类使用指定的数据类型、 变量名称和初始化表达式。</summary>
      <param name="type">变量的数据类型。</param>
      <param name="name">变量名。</param>
      <param name="initExpression">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示该变量的初始化表达式。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> 类使用指定的本地变量名称。</summary>
      <param name="variableName">要引用的本地变量的名称。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary>获取要传递给编译器从指定的命令参数 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> ，该值指示编译器选项。</param>
      <returns>命令参数。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>编译指定的编译单元使用指定的选项，并将结果返回的编译。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象，它指示要编译的源。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>编译指定的编译单元使用指定的选项，并将结果返回的编译。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="ea">一个数组 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象，该值指示要编译的源。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。- 或 -<paramref name="ea" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>编译指定的文件使用指定的选项，并将结果返回的编译。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="fileName">要编译的文件名称。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。- 或 -<paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>编译指定的文件使用指定的选项，并将结果返回的编译。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="fileNames">指示要编译的文件的文件名的字符串数组。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。- 或 -<paramref name="fileNames" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>编译指定的源代码字符串使用指定的选项，并将结果返回的编译。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="source">要编译的源字符串。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>编译使用指定的选项，指定的源代码字符串并返回编译结果。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="sources">包含要编译的源代码的字符串数组。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。- 或 -<paramref name="sources" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>获取要生成的响应文件时调用编译器要使用的命令参数。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="cmdArgs">命令参数字符串。</param>
      <returns>要用于生成了响应文件的命令参数或 null 是否存在任何响应文件参数。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary>加入指定的字符串数组。</summary>
      <param name="sa">要联接的字符串数组。</param>
      <param name="separator">要使用的分隔符。</param>
      <returns>串联的字符串。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary>处理从指定的指定的行 <see cref="T:System.CodeDom.Compiler.CompilerResults" />。</summary>
      <param name="results">一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果。</param>
      <param name="line">要处理的行。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> ，该值指示要编译的源。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="ea">一个数组 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象，该值指示要编译的源。</param>
      <returns>编译的结果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="fileName">要编译的文件名称。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="fileNames">指示要编译的文件名称的字符串数组。</param>
      <returns>编译的结果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="source">一个字符串，指示要编译的源代码。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示编译器选项。</param>
      <param name="sources">指示要编译的源代码的字符串数组。</param>
      <returns>编译的结果。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>编译程序集基于 <see cref="N:System.CodeDom" /> 树中指定的数组包含 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象时，使用指定的编译器设置。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示用于编译的设置。</param>
      <param name="compilationUnits">类型的数组 <see cref="T:System.CodeDom.CodeCompileUnit" /> ，该值指示要编译的代码。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>将使用指定的编译器设置将指定文件中包含的源代码中的程序集编译成。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示用于编译的设置。</param>
      <param name="fileNames">要编译的文件的名称的数组。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>将指定的字符串包含源代码，并使用指定的编译器设置数组中的程序集编译成。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示此编译的编译器设置。</param>
      <param name="sources">若要编译的源代码字符串的数组。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary>当在派生类中重写，创建新的代码编译器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 可用于编译 <see cref="N:System.CodeDom" /> 基于源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary>创建指定的值的转义的标识符。</summary>
      <param name="value">要为其创建转义的标识符字符串。</param>
      <returns>转义的标识符的值。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary>当在派生类中重写时创建新的代码生成器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 可以用于生成 <see cref="N:System.CodeDom" /> 基于源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary>当在派生类中重写时创建新的代码生成器使用指定 <see cref="T:System.IO.TextWriter" /> 输出。</summary>
      <param name="output">一个 <see cref="T:System.IO.TextWriter" /> 使用到输出。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 可以用于生成 <see cref="N:System.CodeDom" /> 基于源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary>当在派生类中重写时创建新的代码生成器使用为输出指定的文件名。</summary>
      <param name="fileName">要输出到的文件名称。</param>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 可以用于生成 <see cref="N:System.CodeDom" /> 基于源代码表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary>当在派生类中重写，创建一个新的代码分析器。</summary>
      <returns>
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 可以用于分析源代码。 基实现始终返回 null。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary>获取 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 指定语言的实例。</summary>
      <param name="language">该语言的名称。</param>
      <returns>一个 CodeDOM 提供程序实现为指定的语言名称。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 不在此计算机上具有配置的提供程序。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>获取 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例指定的语言和提供程序选项。</summary>
      <param name="language">该语言的名称。</param>
      <param name="providerOptions">从配置文件的提供程序选项的集合。</param>
      <returns>为指定的语言名称和选项实现一个 CodeDOM 提供程序。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary>创建指定的值的有效标识符。</summary>
      <param name="value">要为其生成有效的标识符字符串。</param>
      <returns>指定值的有效标识符。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 编译单元生成代码并将其发送到指定的文本编写器，使用指定的选项。</summary>
      <param name="compileUnit">一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> 要为其生成代码。</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 输出代码发送到。</param>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 表达式生成代码并将其发送到指定的文本编写器，使用指定的选项。</summary>
      <param name="expression">一个 <see cref="T:System.CodeDom.CodeExpression" /> 对象，它指示要为其生成代码的表达式。</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 代码发送到哪个输出。</param>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 成员声明生成代码并将其发送到指定的文本编写器，使用指定的选项。</summary>
      <param name="member">一个 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象，它指示要为其生成代码的成员。</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 代码发送到哪个输出。</param>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">在派生类中不重写此方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码并将其发送到指定的文本编写器，使用指定的选项。</summary>
      <param name="codeNamespace">一个 <see cref="T:System.CodeDom.CodeNamespace" /> 对象，它指示要为其生成代码的命名空间。</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 代码发送到哪个输出。</param>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 语句生成代码并将其发送到指定的文本编写器，使用指定的选项。</summary>
      <param name="statement">一个 <see cref="T:System.CodeDom.CodeStatement" /> 包含要为其生成代码的 CodeDOM 元素。</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 代码发送到哪个输出。</param>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码并将其发送到指定的文本编写器，使用指定的选项。</summary>
      <param name="codeType">一个 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象，它指示要为其生成代码的类型。</param>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 代码发送到哪个输出。</param>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary>返回此计算机的提供程序和编译器配置设置的语言。</summary>
      <returns>类型的数组 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 表示所有配置的设置 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary>返回指定的语言的提供程序和编译器配置设置的语言。</summary>
      <param name="language">语言名称。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象的已配置的设置进行填充 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="language" /> 不在此计算机上具有配置的提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="language" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary>获取 <see cref="T:System.ComponentModel.TypeConverter" /> 为指定的数据类型。</summary>
      <param name="type">要为其检索类型转换器的对象类型。</param>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" /> 对于指定的类型，或 null 如果 <see cref="T:System.ComponentModel.TypeConverter" /> 找不到指定的类型。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary>返回具有指定的文件扩展名关联的语言名称，如在配置 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置节。</summary>
      <param name="extension">文件扩展名。</param>
      <returns>在中配置具有文件扩展名关联的语言名称 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 编译器配置设置。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">
        <paramref name="extension" /> 不在此计算机上具有已配置的语言提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="extension" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取指示指定的类型 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要返回的类型。</param>
      <returns>此代码生成器在其中生成代码的语言为格式化的文本表示形式指定的类型。 在 Visual Basic 中，例如，传入 <see cref="T:System.CodeDom.CodeTypeReference" /> 为 <see cref="T:System.Int32" /> 类型将返回"Integer"。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary>测试是否有一个关联文件扩展名为 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 的计算机上配置的实现。</summary>
      <param name="extension">文件扩展名。</param>
      <returns>true 如果 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现是配置为指定的文件扩展名; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary>测试是否一种语言具有 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 的计算机上配置的实现。</summary>
      <param name="language">该语言的名称。</param>
      <returns>true 如果 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现是配置为指定的语言; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="language" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary>返回一个值，该值指示指定的值是否为当前语言有效的标识符。</summary>
      <param name="value">要验证为有效的标识符的值。</param>
      <returns>true 如果 <paramref name="value" /> 参数是有效的标识符; 否则为 false。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary>将从到指定的文本流中读取的代码编译 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="codeStream">一个 <see cref="T:System.IO.TextReader" /> 用于读取待分析代码的对象。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> ，包含表示形式的已分析的代码。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>提供返回值，该值指示是否支持指定的代码生成。</summary>
      <param name="generatorSupport">一个 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象，它指示要验证的代码生成支持的类型。</param>
      <returns>true 如果指定的代码生成支持，提供;否则为 false。</returns>
      <exception cref="T:System.NotImplementedException">此方法都不和 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> 在派生类中重写方法。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary>生成行继续符，并输出新行上指定的字符串。</summary>
      <param name="st">要在新行上编写的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>创建指定的值的转义的标识符。</summary>
      <param name="value">要创建的转义的标识符的字符串。</param>
      <returns>转义的标识符的值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary>创建指定的值的有效标识符。</summary>
      <param name="value">要创建的有效标识符的字符串。</param>
      <returns>值的有效标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary>为指定的参数引用表达式生成代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> ，指示表达式为其生成代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary>为指定的数组创建表达式生成代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> ，指示表达式为其生成代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary>为指定的数组索引器表达式生成代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> ，指示表达式为其生成代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary>为指定的赋值语句生成代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeAssignStatement" /> ，该值指示为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary>为指定的附加事件语句生成的代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeAttachEventStatement" /> ，该值指示为其生成代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的属性块结尾生成代码。</summary>
      <param name="attributes">一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ，该值指示属性块，为其生成代码的末尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的属性块开始生成代码。</summary>
      <param name="attributes">一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ，该值指示属性块，为其生成代码的开头。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary>为指定的基引用表达式生成代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> ，指示表达式为其生成代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary>为指定的二进制运算符表达式生成代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> ，指示表达式为其生成代码。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary>为指定的强制转换表达式生成代码。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeCastExpression" /> ，指示表达式为其生成代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>使用指定的文本编写器和代码生成器选项为指定的类成员生成代码。</summary>
      <param name="member">要生成的代码的类成员。</param>
      <param name="writer">若要代码输出到文本编写器。</param>
      <param name="options">要使用生成代码时的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> 属性不是 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary>为指定的注释生成代码。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary>为指定的注释语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> 属性 <paramref name="e " />未设置。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary>为指定的注释语句生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>为指定的编译单元生成代码。</summary>
      <param name="e">要生成的代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary>为编译单元的结尾生成代码。</summary>
      <param name="e">要生成的代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary>为生成代码的编译单元开始。</summary>
      <param name="e">要生成的代码的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary>为指定的条件语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的构造函数生成代码。</summary>
      <param name="e">构造函数来生成的代码。</param>
      <param name="c">此构造函数将构造的对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary>为指定的十进制值生成代码。</summary>
      <param name="d">要生成的代码的十进制值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary>为指定为默认值的引用生成代码。</summary>
      <param name="e">要生成的代码的引用。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary>为指定的委托创建表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary>为指定的委托调用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary>为指定的方向表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary>为指定的代码指令生成代码。</summary>
      <param name="directives">要生成的代码的代码指令。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary>为双精度浮点数生成代码。</summary>
      <param name="d">要生成的代码的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的入口点方法生成代码。</summary>
      <param name="e">该代码入口点。</param>
      <param name="c">声明的类型代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的事件生成代码。</summary>
      <param name="e">要生成的代码的成员事件。</param>
      <param name="c">发生此事件的对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary>为指定的事件引用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary>为指定的代码表达式生成代码。</summary>
      <param name="e">要生成的代码的代码表达式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary>为指定的表达式语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary>为指定的成员字段生成代码。</summary>
      <param name="e">要生成的代码的字段。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary>为指定的字段引用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary>为指定生成代码 goto 语句。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary>为指定的索引器表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary>为指定的迭代语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary>为指定的标记语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary>为指定的行杂注结尾生成代码。</summary>
      <param name="e">为其生成代码的行杂注的结尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary>为指定的行杂注开始生成代码。</summary>
      <param name="e">为其生成代码的行杂注的起点。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的方法生成代码。</summary>
      <param name="e">要生成的代码的成员方法。</param>
      <param name="c">发生此方法的对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary>为指定的方法调用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary>为指定的方法引用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary>为指定的方法的返回语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间生成代码。</summary>
      <param name="e">要生成的代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary>为命名空间结尾生成代码。</summary>
      <param name="e">要生成的代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary>为指定的命名空间导入生成代码。</summary>
      <param name="e">生成代码的命名空间导入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间导入生成代码。</summary>
      <param name="e">生成代码的命名空间导入。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary>在指定的编译单元中生成代码的命名空间。</summary>
      <param name="e">要生成的命名空间的编译单元。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary>生成代码开头的命名空间。</summary>
      <param name="e">要生成的代码的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary>为指定的对象创建表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary>为指定的参数声明表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary>为指定的基元表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 使用无效的数据类型。 只能使用以下数据类型是有效的 ︰stringcharbyteInt16Int32Int64SingleDoubleDecimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的属性生成代码。</summary>
      <param name="e">要生成的代码的属性。</param>
      <param name="c">此属性出现在该对象的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary>为指定的属性引用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary>为指定的属性设置值引用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary>为指定的移除 event 语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary>为单精度浮点数生成代码。</summary>
      <param name="s">要生成的代码的值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary>输出的指定文本的代码片段编译单元的代码。</summary>
      <param name="e">原义代码片段将编译单元来生成的代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary>输出的指定文本的代码片段表达式的代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary>输出的指定文本的代码片段类成员的代码。</summary>
      <param name="e">要生成的代码的成员。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary>输出的指定文本的代码片段语句的代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary>为指定的语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="e" /> 不是有效 <see cref="T:System.CodeDom.CodeStatement" />。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary>为指定的语句集合生成代码。</summary>
      <param name="stms">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary>生成的代码指定引用表达式。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary>为指定的引发异常语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary>为指定生成代码 try...catch...finally 语句。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary>为指定的类构造函数生成代码。</summary>
      <param name="e">类构造函数来生成的代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定类的末尾生成代码。</summary>
      <param name="e">类为其生成代码的末尾。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary>为指定的表达式类型生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary>为指定的类型引用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary>为指定的命名空间和它包含的类生成代码。</summary>
      <param name="e">要生成的类的命名空间。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary>为指定的开始的类生成代码。</summary>
      <param name="e">要生成的代码的类的开始日期。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary>为指定的变量声明语句生成代码。</summary>
      <param name="e">要生成的代码的语句。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary>为指定的变量引用表达式生成代码。</summary>
      <param name="e">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取指定的数据类型的名称。</summary>
      <param name="value">将返回其名称的类型。</param>
      <returns>数据类型引用名称。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否是有效的标识符。</summary>
      <param name="value">要测试与有效的标识符发生冲突的值。</param>
      <returns>true 如果值为有效的标识符;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的字符串是否是有效的标识符。</summary>
      <param name="value">要测试其有效性的字符串。</param>
      <returns>true 如果指定的字符串是有效的标识符;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary>输出特性块中的一个参数。</summary>
      <param name="arg">为其生成代码特性参数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary>为指定的特性声明集合生成代码。</summary>
      <param name="attributes">若要生成的代码中的特性。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary>为指定生成代码 <see cref="T:System.CodeDom.FieldDirection" />。</summary>
      <param name="dir">指示字段的特性的枚举值之一。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary>为指定的表达式列表生成代码。</summary>
      <param name="expressions">要生成的代码的表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary>为指定的表达式列表生成代码。</summary>
      <param name="expressions">要生成的代码的表达式。</param>
      <param name="newlineBetweenItems">true 若要在每个项，则之后插入新行否则为 false。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>输出对应于指定的特性的域作用域修饰符。</summary>
      <param name="attributes">指定的特性的枚举值之一。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary>输出指定的标识符。</summary>
      <param name="ident">要输出的标识符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary>为指定的成员的访问修饰符生成代码。</summary>
      <param name="attributes">一个枚举值，该值指示成员访问修饰符为其生成代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary>为指定的成员作用域修饰符生成代码。</summary>
      <param name="attributes">一个枚举值，该值指示成员作用域修饰符来生成的代码。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary>为指定的运算符生成代码。</summary>
      <param name="op">要生成的代码的运算符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary>为指定的参数生成代码。</summary>
      <param name="parameters">要生成的代码的参数声明表达式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary>为指定的类型生成代码。</summary>
      <param name="typeRef">要生成的代码的类型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary>为指定的类型特性生成代码。</summary>
      <param name="attributes">指示为其生成代码的类型特性的枚举值之一。</param>
      <param name="isStruct">true 如果该类型是一种结构;否则为 false。</param>
      <param name="isEnum">true 如果类型为枚举，则否则为 false。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary>为指定的对象类型和名称对生成代码。</summary>
      <param name="typeRef">类型。</param>
      <param name="name">对象的名称。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary>通过设置其格式与转义码转换指定的字符串。</summary>
      <param name="value">要转换的字符串。</param>
      <returns>已转换的字符串。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示是否提供指定的代码生成支持。</summary>
      <param name="support">代码生成的类型支持用于测试。</param>
      <returns>true 如果指定的代码生成支持，提供;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary>创建指定的值的转义的标识符。</summary>
      <param name="value">要创建的转义的标识符的字符串。</param>
      <returns>转义的标识符的值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary>创建指定的值的有效标识符。</summary>
      <param name="value">要生成的有效标识符的字符串。</param>
      <returns>指定值的有效标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 编译单元中生成代码并将其输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">要生成的代码的 CodeDOM 编译单元。</param>
      <param name="w">若要代码输出到文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 将不可用。<paramref name="w" /> 进行方法调用之前，可能已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并输出到指定的文本编写器。</summary>
      <param name="e">要生成的代码的表达式。</param>
      <param name="w">若要代码输出到文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 将不可用。<paramref name="w" /> 进行方法调用之前，可能已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">要生成的代码的命名空间。</param>
      <param name="w">若要代码输出到文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 将不可用。<paramref name="w" /> 进行方法调用之前，可能已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">包含要转换的 CodeDOM 元素的语句。</param>
      <param name="w">若要代码输出到文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 将不可用。<paramref name="w" /> 进行方法调用之前，可能已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">要生成的代码的类型。</param>
      <param name="w">若要代码输出到文本编写器。</param>
      <param name="o">要用于生成代码的选项。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="w" /> 将不可用。<paramref name="w" /> 进行方法调用之前，可能已被关闭。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取指示指定的类型 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="type">要返回的类型。</param>
      <returns>数据类型引用名称。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否为当前语言有效的标识符。</summary>
      <param name="value">要测试的值。</param>
      <returns>true 如果 <paramref name="value" /> 参数是有效的标识符; 否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示是否生成器支持表示由指定的语言功能 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" />  对象。</summary>
      <param name="support">若要测试的生成器功能。</param>
      <returns>true 如果指定的功能都受支持;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary>如果指定的值不是有效的标识符，将引发异常。</summary>
      <param name="value">要验证的标识符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定的字符串不是有效的标识符，将引发异常。</summary>
      <param name="value">要测试其有效性的标识符的标识符。</param>
      <exception cref="T:System.ArgumentException">如果指定的标识符无效或冲突与保留关键字或语言关键字。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary>尝试验证包含在指定的每个标识符字段 <see cref="T:System.CodeDom.CodeObject" /> 或 <see cref="N:System.CodeDom" /> 树。</summary>
      <param name="e">要测试无效标识符的对象。</param>
      <exception cref="T:System.ArgumentException">指定 <see cref="T:System.CodeDom.CodeObject" /> 包含无效的标识符。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CodeParser" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary>将编译到指定的文本流 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="codeStream">一个 <see cref="T:System.IO.TextReader" /> 用于读取待分析代码。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> 包含代码模型产生的分析代码的过程。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 类使用指定的文件名、 行、 列、 错误号和错误文本。</summary>
      <param name="fileName">编译器遇到了错误时正在编译的文件的文件名。</param>
      <param name="line">错误源的行。</param>
      <param name="column">错误源的列。</param>
      <param name="errorNumber">错误错误号。</param>
      <param name="errorText">错误消息文本。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary>提供的对象的实现 <see cref="M:System.Object.ToString" /> 方法。</summary>
      <returns>编译器错误的字符串表示形式。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> ，其中包含指定的数组 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象。</summary>
      <param name="value">一个数组 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象来初始化具有的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 类，其中包含指定的内容 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 用来初始化集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary>添加指定 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象传递给错误集合。</summary>
      <param name="value">要添加的 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象。</param>
      <returns>在该位置插入新元素的索引。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary>将一个数组的元素复制到错误集合的末尾。</summary>
      <param name="value">类型的数组 <see cref="T:System.CodeDom.Compiler.CompilerError" /> ，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary>将指定的编译器错误集合的内容添加到错误集合的末尾。</summary>
      <param name="value">一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 对象，其中包含要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary>获取一个值，该值指示集合是否包含指定 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象。</summary>
      <param name="value">要查找的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>true 如果 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 包含在集合; 否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary>将集合的值复制到一维 <see cref="T:System.Array" /> 实例的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从复制的值的目标 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</param>
      <param name="index">中开始复制处的数组的索引。</param>
      <exception cref="T:System.ArgumentException">该数组由 <paramref name="array" /> 参数是多维的。- 或 - 中的元素数 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 个的索引值之间的可用空间大于 <paramref name="arrayIndex" /> 数组中的参数由 <paramref name="array" /> 参数和数组的末尾由 <paramref name="array" /> 参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于所指示的数组下限 <paramref name="array" /> 参数。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary>获取指定的索引 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象在集合中，如果它在集合中存在。</summary>
      <param name="value">要查找的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns>指定的索引 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 中 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />, ，如果找到; 否则为-1。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary>将指定 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 插入集合中的指定索引处。</summary>
      <param name="index">编译器错误应插入位置的从零开始索引。</param>
      <param name="value">要插入的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary>中移除特定 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 集合中。</summary>
      <param name="value">要从 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 移除的 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</param>
      <exception cref="T:System.ArgumentException">集合中找不到指定的对象。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary>获取语言提供程序实现的配置的编译器设置。</summary>
      <returns>一个只读的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 实例，它包含编译器选项和为语言提供程序配置设置。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary>返回 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 当前语言提供程序设置的实例。</summary>
      <returns>关联语言提供程序配置的 CodeDOM 提供程序。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>返回 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实例的当前语言提供程序设置和指定的选项。</summary>
      <param name="providerOptions">从配置文件的提供程序选项的集合。</param>
      <returns>CodeDOM 提供程序与语言提供程序配置关联，并指定选项。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerOptions " />是 null。</exception>
      <exception cref="T:System.InvalidOperationException">提供程序不支持选项。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary>确定指定的对象是否表示相同语言提供程序和编译器的设置与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" />。</summary>
      <param name="o">将与当前 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 进行比较的对象。</param>
      <returns>true 如果 <paramref name="o" /> 是 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 对象，其值是与此实例相同; 否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary>返回的文件名称扩展支持的语言提供程序。</summary>
      <returns>支持的语言提供程序的文件扩展名的数组。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary>返回当前实例的哈希代码。</summary>
      <returns>当前的 32 位有符号的整数哈希代码 <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 实例，适合在哈希算法和数据结构，如哈希表中使用。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary>获取语言提供程序支持的语言名称。</summary>
      <returns>语言提供程序支持的语言名称的数组。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary>初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类使用指定的程序集名称。</summary>
      <param name="assemblyNames">引用的程序集的名称。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类使用指定的程序集名称和输出文件的名称。</summary>
      <param name="assemblyNames">引用的程序集的名称。</param>
      <param name="outputName">输出文件名。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 类使用指定的程序集名称、 输出名称和值，该值指示是否要包括调试信息。</summary>
      <param name="assemblyNames">引用的程序集的名称。</param>
      <param name="outputName">输出文件名。</param>
      <param name="includeDebugInformation">true 若要包括调试信息; false 要排除的调试信息。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 类，该类使用指定的临时文件。</summary>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 用来管理和存储对在编译期间生成的中间文件的引用。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary>使用指定的临时文件执行的命令，等待调用返回。</summary>
      <param name="cmd">要执行的命令。</param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 用来管理和存储对在编译期间生成的中间文件的引用。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>执行指定的命令使用指定的用户标记和临时文件，并等待调用返回，并将从编译器的输出和错误的信息存储在指定的字符串。</summary>
      <param name="userToken">要启动的编译器进程的标记。</param>
      <param name="cmd">要执行的命令。</param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 用来管理和存储对在编译期间生成的中间文件的引用。</param>
      <param name="outputName">对将存储编译器的输出消息的字符串的引用。</param>
      <param name="errorName">对将存储的错误或遇到的错误的名称的字符串的引用。</param>
      <returns>从编译器的返回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>执行指定的命令使用指定的用户标记、 当前目录和临时文件;然后等待调用返回，将从编译器的输出和错误存储在指定的字符串。</summary>
      <param name="userToken">要启动的编译器进程的标记。</param>
      <param name="cmd">要执行的命令。</param>
      <param name="currentDir">要启动中的进程的目录。</param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 用来管理和存储对在编译期间生成的中间文件的引用。</param>
      <param name="outputName">对将存储编译器的输出消息的字符串的引用。</param>
      <param name="errorName">对将存储的错误或遇到的错误的名称的字符串的引用。</param>
      <returns>从编译器的返回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>执行指定的命令使用指定的临时文件，并等待调用返回，将从编译器的输出和错误存储在指定的字符串。</summary>
      <param name="cmd">要执行的命令。</param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 用来管理和存储对在编译期间生成的中间文件的引用。</param>
      <param name="outputName">对将存储编译器的输出消息的字符串的引用。</param>
      <param name="errorName">对将存储的错误或遇到的错误的名称的字符串的引用。</param>
      <returns>从编译器的返回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary>执行指定的命令使用指定的当前目录和临时文件，并等待调用返回，并将从编译器的输出和错误的信息存储在指定的字符串。</summary>
      <param name="cmd">要执行的命令。</param>
      <param name="currentDir">当前目录。</param>
      <param name="tempFiles">一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 用来管理和存储对在编译期间生成的中间文件的引用。</param>
      <param name="outputName">对将存储编译器的输出消息的字符串的引用。</param>
      <param name="errorName">对将存储的错误或遇到的错误的名称的字符串的引用。</param>
      <returns>从编译器的返回值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.GeneratedCodeAttribute.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.GeneratedCodeAttribute" /> 类指定的名称和版本生成的代码的工具。</summary>
      <param name="tool">生成代码的工具的名称。</param>
      <param name="version">生成的代码的工具版本。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary>从编译程序集 <see cref="N:System.CodeDom" /> 包含在指定树 <see cref="T:System.CodeDom.CodeCompileUnit" />, ，使用指定的编译器设置。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示的编译设置。</param>
      <param name="compilationUnit">一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> ，该值指示要编译的代码。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary>编译程序集基于 <see cref="N:System.CodeDom" /> 树中指定的数组包含 <see cref="T:System.CodeDom.CodeCompileUnit" /> 对象时，使用指定的编译器设置。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示的编译设置。</param>
      <param name="compilationUnits">类型的数组 <see cref="T:System.CodeDom.CodeCompileUnit" /> ，该值指示要编译的代码。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>将使用指定的编译器设置包含在指定的文件中的源代码中的程序集编译成。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示的编译设置。</param>
      <param name="fileName">包含要编译的源代码文件的文件名。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>将使用指定的编译器设置包含在指定的文件中的源代码中的程序集编译成。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示的编译设置。</param>
      <param name="fileNames">要编译的文件的文件名。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary>将编译成程序集从指定的字符串包含源代码，并使用指定的编译器设置。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示的编译设置。</param>
      <param name="source">若要编译的源代码。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary>将指定的字符串包含源代码，并使用指定的编译器设置数组中的程序集编译成。</summary>
      <param name="options">一个 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，它指示的编译设置。</param>
      <param name="sources">要编译的源字符串。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerResults" /> 指示编译结果的对象。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary>创建指定的值的转义的标识符。</summary>
      <param name="value">要创建的转义的标识符的字符串。</param>
      <returns>转义的标识符的值。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary>创建指定的值的有效标识符。</summary>
      <param name="value">要生成的有效标识符的字符串。</param>
      <returns>指定值的有效标识符。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 编译单元中生成代码并将其输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">要为其生成代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> 向其中输出代码。</param>
      <param name="o">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 表达式生成代码，并输出到指定的文本编写器。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeExpression" /> ，指示表达式为其生成代码。</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> 向其中输出代码。</param>
      <param name="o">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 命名空间生成代码，并输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeNamespace" /> ，该值指示要生成的代码的命名空间。</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> 向其中输出代码。</param>
      <param name="o">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 语句生成代码，并输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeStatement" /> 包含要转换的 CodeDOM 元素。</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> 向其中输出代码。</param>
      <param name="o">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary>为指定的代码文档对象模型 (CodeDOM) 类型声明生成代码，并输出到指定的文本编写器使用指定的选项。</summary>
      <param name="e">一个 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> ，该值指示为其生成代码的类型。</param>
      <param name="w">
        <see cref="T:System.IO.TextWriter" /> 向其中输出代码。</param>
      <param name="o">一个 <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> ，该值指示要用于生成代码的选项。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary>获取指示指定的类型 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      <param name="type">一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要返回的类型。</param>
      <returns>文本表示形式的指定类型的语言，此代码生成器用于在其中生成代码。 例如，在 Visual Basic 中，传入 System.Int32 类型将返回"Integer"。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary>获取一个值，该值指示指定的值是否为当前语言有效的标识符。</summary>
      <param name="value">要测试是有效的标识符的值。</param>
      <returns>true 如果 <paramref name="value" /> 参数是有效的标识符; 否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary>获取一个值，该值指示是否生成器支持表示由指定的语言功能 <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> 对象。</summary>
      <param name="supports">若要测试的生成器功能。</param>
      <returns>true 如果指定的功能都受支持;否则为 false。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary>如果指定的值不是有效的标识符，将引发异常。</summary>
      <param name="value">要验证的标识符。</param>
      <exception cref="T:System.ArgumentException">标识符不是有效的。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary>派生类中实现时，将编译到指定的文本流 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      <param name="codeStream">一个 <see cref="T:System.IO.TextReader" /> ，可用于读取要编译的代码。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeCompileUnit" /> ，包含表示形式的已分析的代码。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类使用指定的文本编写器和默认选项卡上的字符串。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于输出。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" /> 类使用指定的文本编写器和选项卡字符串。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 用于输出。</param>
      <param name="tabString">要用于缩进的选项卡上字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Close">
      <summary>关闭正在写入到的文档。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Flush">
      <summary>刷新流。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.OutputTabs">
      <summary>将输出一次为每个符合缩进级别的选项卡上字符串 <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" /> 属性。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Boolean)">
      <summary>一个布尔值的文本表示写入文本流。</summary>
      <param name="value">要写入的布尔值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char)">
      <summary>将字符写入文本流。</summary>
      <param name="value">要写入的字符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[])">
      <summary>将字符数组写入文本流。</summary>
      <param name="buffer">要写入的字符数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>字符的子数组写入文本流。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">缓冲区中的起始索引。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Double)">
      <summary>一个双精度值的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 double。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int32)">
      <summary>一个整数的文本表示写入文本流。</summary>
      <param name="value">要写入的整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Int64)">
      <summary>将一个 8 字节整数的文本表示写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Object)">
      <summary>一个对象的文本表示形式写入文本流。</summary>
      <param name="value">要写入的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.Single)">
      <summary>使用单一的文本表示形式写入文本流。</summary>
      <param name="value">要写入的 single。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String)">
      <summary>将指定的字符串写入文本流。</summary>
      <param name="s">要写入的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>写出格式化的字符串，指定使用相同的语义。</summary>
      <param name="format">格式设置字符串。</param>
      <param name="arg0">要写入的格式化字符串的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>写出格式化的字符串，指定使用相同的语义。</summary>
      <param name="format">要使用的格式设置字符串。</param>
      <param name="arg0">要写入的格式化字符串的第一个对象。</param>
      <param name="arg1">要写入的格式化字符串的第二个对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>写出格式化的字符串，指定使用相同的语义。</summary>
      <param name="format">要使用的格式设置字符串。</param>
      <param name="arg">要输出的参数数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine">
      <summary>将行结束符的字符串。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>写入一个布尔值后, 跟行终止符，写入文本流的文本表示形式。</summary>
      <param name="value">要写入的布尔值。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char)">
      <summary>将后跟行终止符，写入文本流的字符。</summary>
      <param name="value">要写入的字符。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>将字符数组，跟行终止符，写入文本流。</summary>
      <param name="buffer">要写入的字符数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>写入字符后, 跟行终止符，写入文本流的子的数组。</summary>
      <param name="buffer">要从中写出数据的字符数组。</param>
      <param name="index">缓冲区中的起始索引。</param>
      <param name="count">要写入的字符数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Double)">
      <summary>写入的文本表示形式双精度，这跟行终止符，写入文本流。</summary>
      <param name="value">要写入的 double。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>写入的文本表示形式的整数，后面带有行结束符，写入文本流。</summary>
      <param name="value">要写入的整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>写入的文本表示形式的 8 字节整数，后面带有行结束符，写入文本流。</summary>
      <param name="value">要写入的 8 字节整数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Object)">
      <summary>写入的文本表示形式的对象，跟行终止符，写入文本流。</summary>
      <param name="value">要写入的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.Single)">
      <summary>写入的文本表示形式的单个，跟行终止符，写入文本流。</summary>
      <param name="value">要写入的 single。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String)">
      <summary>将指定的字符串后, 跟行终止符，写入文本流。</summary>
      <param name="s">要写入的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>写出格式化的字符串后, 跟行终止符，使用指定的相同的语义。</summary>
      <param name="format">格式设置字符串。</param>
      <param name="arg0">要写入的格式化字符串的对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>写出格式化的字符串后, 跟行终止符，使用指定的相同的语义。</summary>
      <param name="format">要使用的格式设置字符串。</param>
      <param name="arg0">要写入的格式化字符串的第一个对象。</param>
      <param name="arg1">要写入的格式化字符串的第二个对象。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>写出格式化的字符串后, 跟行终止符，使用指定的相同的语义。</summary>
      <param name="format">要使用的格式设置字符串。</param>
      <param name="arg">要输出的参数数组。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>写入的文本表示形式的 UInt32 跟行终止符，写入文本流。</summary>
      <param name="value">若要输出 UInt32。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>将指定的字符串写入无制表符的行。</summary>
      <param name="s">要写入的字符串。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类指定为默认设置为其生成和使用后, 删除临时文件的临时目录。</summary>
      <param name="tempDir">要用于存储临时文件的临时目录路径。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 类使用指定的临时目录和指定的值，该值指示是否要保留还是后它们生成和使用时，默认情况下删除临时文件。</summary>
      <param name="tempDir">要用于存储临时文件的临时目录路径。</param>
      <param name="keepFiles">true 如果应在使用; 后保留的临时文件 false 如果应删除临时文件。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary>向集合添加具有指定的文件扩展名的文件名。</summary>
      <param name="fileExtension">要添加到集合的自动生成的临时文件名称文件扩展名。</param>
      <returns>具有指定刚才添加到集合的扩展名的文件名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary>将具有指定的文件扩展名的文件名添加到集合，并使用指定的值，该值指示是否应删除或保留该文件。</summary>
      <param name="fileExtension">要添加到集合的自动生成的临时文件名称文件扩展名。</param>
      <param name="keepFile">true 如果该文件应显示在使用; 之后 false 如果应删除该文件。</param>
      <returns>具有指定刚才添加到集合的扩展名的文件名。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileExtension" /> 为 null 或空字符串。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary>将指定的文件添加到集合，并使用指定的值，该值指示是否保留的文件，或释放集合之后 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 调用方法。</summary>
      <param name="fileName">要向集合中添加的文件的名称。</param>
      <param name="keepFile">true 如果该文件应显示在使用; 之后 false 如果应删除该文件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 为 null 或空字符串。- 或 -<paramref name="fileName" /> 是一个副本。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary>将集合中的成员复制到指定的字符串，指定索引处开始。</summary>
      <param name="fileNames">要将复制到的字符串数组。</param>
      <param name="start">要开始向复制的数组的索引。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary>删除此集合中未标记为保留临时的文件。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary>尝试在此对象被垃圾回收回收之前删除临时文件。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary>获取可枚举集合中的成员的枚举器。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> ，其中包含该集合的成员。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将集合的元素复制到数组，从目标数组的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="start">数组中从零开始的索引，在此处开始复制。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary>执行与释放或重置非托管资源关联的应用程序定义的任务。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例没有上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。</summary>
      <param name="collection">要用作基础数据存储区的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限，并使用提供的 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 作为其基础数据存储区。</summary>
      <param name="collection">要用作基础数据存储区的集合。</param>
      <param name="boundedCapacity">集合的限制大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundedCapacity" /> 不是正数值。</exception>
      <exception cref="T:System.ArgumentException">提供 <paramref name="collection" /> 包含多个值不是允许的 <paramref name="boundedCapacity" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的新实例，该实例具有指定的上限。</summary>
      <param name="boundedCapacity">集合的限制大小。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="boundedCapacity" /> 不是正数值。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
      <summary>将项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。</summary>
      <param name="item">要添加到集合的项。 该值可以是 null 引用。</param>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。- 或 -基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
      <summary>将项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中。</summary>
      <param name="item">要添加到集合的项。 该值可以是 null 引用。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已释放或 <see cref="T:System.Threading.CancellationTokenSource" /> 拥有 <paramref name="cancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。- 或 -基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到其中一个集合的项。</param>
      <returns>向其添加项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
      <summary>向任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中添加指定的项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到其中一个集合的项。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <returns>向其添加项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合不接受该项目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。</exception>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放，则 <see cref="T:System.Threading.CancellationTokenSource" /> 创建 <paramref name="cancellationToken" /> 已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
      <summary>将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例标记为不任何更多的添加。</summary>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
      <summary>将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 参数是否等于或大于该长度的 <paramref name="array" />。目标数组是太小而无法容纳所有 BlockingCcollection 元素。数组秩不匹配。数组类型是与 BlockingCollection 元素的类型不兼容。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
      <summary>释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例使用的资源。</summary>
      <param name="disposing">是显式释放 (true)，还是由于终结器释放 (false)。</param>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
      <summary>为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</summary>
      <returns>从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary>为集合中的项提供一个使用 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      <param name="cancellationToken">要观察的取消标记。</param>
      <returns>从集合中移除并返回项的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已释放或 <see cref="T:System.Threading.CancellationTokenSource" /> 创建 <paramref name="cancellationToken" /> 已被释放</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>为集合中的项提供 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</summary>
      <returns>集合中的项的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中的所有项复制到兼容的一维数组中，复制从目标数组的指定索引处开始。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 参数是否等于或大于该长度的 <paramref name="array" />, 、 该数组是多维的或找不到的类型参数不能自动转换为目标数组的类型。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>为集合中的项提供 <see cref="T:System.Collections.IEnumerator" />。</summary>
      <returns>集合中的项的 <see cref="T:System.Collections.IEnumerator" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
      <summary>从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <returns>从集合中移除的项。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException">在这之外修改基础集合 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空，集合已标记为完成添加。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
      <summary>从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="cancellationToken">可用于取消获取操作的对象。</param>
      <returns>从集合中移除的项。</returns>
      <exception cref="T:System.OperationCanceledException">
        <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已释放或 <see cref="T:System.Threading.CancellationTokenSource" /> 创建该标记已取消。</exception>
      <exception cref="T:System.InvalidOperationException">在这之外修改基础集合 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例或 BlockingCollection 被标记为完成添加，或 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一个项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">从其中一个集合中移除的项。</param>
      <returns>从其中移除项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 集合上调用。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
      <summary>在观察指定的取消标记时从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中获取一个项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">从其中一个集合中移除的项。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <returns>从其中移除项的集合在 <paramref name="collections" /> 数组中的索引。</returns>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素或 <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> 集合上调用。</exception>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
      <summary>将项从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例复制到新数组中。</summary>
      <returns>包含集合元素副本的数组。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
      <summary>尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item">要添加到集合的项。</param>
      <returns>如果可以添加 <paramref name="item" />，则为 true；否则为 false。 如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。- 或 -基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
      <summary>尝试在指定的时间段内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item">要添加到集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。 如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。- 或 -基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
      <summary>在观察取消标记时，尝试在指定的时间段内将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item">要添加到集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <returns>如果在指定的时间内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。 如果该项有重复，并且基础集合不接受重复项，则会引发 <see cref="T:System.InvalidOperationException" />。</returns>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 或基础 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。- 或 -基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
      <summary>尝试将指定的项添加到 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</summary>
      <param name="item">要添加到集合的项。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>如果在指定的时间跨度内可以将 <paramref name="item" /> 添加到集合中，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是-1 毫秒，表示无限期超时大于非负数字 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 已标记为完成添加操作。- 或 -基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary>尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到其中一个集合的项。</param>
      <returns>向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
      <summary>尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到其中一个集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。- 或 -计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
      <summary>尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到其中一个集合的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <returns>向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合不接受该项目。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。- 或 -计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。</exception>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
      <summary>在观察指定的取消标记时，尝试将指定的项添加到任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">要添加到其中一个集合的项。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>向其添加项的集合在 <paramref name="collections" /> 数组中的索引；如果未能添加项，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例或 <see cref="T:System.Threading.CancellationTokenSource" /> 创建 <paramref name="cancellationToken" /> 已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是-1 毫秒，表示无限期超时大于非负数字 <see cref="F:System.Int32.MaxValue" />。- 或 -计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素，或至少一个集合已被标记为完成添加。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基础集合不接受该项目。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item">要从集合中移除的项。</param>
      <returns>如果可以移除项，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.InvalidOperationException">该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
      <summary>尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item">要从集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>如果在指定的时间内可以从集合中移除一个项，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>在观察取消标记时，尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item">要从集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <returns>如果在指定的时间内可以从集合中移除一个项，则为 true；否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">已取消 <see cref="T:System.Threading.CancellationToken" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 或基础 <see cref="T:System.Threading.CancellationTokenSource" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
      <summary>尝试在指定的时间段内从 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中移除一个项。</summary>
      <param name="item">要从集合中移除的项。</param>
      <param name="timeout">一个对象，表示等待的毫秒数，或为 -1 毫秒，表示无限期等待。</param>
      <returns>如果在指定的时间内可以从集合中移除一个项，则为 true；否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 为 -1 毫秒以外的负数，表示无限期超时。- 或 - <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException">该基础集合已在此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例外部进行了修改。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">从其中一个集合中移除的项。</param>
      <returns>从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">从其中一个集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。- 或 -计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">从其中一个集合中移除的项。</param>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的取消标记。</param>
      <returns>从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
      <exception cref="T:System.OperationCanceledException">如果 <see cref="T:System.Threading.CancellationToken" /> 被取消。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。- 或 -计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。</exception>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
      <summary>尝试从任一指定的 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例中移除一个项。</summary>
      <param name="collections">集合的数组。</param>
      <param name="item">从其中一个集合中移除的项。</param>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>从其中移除项的集合在 <paramref name="collections" /> 数组中的索引；如果未能移除项，则为 -1。</returns>
      <exception cref="T:System.ObjectDisposedException">在至少一个 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例已被释放。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collections" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 是-1 毫秒，表示无限期超时大于非负数字 <see cref="F:System.Int32.MaxValue" />。- 或 -计数 <paramref name="collections" /> 大于 STA 的 62 和 63 mta 的最大大小。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collections" /> 参数是一个 0 长度的数组或包含 null 元素。</exception>
      <exception cref="T:System.InvalidOperationException">至少一个基本集合已修改之外其 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 类的新实例，该类包含从指定集合中复制的元素。</summary>
      <param name="collection">其元素被复制到新的 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引开始将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary>尝试将一个对象添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的对象。 该值对于引用类型可以是空引用（在 Visual Basic 中为 Nothing）。</param>
      <returns>始终返回 true</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，用作从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 所复制的元素的目标数组。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null 引用（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。 - <paramref name="array" /> 不具有从零开始的索引。 - <paramref name="index" /> 等于或大于该长度的 <paramref name="array" /> -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。 -源的类型 <see cref="T:System.Collections.ICollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 的内容的枚举器。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 元素复制到新数组。</summary>
      <returns>新数组包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 复制的元素的快照。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 返回一个对象但不移除该对象。</summary>
      <param name="result">此方法返回时，<paramref name="result" /> 包含 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中的对象；如果操作失败，则返回 <paramref name="T" /> 的默认值。</param>
      <returns>如果成功返回了对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
      <summary>尝试从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除和返回一个对象。</summary>
      <param name="result">此方法返回时，<paramref name="result" /> 包含从 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中移除的对象；如果包为空，则返回 <paramref name="T" /> 的默认值。</param>
      <returns>如果成功移除了对象，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Add(`0)">
      <summary>向当前集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item">要添加到集中的元素。</param>
      <returns>如果该元素已添加到集内，则为 true；如果该元素已在集内，则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>从当前集内移除指定集合中的所有元素。</summary>
      <param name="other">要从集内移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含也存在在指定集合中的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真子集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的真（严格）超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的真超集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定一个集是否为指定集合的子集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的子集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否为指定集合的超集。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集是否与指定的集合重叠。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>如果当前集与 <paramref name="other" /> 至少共享一个通用元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定当前集与指定的集合是否包含相同的元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <returns>true 如果当前集等于 <paramref name="other" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集仅包含存在于当前集或指定集合中的元素（但不同时存在于两者中）。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.ISet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前集，使该集包含存在于当前集、指定集合或两者中的所有元素。</summary>
      <param name="other">要与当前集进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary>初始化为空的 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.IEnumerable" /> 中复制的元素并且其容量足以容纳所复制的元素数。</summary>
      <param name="collection">
        <see cref="T:System.Collections.IEnumerable" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 是可序列化与指定的类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 所需的信息。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Generic.LinkedList`1" /> 关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>添加包含指定的值中指定的现有节点后的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其之后插入新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。</param>
      <param name="value">要添加到值 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <returns>新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>在中指定的现有节点之后添加指定的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其之后插入 <paramref name="newNode" />。</param>
      <param name="newNode">新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 将添加到 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。- 或 -<paramref name="newNode" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。- 或 -<paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary>添加包含在指定的现有节点前的指定的值的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其前面进行插入一个新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。</param>
      <param name="value">要添加到值 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <returns>新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary>添加指定的新节点中指定的现有节点前 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="node">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 在其前面进行插入 <paramref name="newNode" />。</param>
      <param name="newNode">新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 将添加到 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。- 或 -<paramref name="newNode" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。- 或 -<paramref name="newNode" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary>添加包含指定的值的开头的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="value">要添加的开头处的值 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <returns>新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary>将指定的新节点添加的开头 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="node">新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的开头添加 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary>添加包含指定的值的末尾的新节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="value">值的结尾处添加 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <returns>新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 包含 <paramref name="value" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary>将指定的新节点添加的末尾 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="node">新 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的末尾添加 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 属于另一个 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary>删除所有节点从 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary>确定一个值是否在 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。 对于引用类型，该值可以为 null。</param>
      <returns>如果在 true 中找到 <paramref name="value" />，则为 <see cref="T:System.Collections.Generic.LinkedList`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.LinkedList`1" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源中的元素数目 <see cref="T:System.Collections.Generic.LinkedList`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。 此类不能被继承。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例无效。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary>查找包含指定的值的第一个节点。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。</param>
      <returns>第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> ，包含指定的值时，如果找到; 否则为 null。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary>查找包含指定的值的最后一个节点。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 中定位的值。</param>
      <returns>最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> ，包含指定的值时，如果找到; 否则为 null。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.LinkedList`1" /> 实例无效。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary>移除从指定的值的第一个匹配项 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="value">要移除的值 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <returns>true 如果元素包含 <paramref name="value" /> 成功删除; 否则为 false。  如果在原始 false 中没有找到 <paramref name="value" />，则此方法也会返回 <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary>移除指定的节点从 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <param name="node">要从 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 移除的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="node" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> 不在当前 <see cref="T:System.Collections.Generic.LinkedList`1" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary>删除的开始处的节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary>删除节点的末尾 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>在末尾添加一项 <see cref="T:System.Collections.Generic.ICollection`1" />。</summary>
      <param name="value">值的结尾处添加 <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。- 或 -无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问链接列表作为集合的枚举。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问链接列表以一个集合。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 类，包含指定的值。</summary>
      <param name="value">要在包含的值 <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</summary>
      <param name="collection">其元素被复制到新的 <see cref="T:System.Collections.Generic.Queue`1" /> 中的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.Queue`1" /> 类的新实例，该实例为空并且具有指定的初始容量。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Queue`1" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.Queue`1" /> 中移除所有对象。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.Generic.Queue`1" /> 中。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.Queue`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
      <returns>如果在 true 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Queue`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary>从指定数组索引开始将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到现有一维 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Queue`1" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源中的元素数目 <see cref="T:System.Collections.Generic.Queue`1" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary>移除并返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象。</summary>
      <returns>从 <see cref="T:System.Collections.Generic.Queue`1" /> 的开始处移除的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary>将对象添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的结尾处。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.Queue`1" /> 的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.Queue`1" /> 的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.Queue`1" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Queue`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary>返回位于 <see cref="T:System.Collections.Generic.Queue`1" /> 开始处的对象但不将其移除。</summary>
      <returns>位于 <see cref="T:System.Collections.Generic.Queue`1" /> 的开头的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Queue`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。- 或 -无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary>将 <see cref="T:System.Collections.Generic.Queue`1" /> 元素复制到新数组。</summary>
      <returns>新数组包含从复制的元素 <see cref="T:System.Collections.Generic.Queue`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Queue`1" /> 中的实际元素数。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并对键类型使用默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的一个新实例，该实例为空并对比较键使用指定 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</summary>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用键类型的默认 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现来比较键。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <param name="comparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现，或者为 null，以便为键类型使用默认的 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary>将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary>确定是否 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 包含带有指定键的元素。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的键。</param>
      <returns>如果 true 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedDictionary`2" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 是否包含具有指定值的元素。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中定位的值。 对于引用类型，该值可以为 null。</param>
      <returns>如果 true 包含具有指定值的元素，则为 <see cref="T:System.Collections.Generic.SortedDictionary`2" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从指定的索引处开始，将 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素复制到指定的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的数组中。</summary>
      <param name="array">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 结构的一维数组，它是从当前 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中复制的元素的目标。该数组必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源中的元素数目 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 类来反映中指定的键 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 其键反映在新 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>副本 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 到现有一维数组，从指定的数组索引处开始的元素。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源中的元素数目 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 结构。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">总是引发；集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">总是引发；集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含指定值。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。</param>
      <returns>如果在 true 中找到该项，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。  此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。</param>
      <returns>如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功删除项，则为 true；否则为 false。 如果在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中未找到项，此方法也会返回 false。</returns>
      <exception cref="T:System.NotSupportedException">总是引发；集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中从特定的数组索引开始的位置。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。- 或 -无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <returns>如果该元素已成功移除，则为 true；否则为 false。  如果在 false 中没有找到 <paramref name="key" />，则此方法也会返回 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。</summary>
      <param name="keyValuePair">要添加到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyValuePair" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含一个指定键和值。</summary>
      <param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中定位的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。</param>
      <returns>如果在 true 中找到 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除指定元素的第一个匹配项。</summary>
      <param name="keyValuePair">要从 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中移除的 <see cref="T:System.Collections.Generic.ICollection`1" /> 结构。</param>
      <returns>如果从 true 中成功移除 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。 如果在 false 中没有找到 <paramref name="keyValuePair" />，则此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的数组索引处开始，将 <see cref="T:System.Collections.Generic.ICollection`1" /> 的元素复制到一个数组中。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源中的元素数目 <see cref="T:System.Collections.Generic.ICollection`1" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。- 或 -源类型 <see cref="T:System.Collections.Generic.ICollection`1" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.IDictionary" />。- 或 -<paramref name="value" /> 不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.IDictionary" />。- 或 -<see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。</summary>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</param>
      <returns>如果 true 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>获取与指定键关联的值。</summary>
      <param name="key">要获取的值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。</param>
      <returns>如果 true 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedDictionary`2" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 类来反映中指定的值 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 其值反映在新 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>副本 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 到现有一维数组，从指定的数组索引处开始的元素。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">源中的元素数目 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 结构。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary>将某项添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 中。 此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 的对象。</param>
      <exception cref="T:System.NotSupportedException">总是引发；集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除所有项。 此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">总是引发；集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary>确定是否 <see cref="T:System.Collections.Generic.ICollection`1" /> 包含指定的值。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.ICollection`1" /> 中定位的对象。</param>
      <returns>如果在 true 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定对象的第一个匹配项。 此实现始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="item">要从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中删除的对象。</param>
      <returns>如果已从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中成功删除 <paramref name="item" />，则为 true；否则为 false。 如果在 false 中没有找到 <paramref name="item" />，则此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
      <exception cref="T:System.NotSupportedException">总是引发；集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Collections.ICollection" /> 的元素复制到一个数组中从特定的数组索引开始的位置。</summary>
      <param name="array">一维数组，它是从 <see cref="T:System.Collections.ICollection" /> 中复制的元素的目标。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源中的元素数目 <see cref="T:System.Collections.ICollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。- 或 -无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有默认的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有默认的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <param name="comparer">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。- 或 -为这类键使用默认的 null，则为 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例包含从指定的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中复制的元素，其容量足以容纳所复制的元素数并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <param name="dictionary">
        <see cref="T:System.Collections.Generic.IDictionary`2" />，它的元素被复制到新 <see cref="T:System.Collections.Generic.SortedList`2" />。</param>
      <param name="comparer">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。- 或 -为这类键使用默认的 null，则为 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dictionary" /> 包含一个或多个重复键。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该示例为空且具有指定的初始容量，并使用默认的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedList`2" /> 类的新实例，该实例为空，具有指定的初始容量并使用指定的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的初始元素数。</param>
      <param name="comparer">在对键进行比较时使用的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现。- 或 -为这类键使用默认的 null，则为 <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary>将带有指定键和值的元素添加到 <see cref="T:System.Collections.Generic.SortedList`2" /> 中。</summary>
      <param name="key">要添加的元素的键。</param>
      <param name="value">要添加的元素的值。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定键。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。</param>
      <returns>如果 true 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedList`2" /> 是否包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。 对于引用类型，该值可以为 null。</param>
      <returns>如果 true 包含具有指定值的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.SortedList`2" /> 的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的类型 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary>在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定键并返回从零开始的索引。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的键。</param>
      <returns>如果找到，则为整个 <paramref name="key" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 的从零开始的索引；否则为 -1。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary>在整个 <see cref="T:System.Collections.Generic.SortedList`2" /> 中搜索指定的值，并返回第一个匹配项的从零开始的索引。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中定位的值。  对于引用类型，该值可以为 null。</param>
      <returns>如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.Generic.SortedList`2" /> 第一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary>从 <see cref="T:System.Collections.Generic.SortedList`2" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <returns>如果该元素已成功移除，则为 true；否则为 false。  如果在原始 false 中没有找到 <paramref name="key" />，则此方法也会返回 <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.Generic.SortedList`2" /> 的指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Generic.SortedList`2.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>向 <see cref="T:System.Collections.Generic.ICollection`1" /> 中添加键/值对。</summary>
      <param name="keyValuePair">要添加到 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>确定 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否包含特定元素。</summary>
      <param name="keyValuePair">要在 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中定位的 <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
      <returns>如果在 true 中找到 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.Generic.ICollection`1" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.ICollection`1" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源 <see cref="T:System.Collections.Generic.ICollection`1" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>从 <see cref="T:System.Collections.Generic.ICollection`1" /> 中移除特定键/值对的第一个匹配项。</summary>
      <param name="keyValuePair">要从 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 移除的 <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
      <returns>如果从 true 中成功移除 <paramref name="keyValuePair" />，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。 如果在原始 false 中没有找到 <paramref name="keyValuePair" />，则此方法也会返回 <see cref="T:System.Collections.Generic.ICollection`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。- 或 -无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.IDictionary" />。- 或 -<paramref name="value" /> 不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.IDictionary" />。- 或 -<see cref="T:System.Collections.IDictionary" /> 中已存在具有相同键的元素。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。</summary>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</param>
      <returns>如果 true 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的实际元素数。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary>获取与指定键关联的值。</summary>
      <param name="key">要获取其值的键。</param>
      <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value" /> 参数的类型的默认值。 此参数未经初始化即被传递。</param>
      <returns>如果 true 包含具有指定键的元素，则为 <see cref="T:System.Collections.Generic.SortedList`2" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，该类使用指定的比较器。</summary>
      <param name="comparer">要用来进行比较的对象的默认比较器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparer" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，其中包含的元素复制从指定的可枚举集合。</summary>
      <param name="collection">要复制的可枚举集合。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，其中包含的元素复制从指定的可枚举集合，并使用指定的比较器。</summary>
      <param name="collection">要复制的可枚举集合。</param>
      <param name="comparer">要用来进行比较的对象的默认比较器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 类，其中包含序列化数据。</summary>
      <param name="info">包含序列化所需的信息的对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。</param>
      <param name="context">包含的源和目标与相关联的序列化流的结构 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary>向集内添加元素，并返回一个指示是否已成功添加元素的值。</summary>
      <param name="item">要添加到集中的元素。</param>
      <returns>true 如果 <paramref name="item" /> 添加到集; 否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary>从集内移除所有元素。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary>确定集是否包含特定元素。</summary>
      <param name="item">要在集内定位的元素。</param>
      <returns>true 如果该集包含 <paramref name="item" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary>将复制的完整 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从目标数组的开头。</summary>
      <param name="array">一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。</param>
      <exception cref="T:System.ArgumentException">源中的元素数目 <see cref="T:System.Collections.Generic.SortedSet`1" /> 超过目标数组可包含的元素数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary>将复制的完整 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从指定的数组索引处开始。</summary>
      <param name="array">一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentException">源数组中的元素数大于从的可用空间 <paramref name="index" /> 到目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>将指定的数目的元素从复制 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从指定的数组索引处开始。</summary>
      <param name="array">一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <param name="count">要复制的元素数。</param>
      <exception cref="T:System.ArgumentException">源数组中的元素数大于从的可用空间 <paramref name="index" /> 到目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="count" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary>返回 <see cref="T:System.Collections.IEqualityComparer" /> 可用来创建包含各个集的集合的对象。</summary>
      <returns>用于创建集的集合的比较器。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>返回 <see cref="T:System.Collections.IEqualityComparer" /> 对象根据指定的比较器，用于创建包含各个集的集合。</summary>
      <param name="memberEqualityComparer">用于创建返回的比较器的比较器。</param>
      <returns>用于创建集的集合的比较器。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary>将枚举数推进到下一个元素 <see cref="T:System.Collections.Generic.SortedSet`1" /> 集合。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例无效。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>移除从当前的指定集合中的所有元素 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。</summary>
      <param name="other">要从 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象中移除的项的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的枚举数。</summary>
      <returns>返回一个按排序顺序循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回必须要序列化的数据 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化所需的信息 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，其中包含与 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary>返回的视图中一小部分 <see cref="T:System.Collections.Generic.SortedSet`1" />。</summary>
      <param name="lowerValue">视图中所需的最小值。</param>
      <param name="upperValue">视图中所需的最大值。</param>
      <returns>仅包含指定范围内的值的子集视图。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="lowerValue" /> 是多个 <paramref name="upperValue" /> 根据比较器。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">在视图上尝试的操作指定的范围超出了 <paramref name="lowerValue" /> 和 <paramref name="upperValue" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象，因此该变量包含也存在在指定集合中的唯一元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的真子集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的真子集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的真超集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的真超集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的子集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <returns>true 如果当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是子集 <paramref name="other" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否为指定集合的超集。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是 <paramref name="other" /> 的超集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并反序列化时引发事件已完成反序列化。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象无效。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定是否当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象和指定的集合共享通用元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <returns>如果 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象和 <paramref name="other" /> 共享至少一个公共元素，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary>移除指定的项从 <see cref="T:System.Collections.Generic.SortedSet`1" />。</summary>
      <param name="item">要移除的元素。</param>
      <returns>true 如果找到并成功移除，则该元素否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>移除与从指定的谓词所定义的条件匹配的所有元素 <see cref="T:System.Collections.Generic.SortedSet`1" />。</summary>
      <param name="match">用于定义要移除的元素应满足的条件的委托。</param>
      <returns>已删除的元素数目 <see cref="T:System.Collections.Generic.SortedSet`1" /> 集合...</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" /> ，它循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 按相反的顺序。</summary>
      <returns>枚举数循环访问 <see cref="T:System.Collections.Generic.SortedSet`1" /> 按相反的顺序。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>确定是否当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象和指定的集合包含相同的元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <returns>true 如果当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象是否等于 <paramref name="other" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象以使其包含存在的元素显示在当前对象或指定的集合中，但不要同时使用两者。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>向 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象添加一个项。</summary>
      <param name="item">要添加到 <see cref="T:System.Collections.Generic.ICollection`1" /> 对象中的对象。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将复制的完整 <see cref="T:System.Collections.Generic.SortedSet`1" /> 到兼容的一维数组，从指定的数组索引处开始。</summary>
      <param name="array">一维数组，它是从复制的元素的目标 <see cref="T:System.Collections.Generic.SortedSet`1" />。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentException">源数组中的元素数大于从的可用空间 <paramref name="index" /> 到目标数组的末尾。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>用于循环访问集合的枚举数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> 接口，并反序列化时引发事件已完成反序列化。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例无效。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回需要序列化的数据 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化所需的信息 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，它包含与 <see cref="T:System.Collections.Generic.SortedSet`1" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>修改当前 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象以使其包含在当前对象或指定的集合中存在的所有元素。</summary>
      <param name="other">要与当前的 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象进行比较的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例为空并且具有默认初始容量。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.Generic.Stack`1" /> 类的新实例，该实例包含从指定集合复制的元素并且具有足够的容量来容纳所复制的元素。</summary>
      <param name="collection">从中复制元素的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Collections.Generic.Stack`1" /> ，该类为空并具有指定的初始容量或默认的初始容量，则两者中较大。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Generic.Stack`1" /> 可包含的初始元素数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary>从 <see cref="T:System.Collections.Generic.Stack`1" /> 中移除所有对象。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.Generic.Stack`1" /> 中。</summary>
      <param name="item">要在 <see cref="T:System.Collections.Generic.Stack`1" /> 中定位的对象。 对于引用类型，该值可以为 null。</param>
      <returns>如果在 true 中找到 <paramref name="item" />，则为 <see cref="T:System.Collections.Generic.Stack`1" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary>副本 <see cref="T:System.Collections.Generic.Stack`1" /> 到现有一维 <see cref="T:System.Array" />, 指定的数组索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Generic.Stack`1" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">源中的元素数目 <see cref="T:System.Collections.Generic.Stack`1" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary>释放由 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary>使枚举数前进到 <see cref="T:System.Collections.Generic.Stack`1" /> 的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。 无法继承此类。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary>返回的枚举数 <see cref="T:System.Collections.Generic.Stack`1" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> 的 <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary>返回的对象顶部的 <see cref="T:System.Collections.Generic.Stack`1" /> 而不删除它。</summary>
      <returns>在顶部的对象 <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary>移除并返回位于顶部的对象 <see cref="T:System.Collections.Generic.Stack`1" />。</summary>
      <returns>从顶部删除的对象 <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Collections.Generic.Stack`1" /> 为空。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary>在 <see cref="T:System.Collections.Generic.Stack`1" /> 的顶部插入一个对象。</summary>
      <param name="item">要推入到 <see cref="T:System.Collections.Generic.Stack`1" /> 中的对象。 对于引用类型，该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>返回一个循环访问集合的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从特定的 <see cref="T:System.Collections.ICollection" /> 索引处开始，将 <see cref="T:System.Array" /> 的元素复制到一个 <see cref="T:System.Array" /> 中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.ICollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="arrayIndex">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -<paramref name="array" /> 没有从零开始的索引。- 或 -源 <see cref="T:System.Collections.ICollection" /> 中的元素个数大于从 <paramref name="arrayIndex" /> 到目标 <paramref name="array" /> 末尾之间的可用空间。- 或 -无法自动将源 <see cref="T:System.Collections.ICollection" /> 的类型转换为目标 <paramref name="array" /> 的类型。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary>副本 <see cref="T:System.Collections.Generic.Stack`1" /> 到新数组。</summary>
      <returns>新数组包含元素的副本 <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary>如果元素数小于当前容量的 90%，将容量设置为 <see cref="T:System.Collections.Generic.Stack`1" /> 中的实际元素数。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 类的新实例，该类包含从指定集合中复制的元素。</summary>
      <param name="collection">从中复制元素的集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> 参数不能为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 类的新实例，该类包含从指定列表中复制的元素。</summary>
      <param name="list">从中复制元素的列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 参数不能为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy">
      <summary>不允许可重入的更改此集合的尝试。</summary>
      <returns>可用于释放对象的 <see cref="T:System.IDisposable" /> 对象。</returns>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.CheckReentrancy">
      <summary>检查企图更改此集合的可重入尝试。</summary>
      <exception cref="T:System.InvalidOperationException">如果调用了 <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />，其中尚未释放 <see cref="T:System.IDisposable" /> 返回值。 通常情况下，这意味着在发生 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件时更多次尝试更改此集合。 但是，这取决于派生的类何时选择调用 <see cref="M:System.Collections.ObjectModel.ObservableCollection`1.BlockReentrancy" />。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.ClearItems">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.InsertItem(System.Int32,`0)">
      <summary>将一项插入集合中指定索引处。</summary>
      <param name="index">应插入 <paramref name="item" /> 的从零开始的索引。</param>
      <param name="item">要插入的对象。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.Move(System.Int32,System.Int32)">
      <summary>将指定索引处的项移动到集合中的新位置。</summary>
      <param name="oldIndex">从零开始的索引，指定项的新位置。</param>
      <param name="newIndex">从零开始的索引，指定项的新位置。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.MoveItem(System.Int32,System.Int32)">
      <summary>将指定索引处的项移动到集合中的新位置。</summary>
      <param name="oldIndex">从零开始的索引，指定项的新位置。</param>
      <param name="newIndex">从零开始的索引，指定项的新位置。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>通过提供的参数引发 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.CollectionChanged" /> 事件。</summary>
      <param name="e">要引发事件的参数。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>通过提供的参数引发 <see cref="E:System.Collections.ObjectModel.ObservableCollection`1.PropertyChanged" /> 事件。</summary>
      <param name="e">要引发事件的参数。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.RemoveItem(System.Int32)">
      <summary>删除集合内指定索引处的项。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ObservableCollection`1.SetItem(System.Int32,`0)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">待替换元素的从零开始的索引。</param>
      <param name="item">位于指定索引处的元素的新值。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>初始化 <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> 类的新实例，该类用作指定的 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" /> 的包装。</summary>
      <param name="list">
        <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />，用于创建 <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> 类的此实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="list" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>使用提供的参数引发 <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> 事件。</summary>
      <param name="args">要引发事件的参数。</param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>使用提供的参数引发 <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> 事件。</summary>
      <param name="args">要引发事件的参数。</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Collections.Specialized.BitVector32)">
      <summary>新实例初始化 <see cref="T:System.Collections.Specialized.BitVector32" /> 包含表示在现有的数据结构 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构。</summary>
      <param name="value">一个 <see cref="T:System.Collections.Specialized.BitVector32" /> 结构，其中包含要复制的数据。</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Collections.Specialized.BitVector32" /> 包含整数形式表示的数据结构。</summary>
      <param name="data">一个整数，表示新的数据 <see cref="T:System.Collections.Specialized.BitVector32" />。</param>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask">
      <summary>在该系列屏蔽可以用于检索中的单个位中创建的第一个掩码 <see cref="T:System.Collections.Specialized.BitVector32" /> 作为位标志设置。</summary>
      <returns>隔离中的第一个位标志的掩码 <see cref="T:System.Collections.Specialized.BitVector32" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateMask(System.Int32)">
      <summary>创建后屏蔽可以用于检索中的单个位掩码的一系列中的指定的其他掩码 <see cref="T:System.Collections.Specialized.BitVector32" /> 作为位标志设置。</summary>
      <param name="previous">指示前一个位标志的掩码。</param>
      <returns>隔离了位掩码后面的标志， <paramref name="previous" /> 指向在 <see cref="T:System.Collections.Specialized.BitVector32" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="previous" /> 指示中的最后一个位标志 <see cref="T:System.Collections.Specialized.BitVector32" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16)">
      <summary>创建第一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中的一系列节包含小整数。</summary>
      <param name="maxValue">指定新的最大值的 16 位有符号的整数 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</param>
      <returns>一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 该组可保留为介于 0 到 <paramref name="maxValue" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxValue" /> 为小于 1。</exception>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.CreateSection(System.Int16,System.Collections.Specialized.BitVector32.Section)">
      <summary>创建一个新 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 后面指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中的一系列节包含小整数。</summary>
      <param name="maxValue">指定新的最大值的 16 位有符号的整数 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</param>
      <param name="previous">上一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 中 <see cref="T:System.Collections.Specialized.BitVector32" />。</param>
      <returns>一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 该组可保留为介于 0 到 <paramref name="maxValue" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxValue" /> 为小于 1。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="previous" /> 包括在中的最后一位 <see cref="T:System.Collections.Specialized.BitVector32" />。- 或 - <paramref name="maxValue" /> 是否可以由之后的比特数来表示的最大值大于 <paramref name="previous" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Equals(System.Object)">
      <summary>确定指定的对象是否等于 <see cref="T:System.Collections.Specialized.BitVector32" />。</summary>
      <param name="o">将与当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 进行比较的对象。</param>
      <returns>true 如果指定的对象是否等于 <see cref="T:System.Collections.Specialized.BitVector32" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.GetHashCode">
      <summary>用作哈希函数 <see cref="T:System.Collections.Specialized.BitVector32" />。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.BitVector32" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.Equals(System.Collections.Specialized.BitVector32.Section)">
      <summary>确定是否指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象等同于当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</summary>
      <param name="obj">
        <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 要与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
      <returns>true 如果 <paramref name="obj" /> 参数等同于当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.Equals(System.Object)">
      <summary>确定指定的对象是否与当前相同 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</summary>
      <param name="o">将与当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 进行比较的对象。</param>
      <returns>true 如果指定的对象等同于当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.GetHashCode">
      <summary>用作当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
      <returns>当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.op_Equality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)">
      <summary>确定两个指定的 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象是否相等。</summary>
      <param name="a">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
      <param name="b">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
      <returns>true 如果 <paramref name="a" /> 和 <paramref name="b" /> 参数表示同一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象，否则， false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.op_Inequality(System.Collections.Specialized.BitVector32.Section,System.Collections.Specialized.BitVector32.Section)">
      <summary>确定两个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象具有不同的值。</summary>
      <param name="a">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
      <param name="b">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象。</param>
      <returns>true 如果 <paramref name="a" /> 和 <paramref name="b" /> 参数表示不同 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.ToString">
      <summary>返回表示当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 的字符串。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.Section.ToString(System.Collections.Specialized.BitVector32.Section)">
      <summary>返回一个字符串，表示指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</summary>
      <param name="value">
        <see cref="T:System.Collections.Specialized.BitVector32.Section" /> 来表示。</param>
      <returns>一个字符串，表示指定 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.ToString">
      <summary>返回表示当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</summary>
      <returns>表示当前 <see cref="T:System.Collections.Specialized.BitVector32" /> 的字符串。</returns>
    </member>
    <member name="M:System.Collections.Specialized.BitVector32.ToString(System.Collections.Specialized.BitVector32)">
      <summary>返回一个字符串，表示指定 <see cref="T:System.Collections.Specialized.BitVector32" />。</summary>
      <param name="value">
        <see cref="T:System.Collections.Specialized.BitVector32" /> 来表示。</param>
      <returns>一个字符串，表示指定 <see cref="T:System.Collections.Specialized.BitVector32" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.CollectionsUtil" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable">
      <summary>创建一个新的不区分大小写实例的 <see cref="T:System.Collections.Hashtable" /> 类具有默认初始容量。</summary>
      <returns>不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类具有默认初始容量。</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Collections.IDictionary)">
      <summary>将项从指定字典复制到不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类具有相同的初始容量与复制的项数。</summary>
      <param name="d">
        <see cref="T:System.Collections.IDictionary" /> 将复制到一个新不区分大小写 <see cref="T:System.Collections.Hashtable" />。</param>
      <returns>不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类，其中包含从指定的项 <see cref="T:System.Collections.IDictionary" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveHashtable(System.Int32)">
      <summary>创建一个新的不区分大小写实例的 <see cref="T:System.Collections.Hashtable" /> 类具有指定的初始容量。</summary>
      <param name="capacity">大概项数， <see cref="T:System.Collections.Hashtable" /> 最初可包含。</param>
      <returns>不区分大小写的新实例 <see cref="T:System.Collections.Hashtable" /> 类具有指定的初始容量。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.CollectionsUtil.CreateCaseInsensitiveSortedList">
      <summary>创建的新实例 <see cref="T:System.Collections.SortedList" /> 忽略大小写的字符串的类。</summary>
      <returns>新实例 <see cref="T:System.Collections.SortedList" /> 忽略大小写的字符串的类。</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor">
      <summary>创建一个空区分大小写 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)">
      <summary>创建一个空 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 时指定的区分大小写。</summary>
      <param name="caseInsensitive">一个布尔值，表示是否 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 不区分大小写。</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)">
      <summary>创建区分大小写 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 与指定的初始大小。</summary>
      <param name="initialSize">大概项数， <see cref="T:System.Collections.Specialized.HybridDictionary" /> 最初可包含。</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)">
      <summary>创建 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 与指定的初始大小和区分大小写。</summary>
      <param name="initialSize">大概项数， <see cref="T:System.Collections.Specialized.HybridDictionary" /> 最初可包含。</param>
      <param name="caseInsensitive">一个布尔值，表示是否 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 不区分大小写。</param>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)">
      <summary>将添加一个具有指定的键和值转换为项 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要添加的条目的值。 该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">中已存在具有相同键的条目 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Clear">
      <summary>移除所有项从 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否包含特定键。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中定位的键。</param>
      <returns>true 如果 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 包含一个具有指定的项键; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)">
      <summary>副本 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 到一维条目 <see cref="T:System.Array" /> 实例的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 的目标 <see cref="T:System.Collections.DictionaryEntry" /> 从复制对象 <see cref="T:System.Collections.Specialized.HybridDictionary" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 源中的元素数目 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 大于从的可用空间 <paramref name="arrayIndex" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">源类型 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> ，它循环访问 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)">
      <summary>具有指定键中移除的项 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <param name="key">要移除的条目的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> ，它循环访问 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.GetEnumerator">
      <summary>返回一个循环访问 <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 整个 <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合。</returns>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)">
      <summary>将键/值对插入到指定索引处的集合中。</summary>
      <param name="index">键/值对应在从零开始的索引处插入。</param>
      <param name="key">用作要添加的元素的键的对象。</param>
      <param name="value">用作要添加的元素的值的对象。  该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">中已存在具有相同键的元素 <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合是只读的。- 或 -<see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ICollection.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合是只读的。- 或 - <see cref="T:System.Collections.Specialized.IOrderedDictionary" /> 集合具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor">
      <summary>创建一个空 <see cref="T:System.Collections.Specialized.ListDictionary" /> 使用默认比较器。</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.#ctor(System.Collections.IComparer)">
      <summary>创建一个空 <see cref="T:System.Collections.Specialized.ListDictionary" /> 使用指定的比较器。</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。- 或 - null 若要使用默认比较器，这是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。</param>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Add(System.Object,System.Object)">
      <summary>将添加一个具有指定的键和值转换为项 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要添加的条目的值。 该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">中已存在具有相同键的条目 <see cref="T:System.Collections.Specialized.ListDictionary" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Clear">
      <summary>移除所有项从 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Contains(System.Object)">
      <summary>确定 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否包含特定键。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中定位的键。</param>
      <returns>true 如果 <see cref="T:System.Collections.Specialized.ListDictionary" /> 包含一个具有指定的项键; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.CopyTo(System.Array,System.Int32)">
      <summary>副本 <see cref="T:System.Collections.Specialized.ListDictionary" /> 到一维条目 <see cref="T:System.Array" /> 实例的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 的目标 <see cref="T:System.Collections.DictionaryEntry" /> 从复制对象 <see cref="T:System.Collections.Specialized.ListDictionary" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 源中的元素数目 <see cref="T:System.Collections.Specialized.ListDictionary" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">源类型 <see cref="T:System.Collections.Specialized.ListDictionary" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> ，它循环访问 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IDictionaryEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.Remove(System.Object)">
      <summary>具有指定键中移除的项 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
      <param name="key">要移除的条目的键。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.ListDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> ，它循环访问 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.ListDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor">
      <summary>初始化为空的 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有默认的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有默认初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="hashProvider">
        <see cref="T:System.Collections.IHashCodeProvider" />，它将为 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有指定的初始容量，并使用默认哈希代码提供程序和默认比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例最初可以包含的项的大概数目。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空、具有指定的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象最初可包含的大概项数。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例为空且具有指定的初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例最初可以包含的项的大概数目。</param>
      <param name="hashProvider">
        <see cref="T:System.Collections.IHashCodeProvider" />，它将为 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 类的新实例，该实例可序列化且使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化新 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，包含与新 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)">
      <summary>将具有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中。</summary>
      <param name="name">要添加的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <param name="value">要添加的项的 <see cref="T:System.Object" /> 值。 该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseClear">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有项。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项值。</summary>
      <param name="index">要获取的值的从零开始索引。</param>
      <returns>
        <see cref="T:System.Object" />，它表示指定索引处的项值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中第一个具有指定键的项值。</summary>
      <param name="name">要获取的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <returns>如果找到了表示第一个具有指定键的项值的 <see cref="T:System.Object" />，则为该对象；否则为 null。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys">
      <summary>返回 <see cref="T:System.String" /> 数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</summary>
      <returns>
        <see cref="T:System.String" /> 数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues">
      <summary>返回 <see cref="T:System.Object" /> 数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</summary>
      <returns>
        <see cref="T:System.Object" /> 数组，它包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)">
      <summary>返回指定类型的数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</summary>
      <param name="type">表示要返回的数组类型的 <see cref="T:System.Type" />。</param>
      <returns>指定类型的数组，该数组包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Type" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项键。</summary>
      <param name="index">要获取的键的从零开始的索引。</param>
      <returns>表示指定索引处的项键的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys">
      <summary>获取一个值，通过该值指示 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例是否包含键不为 null 的项。</summary>
      <returns>如果 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例包含键不为 null 的项，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中具有指定键的项。</summary>
      <param name="name">要移除的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)">
      <summary>设置 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的指定索引处的项值。</summary>
      <param name="index">要设置的项的从零开始的索引。</param>
      <param name="value">表示要设置的项的新值的 <see cref="T:System.Object" />。 该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)">
      <summary>为 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中第一个具有指定键的项设置值（如果有这样的项）；否则将具有指定键和值的项添加到 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中。</summary>
      <param name="name">要设置的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <param name="value">表示要设置的项的新值的 <see cref="T:System.Object" />。 该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例所需的数据。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，该对象包含序列化 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，该对象包含与 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Get(System.Int32)">
      <summary>获取集合的指定索引处的键。</summary>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <returns>一个 <see cref="T:System.String" /> 包含集合的指定索引处的键。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.GetEnumerator">
      <summary>返回循环访问 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的枚举数。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 源中的元素数目 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">源类型 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例无效。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 -源中的元素数目 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">源类型 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有默认初始容量，并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空、具有默认的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有默认初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="hashProvider">
        <see cref="T:System.Collections.IHashCodeProvider" /> 将为 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>将项从指定的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制到一个新的 <see cref="T:System.Collections.Specialized.NameValueCollection" />，这个新集合的初始容量与复制的项数相等，并使用与源集合相同的哈希代码提供程序和比较器。</summary>
      <param name="col">要复制到新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有指定的初始容量，并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 可包含的初始项数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空、具有指定的初始容量并使用指定的 <see cref="T:System.Collections.IEqualityComparer" /> 对象。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象可包含的初始项数。</param>
      <param name="equalityComparer">
        <see cref="T:System.Collections.IEqualityComparer" /> 对象，用于确定两个键是否相等，并为集合中的键生成哈希代码。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例为空且具有指定的初始容量，并使用指定的哈希代码提供程序和指定的比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 可包含的初始项数。</param>
      <param name="hashProvider">
        <see cref="T:System.Collections.IHashCodeProvider" /> 将为 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键提供哈希代码。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Int32,System.Collections.Specialized.NameValueCollection)">
      <summary>将项从指定的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制到一个新的 <see cref="T:System.Collections.Specialized.NameValueCollection" />，这个新集合使用指定的初始容量或与具有与复制的项数相等的初始容量（两者中较大的一个），并使用不区分大小写的默认哈希代码提供程序和不区分大小写的默认比较器。</summary>
      <param name="capacity">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 可包含的初始项数。</param>
      <param name="col">要复制到新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> 小于零。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="col" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 类的新实例，该实例可序列化且使用指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，包含序列化新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，包含与新 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 实例关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection)">
      <summary>将指定 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的项复制到当前 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</summary>
      <param name="c">要复制到当前 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="c" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Add(System.String,System.String)">
      <summary>将具有指定名称和值的项添加到 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</summary>
      <param name="name">要添加的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <param name="value">要添加的项的 <see cref="T:System.String" /> 值。 该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Clear">
      <summary>使缓存数组无效，并将所有项从 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中移除。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="dest">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="dest" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dest" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dest" /> 是多维的。- 或 - 源中的元素数目 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="dest" />。</exception>
      <exception cref="T:System.InvalidCastException">源类型 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 无法自动转换为目标类型 <paramref name="dest" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值，这些值已合并为一个以逗号分隔的列表。</summary>
      <param name="index">项的从零开始的索引，该项包含要从集合中获取的值。</param>
      <returns>如果找到，则为一个 <see cref="T:System.String" />，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值的列表（此列表以逗号分隔）；否则为 null。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Get(System.String)">
      <summary>获取与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值，这些值已合并为一个以逗号分隔的列表。</summary>
      <param name="name">项的 <see cref="T:System.String" /> 键，该项包含要获取的值。 键可以是 null。</param>
      <returns>如果找到，则为一个 <see cref="T:System.String" />，包含与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值的列表（此列表以逗号分隔）；否则为 null。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetKey(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 的指定索引处的键。</summary>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <returns>如果找到，则为一个 <see cref="T:System.String" />，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的键；否则为 null。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值。</summary>
      <param name="index">项的从零开始的索引，该项包含要从集合中获取的值。</param>
      <returns>如果找到，则为一个 <see cref="T:System.String" /> 数组，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的值；否则为 null。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.GetValues(System.String)">
      <summary>获取与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值。</summary>
      <param name="name">项的 <see cref="T:System.String" /> 键，该项包含要获取的值。 键可以是 null。</param>
      <returns>如果找到，则为一个 <see cref="T:System.String" /> 数组，包含与 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的指定键关联的值；否则为 null。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.HasKeys">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 是否包含非 null 的键。</summary>
      <returns>如果 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 包含非 null 的键，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays">
      <summary>将集合的缓存数组重置为 null。</summary>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Remove(System.String)">
      <summary>移除 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中具有指定键的项。</summary>
      <param name="name">要移除的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NameValueCollection.Set(System.String,System.String)">
      <summary>设置 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中某个项的值。</summary>
      <param name="name">要向其添加新值的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <param name="value">
        <see cref="T:System.Object" />，表示要添加到指定项的新值。 该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)">
      <summary>初始化描述 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> 更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 此属性必须设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />。</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)">
      <summary>初始化描述多项更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 该操作可以设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</param>
      <param name="changedItems">受此更改影响的项。</param>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)">
      <summary>初始化描述多项 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 只能设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</param>
      <param name="newItems">要替换原始项的新项。</param>
      <param name="oldItems">被替换的原始项。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Replace。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="oldItems" /> 或 <paramref name="newItems" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>初始化描述多项 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 只能设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</param>
      <param name="newItems">要替换原始项的新项。</param>
      <param name="oldItems">被替换的原始项。</param>
      <param name="startingIndex">要替换的各项中第一项的索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Replace。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="oldItems" /> 或 <paramref name="newItems" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)">
      <summary>初始化 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例，该类描述多项更改或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" /> 更改。</summary>
      <param name="action">引起该事件的操作。 该操作可以设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</param>
      <param name="changedItems">受此更改影响的项。</param>
      <param name="startingIndex">发生更改处的索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Reset、Add 或 Remove；如果 <paramref name="action" /> 是 Reset，并且要么 <paramref name="changedItems" /> 不是 null，要么 <paramref name="startingIndex" /> 不是 –1；或者如果 action 是 Add 或 Remove，并且 <paramref name="startingIndex" /> 小于 –1。</exception>
      <exception cref="T:System.ArgumentNullException">如果 <paramref name="action" /> 是 Add 或 Remove，并且 <paramref name="changedItems" /> 是 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)">
      <summary>初始化描述多项 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> 更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 只能设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />。</param>
      <param name="changedItems">受此更改影响的项。</param>
      <param name="index">已更改的项的新索引。</param>
      <param name="oldIndex">已更改的项的旧索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不为 Move 或者 <paramref name="index" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)">
      <summary>初始化描述单项更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 该操作可以设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</param>
      <param name="changedItem">受更改影响的项。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Reset、Add 或 Remove；或者，如果 <paramref name="action" /> 是 Reset，并且 <paramref name="changedItem" /> 不是 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)">
      <summary>初始化描述单项更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 该操作可以设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset" />、<see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add" /> 或 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove" />。</param>
      <param name="changedItem">受更改影响的项。</param>
      <param name="index">发生更改处的索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Reset、Add 或 Remove；或者，如果 <paramref name="action" /> 是 Reset，并且 <paramref name="changedItems" /> 不是 null，或者 <paramref name="index" /> 不是 –1。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)">
      <summary>初始化描述单项 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" /> 更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 只能设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />。</param>
      <param name="changedItem">受更改影响的项。</param>
      <param name="index">已更改的项的新索引。</param>
      <param name="oldIndex">已更改的项的旧索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不为 Move 或者 <paramref name="index" /> 小于 0。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)">
      <summary>初始化描述单项 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 只能设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</param>
      <param name="newItem">要替换原始项的新项。</param>
      <param name="oldItem">被替换的原始项。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Replace。</exception>
    </member>
    <member name="M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)">
      <summary>初始化描述单项 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" /> 更改的 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> 类的新实例。</summary>
      <param name="action">引起该事件的操作。 可以设置为 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />。</param>
      <param name="newItem">要替换原始项的新项。</param>
      <param name="oldItem">被替换的原始项。</param>
      <param name="index">要被替换的项的索引。</param>
      <exception cref="T:System.ArgumentException">如果 <paramref name="action" /> 不是 Replace。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Collections.IEqualityComparer)">
      <summary>新实例初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类使用指定的比较器。</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。- 或 - null 若要使用默认比较器，这是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类使用指定的初始容量。</summary>
      <param name="capacity">初始元素数的 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合可以包含。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Int32,System.Collections.IEqualityComparer)">
      <summary>新实例初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 类使用指定的初始容量和比较器。</summary>
      <param name="capacity">初始元素数的 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合可以包含。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" />，用于确定两个键是否相等。- 或 - null 若要使用默认比较器，这是每个键实现 <see cref="M:System.Object.Equals(System.Object)" />。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> ，该类使用指定的可序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化所需的信息 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Specialized.OrderedDictionary" /> 关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Add(System.Object,System.Object)">
      <summary>将添加一个具有指定的键和值转换为项 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 具有最小可用索引的集合。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要添加的条目的值。 此值可为 null。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.AsReadOnly">
      <summary>返回当前的只读副本 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <returns>当前的只读副本 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Clear">
      <summary>移除所有元素从 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Contains(System.Object)">
      <summary>确定是否 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合中包含特定键。</summary>
      <param name="key">要在中定位的键 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</param>
      <returns>true 如果 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合包含具有指定的元素键; 否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.CopyTo(System.Array,System.Int32)">
      <summary>副本 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 元素到一维 <see cref="T:System.Array" /> 中指定索引处的对象。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 对象，该目标的对象 <see cref="T:System.Collections.DictionaryEntry" /> 从复制对象 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 循环访问的对象 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并返回序列化所需的数据 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化所需的信息 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Collections.Specialized.OrderedDictionary" /> 关联的序列化流的源和目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Insert(System.Int32,System.Object,System.Object)">
      <summary>将新项插入 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 具有指定的键和值的指定索引处的集合。</summary>
      <param name="index">应在从零开始的索引处插入元素。</param>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要添加的条目的值。 该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出范围。</exception>
      <exception cref="T:System.NotSupportedException">此集合为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化后由反序列化事件回调。</summary>
      <param name="sender">反序列化事件源。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 关联与当前对象 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 是无效的集合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.Remove(System.Object)">
      <summary>具有指定键中移除的项 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <param name="key">要移除的条目的键。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.RemoveAt(System.Int32)">
      <summary>移除从指定索引处的项 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.OrderedDictionary.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IDictionaryEnumerator" /> 循环访问的对象 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 对象 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</returns>
    </member>
    <member name="M:System.Collections.Specialized.OrderedDictionary.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化后由反序列化事件回调。</summary>
      <param name="sender">反序列化事件源。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.StringCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Add(System.String)">
      <summary>将一个字符串添加到末尾 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <param name="value">要添加到结尾的字符串 <see cref="T:System.Collections.Specialized.StringCollection" />。 该值可以为 null。</param>
      <returns>从零开始的索引，在该位置插入新元素。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.AddRange(System.String[])">
      <summary>将字符串数组的元素复制到的末尾 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <param name="value">要将添加到结尾的字符串数组 <see cref="T:System.Collections.Specialized.StringCollection" />。 不能是数组本身 null 但它可以包含的元素 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Clear">
      <summary>删除中的所有字符串 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Contains(System.String)">
      <summary>确定指定的字符串是否在 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <param name="value">要在中找到的字符串 <see cref="T:System.Collections.Specialized.StringCollection" />。 该值可以为 null。</param>
      <returns>如果在 true 中找到 <paramref name="value" />，则为 <see cref="T:System.Collections.Specialized.StringCollection" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.CopyTo(System.String[],System.Int32)">
      <summary>将复制整个 <see cref="T:System.Collections.Specialized.StringCollection" /> 到字符串，从目标数组的指定索引处开始的一维数组的值。</summary>
      <param name="array">从复制的元素目标的一维字符串数组 <see cref="T:System.Collections.Specialized.StringCollection" />。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 源中的元素数目 <see cref="T:System.Collections.Specialized.StringCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">源类型 <see cref="T:System.Collections.Specialized.StringCollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.Specialized.StringEnumerator" /> ，它循环访问 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <returns>用于 <see cref="T:System.Collections.Specialized.StringEnumerator" /> 的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.IndexOf(System.String)">
      <summary>搜索指定的字符串，并返回内的第一个匹配项的从零开始索引 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <param name="value">要查找的字符串。 该值可以为 null。</param>
      <returns>第一个匹配项的从零开始索引 <paramref name="value" /> 中 <see cref="T:System.Collections.Specialized.StringCollection" />, ，如果找到; 否则为-1。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Insert(System.Int32,System.String)">
      <summary>将字符串插入 <see cref="T:System.Collections.Specialized.StringCollection" /> 中指定索引处。</summary>
      <param name="index">从零开始的索引，到 <paramref name="value" /> 插入。</param>
      <param name="value">要插入的字符串。 该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.Remove(System.String)">
      <summary>移除从特定的字符串的第一个匹配项 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <param name="value">要移除的字符串 <see cref="T:System.Collections.Specialized.StringCollection" />。 该值可以为 null。</param>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.RemoveAt(System.Int32)">
      <summary>删除指定索引处的字符串 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <param name="index">要删除的字符串的从零开始的索引。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>从目标数组的指定索引处开始将整个 <see cref="T:System.Collections.Specialized.StringCollection" /> 复制到兼容的一维 <see cref="T:System.Array" />。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Collections.Specialized.StringCollection" /> 复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 源中的元素数目 <see cref="T:System.Collections.Specialized.StringCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">源类型 <see cref="T:System.Collections.Specialized.StringCollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> ，它循环访问 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Add(System.Object)">
      <summary>将对象添加到 <see cref="T:System.Collections.Specialized.StringCollection" /> 的结尾处。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的结尾处的 <see cref="T:System.Collections.Specialized.StringCollection" />。 该值可以为 null。</param>
      <returns>
        <see cref="T:System.Collections.Specialized.StringCollection" /> 开始的索引， <paramref name="value" /> 增添了。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringCollection" /> 为只读。- 或 - <see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定某元素是否在 <see cref="T:System.Collections.Specialized.StringCollection" /> 中。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.Specialized.StringCollection" />。 该值可以为 null。</param>
      <returns>如果在 true 中找到 <paramref name="value" />，则为 <see cref="T:System.Collections.Specialized.StringCollection" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>搜索指定 <see cref="T:System.Object" /> 并返回整个内的第一个匹配项的从零开始索引 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <param name="value">要在 <see cref="T:System.Object" /> 中定位的 <see cref="T:System.Collections.Specialized.StringCollection" />。 该值可以为 null。</param>
      <returns>如果找到，则为整个 <paramref name="value" /> 中 <see cref="T:System.Collections.Specialized.StringCollection" /> 第一个匹配项的从零开始的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将元素插入 <see cref="T:System.Collections.Specialized.StringCollection" /> 的指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入的 <see cref="T:System.Object" />。 该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringCollection" /> 为只读。- 或 - <see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.Specialized.StringCollection" /> 中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从 <see cref="T:System.Object" /> 移除的 <see cref="T:System.Collections.Specialized.StringCollection" />。 该值可以为 null。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringCollection" /> 为只读。- 或 - <see cref="T:System.Collections.Specialized.StringCollection" /> 具有固定的大小。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Collections.Specialized.StringDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Add(System.String,System.String)">
      <summary>将添加一个具有指定的键和值转换为项 <see cref="T:System.Collections.Specialized.StringDictionary" />。</summary>
      <param name="key">要添加的条目的键。</param>
      <param name="value">要添加的条目的值。 该值可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">中已存在具有相同键的条目 <see cref="T:System.Collections.Specialized.StringDictionary" />。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringDictionary" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Clear">
      <summary>移除所有项从 <see cref="T:System.Collections.Specialized.StringDictionary" />。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringDictionary" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsKey(System.String)">
      <summary>确定如果 <see cref="T:System.Collections.Specialized.StringDictionary" /> 包含特定键。</summary>
      <param name="key">要在 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中定位的键。</param>
      <returns>true 如果 <see cref="T:System.Collections.Specialized.StringDictionary" /> 包含一个具有指定的项键; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">键为 null。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.ContainsValue(System.String)">
      <summary>确定如果 <see cref="T:System.Collections.Specialized.StringDictionary" /> 包含特定值。</summary>
      <param name="value">要在 <see cref="T:System.Collections.Specialized.StringDictionary" /> 中定位的值。 该值可以为 null。</param>
      <returns>如果 true 包含具有指定值的元素，则为 <see cref="T:System.Collections.Specialized.StringDictionary" />；否则为 false。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.CopyTo(System.Array,System.Int32)">
      <summary>将字符串字典值复制到一维 <see cref="T:System.Array" /> 实例的指定索引位置。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从复制的值的目标 <see cref="T:System.Collections.Specialized.StringDictionary" />。</param>
      <param name="index">复制开始处的数组中的索引。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 中的元素数 <see cref="T:System.Collections.Specialized.StringDictionary" /> 大于从的可用空间 <paramref name="index" /> 到末尾 <paramref name="array" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 <paramref name="array" /> 的下限。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.GetEnumerator">
      <summary>返回循环访问字符串字典的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> ，它循环访问字符串字典。</returns>
    </member>
    <member name="M:System.Collections.Specialized.StringDictionary.Remove(System.String)">
      <summary>从字符串字典中移除带有指定键的条目。</summary>
      <param name="key">要移除的条目的键。</param>
      <exception cref="T:System.ArgumentNullException">键为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Collections.Specialized.StringDictionary" /> 为只读。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Collections.Specialized.StringEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类不使用任何参数。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AddingNewEventArgs" /> 类为新项使用指定的对象。</summary>
      <param name="newObject">
        <see cref="T:System.Object" /> 要用作新项的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，其值提供一个布尔值。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，一个 8 位无符号的整数的值提供的。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，其值提供一个 Unicode 字符。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，双精度浮点数的值提供的。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，16 位有符号的整数的值提供的。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，32 位有符号的整数的值提供的。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，64 位有符号的整数的值提供的。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，给定对象作为其值。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，单精度浮点数的值提供的。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类，其值为给定的字符串。</summary>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 类中，给定的值，其类型。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 的 <paramref name="value" /> 参数。</param>
      <param name="value">此属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 是否等同于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</summary>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
      <returns>如果指定的 true 等于当前的 <see cref="T:System.ComponentModel.AmbientValueAttribute" />，则为 <see cref="T:System.ComponentModel.AmbientValueAttribute" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.AmbientValueAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ArrayConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">到的区域性 <paramref name="value" /> 将被转换。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的数组类型的属性的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的数组类型。</param>
      <param name="attributes">类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 与数组中，公开的属性或 null 是否存在任何属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 应调用来查找此对象的属性。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 类的新实例。</summary>
      <param name="error">异步操作过程中发生任何错误。</param>
      <param name="cancelled">一个值，该值指示是否已取消异步操作。</param>
      <param name="userState">可选的用户提供的状态对象传递给 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" /> 方法。</param>
    </member>
    <member name="M:System.ComponentModel.AsyncCompletedEventArgs.RaiseExceptionIfNecessary">
      <summary>如果异步操作失败，则引发用户提供的异常。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 属性为 true。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 属性已设置由异步操作。<see cref="P:System.Exception.InnerException" /> 属性保存对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Finalize">
      <summary>完成异步操作。</summary>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.OperationCompleted">
      <summary>结束异步操作的生存期。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 已被调用过此任务。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>在适合于应用程序模型的线程或上下文中调用委托。</summary>
      <param name="d">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</param>
      <param name="arg">
        <paramref name="d" /> 参数中包含的委托的一个参数。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> 方法已被调用过此任务。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)">
      <summary>结束异步操作的生存期。</summary>
      <param name="d">一个用于包装操作结束时要调用的委托的 <see cref="T:System.Threading.SendOrPostCallback" /> 对象。</param>
      <param name="arg">
        <paramref name="d" /> 参数中包含的委托的一个参数。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> 已被调用过此任务。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)">
      <summary>返回 <see cref="T:System.ComponentModel.AsyncOperation" /> 用于跟踪特定的异步操作的持续时间。</summary>
      <param name="userSuppliedState">用于将客户端状态，如任务 ID，一种关联与特定的异步操作的对象。</param>
      <returns>
        <see cref="T:System.ComponentModel.AsyncOperation" /> 可用来跟踪对异步方法调用的持续时间。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.AttributeCollection" /> 类的新实例。</summary>
      <param name="attributes">类型的数组 <see cref="T:System.Attribute" /> 提供此集合的特性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributes" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary>确定该特性集合是否具有指定的属性。</summary>
      <param name="attribute">
        <see cref="T:System.Attribute" /> 要在集合中查找。</param>
      <returns>true 如果集合包含的属性或类型的属性，则默认属性否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary>确定此属性集合是否包含的特性数组中的所有指定的属性。</summary>
      <param name="attributes">类型的数组 <see cref="T:System.Attribute" /> 要在集合中查找。</param>
      <returns>true 如果集合包含所有属性;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合复制到一个数组中指定索引处开始。</summary>
      <param name="array">要将集合复制到的 <see cref="T:System.Array" />。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary>创建一个新 <see cref="T:System.ComponentModel.AttributeCollection" /> 从现有 <see cref="T:System.ComponentModel.AttributeCollection" />。</summary>
      <param name="existing">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 从中创建副本。</param>
      <param name="newAttributes">类型的数组 <see cref="T:System.Attribute" /> 提供此集合的特性。 可以为 null。</param>
      <returns>一个新 <see cref="T:System.ComponentModel.AttributeCollection" /> ，它是一份 <paramref name="existing" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="existing" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary>返回的默认 <see cref="T:System.Attribute" /> 的给定 <see cref="T:System.Type" />。</summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> 要检索的属性。</param>
      <returns>默认值 <see cref="T:System.Attribute" /> 的给定 <paramref name="attributeType" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary>获取此集合的枚举器。</summary>
      <returns>类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary>确定指定的属性是否在集合中的特性相同。</summary>
      <param name="attribute">一个实例 <see cref="T:System.Attribute" /> 要与此集合中的属性进行比较。</param>
      <returns>true 如果该属性包含在集合内，且具有相同的值为属性集合中的否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary>确定指定数组中的属性是否在集合中的特性相同。</summary>
      <param name="attributes">一个数组 <see cref="T:System.CodeDom.MemberAttributes" /> 要与此集合中的属性进行比较。</param>
      <returns>true 如果数组中的所有属性集合中包含与集合中的具有相同值作为属性否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 具有给定的类型名称的类。</summary>
      <param name="typeName">要指定的类型的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 用给定的类型名称和属性名称。</summary>
      <param name="typeName">要指定的类型的名称。</param>
      <param name="propertyName">将为其检索特性的属性的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> 具有给定类型的类。</summary>
      <param name="type">要指定的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.CancelAsync">
      <summary>请求取消的挂起的后台操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> 为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="percentProgress">从 0 到 100 的后台操作已完成百分比。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 属性设置为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)">
      <summary>引发 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件。</summary>
      <param name="percentProgress">从 0 到 100 的后台操作已完成百分比。</param>
      <param name="userState">状态对象传递给 <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> 属性设置为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync">
      <summary>开始执行后台操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 为 true。</exception>
    </member>
    <member name="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)">
      <summary>开始执行后台操作。</summary>
      <param name="argument">使用后台操作以在中执行的参数 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件处理程序。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> 为 true。</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BaseNumberConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>确定是否此转换器可以将给定的源类型的对象转换为该转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> 表示想要转换的类型。</param>
      <returns>true 如果该转换器能够执行该操作;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="t">一个 <see cref="T:System.Type" /> ，表示要转换的类型。</param>
      <returns>true 如果该转换器能够执行该操作;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的对象转换为转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，指定用于表示该数字的区域性。</param>
      <param name="value">要转换的对象。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.Exception">
        <paramref name="value" /> 不是有效的值为目标类型。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将指定的对象转换为另一种类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，指定用于表示该数字的区域性。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类，具有一个布尔值。</summary>
      <param name="bindable">true 若要将属性用于绑定;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="bindable">true 若要将属性用于绑定;否则为 false。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类之一 <see cref="T:System.ComponentModel.BindableSupport" /> 值。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary>初始化 <see cref="T:System.ComponentModel.BindableAttribute" /> 类的新实例。</summary>
      <param name="flags">
        <see cref="T:System.ComponentModel.BindableSupport" /> 值之一。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.BindingDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.BindableAttribute" /> 对象是否相等。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>true 如果指定 <see cref="T:System.ComponentModel.BindableAttribute" /> 是否等于当前 <see cref="T:System.ComponentModel.BindableAttribute" />; false 是否不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary>用作哈希函数 <see cref="T:System.ComponentModel.BindableAttribute" /> 类。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.BindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.BindingList`1" /> 类使用指定的列表。</summary>
      <param name="list">
        <see cref="T:System.Collections.Generic.IList`1" /> 要中包含的项数 <see cref="T:System.ComponentModel.BindingList`1" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary>将新项添加到集合。</summary>
      <returns>添加到列表的项。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> 属性设置为 false。- 或 -找不到当前项类型的公共默认构造函数。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary>将新项添加到集合的末尾。</summary>
      <returns>已添加到集合中的项。</returns>
      <exception cref="T:System.InvalidCastException">新的项不是与中包含的对象相同的类型 <see cref="T:System.ComponentModel.BindingList`1" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>如果重写派生类; 中的项进行排序否则，将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> ，它指定要作为排序依据的属性。</param>
      <param name="direction">其中一个 <see cref="T:System.ComponentModel.ListSortDirection" />  值。</param>
      <exception cref="T:System.NotSupportedException">在派生类中不重写方法。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary>放弃挂起的新项。</summary>
      <param name="itemIndex">索引的要添加新项 </param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary>向集合提交挂起的新项。</summary>
      <param name="itemIndex">要添加新项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>如果在派生类中; 实现了搜索具有指定值，指定的属性描述符的项的索引的搜索否则为 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="prop">要搜索的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key">值 <paramref name="property" /> 相匹配。</param>
      <returns>与属性描述符相匹配，并包含指定的值的项的从零开始的索引。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> 不会覆盖在派生类中。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary>在列表中的指定索引处插入指定的项。</summary>
      <param name="index">项是要插入的从零开始索引。</param>
      <param name="item">要插入列表中的项。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary>移除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">要删除新添加的项和 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> 设置为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary>删除与应用的任何排序 <see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 如果实现了排序，在派生类中; 否则，将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <exception cref="T:System.NotSupportedException">在派生类中不重写方法。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型事件的 <see cref="F:System.ComponentModel.ListChangedType.Reset" />。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary>引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型事件的 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> 指定位置处的项。</summary>
      <param name="position">要重置的项的从零开始索引。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary>使用指定项替换指定索引处的项。</summary>
      <param name="index">要替换的项的从零开始的索引。</param>
      <param name="item">指定索引处的项的新值。 对于引用类型，该值可以为 null。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 大于 <see cref="P:System.Collections.ObjectModel.Collection`1.Count" />。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为搜索条件添加。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary>向列表添加新项。 有关详细信息，请参阅<see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>添加到列表的项。</returns>
      <exception cref="T:System.NotSupportedException">不支持此方法。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>对基于列表进行排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" />。 有关此成员的完整说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为排序依据。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />。</summary>
      <param name="prop">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要搜索的。</param>
      <param name="key">值 <paramref name="property" /> 要搜索的参数。</param>
      <returns>具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />。</summary>
      <param name="prop">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中删除。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /></summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.BooleanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为布尔对象使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>true 如果此对象可以执行转换，则否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的值对象转换为布尔值的对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要转换为的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取布尔数据类型的标准值集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 保存一组标准的有效值。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法为独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的穷举列表。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可以从列表中选取的值的标准集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 可以调用来查找一组公共对象支持的值。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 类的新实例。</summary>
      <param name="browsable">true 如果在设计时; 可修改属性或事件否则为 false。 默认值为 true。</param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="obj">要比较的另一个对象。</param>
      <returns>如果 true 与此实例相等，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.CancelEventArgs" /> 类 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 属性设置为 false。</summary>
    </member>
    <member name="M:System.ComponentModel.CancelEventArgs.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.CancelEventArgs" /> 类 <see cref="P:System.ComponentModel.CancelEventArgs.Cancel" /> 属性设置为给定的值。</summary>
      <param name="cancel">true 若要取消事件;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 类使用的类别名称默认值。</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.CategoryAttribute" /> 类使用指定的类别名称。</summary>
      <param name="category">类别的名称。</param>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.CategoryAttribute" />...</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>返回此属性的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>查找指定类别的本地化名称。</summary>
      <param name="value">要查找的类别的的标识符。</param>
      <returns>该类别的本地化的名称或 null 如果本地化的名称不存在。</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CharConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为 Unicode 字符对象使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的对象转换为 Unicode 字符对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">到的区域性 <paramref name="value" /> 将被转换。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为 Unicode 字符对象使用的参数。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">到的区域性 <paramref name="value" /> 将被转换。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> 类的新实例。</summary>
      <param name="action">其中一个 <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值，该值指定集合的发生更改。</param>
      <param name="element">
        <see cref="T:System.Object" /> ，它指定的集合发生更改的实例。</param>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CollectionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">区域性 <paramref name="value" /> 将被转换。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。 此参数必须继承自 <see cref="T:System.Collections.ICollection" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取使用指定的上下文和属性值参数所指定的数组类型的属性的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的数组类型。</param>
      <param name="attributes">类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 null。 此方法始终返回 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>false 因为 <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> 不应调用来查找此对象的属性。 此方法从不返回 true。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类不使用任何参数。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类使用指定的数据源。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 类使用指定的数据源和数据成员。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
      <param name="dataMember">要用作数据源的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary>确定是否指定 <see cref="T:System.Object" /> 是否等于当前 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例。</summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要与当前 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 实例 </param>
      <returns>true 如果该对象是否等于当前实例;否则为 false, ，指示它们是否不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.Component.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Component" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Component" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Component" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Component.Finalize">
      <summary>在通过垃圾回收将 <see cref="T:System.ComponentModel.Component" /> 回收之前，释放非托管资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Component.GetService(System.Type)">
      <summary>返回一个对象，该对象表示由 <see cref="T:System.ComponentModel.Component" /> 或它的 <see cref="T:System.ComponentModel.Container" /> 提供的服务。</summary>
      <param name="service">由提供的服务 <see cref="T:System.ComponentModel.Component" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示由提供的服务 <see cref="T:System.ComponentModel.Component" />, ，或 null 如果 <see cref="T:System.ComponentModel.Component" /> 不提供指定的服务。</returns>
    </member>
    <member name="M:System.ComponentModel.Component.ToString">
      <summary>返回 <see cref="T:System.String" /> 包含名称的 <see cref="T:System.ComponentModel.Component" />, ，如果有的话。 不应重写此方法。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含名称的 <see cref="T:System.ComponentModel.Component" />, (如果有） 或 null 如果 <see cref="T:System.ComponentModel.Component" /> 是未命名。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.#ctor(System.ComponentModel.IComponent[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ComponentCollection" /> 类使用的组件指定的数组。</summary>
      <param name="components">一个数组 <see cref="T:System.ComponentModel.IComponent" /> 对象来初始化具有的集合。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[],System.Int32)">
      <summary>将整个集合复制到一个数组中开始写入指定的数组索引处。</summary>
      <param name="array">
        <see cref="T:System.ComponentModel.IComponent" /> 要向集合中复制的对象数组。</param>
      <param name="index">索引 <paramref name="array" /> 哪些将复制到何时开始执行。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentConverter" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，它表示要与此组件转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的组件类型的属性的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的组件类型。</param>
      <param name="attributes">类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 与组件公开的属性或 null 是否存在任何属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持使用指定的上下文属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 应调用来查找此对象的属性。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ComponentEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>编辑该组件，并返回一个值，指示组件是否已修改基于给定的上下文。</summary>
      <param name="context">可以使用以获取进一步编辑有关的信息的可选上下文对象。</param>
      <param name="component">要编辑的组件。</param>
      <returns>true 如果修改了该组件;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary>编辑该组件，并返回一个值，该值指示是否修改了该组件。</summary>
      <param name="component">要编辑的组件。</param>
      <returns>true 如果修改了该组件;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary>创建 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 查找基于信息从指定的附属程序集中的资源 <see cref="T:System.Type" />。</summary>
      <param name="t">一个 <see cref="T:System.Type" /> 从中 <see cref="T:System.ComponentModel.ComponentResourceManager" /> 派生所有用于查找资源文件的信息。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary>适用于该对象的相应属性的资源的值。</summary>
      <param name="value">
        <see cref="T:System.Object" /> ，其中包含要应用的属性值。</param>
      <param name="objectName">一个 <see cref="T:System.String" /> ，其中包含要查找的资源的对象的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>适用于该对象的相应属性的资源的值。</summary>
      <param name="value">
        <see cref="T:System.Object" /> ，其中包含要应用的属性值。</param>
      <param name="objectName">一个 <see cref="T:System.String" /> ，其中包含要查找的资源的对象的名称。</param>
      <param name="culture">若要将资源应用区域性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 或 <paramref name="objectName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Container" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary>添加指定 <see cref="T:System.ComponentModel.Component" /> 到 <see cref="T:System.ComponentModel.Container" />。 该组件未命名。</summary>
      <param name="component">要添加的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary>添加指定 <see cref="T:System.ComponentModel.Component" /> 到 <see cref="T:System.ComponentModel.Container" /> 并将其分配一个名称。</summary>
      <param name="component">要添加的组件。</param>
      <param name="name">要将分配给该组件的唯一的、 不区分大小写名称。- 或 - null, 它使未命名的组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>创建一个网站 <see cref="T:System.ComponentModel.ISite" /> 为给定 <see cref="T:System.ComponentModel.IComponent" /> 和给定名称分配给该站点。</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 若要创建一个站点。</param>
      <param name="name">要分配给名称 <paramref name="component" />, ，或 null 要跳过分配名称。</param>
      <returns>新创建的站点。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Container" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Container" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary>在通过垃圾回收将 <see cref="T:System.ComponentModel.Container" /> 回收之前，释放非托管资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary>获取指定类型的服务对象（如果可用）。</summary>
      <param name="service">要检索的服务的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" /> 实现所请求的服务，或 null 如果无法解析服务。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary>中删除来自组件 <see cref="T:System.ComponentModel.Container" />。</summary>
      <param name="component">要删除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary>中删除来自组件 <see cref="T:System.ComponentModel.Container" /> 没有设置 <see cref="P:System.ComponentModel.IComponent.Site" /> 到 null。</summary>
      <param name="component">要删除的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary>确定是否为此容器的唯一组件名称。</summary>
      <param name="component">命名的组件。</param>
      <param name="name">要验证的组件名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 不是唯一的。</exception>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ContainerFilterService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary>筛选组件集合。</summary>
      <param name="components">要筛选的组件集合。</param>
      <returns>一个 <see cref="T:System.ComponentModel.ComponentCollection" /> ，它表示已修改的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CultureInfoConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以转换为给定的源类型的对象 <see cref="T:System.Globalization.CultureInfo" /> 使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值转换为 <see cref="T:System.Globalization.CultureInfo" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要转换为的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 指定不是有效的区域性。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要转换为的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary>检索指定的区域性的名称。</summary>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定要获取其名称的区域性。</param>
      <returns>指定的区域性的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取的标准值的集合 <see cref="T:System.Globalization.CultureInfo" /> 对象使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 包含一组标准的有效的值或 null 如果数据类型不支持标准值集。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是一个详尽的列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>false 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 不是可能的值的穷举列表 （即，其他个可能的值）。 此方法从不返回 true。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可以从使用指定的上下文的列表中选取的值的标准集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 应调用以查找一组公共对象支持的值。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> 类使用父自定义类型描述符。</summary>
      <param name="parent">父自定义类型描述符。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary>返回表示此类型描述符的类型的自定义特性的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> 包含类型的特性。 默认值为 <see cref="F:System.ComponentModel.AttributeCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary>返回表示此类型描述符的类的完全限定的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含描述此类型描述符的类型的完全限定的类名。 默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary>返回表示此类型描述符的类的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含描述此类型描述符的组件实例的名称。 默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary>返回表示此类型描述符的类型的类型转换器。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" /> 表示通过此类型描述符的类型。 默认值是新创建 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary>返回表示此类型描述符的对象的默认事件的事件描述符。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示通过此类型描述符的对象上的默认事件。 默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary>返回表示此类型描述符的对象的默认属性的属性描述符。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示通过此类型描述符的对象上的默认属性。 默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary>返回指定要与此类型说明符表示的类关联的类型的编辑器。</summary>
      <param name="editorBaseType">要检索的编辑器的基类型。</param>
      <returns>要与此类型说明符表示的类相关联的给定类型编辑器。 默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary>返回表示此类型描述符的对象的事件描述符的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 包含表示此类型描述符的对象的事件描述符。 默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>返回经过筛选的事件描述符表示此类型描述符的对象的集合。</summary>
      <param name="attributes">要作为筛选器使用的特性数组。 这可能是 null。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 包含表示此类型描述符的对象的事件描述。 默认值为 <see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary>返回表示此类型描述符的对象的属性描述符的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 包含表示此类型描述符的对象的属性说明。 默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>返回经过筛选的此类型说明符所表示的对象的属性说明符集合。</summary>
      <param name="attributes">要作为筛选器使用的特性数组。 这可能是 null。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 包含表示此类型描述符的对象的属性说明。 默认值为 <see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">若要检索其所属对象属性描述符。</param>
      <returns>
        <see cref="T:System.Object" /> 拥有给定指定的类型描述符的属性。 默认值为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.DataErrorsChangedEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DataErrorsChangedEventArgs" /> 类的新实例。</summary>
      <param name="propertyName">出现错误的属性的名称。null；如果错误为对象级别，则为 <see cref="F:System.String.Empty" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 类，并指示对象是否是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。</summary>
      <param name="isDataObject">true 如果对象是适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象; 否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary>确定是否的此实例 <see cref="T:System.ComponentModel.DataObjectAttribute" /> 符合另一个对象的模式。</summary>
      <param name="obj">要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectAttribute" />。</param>
      <returns>true 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>true 如果该属性的当前值是默认设置;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，并指示字段是否为数据行的主键。</summary>
      <param name="primaryKey">true 若要指示该字段正在; 中的数据行的主键否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，并指示该字段是否为数据行的主键，并且该字段是否数据库标识字段。</summary>
      <param name="primaryKey">true 若要指示该字段正在; 中的数据行的主键否则为 false。</param>
      <param name="isIdentity">true 若要指示字段是一个标识字段，它唯一地标识数据行中;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，并指示该字段是否为数据行的主键，该字段是数据库标识字段，以及是否该字段可以为 null。</summary>
      <param name="primaryKey">true 若要指示该字段正在; 中的数据行的主键否则为 false。</param>
      <param name="isIdentity">true 若要指示字段是一个标识字段，它唯一地标识数据行中;否则为 false。</param>
      <param name="isNullable">true 若要指示字段可以为 null 中数据存储区;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> 类，指示该字段是否为数据行的主键，它是数据库标识字段，以及是否可以为 null 并设置字段的长度。</summary>
      <param name="primaryKey">true 若要指示该字段正在; 中的数据行的主键否则为 false。</param>
      <param name="isIdentity">true 若要指示字段是一个标识字段，它唯一地标识数据行中;否则为 false。</param>
      <param name="isNullable">true 若要指示字段可以为 null 中数据存储区;否则为 false。</param>
      <param name="length">以字节为单位的字段的长度。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectFieldAttribute" />。</param>
      <returns>true 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类，并标识该方法所执行的数据操作的类型。</summary>
      <param name="methodType">其中一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 描述数据操作的值的方法执行。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 类中，标识的数据操作，该方法执行，并标识该方法是否是数据对象公开的默认数据方法的类型。</summary>
      <param name="methodType">其中一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 描述数据操作的值的方法执行。</param>
      <param name="isDefault">true 若要指示该属性应用到方法为指定的数据对象的默认方法 <paramref name="methodType" />; 否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="obj">要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />。</param>
      <returns>true 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary>获取一个值，该值指示此实例是否具有指定属性共享一个通用模式。</summary>
      <param name="obj">要与此实例进行比较的对象 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" />。</param>
      <returns>true 如果此实例是否与指定的实例相同 <paramref name="obj" /> 参数; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DateTimeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以转换为给定的源类型的对象 <see cref="T:System.DateTime" /> 使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>true 如果此对象可以执行转换，则否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的值转换为 <see cref="T:System.DateTime" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值转换为 <see cref="T:System.DateTime" /> 使用的参数。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示指定的源类型的对象是否可以转换到 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="sourceType">要检查的源类型。</param>
      <returns>true 如果指定的类型可以转换为 <see cref="T:System.DateTimeOffset" />; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回一个值，该值指示是否 <see cref="T:System.DateTimeOffset" /> 可以转换为指定类型的对象。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="destinationType">要检查的目标类型。</param>
      <returns>true 如果 <see cref="T:System.DateTimeOffset" /> 可被转换为指定的类型; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定对象转换为 <see cref="T:System.DateTimeOffset" />。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="culture">日期的区域性。</param>
      <param name="value">要转换的对象。</param>
      <returns>一个 <see cref="T:System.DateTimeOffset" /> 表示指定的对象。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将转换 <see cref="T:System.DateTimeOffset" /> 为指定类型的对象。</summary>
      <param name="context">日期格式上下文。</param>
      <param name="culture">日期的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType">要转换为的类型。</param>
      <returns>表示指定类型的对象 <see cref="T:System.DateTimeOffset" />。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DecimalConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值转换为 <see cref="T:System.Decimal" /> 使用的参数。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类不使用任何参数。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 类使用指定的属性名称。</summary>
      <param name="name">默认绑定属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary>确定是否指定 <see cref="T:System.Object" /> 是否等于当前 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例。</summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要与当前 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 实例</param>
      <returns>true 如果该对象是否等于当前实例;否则为 false, ，指示它们是否不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultEventAttribute" /> 类的新实例。</summary>
      <param name="name">此属性绑定到该组件的默认事件的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DefaultEventAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> 类的新实例。</summary>
      <param name="name">此属性绑定到组件的默认属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DefaultPropertyAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="value">一个 <see cref="T:System.Boolean" /> ，它是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Byte)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用 8 位无符号的整数。</summary>
      <param name="value">8 位无符号的整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Char)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用 Unicode 字符。</summary>
      <param name="value">Unicode 字符，默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Double)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用双精度浮点数字。</summary>
      <param name="value">双精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int16)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用 16 位带符号的整数。</summary>
      <param name="value">16 位有符号的整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用 32 位带符号的整数。</summary>
      <param name="value">32 位有符号的整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Int64)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用 64 位带符号的整数。</summary>
      <param name="value">64 位有符号的整数，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类的新实例。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 表示默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Single)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类使用单精度浮点数字。</summary>
      <param name="value">单精度浮点数字，这是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.String)">
      <summary>使用 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 初始化 <see cref="T:System.String" /> 类的新实例。</summary>
      <param name="value">一个 <see cref="T:System.String" /> ，它是默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.#ctor(System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DefaultValueAttribute" /> 类，将指定的值转换为指定的类型，并使用固定区域性作为转换上下文。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，它表示要转换的值的类型。</param>
      <param name="value">一个 <see cref="T:System.String" /> ，可转换为类型使用 <see cref="T:System.ComponentModel.TypeConverter" /> 的类型和美国。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DefaultValueAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultValueAttribute.SetValue(System.Object)">
      <summary>设置此属性绑定到属性的默认值。</summary>
      <param name="value">默认值。</param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 不带参数的类。</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 类的说明。</summary>
      <param name="description">说明文本中。</param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DescriptionAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.IsDefaultAttribute">
      <summary>返回一个值，该值指示这是否默认的 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 实例。</summary>
      <returns>true, 如果这是默认的 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 实例; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> 类的新实例。</summary>
      <param name="oldDesigner">正在失去激活该文档。</param>
      <param name="newDesigner">正在激活的文档。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 没有关联的消息或错误代码的类。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。</param>
      <param name="context">要用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的消息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 带有指定的详细的说明和指定的异常类。</summary>
      <param name="message">错误的详细的说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.CheckoutException" /> 类替换为指定的消息和错误代码。</summary>
      <param name="message">描述异常的消息。</param>
      <param name="errorCode">要传递的错误代码。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.CommandID" /> 类使用指定的菜单组 GUID 和命令 ID 号。</summary>
      <param name="menuGroup">此菜单命令所属的组的 GUID。</param>
      <param name="commandID">此菜单命令的数字标识符。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.CommandID" /> 实例是否相等。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>true 如果指定的对象是否等效于此;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary>返回 <see cref="T:System.String" /> ，表示当前对象。</summary>
      <returns>一个字符串，其中包含命令 ID 信息、 GUID 和整数标识符。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> 类的新实例。</summary>
      <param name="component">已更改的组件。</param>
      <param name="member">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，它表示已更改的成员。</param>
      <param name="oldValue">已更改成员的旧值。</param>
      <param name="newValue">已更改成员的新值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 类的新实例。</summary>
      <param name="component">是将要更改该组件。</param>
      <param name="member">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，该值指示是将要更改的组件的成员。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> 类的新实例。</summary>
      <param name="component">事件源组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> 类的新实例。</summary>
      <param name="component">要重命名的组件。</param>
      <param name="oldName">组件的旧名称。</param>
      <param name="newName">组件的新名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类，其中包含指定的一组设计器。</summary>
      <param name="designers">包含要添加的设计器的集合的列表。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 类，其中包含指定的设计器。</summary>
      <param name="designers">一个数组 <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 对象来存储。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary>为此集合中获取新的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 枚举集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 是从集合中复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>为此集合中获取新的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 枚举集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> 类的新实例。</summary>
      <param name="host">
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 的文档。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary>创建一个新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 具有给定名称并将其添加到给定的父级。</summary>
      <param name="parent">在父设计器的选项集合。 所有集合都具有除根对象集合的父级。</param>
      <param name="name">此集合的名称。</param>
      <param name="value">为此集合提供属性的对象。 可以是 null 如果集合不应提供的任何属性。</param>
      <returns>一个新 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 具有给定名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parent" /> 或 <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>将整个集合复制到兼容的一维 <see cref="T:System.Array" />, ，从目标数组的指定索引处开始。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 是从集合复制的元素的目标。<paramref name="array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 可用来循环访问此集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 可用来循环访问此集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>返回此集合的范围中的给定值的第一个匹配项的索引。</summary>
      <param name="value">要在集合中定位的对象。</param>
      <returns>整个集合中的值的第一个匹配项的索引如果找到，则否则的下限减 1 的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary>显示对话框框中的用户界面 (UI)，用户可以在此配置选项 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</summary>
      <returns>true 如果可以显示对话框中，则否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到 <see cref="T:System.Object" /> 的 <see cref="T:System.Collections.IList" />。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 要在集合中查找</param>
      <returns>true 如果 <see cref="T:System.Object" /> 在集合中找到; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 要在集合中查找。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将一项插入集合中指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Object" /> 要插入到集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的集合项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary>填充 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</summary>
      <param name="options">要填充的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary>显示给定对象的选项对话框。</summary>
      <param name="options">包含要调用的对象选项集合。</param>
      <param name="optionObject">实际选项对象。</param>
      <returns>true 如果显示对话框中;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary>获取此包中定义的选项的值。</summary>
      <param name="pageName">选项绑定页。</param>
      <param name="valueName">选项值的名称。</param>
      <returns>该选项值的名为 <paramref name="valueName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary>设置此包中定义的选项的值。</summary>
      <param name="pageName">选项绑定页</param>
      <param name="valueName">选项值的名称。</param>
      <param name="value">选项的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pageName" /> 或 <paramref name="valueName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary>在不使用说明的情况下初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary>使用指定的事务说明初始化 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 类的新实例。</summary>
      <param name="description">此事务的说明。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary>取消事务并尝试回滚由事务的事件作出的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary>提交此事务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary>释放与此对象关联的资源。 如果此事务尚未提交，则此重写方法将提交此事务。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary>引发 Cancel 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary>执行提交事务的实际工作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类，使用指定的值，该值指示是否在设计器调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对该事务。</summary>
      <param name="commit">一个值，该值指示是否已提交事务。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> 类的新实例。</summary>
      <param name="commit">一个值，该值指示是否已提交事务。</param>
      <param name="lastTransaction">true 如果这是最后一个事务以关闭;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="text">向用户显示的菜单命令的文本。</param>
      <param name="handler">事件处理程序执行操作的动词。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 类的新实例。</summary>
      <param name="text">向用户显示的菜单命令的文本。</param>
      <param name="handler">事件处理程序执行操作的动词。</param>
      <param name="startCommandID">开始此谓词的命令 ID。 默认情况下，设计器结构留出大量谓词的命令 Id。 您可以替代此通过提供自定义命令 id。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary>重写 <see cref="M:System.Object.ToString" />。</summary>
      <returns>谓词的文本或空字符串 ("") 的文本字段是否为空。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 类使用指定的数组 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象。</summary>
      <param name="value">一个 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组，指示要在集合中包含的谓词。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary>将指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 添加到集合。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>添加谓词的集合中的索引。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary>将指定的一组设计器谓词添加到集合。</summary>
      <param name="value">一个数组 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 要添加到集合的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary>向集合中添加指定设计器谓词的集合。</summary>
      <param name="value">一个 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 要添加到集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary>获取一个值，该值指示是否指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 集合中存在。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 要在集合中搜索。</param>
      <returns>true 如果指定的对象存在于集合;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary>将集合成员复制到指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 数组从指定的目标索引处开始。</summary>
      <param name="array">要复制到的集合成员的数组。</param>
      <param name="index">要开始将复制到的目标索引。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary>获取指定的索引 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 其索引获取集合中。</param>
      <returns>如果在列表中; 找到指定的对象的索引否则为-1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary>将指定 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 的指定索引处。</summary>
      <param name="index">集合中要插入谓词中的索引。</param>
      <param name="value">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 要插入集合中。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>引发 Clear 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>引发 Insert 事件。</summary>
      <param name="index">将项插入位置的索引。</param>
      <param name="value">要插入的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>引发 Remove 事件。</summary>
      <param name="index">若要移除的项位置的索引。</param>
      <param name="value">要移除的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>引发 Set 事件。</summary>
      <param name="index">在此处设置的项索引。</param>
      <param name="oldValue">旧的对象。</param>
      <param name="newValue">新对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary>引发 Validate 事件。</summary>
      <param name="value">要验证的对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>获取一个已保存的许可证密钥。</summary>
      <param name="type">许可证密钥的类型。</param>
      <param name="resourceAssembly">要从其中获取密钥的程序集。</param>
      <returns>指定的类型匹配的已保存的许可证密钥。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>设置的已保存的许可证密钥。</summary>
      <param name="type">许可证密钥的类型。</param>
      <param name="key">许可证密钥。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary>将序列化为指定的设计时许可证上下文中使用指定的键和输出流中的许可证。</summary>
      <param name="o">要输出到的流。</param>
      <param name="cryptoKey">要用于加密的密钥。</param>
      <param name="context">一个 <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> 指示许可证上下文。</param>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 类的新实例。</summary>
      <param name="keyword">帮助关键字值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 从给定类型的类。</summary>
      <param name="t">将从中提取帮助关键字的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="t" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 实例是否相等。</summary>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
      <returns>如果指定的 true 等于当前的 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />，则为 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary>确定是否为帮助关键字 null。</summary>
      <returns>true 如果帮助关键字是 null; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>向组件更改服务通知特定组件已更改。</summary>
      <param name="component">已更改的组件。</param>
      <param name="member">已更改的成员。 这是 null 如果此更改不与单个成员。</param>
      <param name="oldValue">成员的旧值。 这是仅当该成员不是有效 null。</param>
      <param name="newValue">成员的新值。 这是仅当该成员不是有效 null。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>向组件更改服务通知，更改某一特定组件。</summary>
      <param name="component">要更改的组件。</param>
      <param name="member">要更改该成员。 这是 null 如果此更改不与单个成员。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary>获取可用组件类型的列表。</summary>
      <param name="designerHost">提供设计时服务设计器宿主。 可以为 null。</param>
      <param name="baseType">基类型指定组件来检索。 可以为 null。</param>
      <returns>可用组件类型的列表。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary>将组件的实例还原为其默认状态。</summary>
      <param name="defaultValues">是名称/值对，用来重置组件的状态的默认属性值的字典。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary>初始化新的组件使用的一组建议的值。</summary>
      <param name="defaultValues">是名称/值对，用来初始化组件的状态的默认属性值的字典。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary>此设计器中执行的默认操作。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>初始化具有指定的组件的设计器。</summary>
      <param name="component">要与此设计器关联的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>当在派生类中重写时，允许设计器更改或移除它通过公开的属性集项 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 组件的类的对象。 中的属性字典的键是 <see cref="P:System.Attribute.TypeId" /> 属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary>当在派生类中重写时，允许设计器更改或移除它通过公开的事件的一套项 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示组件的类的事件的对象。 中的事件字典的键是事件名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary>当在派生类中重写时，允许设计器更改或移除它通过公开的属性集项 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示组件的类的属性的对象。 中的属性字典的键是属性名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>当在派生类中重写时，允许设计器向它通过公开的属性集添加项 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 组件的类的对象。 中的属性字典的键是 <see cref="P:System.Attribute.TypeId" /> 属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary>当在派生类中重写时，允许设计器将项添加到它通过公开的事件的一套 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <param name="events">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示组件的类的事件的对象。 中的事件字典的键是事件名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary>当在派生类中重写时，允许设计器将项添加到的一组属性，它通过公开 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <param name="properties">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示组件的类的属性的对象。 中的属性字典的键是属性名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary>激活此宿主所承载的设计器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary>创建指定类型的组件，并将其添加到设计文档。</summary>
      <param name="componentClass">要创建的组件的类型。</param>
      <returns>新创建的组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary>创建组件的指定的类型和名称，并将其添加到设计文档。</summary>
      <param name="componentClass">要创建的组件的类型。</param>
      <param name="name">组件的名称。</param>
      <returns>新创建的组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary>创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> ，它可封装事件序列以提高性能并启用撤消和重做支持功能。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> 的新实例。 当事务中完成的步骤时，应调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对此对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary>创建 <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> ，它可封装事件序列以提高性能并启用撤消和重做支持功能，使用指定的事务的说明。</summary>
      <param name="description">标题或新创建的事务的说明。</param>
      <returns>一个新的 <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。 当事务中完成步骤后时，应调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对此对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary>销毁指定的组件并将其从设计器的容器中删除。</summary>
      <param name="component">要销毁的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary>获取包含指定的组件的设计器实例。</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 要检索的设计器。</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" />, ，或 null 是否存在指定的组件没有任何设计器。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary>获取指定的完全限定类型名称的实例。</summary>
      <param name="typeName">要加载的类型的名称。</param>
      <returns>指定的类型名称的类型对象或 null 如果找不到该类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary>获取指定的 Windows 窗体设计器选项的值。</summary>
      <param name="pageName">定义的选项页的名称。</param>
      <param name="valueName">选项属性的名称。</param>
      <returns>指定的选项的值。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary>设置指定的 Windows 窗体设计器选项的值。</summary>
      <param name="pageName">定义的选项页的名称。</param>
      <param name="valueName">选项属性的名称。</param>
      <param name="value">新值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary>获取对应于指定的值的键。</summary>
      <param name="value">要在字典中查找的值。</param>
      <returns>关联的键，或 null 如果不存在任何键。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary>获取与指定的键相对应的值。</summary>
      <param name="key">要查找的值的键。</param>
      <returns>关联的值，或 null 如果值不存在。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary>设置指定的键 / 值对。</summary>
      <param name="key">要用作键与值相关联的对象。</param>
      <param name="value">要存储的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>创建指定的组件和事件的事件处理程序方法的唯一名称。</summary>
      <param name="component">该事件的组件实例连接到。</param>
      <param name="e">要创建的名称的事件。</param>
      <returns>此事件的事件处理程序方法建议的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary>获取具有指定的事件与兼容的方法签名的事件处理程序方法的集合。</summary>
      <param name="e">要获取有关兼容的事件处理程序方法的事件。</param>
      <returns>字符串的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary>获取 <see cref="T:System.ComponentModel.EventDescriptor" /> 表示指定的属性说明符，则在它表示事件的事件。</summary>
      <param name="property">表示一个事件的属性。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 属性是表示，事件或 null 如果属性不表示一个事件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary>将一组事件描述符转换为一组的属性描述符。</summary>
      <param name="events">要将转换为属性的事件。</param>
      <returns>一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述事件组的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary>将单个事件描述符转换为属性描述符。</summary>
      <param name="e">要转换的事件。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary>设计器中显示的用户代码。</summary>
      <returns>true 如果显示的代码;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary>显示指定的事件的用户代码。</summary>
      <param name="component">事件连接到该组件。</param>
      <param name="e">要显示的事件。</param>
      <returns>true 如果显示的代码;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary>显示设计器中指定的行的用户代码。</summary>
      <param name="lineNumber">若要将光标放置在行号。</param>
      <returns>true 如果显示的代码;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary>获取组件的一套扩展程序提供程序。</summary>
      <returns>类型的数组 <see cref="T:System.ComponentModel.IExtenderProvider" /> 列出活动的扩展程序提供程序。 如果不有任何提供程序，则返回空数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>添加指定的扩展提供程序。</summary>
      <param name="provider">要添加的扩展程序提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary>移除指定的扩展提供程序。</summary>
      <param name="provider">要删除的扩展程序提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary>向文档添加上下文特性。</summary>
      <param name="name">要添加的属性的名称。</param>
      <param name="value">属性的值。</param>
      <param name="keywordType">关键字，从枚举类型的 <see cref="T:System.ComponentModel.Design.HelpKeywordType" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary>从文档中移除所有现有的上下文属性。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary>创建一个本地 <see cref="T:System.ComponentModel.Design.IHelpService" /> 用于管理子上下文。</summary>
      <param name="contextType">若要添加的子上下文的优先级类型。</param>
      <returns>新创建的 <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary>移除以前添加的上下文特性。</summary>
      <param name="name">要移除的属性的名称。</param>
      <param name="value">要移除的属性的值。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary>使用创建的上下文中移除 <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" />。</summary>
      <param name="localContext">本地上下文 <see cref="T:System.ComponentModel.Design.IHelpService" /> 中删除。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary>显示与指定关键字对应的帮助主题。</summary>
      <param name="helpKeyword">要显示的帮助主题的关键字。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary>显示与指定 URL 对应的帮助主题。</summary>
      <param name="helpUrl">要显示的帮助主题的 URL。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary>搜索指定的组件实现的字段 <see cref="T:System.ComponentModel.IComponent" /> 接口，并添加到指定的容器，存储的每个可以使用检索的继承级别的每个 <see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> 方法。</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 搜索。 搜索与此组件将开始。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> 若要添加的组件。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary>获取指定的组件的继承属性。</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 要检索的继承属性。</param>
      <returns>一个实例 <see cref="T:System.ComponentModel.InheritanceAttribute" /> ，它描述指定组件的继承的级别。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>将指定的标准菜单命令添加到菜单。</summary>
      <param name="command">要添加的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.ComponentModel.Design.CommandID" /> 指定 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 在菜单上已存在。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>将指定的设计器谓词添加到全局设计器谓词组。</summary>
      <param name="verb">要添加的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary>搜索指定的命令 ID 并返回与之关联的菜单命令。</summary>
      <param name="commandID">要搜索的 <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> 命令 ID，与关联或 null 如果不找到任何命令。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary>调用菜单或设计器谓词命令匹配指定的命令 id。</summary>
      <param name="commandID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> 要搜索和执行的命令。</param>
      <returns>true 如果找到并成功，则调用该命令否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary>从菜单中删除指定的标准菜单命令。</summary>
      <param name="command">要移除的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary>全局设计器谓词的集合中移除指定的设计器谓词。</summary>
      <param name="verb">要移除的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary>显示指定的快捷菜单中的指定位置。</summary>
      <param name="menuID">
        <see cref="T:System.ComponentModel.Design.CommandID" /> 若要显示的快捷菜单。</param>
      <param name="x">在菜单中，显示在屏幕坐标中的 x 坐标。</param>
      <param name="y">在菜单中，显示在屏幕坐标中的 y 坐标。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary>获取包含指定的组件的组件。</summary>
      <param name="reference">要检索的父组件的对象。</param>
      <returns>基 <see cref="T:System.ComponentModel.IComponent" /> ，其中包含指定的对象，或 null 如果不存在父组件。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary>获取指定的组件的名称。</summary>
      <param name="reference">要返回的名称的对象。</param>
      <returns>引用，该对象的名称或 null 如果对象引用无效。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary>获取对其名称与指定的名称匹配的组件的引用。</summary>
      <param name="name">要返回的引用的组件名称。</param>
      <returns>引用的指定的名称的对象或 null 如果不找到任何引用。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary>获取所有可用项目组件引用。</summary>
      <returns>具有可供引用的所有对象的数组 <see cref="T:System.ComponentModel.Design.IReferenceService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary>获取指定类型的组件的所有可用引用。</summary>
      <param name="baseType">要返回的实例的引用的对象类型。</param>
      <returns>指定类型的所有可用对象的数组。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary>查找指定的区域性的资源阅读器，并将其返回。</summary>
      <param name="info">
        <see cref="T:System.Globalization.CultureInfo" /> 为要检索的资源阅读器的资源。</param>
      <returns>
        <see cref="T:System.Resources.IResourceReader" /> 包含资源的区域性，接口或 null 如果不存在任何区域性的资源。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary>查找指定的区域性的资源编写器并将其返回。</summary>
      <param name="info">
        <see cref="T:System.Globalization.CultureInfo" /> 要为其创建资源编写器的资源。</param>
      <returns>
        <see cref="T:System.Resources.IResourceWriter" /> 接口为指定的区域性。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>获取指定的视图技术的视图对象。</summary>
      <param name="technology">一个 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> ，该值指示特定的视图技术。</param>
      <returns>表示此设计器的视图的对象。</returns>
      <exception cref="T:System.ArgumentException">指定的视图技术不支持或不存在。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary>获取一个值，该值指定的组件当前是否选择了。</summary>
      <param name="component">要测试的组件。</param>
      <returns>true 如果该组件是用户的当前所选内容; 的一部分否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary>获取当前选定的组件的集合。</summary>
      <returns>表示当前选定的组件的集合的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary>选择指定的组件的集合。</summary>
      <param name="components">若要选择的组件的集合。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary>选择从与指定选择内容类型相匹配的组件的指定集合内的组件。</summary>
      <param name="components">若要选择的组件的集合。</param>
      <param name="selectionType">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 枚举中的一个值。 默认值为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>将指定的服务添加到服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">一个用于创建服务的回调对象。 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>将指定的服务添加到服务容器中，并可选择将提升到父级服务容器的服务。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">一个用于创建服务的回调对象。 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。</param>
      <param name="promote">true 此将请求提升到任何父级服务容器;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary>将指定的服务添加到服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>将指定的服务添加到服务容器中，并根据需要将服务提升到任何父级服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。</param>
      <param name="promote">true 此将请求提升到任何父级服务容器;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary>从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType">要移除的服务类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>从服务容器中删除指定的服务类型，并 （可选） 将提升到父级服务容器的服务。</summary>
      <param name="serviceType">要移除的服务类型。</param>
      <param name="promote">true 此将请求提升到任何父级服务容器;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性。</summary>
      <param name="component">要筛选其属性的组件。</param>
      <param name="attributes">可修改的属性字典。</param>
      <returns>如果将缓存经过筛选的属性集，则为 true；如果筛选服务必须再次查询，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的事件。</summary>
      <param name="component">要为其筛选事件的组件。</param>
      <param name="events">可修改的事件字典。</param>
      <returns>如果要缓存经过筛选的事件集，则为 true；如果筛选服务必须再次查询，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary>筛选组件通过 <see cref="T:System.ComponentModel.TypeDescriptor" /> 公开的属性。</summary>
      <param name="component">要为其筛选属性的组件。</param>
      <param name="properties">可修改的属性字典。</param>
      <returns>如果将缓存经过筛选的属性集，则为 true；如果筛选服务必须再次查询，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary>检索可用类型的列表。</summary>
      <param name="baseType">要匹配的基类型。 可以为 null。</param>
      <param name="excludeGlobalTypes">指示是否应检查所有被引用程序集中的类型。</param>
      <returns>与指定的条件相匹配的类型的集合 <paramref name="baseType" /> 和 <paramref name="excludeGlobalTypes" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary>获取请求的程序集。</summary>
      <param name="name">要检索的程序集的名称。</param>
      <returns>请求的程序集的实例或 null 如果未设置程序集可以位于。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary>获取请求的程序集。</summary>
      <param name="name">要检索的程序集的名称。</param>
      <param name="throwOnError">true 如果此方法应引发异常，如果该程序集不能定位;否则为 false, ，并且此方法返回 null 如果找不到该程序集。</param>
      <returns>请求的程序集的实例或 null 如果未设置程序集可以位于。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary>获取从中加载该程序集文件的路径。</summary>
      <param name="name">程序集的名称。</param>
      <returns>从中加载该程序集文件的路径。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary>加载具有指定名称的类型。</summary>
      <param name="name">类型的名称。 如果类型名称不是用于指示程序集的完全限定的名称，此服务将搜索其内部的一套引用的程序集。</param>
      <returns>一个实例 <see cref="T:System.Type" /> 对应于指定的名称，或 null 如果找不到任何类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary>加载具有指定名称的类型。</summary>
      <param name="name">类型的名称。 如果类型名称不是用于指示程序集的完全限定的名称，此服务将搜索其内部的一套引用的程序集。</param>
      <param name="throwOnError">true 如果此方法应引发异常，如果该程序集不能定位;否则为 false, ，并且此方法返回 null 如果找不到该程序集。</param>
      <returns>一个实例 <see cref="T:System.Type" /> 对应于指定的名称，或 null 如果找不到任何类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary>加载具有指定名称的类型。</summary>
      <param name="name">类型的名称。 如果类型名称不是用于指示程序集的完全限定的名称，此服务将搜索其内部的一套引用的程序集。</param>
      <param name="throwOnError">true 如果此方法应引发异常，如果该程序集不能定位;否则为 false, ，并且此方法返回 null 如果找不到该程序集。</param>
      <param name="ignoreCase">true 若要在搜索类型; 时忽略大小写否则为 false。</param>
      <returns>一个实例 <see cref="T:System.Type" /> 对应于指定的名称，或 null 如果找不到任何类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary>添加到指定的程序集的引用。</summary>
      <param name="name">
        <see cref="T:System.Reflection.AssemblyName" /> ，该值指示要引用的程序集。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.MenuCommand" /> 类的新实例。</summary>
      <param name="handler">要在用户选择菜单项或工具栏按钮时引发的事件。</param>
      <param name="command">此菜单命令链接到环境的菜单唯一的命令 ID。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary>调用命令。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary>调用带有参数的给定命令。</summary>
      <param name="arg">该命令通过使用可选参数。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary>引发 <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary>返回的字符串表示形式此菜单命令。</summary>
      <returns>包含的值的字符串 <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> 属性会设置任何标志的名称后追加通过竖线 (|) 分隔。 这些标志属性包括 <see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />, ，<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />, ，<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" />, ，和 <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary>创建一个新的 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <returns>新创建的序列化存储。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary>反序列化给定存储区中，若要生成的对象的集合。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。</param>
      <returns>根据存储的状态创建的对象的集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>反序列化给定存储区并填充给定 <see cref="T:System.ComponentModel.IContainer" /> 使用反序列化 <see cref="T:System.ComponentModel.IComponent" /> 对象。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。</param>
      <param name="container">
        <see cref="T:System.ComponentModel.IContainer" /> 到 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。</param>
      <returns>根据存储的状态创建的对象的集合。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary>反序列化给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 化为给定的容器。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。</param>
      <param name="container">到容器 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary>反序列化给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至给定容器 （可选） 验证回收类型。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。</param>
      <param name="container">到容器 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。</param>
      <param name="validateRecycledTypes">true 若要确保如果应用于同一类型的对象时，才可行反序列化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary>反序列化给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 至给定容器可选择应用的默认属性值。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 进行反序列化。</param>
      <param name="container">到容器 <see cref="T:System.ComponentModel.IComponent" /> 将添加对象。</param>
      <param name="validateRecycledTypes">true 若要确保如果应用于同一类型的对象时，才可行反序列化。</param>
      <param name="applyDefaults">true 若要指示应应用的默认属性值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="container" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 不包含序列化容器可以处理的格式中的数据。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary>加载 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 从流。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 从加载存储区。</param>
      <returns>新 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="stream" /> 不包含任何数据保存到的以前调用 <see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>将给定的对象序列化为给定 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="value" /> 将写入。</param>
      <param name="value">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不受支持的序列化存储区类型。 使用存储区返回的 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary>将序列化为给定的对象，包括默认属性值。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="value" /> 将序列化。</param>
      <param name="value">要序列化的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不受支持的序列化存储区类型。 使用存储区返回的 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>将给定对象上的给定的成员序列化。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="member" /> 将序列化。</param>
      <param name="owningObject">向其中的对象 <paramref name="member" /> 附加。</param>
      <param name="member">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 指定要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不受支持的序列化存储区类型。 使用存储区返回的 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>序列化给定的成员给定的对象包括默认属性值。</summary>
      <param name="store">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 到的状态 <paramref name="member" /> 将序列化。</param>
      <param name="owningObject">向其中的对象 <paramref name="member" /> 附加。</param>
      <param name="member">要序列化的成员。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="store" /> 或 <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="store" /> 已关闭，或 <paramref name="store" /> 不受支持的序列化存储区类型。 使用存储区返回的 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" />。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary>将对象追加到末尾的堆栈上，而不是将其推到堆栈的顶部。</summary>
      <param name="context">要追加到堆栈的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary>删除从堆栈，并返回其值的当前对象。</summary>
      <returns>从堆栈中移除的对象 null 如果不不在堆栈上的任何对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary>推入，或将放置到堆栈上指定的对象。</summary>
      <param name="context">要推入堆栈的上下文对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 与命名的提供程序类型的类。</summary>
      <param name="providerTypeName">序列化提供程序类型的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerTypeName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 与给定的提供程序类型的类。</summary>
      <param name="providerType">
        <see cref="T:System.Type" /> 的序列化提供程序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="providerType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary>开始加载设计器。</summary>
      <param name="host">此加载程序将加载组件加载程序宿主。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary>将缓存的更改写入设计器的加载位置。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">数据类型的序列化程序完全限定的名称。</param>
      <param name="baseSerializerTypeName">序列化程序的基本数据类型的完全限定的名称。 可以为某个类提供多个序列化程序，前提是序列化程序具有不同的基类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerTypeName">数据类型的序列化程序完全限定的名称。</param>
      <param name="baseSerializerType">基本数据类型的序列化程序。 可以为某个类提供多个序列化程序，前提是序列化程序具有不同的基类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 类的新实例。</summary>
      <param name="serializerType">序列化程序的数据类型。</param>
      <param name="baseSerializerType">基本数据类型的序列化程序。 可以为某个类提供多个序列化程序，前提是序列化程序具有不同的基类型。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary>结束设计器加载操作。</summary>
      <param name="baseClassName">此设计器设计的文档的基类完全限定的名称。</param>
      <param name="successful">true 如果设计器已成功加载;否则为 false。</param>
      <param name="errorCollection">如果有包含在加载期间，遇到的错误的集合。 如果没有遇到任何错误，将传递空集合或 null。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary>重新加载设计文档。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary>将外部组件注册为管理此接口的加载过程的一部分。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary>依赖加载已完成的信号。</summary>
      <param name="successful">true 如果成功，则设计器的负载 false 如果错误阻止从加载完成。</param>
      <param name="errorCollection">如果有的话，在加载期间，发生的错误的集合。 如果不发生任何错误，将传递空集合或 null。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary>重新加载设计文档。</summary>
      <returns>true 如果重新加载请求被接受，或 false 如果加载程序不允许重新加载。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>向序列化管理器添加指定的序列化提供程序。</summary>
      <param name="provider">要添加的序列化提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>创建指定类型的实例并将其添加到已命名实例的集合中。</summary>
      <param name="type">要创建的数据类型。</param>
      <param name="arguments">要为此类型传递给构造函数的参数。</param>
      <param name="name">对象的名称。 此名称可用于以后通过 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> 访问该对象。 如果 null 是传递，该对象仍会创建，但不能通过名称访问。</param>
      <param name="addToContainer">如果 true, ，该对象添加到设计容器。 该对象必须实现 <see cref="T:System.ComponentModel.IComponent" /> 才能使此功能生效。</param>
      <returns>新创建的对象实例。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary>获取指定的名称，创建对象的实例或 null 如果该对象不存在。</summary>
      <param name="name">要检索的对象的名称。</param>
      <returns>具有给定名称的对象的实例或 null 如果找不到该名称没有任何对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary>获取指定对象的名称或 null 如果对象没有名称。</summary>
      <param name="value">要检索其名称的对象。</param>
      <returns>该对象的名称或 null 如果对象是未命名。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>获取指定的对象类型所请求类型的序列化程序。</summary>
      <param name="objectType">要获取的序列化程序的对象的类型。</param>
      <param name="serializerType">若要检索的序列化程序的类型。</param>
      <returns>请求的序列化的实例或 null 如果没有适当的序列化程序可以为所在。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary>获取具有指定名称的类型。</summary>
      <param name="typeName">要加载的类型的完全限定的名称。</param>
      <returns>该类型的实例或 null 如果不能加载该类型。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>从序列化管理器移除自定义的序列化提供程序。</summary>
      <param name="provider">要移除的提供程序。 此对象必须已将添加使用 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary>报告序列化中的错误。</summary>
      <param name="errorInformation">要报告的错误。 此信息对象可以是任何对象类型。 如果它是一个异常，则将提取该异常的消息并报告给用户。 如果它是任何其他类型，则将调用 <see cref="M:System.Object.ToString" />，向用户显示该信息。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary>设置指定的现有对象的名称。</summary>
      <param name="instance">为名称的对象实例。</param>
      <param name="name">要为实例指定的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary>获取使用指定的特性的序列化程序。</summary>
      <param name="manager">序列化管理器请求序列化程序。</param>
      <param name="currentSerializer">当前序列化指定类型的一个实例。 这可能是 null 如果没有指定类型的序列化程序存在。</param>
      <param name="objectType">要序列化对象数据类型。</param>
      <param name="serializerType">若要创建的序列化程序的数据类型。</param>
      <returns>序列化程序的请求，该类型的实例或 null 如果无法满足请求。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary>反序列化指定的序列化数据对象，并返回由该数据表示的对象的集合。</summary>
      <param name="serializationData">一个由组成的序列化数据的对象。</param>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 重新生成指定的序列化数据对象中的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary>序列化指定的对象的集合，并将它们存储在序列化数据对象。</summary>
      <param name="objects">要序列化的对象集合。</param>
      <returns>一个包含指定的对象集合的序列化的状态对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary>创建对指定的容器中的所有组件是唯一的新名称。</summary>
      <param name="container">添加新对象的位置的容器。</param>
      <param name="dataType">接收该名称的对象数据类型。</param>
      <returns>数据类型的唯一名称。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary>获取一个值，该值指示指定的名称是否有效。</summary>
      <param name="name">要验证的名称。</param>
      <returns>true 如果该名称是否有效;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary>获取一个值，该值指示指定的名称是否有效。</summary>
      <param name="name">要验证的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类使用指定的成员信息和参数。</summary>
      <param name="member">描述符成员信息。 这可能是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.ConstructorInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />。 如果这是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，则它必须表示 static 成员。</param>
      <param name="arguments">要传递给成员的参数集合。 此参数可以为 null 或是否存在任何参数为空集合。 该集合也可以包括的其他实例的 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，并不表示 static 成员。<paramref name="member" /> 类型 <see cref="T:System.Reflection.PropertyInfo" /> 和不可读。<paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" />, ，和中的参数数目 <paramref name="arguments" /> 的签名不匹配 <paramref name="member." /><paramref name="member" /> 类型 <see cref="T:System.Reflection.ConstructorInfo" /> 和表示 static 成员。<paramref name="member" /> 类型 <see cref="T:System.Reflection.FieldInfo" />, ，和中的参数数目 <paramref name="arguments" /> 是否不为零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 类使用指定的成员信息、 参数和值，该值指示是否指定的信息完全描述该实例。</summary>
      <param name="member">描述符成员信息。 这可能是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.ConstructorInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />。 如果这是 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，则它必须表示 static 成员。</param>
      <param name="arguments">要传递给成员的参数集合。 此参数可以为 null 或是否存在任何参数为空集合。 该集合也可以包括的其他实例的 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />。</param>
      <param name="isComplete">true 如果指定的信息完全描述该实例;否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" />, ，<see cref="T:System.Reflection.FieldInfo" />, ，或 <see cref="T:System.Reflection.PropertyInfo" />, ，并不表示 static 成员<paramref name="member" /> 类型 <see cref="T:System.Reflection.PropertyInfo" /> 和不可读。<paramref name="member" /> 类型 <see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.ConstructorInfo" /> 和中的参数数目 <paramref name="arguments" /> 的签名不匹配 <paramref name="member" />。<paramref name="member" /> 类型 <see cref="T:System.Reflection.ConstructorInfo" /> 和表示 static 成员<paramref name="member" /> 类型 <see cref="T:System.Reflection.FieldInfo" />, ，和中的参数数目 <paramref name="arguments" /> 是否不为零。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary>调用此实例说明符，并返回对象的描述符描述。</summary>
      <returns>此实例说明符所描述对象。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 类的新实例。</summary>
      <param name="owner">拥有的对象 <paramref name="member" />。</param>
      <param name="member">这是要与相关成员 <paramref name="owner" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 或 <paramref name="member" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 实例是否相等。</summary>
      <param name="obj">要与当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 进行比较的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
      <returns>如果指定的 true 等于当前的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />，则为 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>测试两个指定 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否等效。</summary>
      <param name="left">相等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right">相等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <returns>此运算符可返回 true 如果两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否相等; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>测试两个指定 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否不同。</summary>
      <param name="left">不等运算符左侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <param name="right">不等运算符右侧的 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构。</param>
      <returns>此运算符可返回 true 如果两个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 结构是否不同; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>获取与给定的源关系的关系。</summary>
      <param name="source">源关系。</param>
      <returns>与关系 <paramref name="source" />, ，或 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 如果不存在关系。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>创建源对象和目标关系之间的关系。</summary>
      <param name="source">源关系。</param>
      <param name="relationship">要设置到源的关系。</param>
      <exception cref="T:System.ArgumentException">该服务不支持关系。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>获取一个值，该值指示是否支持给定的关系。</summary>
      <param name="source">源关系。</param>
      <param name="relationship">要设置到源的关系。</param>
      <returns>true 如果支持给定的两个对象之间的关系;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> 类的新实例。</summary>
      <param name="name">要解析的名称。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类使用指定的属性。</summary>
      <param name="serializerTypeName">数据类型的序列化程序完全限定的名称。</param>
      <param name="baseSerializerTypeName">序列化程序的基类型的名称。 一个类可以包含多个序列化程序，因为它们具有不同的基类型。</param>
      <param name="reloadable">true 如果此序列化程序支持动态重新加载文档;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类使用指定的属性。</summary>
      <param name="serializerTypeName">数据类型的序列化程序完全限定的名称。</param>
      <param name="baseSerializerType">序列化程序的基类型的名称。 一个类可以包含多个序列化程序，因为它们具有不同的基类型。</param>
      <param name="reloadable">true 如果此序列化程序支持动态重新加载文档;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> 类使用指定的属性。</summary>
      <param name="serializerType">序列化程序的数据类型。</param>
      <param name="baseSerializerType">序列化程序的基类型。 一个类可以包含多个序列化程序，因为它们具有不同的基类型。</param>
      <param name="reloadable">true 如果此序列化程序支持动态重新加载文档;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary>关闭序列化存储区。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary>将存储保存到给定的流。</summary>
      <param name="stream">存储区将序列化到流。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 类使用指定的父对象服务提供程序。</summary>
      <param name="parentProvider">父服务提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary>将指定的服务添加到服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">一个可创建该服务的回调对象。 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">类型的服务 <paramref name="serviceType" /> 容器中已存在。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary>将指定的服务添加到服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="callback">一个可创建该服务的回调对象。 这允许将服务声明为可用，但该服务发出请求之前延迟创建该对象。</param>
      <param name="promote">true 如果此服务应添加到任何父级服务容器;否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="callback" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">类型的服务 <paramref name="serviceType" /> 容器中已存在。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary>将指定的服务添加到服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务实例。 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">类型的服务 <paramref name="serviceType" /> 容器中已存在。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary>将指定的服务添加到服务容器。</summary>
      <param name="serviceType">要添加的服务类型。</param>
      <param name="serviceInstance">要添加的服务类型的实例。 此对象必须实现或继承的类型由 <paramref name="serviceType" /> 参数。</param>
      <param name="promote">true 如果此服务应添加到任何父级服务容器;否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 或 <paramref name="serviceInstance" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">类型的服务 <paramref name="serviceType" /> 容器中已存在。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary>释放此服务容器。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary>释放此服务容器。</summary>
      <param name="disposing">true 如果 <see cref="T:System.ComponentModel.Design.ServiceContainer" /> 正在释放; 否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary>获取请求的服务。</summary>
      <param name="serviceType">要检索的服务类型。</param>
      <returns>如果它找不到，该服务的实例或 null 如果无法找到。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary>从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType">要移除的服务类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary>从服务容器中移除指定的服务类型。</summary>
      <param name="serviceType">要移除的服务类型。</param>
      <param name="promote">true 如果此服务应从任何父级服务容器;否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardCommands" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary>获取指定对象的类型说明提供程序。</summary>
      <param name="instance">要获取的类型说明提供程序的对象。</param>
      <returns>一个 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 对应于 <paramref name="instance" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary>获取指定类型的类型说明提供程序。</summary>
      <param name="type">要获取的类型说明提供程序的类型。</param>
      <returns>一个 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 对应于 <paramref name="type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类使用的类型提供设计时服务的名称。</summary>
      <param name="designerTypeName">提供此属性的组件的设计时服务的类型的完全限定名称的串联绑定到和这种类型驻留的程序集的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类设计器中使用的设计器类型和类的基类。</summary>
      <param name="designerTypeName">提供此属性的组件的设计时服务的类型的完全限定名称的串联绑定到和这种类型驻留的程序集的名称。</param>
      <param name="designerBaseTypeName">要与设计器类关联的基本类的完全限定的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类，使用设计器设计器类和基类的名称。</summary>
      <param name="designerTypeName">提供此属性的组件的设计时服务的类型的完全限定名称的串联绑定到和这种类型驻留的程序集的名称。</param>
      <param name="designerBaseType">一个 <see cref="T:System.Type" /> ，它表示要与关联的基类 <paramref name="designerTypeName" />。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类提供设计时服务的类型。</summary>
      <param name="designerType">一个 <see cref="T:System.Type" /> 表示的提供此属性的组件的设计时服务的类的绑定到。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerAttribute" /> 类使用设计器和设计器基类的类型。</summary>
      <param name="designerType">一个 <see cref="T:System.Type" /> 表示的提供此属性的组件的设计时服务的类的绑定到。</param>
      <param name="designerBaseType">一个 <see cref="T:System.Type" /> ，它表示要与关联的基类 <paramref name="designerType" />。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DesignerAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 类，具有空字符串 ("")。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 具有给定的类别名称的类。</summary>
      <param name="category">类别的名称。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 类使用指定 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值。</summary>
      <param name="visibility">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值之一。</param>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="obj">要比较的另一个对象。</param>
      <returns>如果 true 与此实例相等，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>true 如果该属性设置为默认值;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 类的新实例。</summary>
      <param name="isDesignOnly">true 如果某属性可以设置只能在设计时; false 如果该属性可以设置在设计时和运行时。</param>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary>创建一个新 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 设置的默认值为 false。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary>创建一个新 <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 与 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性设置为在给定的值 <paramref name="visible" />。</summary>
      <param name="visible">值的 <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> 属性将设置对。</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用（ Visual Basic 中的 Nothing）进行比较的对象。</param>
      <returns>如果 true 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示此实例是否等于 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值。</summary>
      <returns>true, 如果此实例是否等于 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 值; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 类使用的显示名称。</summary>
      <param name="displayName">显示名称。</param>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 实例是否相等。</summary>
      <param name="obj">
        <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 值相等性测试。</param>
      <returns>true 给定对象的值是否等于当前对象;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.DoubleConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.DoWorkEventArgs" /> 类的新实例。</summary>
      <param name="argument">指定异步操作的参数。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类，具有默认编辑器中，不不使用任何编辑器。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的类型名称和编辑器的基类型名称。</summary>
      <param name="typeName">编辑器的完全限定的类型名称。</param>
      <param name="baseTypeName">基类或接口，以作为查找键用于该编辑器的完全限定的类型名称。 此类必须是或派生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类使用的类型名称和基类型。</summary>
      <param name="typeName">编辑器的完全限定的类型名称。</param>
      <param name="baseType">
        <see cref="T:System.Type" /> 的基类或接口，以用作编辑器中的查找键。 此类必须是或派生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EditorAttribute" /> 类的类型和基类型。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示编辑器中的类型。</param>
      <param name="baseType">
        <see cref="T:System.Type" /> 的基类或接口，以用作编辑器中的查找键。 此类必须是或派生自 <see cref="T:System.Drawing.Design.UITypeEditor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.EditorAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 给定对象的值是否等于当前对象;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 类 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 设置为默认状态。</summary>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.#ctor(System.ComponentModel.EditorBrowsableState)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" /> 类 <see cref="T:System.ComponentModel.EditorBrowsableState" />。</summary>
      <param name="state">
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> 设置 <see cref="P:System.ComponentModel.EditorBrowsableAttribute.State" /> 到。</param>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.EditorBrowsableAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EditorBrowsableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EnumConverter" /> 为给定类型的类。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示枚举值，用于将此枚举转换器与相关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以为枚举对象使用指定的上下文转换给定的源类型的对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值对象转换为枚举对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是枚举的有效值。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取此验证程序所面向的数据类型的标准值集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 是使用指定的上下文的独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果从 true 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可以从使用指定的上下文的列表中选取的值的标准集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 应调用以查找一组公共对象支持的值。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>获取一个值，该值指示给定的对象值是否对此类型有效。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值对此对象有效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 具有名称和在指定的属性的类 <see cref="T:System.ComponentModel.MemberDescriptor" />。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，其中包含了事件以及其属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定名称的类 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和在这两属性 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 具有该成员及其属性的名称。</param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 与您想要添加到此事件说明的属性的数组。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EventDescriptor" /> 类，具有指定名称和特性数组。</summary>
      <param name="name">事件的名称。</param>
      <param name="attrs">类型的数组 <see cref="T:System.Attribute" /> ，它包含事件属性。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary>当在派生类中重写，将事件绑定到的组件。</summary>
      <param name="component">一种组件提供给委托的事件。</param>
      <param name="value">一个表示用于处理该事件的方法的委托。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>当在派生类中重写，取消绑定委托与组件，以便该委托将不再接收来自组件的事件。</summary>
      <param name="component">委托绑定到该组件。</param>
      <param name="value">要解除组件绑定的委托。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 与给定的数组类 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象。</summary>
      <param name="events">类型的数组 <see cref="T:System.ComponentModel.EventDescriptor" /> ，为此集合提供事件。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.EventDescriptorCollection" /> 与给定的数组类 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象。 集合是只读的。</summary>
      <param name="events">类型的数组 <see cref="T:System.ComponentModel.EventDescriptor" /> ，为此集合提供事件。</param>
      <param name="readOnly">true 若要指定只读集合中;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary>添加 <see cref="T:System.ComponentModel.EventDescriptor" /> 到集合的末尾。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 要添加到集合。</param>
      <returns>位置 <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中。</returns>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary>从集合中删除所有对象。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary>返回集合中是否包含给定 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 能够在集合中找到。</param>
      <returns>true 如果集合包含 <paramref name="value" /> 参数; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>获取集合中具有指定名称的事件的说明。</summary>
      <param name="name">要从集合中获取的事件的名称。</param>
      <param name="ignoreCase">true 如果您想要忽略大小写的事件。否则为 false。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定名称或 null 如果事件不存在。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary>获取此枚举 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</summary>
      <returns>一个枚举器实现 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary>返回的索引给定 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 能够在集合中找到。</param>
      <returns>索引的给定 <see cref="T:System.ComponentModel.EventDescriptor" /> 在集合中。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary>将插入 <see cref="T:System.ComponentModel.EventDescriptor" /> 到指定索引处的集合。</summary>
      <param name="index">在其中插入集合中的索引 <paramref name="value" /> 参数。</param>
      <param name="value">
        <see cref="T:System.ComponentModel.EventDescriptor" /> 要插入到集合。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，使用指定 <see cref="T:System.Collections.IComparer" />。</summary>
      <param name="sorter">用于进行排序的比较器 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary>对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。 指定的顺序是首先应用，然后为此集合，通常为字母顺序的默认排序。</summary>
      <param name="names">一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.EventDescriptor" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.ComponentModel.EventDescriptor" /> 集合中的指定索引处。</summary>
      <param name="index">索引 <see cref="T:System.ComponentModel.EventDescriptor" /> 中删除。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary>对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，为此集合使用的默认排序，这是通常按字母顺序排列。</summary>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，使用指定 <see cref="T:System.Collections.IComparer" />。</summary>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 用于进行排序 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary>对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，给出指定的排序顺序。</summary>
      <param name="names">一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.EventDescriptor" /> 集合中的对象。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>对这些成员进行排序 <see cref="T:System.ComponentModel.EventDescriptorCollection" />, ，给出指定的排序顺序和 <see cref="T:System.Collections.IComparer" />。</summary>
      <param name="names">一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.EventDescriptor" /> 集合中的对象。</param>
      <param name="comparer">
        <see cref="T:System.Collections.IComparer" /> 用于进行排序 <see cref="T:System.ComponentModel.EventDescriptor" /> 此集合中的对象。</param>
      <returns>新的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 是从集合中复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回循环访问集合的枚举数。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一项。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.Object" />。</param>
      <returns>新元素的插入位置。</returns>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 要在集合中查找。</param>
      <returns>true 如果 <see cref="T:System.Object" /> 在集合中找到; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中特定项的索引。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 要在集合中查找。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>指定索引处插入到集合的项。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Object" /> 要插入到集合。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除特定对象的第一个匹配项。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.EventHandlerList" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)">
      <summary>将一个委托添加到列表。</summary>
      <param name="key">拥有该事件的对象。</param>
      <param name="value">要添加到列表的委托。</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)">
      <summary>将一个委派列表添加到当前列表。</summary>
      <param name="listToAddFrom">要添加的列表。</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.Dispose">
      <summary>释放委托列表。</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
      <summary>从列表中删除委托。</summary>
      <param name="key">拥有该事件的对象。</param>
      <param name="value">要从列表中移除的委托。</param>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>获取由值参数指定的对象类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">
        <see cref="T:System.Object" /> ，它指定要获取其属性的对象类型。</param>
      <param name="attributes">类型的数组 <see cref="T:System.Attribute" /> ，将用作筛选器。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 与组件公开的属性或 null 是否存在任何属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持使用指定的上下文属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> 应调用来查找此对象的属性。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 Nothing）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 true 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary>提供表示此实例的值是否为派生类的默认值。</summary>
      <returns>如果此实例是该类的默认属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.GuidConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为 GUID 对象使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的对象转换为一个的 GUID 对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的对象转换为另一种类型。</summary>
      <param name="context">一个格式化程序的上下文。</param>
      <param name="culture">到的区域性 <paramref name="value" /> 将被转换。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <returns>被转换的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.HandledEventArgs" /> 类，具有默认值 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性值为 false。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.HandledEventArgs" /> 类，具有指定的默认值为 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性。</summary>
      <param name="defaultHandledValue">默认值为 <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> 属性。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>添加 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到用于搜索的索引。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 将添加到用于搜索的索引。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary>向列表添加新项。</summary>
      <returns>添加到列表的项。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> 为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>对基于列表进行排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和 <see cref="T:System.ComponentModel.ListSortDirection" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为排序依据。</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>返回具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要搜索的。</param>
      <param name="key">值 <paramref name="property" /> 要搜索的参数。</param>
      <returns>具有的行的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> 为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>删除 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 从用于搜索的索引中删除。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary>删除应用使用的任何排序 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />。</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>排序数据源基于给定 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 包含要应用于数据源进行排序。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary>删除当前筛选器应用于数据源。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary>丢弃集合中挂起的新项。</summary>
      <param name="itemIndex">以前添加到集合的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary>向集合提交挂起的新项。</summary>
      <param name="itemIndex">以前添加到集合的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.IChangeTracking.AcceptChanges">
      <summary>通过接受修改将对象的状态重置为更改前的状态。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary>获取指定的组件的属性。</summary>
      <param name="component">要获取特性的组件。</param>
      <returns>属性集合 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary>获取指定的组件的类名称。</summary>
      <param name="component">要获取的类名的组件。</param>
      <returns>与相对应的类的名称 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary>获取指定的组件的类型转换器。</summary>
      <param name="component">要获取的组件 <see cref="T:System.ComponentModel.TypeConverter" /> 有关。</param>
      <returns>
        <see cref="T:System.ComponentModel.TypeConverter" /> 为 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary>获取指定的组件的默认事件。</summary>
      <param name="component">要获取的默认事件的组件。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 表示 <paramref name="component" />的默认事件。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary>获取指定的组件的默认属性。</summary>
      <param name="component">要获取其默认属性的组件。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 表示 <paramref name="component" />的默认属性。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary>获取指定的组件编辑器。</summary>
      <param name="component">要为其获取编辑器的组件。</param>
      <param name="baseEditorType">编辑器的基类型 <paramref name="component" />。</param>
      <returns>为编辑器 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary>获取指定的组件的事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <returns>事件描述符的集合 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary>对指定的组件中获取具有指定特性的事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <param name="attributes">用来筛选事件的属性。</param>
      <returns>事件描述符的集合 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary>获取指定的组件的名称。</summary>
      <param name="component">要获取的名称的组件。</param>
      <returns>名称 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary>对指定的组件中获取具有指定特性的属性。</summary>
      <param name="component">要获取其事件的组件。</param>
      <param name="attributes">用于筛选属性的特性。</param>
      <returns>属性说明符集合 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary>获取具有指定的调度标识符的属性的值。</summary>
      <param name="component">属性所属的对象。</param>
      <param name="dispid">调度标识符。</param>
      <param name="success">一个 <see cref="T:System.Boolean" />, ，由表示是否已检索该属性的引用传递。</param>
      <returns>具有指定的调度标识符属性的值。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary>获取具有指定的名称的属性的值。</summary>
      <param name="component">属性所属的对象。</param>
      <param name="propertyName">属性的名称。</param>
      <param name="success">一个 <see cref="T:System.Boolean" />, ，由表示是否已检索该属性的引用传递。</param>
      <returns>具有指定的名称的属性的值。</returns>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>添加指定 <see cref="T:System.ComponentModel.IComponent" /> 到 <see cref="T:System.ComponentModel.IContainer" /> 列表的末尾。</summary>
      <param name="component">要添加的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>添加指定 <see cref="T:System.ComponentModel.IComponent" /> 到 <see cref="T:System.ComponentModel.IContainer" /> 末尾的列表中，并将一个名称分配给该组件。</summary>
      <param name="component">要添加的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name">要将分配给该组件的唯一的、 不区分大小写名称。- 或 - null 保留未命名的组件。</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>中删除来自组件 <see cref="T:System.ComponentModel.IContainer" />。</summary>
      <param name="component">要移除的 <see cref="T:System.ComponentModel.IComponent" />。</param>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary>返回此组件实例的自定义属性的集合。</summary>
      <returns>包含此对象的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary>返回此组件实例的类名称。</summary>
      <returns>对象的类名称，如果该类没有名称，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary>返回某个组件的此实例的名称。</summary>
      <returns>对象的名称，如果该对象不具有名称，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary>返回此组件实例的类型转换器。</summary>
      <returns>作为此对象转换器的 <see cref="T:System.ComponentModel.TypeConverter" />，或为 null（如果此对象不存在任何 <see cref="T:System.ComponentModel.TypeConverter" />）。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary>返回某个组件的此实例的默认事件。</summary>
      <returns>表示此对象的默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果该对象没有事件，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary>返回此组件实例的默认属性。</summary>
      <returns>表示此对象的默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果该对象没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary>返回指定类型的此实例的一个组件的编辑器。</summary>
      <param name="editorBaseType">一个 <see cref="T:System.Type" /> ，它表示此对象的编辑器。</param>
      <returns>
        <see cref="T:System.Object" /> 是此对象的编辑器的指定类型或 null 如果找不到编辑器中。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary>返回此组件实例的事件。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.EventDescriptorCollection" />，表示此组件实例的事件。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary>使用指定的属性数组作为筛选器，返回此组件实例的事件。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>表示此组件实例的已筛选事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary>返回此组件实例的属性。</summary>
      <returns>表示此组件实例的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary>使用特性数组作为筛选器，返回此组件实例的属性。</summary>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，它表示此组件实例的已筛选属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>返回一个对象，该对象包含指定的属性描述符所描述的属性。</summary>
      <param name="pd">一个 <see cref="T:System.ComponentModel.PropertyDescriptor" />，表示要查找其所有者的属性。</param>
      <returns>一个 <see cref="T:System.Object" />，表示指定属性的所有者。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.BeginEdit">
      <summary>开始在对象上的编辑。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.CancelEdit">
      <summary>自上一次后丢弃更改 <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> 调用。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableObject.EndEdit">
      <summary>将更改推送自从上次 <see cref="M:System.ComponentModel.IEditableObject.BeginEdit" /> 或 <see cref="M:System.ComponentModel.IBindingList.AddNew" /> 调入基础对象。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary>指定此对象是否可以提供其扩展程序属性设置为指定的对象。</summary>
      <param name="extendee">
        <see cref="T:System.Object" /> 要接收扩展程序属性。</param>
      <returns>true 如果此对象可以提供扩展程序属性与指定的对象;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary>显示的生成器。</summary>
      <param name="language">正在调用生成器语言服务。</param>
      <param name="value">正在编辑表达式。</param>
      <param name="newValue">新值。</param>
      <returns>true 如果应使用替换值 <paramref name="newValue" />; 否则为 false （如果用户取消，例如）。</returns>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary>返回 <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象以便为没有实现 <see cref="T:System.Collections.IList" /> 本身。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> 可绑定到数据源从对象。</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 类的新实例。</summary>
      <param name="immutable">true 如果对象是不可变;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 Nothing）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 true 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute">
      <summary>指示此实例的值是否为默认值。</summary>
      <returns>如果此实例是该类的默认属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 类具有指定的继承级别。</summary>
      <param name="inheritanceLevel">
        <see cref="T:System.ComponentModel.InheritanceLevel" /> 指示继承，以将此属性设置为的级别。</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary>重写来测试相等性。</summary>
      <param name="value">要测试的对象。</param>
      <returns>true 对象是否相同，则为否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary>返回此对象的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>true 如果该属性的当前值是默认设置;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary>将此属性转换为字符串。</summary>
      <returns>表示此 <see cref="T:System.ComponentModel.InheritanceAttribute" /> 的字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.InitializationEventAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.InitializationEventAttribute" /> 类的新实例。</summary>
      <param name="eventName">初始化事件的名称。</param>
    </member>
    <member name="M:System.ComponentModel.INotifyDataErrorInfo.GetErrors(System.String)">
      <summary>获取针对指定属性或整个实体的验证错误。</summary>
      <param name="propertyName">要检索验证错误的属性的名称；如果检索实体级别错误，则为 null 或 <see cref="F:System.String.Empty" />。</param>
      <returns>针对属性或实体的验证错误。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 同名的组件的安装程序类型的类。</summary>
      <param name="typeName">名称 <see cref="T:System.Type" /> ，它表示此属性绑定到的组件的安装程序。 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 类，在给定 <see cref="T:System.Type" /> 表示组件的安装程序。</summary>
      <param name="installerType">一个 <see cref="T:System.Type" /> ，它表示此属性绑定到的组件的安装程序。 此类必须实现 <see cref="T:System.ComponentModel.Design.IDesigner" />。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary>返回此对象的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InstanceCreationEditor" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>当在派生类中重写，则返回指定类型的实例。</summary>
      <param name="context">上下文信息。</param>
      <param name="instanceType">指定的类型。</param>
      <returns>指定类型的实例或 null。</returns>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int16Converter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int32Converter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Int64Converter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类与给定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。</param>
      <param name="context">要用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 类，具有指定的详细说明。</summary>
      <param name="message">错误的详细的说明。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 带有指定的详细的说明和指定的异常类。</summary>
      <param name="message">错误的详细的说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类，而一条消息。</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。</param>
      <param name="context">要用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类的新实例。</summary>
      <param name="message">要与此异常一起显示的消息。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 带有指定的详细的说明和指定的异常类。</summary>
      <param name="message">错误的详细的说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 类，具有参数、 的无效值和枚举类生成一条消息。</summary>
      <param name="argumentName">导致异常的参数的名称。</param>
      <param name="invalidValue">失败的参数的值。</param>
      <param name="enumClass">一个 <see cref="T:System.Type" /> ，它表示具有有效值枚举类。</param>
    </member>
    <member name="M:System.ComponentModel.IRevertibleChangeTracking.RejectChanges">
      <summary>通过拒绝修改，将对象的状态重置为更改前的状态。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.BeginInit">
      <summary>用信号通知对象初始化即将开始。</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.EndInit">
      <summary>用信号通知对象初始化已完成。</summary>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
      <summary>创建此对象的线程上异步执行委托。</summary>
      <param name="method">一个 <see cref="T:System.Delegate" /> 采用相同的数量和类型中包含的参数的方法 <paramref name="args" />。</param>
      <param name="args">类型的数组 <see cref="T:System.Object" /> 将作为参数传递到给定的方法。 如果不需要参数，则可以为 null。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 通过调用此方法启动的表示异步操作的接口。</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
      <summary>通过调用进程一直等到启动 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 完成后，，然后返回由该进程生成的值。</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" /> 表示异步操作的接口通过调用启动 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示生成的异步操作的返回值。</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
      <summary>以同步方式创建此对象并将封送对创建的线程的调用的线程上执行委托。</summary>
      <param name="method">一个 <see cref="T:System.Delegate" /> ，其中包含要调用该控件的线程的上下文中的方法。</param>
      <param name="args">类型的数组 <see cref="T:System.Object" /> ，它表示要传递到给定方法的参数。 如果不需要参数，则可以为 null。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示正在调用的委托的返回值或 null 如果委托没有返回值。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary>引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary>引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
      <returns>true 如果可以更改此对象;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 表示每一项用于将数据绑定的属性。</summary>
      <param name="listAccessors">一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要作为可绑定集合中找到的对象。 这可能是 null。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 表示每一项用于将数据绑定的属性。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>返回列表的名称。</summary>
      <param name="listAccessors">一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象，为其返回的列表名称。 这可能是 null。</param>
      <returns>列表的名称。</returns>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.License" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary>当在派生类中重写，将释放该许可证使用的资源。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary>当在派生类中重写，从指定的资源程序集返回指定类型的已保存的许可证密钥。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> 表示个分量的类型。</param>
      <param name="resourceAssembly">
        <see cref="T:System.Reflection.Assembly" /> 使用许可证密钥。</param>
      <returns>
        <see cref="P:System.ComponentModel.License.LicenseKey" /> 为指定的类型。 此方法返回 null 除非重写它。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary>获取请求的服务是否可用。</summary>
      <param name="type">要检索的服务类型。</param>
      <returns>该服务的实例或 null 如果找不到该服务。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary>当在派生类中重写设置指定类型的许可密钥。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示与许可证密钥相关联的组件。</param>
      <param name="key">
        <see cref="P:System.ComponentModel.License.LicenseKey" /> 保存以供个分量的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类与给定 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。</param>
      <param name="context">要用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 拒绝了许可证的组件的类型的类。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的类型和被拒绝许可该组件的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的类型和被拒绝的许可证，以及一条消息，以显示该组件的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
      <param name="message">要显示的异常消息。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LicenseException" /> 类的类型和被拒绝的许可证，以及要显示的消息和引发原始异常的组件的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。</param>
      <param name="instance">未被授予许可证的组件的实例。</param>
      <param name="message">要显示的异常消息。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> ，表示原始异常。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用关于异常的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。</param>
      <param name="context">要用于反序列化的目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary>创建指定类型的实例可以在其中使用已授权的实例的上下文。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，它表示要创建的类型。</param>
      <param name="creationContext">一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定何时可以使用已授权的实例。</param>
      <returns>指定类型的实例。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary>使用指定的参数，可以在其中使用已授权的实例的上下文创建指定类型的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，它表示要创建的类型。</param>
      <param name="creationContext">一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定何时可以使用已授权的实例。</param>
      <param name="args">类型的数组 <see cref="T:System.Object" /> ，它表示该类型的参数。</param>
      <returns>使用给定的参数的数组的指定类型的实例。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary>返回给定的类型是否具有有效的许可证。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 若要查找的有效许可证。</param>
      <returns>true 如果已授权的给定的类型;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary>确定是否可以为指定类型授予的有效许可证。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示请求的对象的类型 <see cref="T:System.ComponentModel.License" />。</param>
      <returns>true 如果可以授予有效的许可证。否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary>确定是否可以为该类型的指定实例授予有效许可证。 此方法创建一个有效 <see cref="T:System.ComponentModel.License" />。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示请求许可证的对象的类型。</param>
      <param name="instance">指定的类型或类型的对象派生自指定的类型。</param>
      <param name="license">一个 <see cref="T:System.ComponentModel.License" /> ，它是有效的许可证，或 null 如果不能批准的有效许可证。</param>
      <returns>true 如果提供了有效 <see cref="T:System.ComponentModel.License" /> 可授予; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary>可防止对当前所做更改 <see cref="T:System.ComponentModel.LicenseContext" /> 给定的对象。</summary>
      <param name="contextUser">你想要锁定其当前上下文的对象。</param>
      <exception cref="T:System.InvalidOperationException">上下文已被锁定。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary>允许更改不会对当前 <see cref="T:System.ComponentModel.LicenseContext" /> 给定的对象。</summary>
      <param name="contextUser">要解锁其当前上下文的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="contextUser" /> 表示比对上一个调用中指定的不同用户 <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" />。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary>确定是否可以为指定类型授予许可证。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示请求许可证的对象的类型。</param>
      <exception cref="T:System.ComponentModel.LicenseException">一个 <see cref="T:System.ComponentModel.License" /> 不能批准。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary>确定是否可以为指定类型的实例授予许可证。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示请求许可证的对象的类型。</param>
      <param name="instance">
        <see cref="T:System.Object" /> 指定的类型或类型的派生自指定的类型。</param>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
      <exception cref="T:System.ComponentModel.LicenseException">该类型已授权，但 <see cref="T:System.ComponentModel.License" /> 不能批准。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>当在派生类中重写时获取许可证的实例或类型的组件，在给定上下文，并拒绝许可证是否引发异常。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定可以在其中使用已授权的对象。</param>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示请求该许可证的组件。</param>
      <param name="instance">一个对象，请求该许可证。</param>
      <param name="allowExceptions">true 如果 <see cref="T:System.ComponentModel.LicenseException" /> 应引发时该组件不能授予许可证; 否则为 false。</param>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 没有许可证提供程序的类。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类的新实例。</summary>
      <param name="typeName">许可证提供程序类的完全限定的名称。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 类，具有指定类型的许可证提供程序。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> 表示许可证提供程序类的类型。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="value">要比较的另一个对象。</param>
      <returns>如果 true 与此实例相等，则为 <paramref name="value" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary>返回指定类型的键。</summary>
      <param name="type">要返回键的对象类型。</param>
      <returns>一条确认消息， <paramref name="type" /> 许可参数。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary>如果有的话，则返回该组件的实例的许可证。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定可以在其中使用已授权的对象。</param>
      <param name="type">一个 <see cref="T:System.Type" /> 表示组件请求 <see cref="T:System.ComponentModel.License" />。</param>
      <param name="instance">请求的对象 <see cref="T:System.ComponentModel.License" />。</param>
      <param name="allowExceptions">true 如果 <see cref="T:System.ComponentModel.LicenseException" /> 许可证; 无法授予组件时应引发否则为 false。</param>
      <returns>有效的 <see cref="T:System.ComponentModel.License" />。 如果此方法找不到有效 <see cref="T:System.ComponentModel.License" /> 或有效 <paramref name="context" /> 参数，它将返回 null。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary>确定是否该密钥， <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> 方法检索指定的类型无效。</summary>
      <param name="key">要检查的 <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type">一个 <see cref="T:System.Type" /> 表示组件请求 <see cref="T:System.ComponentModel.License" />。</param>
      <returns>true 如果键是一个有效 <see cref="P:System.ComponentModel.License.LicenseKey" /> 为指定的类型; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类使用的值，指示是否可绑定列表。</summary>
      <param name="listBindable">true 如果该列表是可绑定;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 类使用 <see cref="T:System.ComponentModel.BindableSupport" /> 指示列表是否为可绑定。</summary>
      <param name="flags">一个 <see cref="T:System.ComponentModel.BindableSupport" /> ，该值指示是否可绑定列表。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary>返回传递的对象是否等于此 <see cref="T:System.ComponentModel.ListBindableAttribute" />。</summary>
      <param name="obj">要测试相等性的对象。</param>
      <returns>true 如果传递的对象是否等同于此 <see cref="T:System.ComponentModel.ListBindableAttribute" />; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ListBindableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary>返回是否 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 设置为默认值。</summary>
      <returns>true 如果 <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> 设置为默认值; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 给定的更改类型的类和 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 受影响。</summary>
      <param name="listChangedType">一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。</param>
      <param name="propDesc">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加、 删除或更改。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 类在给定的更改的类型和受影响的项的索引。</summary>
      <param name="listChangedType">一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。</param>
      <param name="newIndex">已添加、 更改或删除的项的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 给定的更改，受影响的项目的索引类型的类和一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述受影响的项目。</summary>
      <param name="listChangedType">一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。</param>
      <param name="newIndex">添加或更改的项的索引。</param>
      <param name="propDesc">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述项。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListChangedEventArgs" /> 给定的更改的类型和旧的和新的项的索引已移动的类。</summary>
      <param name="listChangedType">一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。</param>
      <param name="newIndex">已移动的项的新索引。</param>
      <param name="oldIndex">已移动的项旧索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListSortDescription" /> 使用指定的属性说明和方向的类。</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 描述数据源排序依据的属性。</param>
      <param name="direction">其中一个 <see cref="T:System.ComponentModel.ListSortDescription" />  值。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 具有指定的数组类 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象。</summary>
      <param name="sorts">数组 <see cref="T:System.ComponentModel.ListSortDescription" /> 要包含在集合中的对象。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary>确定如果 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 包含特定值。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 要在集合中查找。</param>
      <returns>true 如果 <see cref="T:System.Object" /> 在集合中找到; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合的内容复制到指定的数组，指定的目标数组索引处开始。</summary>
      <param name="array">从集合复制的项目目标数组。</param>
      <param name="index">开始处进行复制的目标数组的索引。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary>返回集合中的指定项的索引。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 要在集合中查找。</param>
      <returns>如果在列表中找到，则为 <paramref name="value" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 可用于循环访问集合。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary>向集合中添加一项。</summary>
      <param name="value">要添加到集合中的项。</param>
      <returns>新元素的插入位置。</returns>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某个项插入到集合中的指定索引处。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  要获取或设置集合中</param>
      <param name="value">要插入到集合的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除第一个匹配项。</summary>
      <param name="value">要从集合中移除的项。</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>从集合中的指定索引处移除项。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  若要从集合中移除</param>
      <exception cref="T:System.InvalidOperationException">在所有情况下。</exception>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 类的新实例。</summary>
      <param name="isLocalizable">true 如果应本地化属性;，否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.LocalizableAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类不使用任何参数。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 类的新实例。</summary>
      <param name="dataSource">要用作数据源的属性的名称。</param>
      <param name="displayMember">要用于显示名称的属性的名称。</param>
      <param name="valueMember">要用作值源的属性的名称。</param>
      <param name="lookupMember">要用于查找的属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary>确定是否指定 <see cref="T:System.Object" /> 是否等于当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例。</summary>
      <param name="obj">
        <see cref="T:System.Object" /> 要与当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 实例 </param>
      <returns>true 如果该对象是否等于当前实例;否则为 false, ，指示它们是否不相等。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary>释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.ComponentModel.MarshalByValueComponent" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary>在垃圾回收将某一对象回收前允许该对象尝试释放资源并执行其他清理操作。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary>获取的实施者 <see cref="T:System.IServiceProvider" />。</summary>
      <param name="service">一个 <see cref="T:System.Type" /> ，表示所需的服务的类型。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示的实施者 <see cref="T:System.IServiceProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary>返回 <see cref="T:System.String" /> 包含名称的 <see cref="T:System.ComponentModel.Component" />, ，如果有的话。 不应重写此方法。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含名称的 <see cref="T:System.ComponentModel.Component" />, ，如果有的话。null 如果 <see cref="T:System.ComponentModel.Component" /> 是未命名。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码。</summary>
      <param name="mask">一个 <see cref="T:System.String" /> ，表示输入的掩码。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码和 ASCII 限制值。</summary>
      <param name="mask">一个 <see cref="T:System.String" /> ，表示输入的掩码。</param>
      <param name="restrictToAscii">true 若要将输入限制为 ASCII 兼容字符;否则为 false 以允许整个 Unicode 字符集。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 密码字符和用法提示值。</summary>
      <param name="mask">一个 <see cref="T:System.String" /> ，表示输入的掩码。</param>
      <param name="passwordChar">一个 <see cref="T:System.Char" /> ，将显示为字符输入到密码字符串。</param>
      <param name="allowPromptAsInput">true 若要允许提示字符以输入;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码和区域性。</summary>
      <param name="mask">一个 <see cref="T:System.String" /> ，表示输入的掩码。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 区域性和 ASCII 限制值。</summary>
      <param name="mask">一个 <see cref="T:System.String" /> ，表示输入的掩码。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。</param>
      <param name="restrictToAscii">true 若要将输入限制为 ASCII 兼容字符;否则为 false 以允许整个 Unicode 字符集。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 区域性、 用法提示值、 提示字符、 密码字符和 ASCII 限制值。</summary>
      <param name="mask">一个 <see cref="T:System.String" /> ，表示输入的掩码。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。</param>
      <param name="allowPromptAsInput">一个 <see cref="T:System.Boolean" /> 值，该值指定是否应为有效的输入字符允许提示字符。</param>
      <param name="promptChar">一个 <see cref="T:System.Char" /> ，将显示为一个占位符，供用户输入。</param>
      <param name="passwordChar">一个 <see cref="T:System.Char" /> ，将显示为字符输入到密码字符串。</param>
      <param name="restrictToAscii">true 若要将输入限制为 ASCII 兼容字符;否则为 false 以允许整个 Unicode 字符集。</param>
      <exception cref="T:System.ArgumentException">Mask 参数是 null 或 <see cref="F:System.String.Empty" />。- 或 -掩码包含一个或多个非打印字符。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 类使用指定的掩码、 区域性、 密码字符和用法提示值。</summary>
      <param name="mask">一个 <see cref="T:System.String" /> ，表示输入的掩码。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 用于设置区分区域的分隔字符。</param>
      <param name="passwordChar">一个 <see cref="T:System.Char" /> ，将显示为字符输入到密码字符串。</param>
      <param name="allowPromptAsInput">true 若要允许提示字符以输入;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary>带格式的字符串的末尾添加指定的输入的字符。</summary>
      <param name="input">一个 <see cref="T:System.Char" /> 要追加到带格式的字符串值。</param>
      <returns>true 如果输入的字符成功，则添加否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>格式化字符串的末尾添加指定的输入的字符，然后输出位置和描述性信息。</summary>
      <param name="input">一个 <see cref="T:System.Char" /> 要追加到带格式的字符串值。</param>
      <param name="testPosition">格式化字符串中位置进行了尝试添加字符的位置从零开始。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。 一个输出参数。</param>
      <returns>true 如果输入的字符成功，则添加否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary>在指定的输入字符串中字符都添加到格式的字符串的末尾中。</summary>
      <param name="input">一个 <see cref="T:System.String" /> 包含要追加到带格式的字符串的字符值。</param>
      <returns>true 如果成功，则添加输入字符串中的所有字符否则为 false 以指示是否已添加任何字符。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将指定的输入字符串中的字符添加到格式的字符串的末尾，然后输出位置和描述性信息。</summary>
      <param name="input">一个 <see cref="T:System.String" /> 包含要追加到带格式的字符串的字符值。</param>
      <param name="testPosition">格式化字符串中位置进行了尝试添加字符的位置从零开始。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。 一个输出参数。</param>
      <returns>true 如果成功，则添加输入字符串中的所有字符否则为 false 以指示是否已添加任何字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary>清除所有可编辑的输入的字符从格式字符串，用提示字符替换。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary>清除所有可编辑输入中的字符格式的字符串替换与提示字符，然后输出描述性信息。</summary>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。 一个输出参数。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary>创建当前 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 的副本。</summary>
      <returns>
        <see cref="T:System.ComponentModel.MaskedTextProvider" /> 此方法创建的对象强制转换为一个对象。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>返回指定的位置使用指定的搜索方向之后分配可编辑位置的第一个位置。</summary>
      <param name="position">要开始搜索的格式化字符串中从零开始的位置。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个分配可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>返回分配指定的位置使用指定的搜索方向之间的可编辑位置的第一个位置。</summary>
      <param name="startPosition">格式化字符串中开始搜索的位置从零开始。</param>
      <param name="endPosition">格式化字符串中搜索的结尾处的位置从零开始。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个分配可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary>返回使用指定的搜索方向的指定位置之后的第一个可编辑位置的位置。</summary>
      <param name="position">要开始搜索的格式化字符串中从零开始的位置。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>返回指定的位置使用指定的搜索方向之间的第一个可编辑位置的位置。</summary>
      <param name="startPosition">格式化字符串中开始搜索的位置从零开始。</param>
      <param name="endPosition">格式化字符串中搜索的结尾处的位置从零开始。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示的从零开始的位置的第一个可编辑位置遇到; 否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary>返回使用指定的搜索方向的指定位置之后的第一个非可编辑位置的位置。</summary>
      <param name="position">要开始搜索的格式化字符串中从零开始的位置。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个文本位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>返回指定的位置使用指定的搜索方向之间的第一个非可编辑位置的位置。</summary>
      <param name="startPosition">格式化字符串中开始搜索的位置从零开始。</param>
      <param name="endPosition">格式化字符串中搜索的结尾处的位置从零开始。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个文本位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary>使用指定的搜索方向的指定位置之后返回第一个未分配的可编辑位置的位置。</summary>
      <param name="position">要开始搜索的格式化字符串中从零开始的位置。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个未分配的可编辑位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary>返回指定的位置使用指定的搜索方向之间未分配的第一个可编辑位置的位置。</summary>
      <param name="startPosition">格式化字符串中开始搜索的位置从零开始。</param>
      <param name="endPosition">格式化字符串中搜索的结尾处的位置从零开始。</param>
      <param name="direction">一个 <see cref="T:System.Boolean" /> ，该值指示搜索方向; 两个 true 向前搜索或 false 向后搜索。</param>
      <returns>如果成功， <see cref="T:System.Int32" /> 表示遇到; 第一个未分配的可编辑位置的从零开始的位置否则为 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary>确定是否指定 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 表示成功还是失败。</summary>
      <param name="hint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 通常作为从以前的操作的输出参数获得的值。</param>
      <returns>true 如果指定 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 值表示成功完成; 否则为 false 如果表示失败。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary>格式化字符串中指定的位置处插入指定的字符。</summary>
      <param name="input">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position">中要插入的字符的格式化字符串的从零开始的位置。</param>
      <returns>true 如果插入成功，则否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在格式化字符串中，返回最后一个的插入位置和该操作的状态的指定位置处插入指定的字符。</summary>
      <param name="input">要插入的 <see cref="T:System.Char" />。</param>
      <param name="position">中要插入的字符的格式化字符串的从零开始的位置。</param>
      <param name="testPosition">如果该方法成功，最后一个定位位置插入一个字符;否则，第一个位置，导致插入失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明插入操作的结果。 一个输出参数。</param>
      <returns>true 如果插入成功，则否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary>格式化字符串中指定位置处插入指定的字符串。</summary>
      <param name="input">要插入的 <see cref="T:System.String" />。</param>
      <param name="position">中要插入的输入的字符串的格式化字符串的从零开始的位置。</param>
      <returns>true 如果插入成功，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>在格式化字符串中，返回最后一个的插入位置和该操作的状态的指定位置处插入指定的字符串。</summary>
      <param name="input">要插入的 <see cref="T:System.String" />。</param>
      <param name="position">中要插入的输入的字符串的格式化字符串的从零开始的位置。</param>
      <param name="testPosition">如果该方法成功，最后一个定位位置插入一个字符;否则，第一个位置，导致插入失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明插入操作的结果。 一个输出参数。</param>
      <returns>true 如果插入成功，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary>确定指定的位置是可用于分配。</summary>
      <param name="position">若要测试的掩码中的从零开始位置。</param>
      <returns>true 如果带格式的字符串中指定的位置是可编辑的和尚未被分配到尚未;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary>确定指定的位置是可编辑。</summary>
      <param name="position">若要测试的掩码中的从零开始位置。</param>
      <returns>true 如果带格式的字符串中指定的位置是可编辑;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary>确定指定的字符是否是有效的输入的字符。</summary>
      <param name="c">
        <see cref="T:System.Char" /> 要测试其值。</param>
      <returns>true 如果指定的字符包含一个有效的输入的值;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary>确定指定的字符是否为有效的掩码字符。</summary>
      <param name="c">
        <see cref="T:System.Char" /> 要测试其值。</param>
      <returns>true 如果指定的字符包含一个有效的掩码值; 如果否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary>确定指定的字符是否为有效的密码字符。</summary>
      <param name="c">
        <see cref="T:System.Char" /> 要测试其值。</param>
      <returns>true 如果指定的字符包含一个有效的密码值; 如果否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary>从带格式的字符串中删除已分配的最后一个字符。</summary>
      <returns>true 如果成功移除了该字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>从带格式的字符串中删除已分配的最后一个字符，然后输出移除位置和描述性信息。</summary>
      <param name="testPosition">格式化字符串中实际删除此字符的位置从零开始。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。 一个输出参数。</param>
      <returns>true 如果成功移除了该字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary>从格式化字符串中移除位于指定位置分配的字符。</summary>
      <param name="position">要删除的分配字符的从零开始的位置。</param>
      <returns>true 如果成功移除了该字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary>移除指定位置从带格式的字符串之间赋值的字符。</summary>
      <param name="startPosition">要移除的第一个分配字符的从零开始的索引。</param>
      <param name="endPosition">要移除的最后一个分配字符的从零开始的索引。</param>
      <returns>true 如果成功移除了该字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>移除从格式字符串，指定的位置之间的已分配的字符，然后输出移除位置和描述性信息。</summary>
      <param name="startPosition">要移除的第一个分配字符的从零开始的索引。</param>
      <param name="endPosition">要移除的最后一个分配字符的从零开始的索引。</param>
      <param name="testPosition">如果成功，其中实际上已经移除字符; 的格式字符串中从零开始的位置否则，第一个位置的操作失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。 一个输出参数。</param>
      <returns>true 如果成功移除了该字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary>使用指定的字符值替换单个字符达到或超过指定的位置。</summary>
      <param name="input">
        <see cref="T:System.Char" /> 替换现有的值的值。</param>
      <param name="position">要搜索的第一个要替换的可编辑字符的从零开始位置。</param>
      <returns>true 如果成功替换字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>替换指定的开始和结束与指定的字符值的位置之间的单个字符，然后输出移除位置和描述性信息。</summary>
      <param name="input">
        <see cref="T:System.Char" /> 替换现有的值的值。</param>
      <param name="startPosition">格式化字符串中的替换起始位置的位置从零开始。</param>
      <param name="endPosition">格式化字符串中的替换结束位置的位置从零开始。</param>
      <param name="testPosition">如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。 一个输出参数。</param>
      <returns>true 如果成功替换字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>达到或超过指定的位置的单个字符替换为指定的字符值，然后输出移除位置和描述性信息。</summary>
      <param name="input">
        <see cref="T:System.Char" /> 替换现有的值的值。</param>
      <param name="position">要搜索的第一个要替换的可编辑字符的从零开始位置。</param>
      <param name="testPosition">如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。 一个输出参数。</param>
      <returns>true 如果成功替换字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary>替换一定范围的可编辑以指定字符串的指定位置开始的字符。</summary>
      <param name="input">
        <see cref="T:System.String" /> 用来替换现有的可编辑字符值。</param>
      <param name="position">要搜索的第一个要替换的可编辑字符的从零开始位置。</param>
      <returns>true 如果已成功替换，所有字符;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 参数为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>替换一定范围的可编辑指定的开始和结束位置使用指定的字符串之间的字符，然后输出移除位置和描述性信息。</summary>
      <param name="input">
        <see cref="T:System.String" /> 用来替换现有的可编辑字符值。</param>
      <param name="startPosition">格式化字符串中的替换起始位置的位置从零开始。</param>
      <param name="endPosition">格式化字符串中的替换结束位置的位置从零开始。</param>
      <param name="testPosition">如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。 一个输出参数。</param>
      <returns>true 如果已成功替换，所有字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>替换一定范围的可编辑的字符与指定的字符串，指定位置开始，然后输出移除位置和描述性信息。</summary>
      <param name="input">
        <see cref="T:System.String" /> 用来替换现有的可编辑字符值。</param>
      <param name="position">要搜索的第一个要替换的可编辑字符的从零开始位置。</param>
      <param name="testPosition">如果成功，其中实际上已替换的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明替换操作的结果。 一个输出参数。</param>
      <returns>true 如果已成功替换，所有字符;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary>将带格式的字符串设置为指定的输入字符串。</summary>
      <param name="input">
        <see cref="T:System.String" /> 用于设置了格式的字符串值。</param>
      <returns>true 如果已成功设置的所有字符;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>将带格式的字符串设置为指定的输入字符串，然后输出移除位置和描述性信息。</summary>
      <param name="input">
        <see cref="T:System.String" /> 用于设置了格式的字符串值。</param>
      <param name="testPosition">如果成功，其中实际设置的最后一个字符; 格式化字符串中的从零开始位置否则，第一个位置的操作失败。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 用于简单地说明设置操作的结果。 一个输出参数。</param>
      <returns>true 如果已成功设置的所有字符;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" input" /> 参数是 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary>返回可显示窗体中的带格式的字符串。</summary>
      <returns>带格式 <see cref="T:System.String" /> ，包括提示和掩码原义字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary>返回包含所有已分配的字符值的格式化的字符串。</summary>
      <returns>带格式 <see cref="T:System.String" /> 包括所有分配的字符值。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary>返回格式化的字符串，并有选择性地包括密码字符。</summary>
      <param name="ignorePasswordChar">true 若要返回的实际的可编辑字符;否则为 false 以指示 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性将会得到遵守。</param>
      <returns>带格式 <see cref="T:System.String" /> 包括文本、 提示字符和 （可选） 密码字符。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary>返回格式化的字符串，并有选择性地包括提示和原义字符。</summary>
      <param name="includePrompt">true 若要包括在返回的字符串; 提示字符否则为 false。</param>
      <param name="includeLiterals">true 若要在返回的字符串; 包括原义字符否则为 false。</param>
      <returns>带格式 <see cref="T:System.String" /> ，包含所有分配的字符值，还可以包括原义字符和提示。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>返回一个格式字符串，有选择性地包括提示、 文字，以及密码字符的子字符串。</summary>
      <param name="ignorePasswordChar">true 若要返回的实际的可编辑字符;否则为 false 以指示 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性将会得到遵守。</param>
      <param name="includePrompt">true 若要包括在返回的字符串; 提示字符否则为 false。</param>
      <param name="includeLiterals">true 若要返回原义字符中返回的字符串;否则为 false。</param>
      <param name="startPosition">格式化字符串中输出的开始处的位置从零开始。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括所有分配的字符值，还可以包括文本、 提示字符和密码字符; 否则为 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary>返回子字符串的格式字符串，有选择性地包括提示和原义字符。</summary>
      <param name="includePrompt">true 若要包括在返回的字符串; 提示字符否则为 false。</param>
      <param name="includeLiterals">true 若要在返回的字符串; 包括原义字符否则为 false。</param>
      <param name="startPosition">格式化字符串中输出的开始处的位置从零开始。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括所有分配的字符值，并 （可选） 包括原义字符和提示; 否则为 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary>返回一个格式字符串，有选择性地包括密码字符的子字符串。</summary>
      <param name="ignorePasswordChar">true 若要返回的实际的可编辑字符;否则为 false 以指示 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> 属性将会得到遵守。</param>
      <param name="startPosition">格式化字符串中输出的开始处的位置从零开始。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括文本、 提示字符和 （可选） 密码字符; 否则为 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary>返回一个带格式的字符串的子字符串。</summary>
      <param name="startPosition">格式化字符串中输出的开始处的位置从零开始。</param>
      <param name="length">要返回的字符数。</param>
      <returns>如果成功，子字符串的格式化 <see cref="T:System.String" />, ，其中包括所有分配的字符值; 否则为 <see cref="F:System.String.Empty" /> 字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary>测试是否可以在指定位置成功设置指定的字符。</summary>
      <param name="input">
        <see cref="T:System.Char" /> 要测试其值。</param>
      <param name="position">若要测试对的输入的字符的掩码中的位置。</param>
      <param name="hint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述操作的结果。 一个输出参数。</param>
      <returns>true 如果指定的字符是有效的指定位置;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary>测试是否在指定的位置将转义指定的字符。</summary>
      <param name="input">
        <see cref="T:System.Char" /> 要测试其值。</param>
      <param name="position">若要测试对的输入的字符的掩码中的位置。</param>
      <returns>true 如果指定的字符将转义在指定的位置;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary>测试是否可以成功设置指定的字符串。</summary>
      <param name="input">
        <see cref="T:System.String" /> 要测试其值。</param>
      <returns>true 如果指定的字符串表示有效的输入;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary>测试指定的字符串是否可以成功，设置然后输出位置和描述性信息。</summary>
      <param name="input">
        <see cref="T:System.String" /> 要测试其值。</param>
      <param name="testPosition">如果成功，最后一个字符的从零开始的位置实际测试;否则，第一个位置测试失败位置。 一个输出参数。</param>
      <param name="resultHint">一个 <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 简洁地描述测试操作的结果。 一个输出参数。</param>
      <returns>true 如果指定的字符串表示有效的输入;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.MemberDescriptor" /> 初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类的新实例。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，其中包含该成员及其属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 中指定的名称具有类 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和这两种旧密码属性 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组。</summary>
      <param name="oldMemberDescriptor">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 具有该成员及其属性的名称。</param>
      <param name="newAttributes">一个数组 <see cref="T:System.Attribute" /> 具有你想要添加到成员属性的对象。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类具有指定名称的成员。</summary>
      <param name="name">成员名。</param>
      <exception cref="T:System.ArgumentException">名称为空字符串 ("") 或 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.MemberDescriptor" /> 类具有指定名称的成员和属性的数组。</summary>
      <param name="name">成员名。</param>
      <param name="attributes">类型的数组 <see cref="T:System.Attribute" /> ，其中包含成员属性。</param>
      <exception cref="T:System.ArgumentException">名称为空字符串 ("") 或 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary>创建使用传递给构造函数的特性的数组的属性的集合。</summary>
      <returns>一个新 <see cref="T:System.ComponentModel.AttributeCollection" /> ，其中包含 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 属性。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary>将此实例与给定的对象，以查看它们是否相等。</summary>
      <param name="obj">要与当前类型进行比较的对象。</param>
      <returns>true 如果等效;，否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary>当在派生类中重写，将继承的类的属性添加到指定列表中的父类的属性。</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> 列出中的父类的属性。 最初，这是空的。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary>查找给定的方法通过反射，只搜索公共方法。</summary>
      <param name="componentClass">该组件包含的方法。</param>
      <param name="name">要查找的方法的名称。</param>
      <param name="args">方法，用于选择重载方法的参数数组。</param>
      <param name="returnType">要为该方法返回的类型。</param>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 表示法，或 null 如果找不到该方法。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary>查找给定的方法，通过反射提供一个选项来仅搜索公共方法。</summary>
      <param name="componentClass">该组件包含的方法。</param>
      <param name="name">要查找的方法的名称。</param>
      <param name="args">方法，用于选择重载方法的参数数组。</param>
      <param name="returnType">要为该方法返回的类型。</param>
      <param name="publicOnly">是否将搜索限制在公共方法。</param>
      <returns>一个 <see cref="T:System.Reflection.MethodInfo" /> 表示法，或 null 如果找不到该方法。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.MemberDescriptor" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>检索在成员的调用时应使用的对象。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 调用目标。</param>
      <param name="instance">潜在的调用目标。</param>
      <returns>成员调用期间使用的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary>获取在其上调用方法的组件。</summary>
      <param name="componentClass">一个 <see cref="T:System.Type" /> 表示个分量的类型，此 <see cref="T:System.ComponentModel.MemberDescriptor" /> 绑定到。 例如，如果此 <see cref="T:System.ComponentModel.MemberDescriptor" /> 描述一个属性，此参数应为在声明该属性的类。</param>
      <param name="component">要调用的对象的实例。</param>
      <returns>要调用的组件的实例。 当该属性附加到可视化设计器中，此方法返回的可视化设计器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentClass" /> 或 <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary>获取给定组件的组件的站点。</summary>
      <param name="component">你想要找到站点组件。</param>
      <returns>该组件的站点或 null 如果网站不存在。</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.MergablePropertyAttribute" /> 类的新实例。</summary>
      <param name="allowMerge">true 如果此属性可以与属于属性窗口; 中的其他对象的属性组合否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="obj">要比较的另一个对象。</param>
      <returns>如果 true 与此实例相等，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.MergablePropertyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.MultilineStringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值参数所要转换成的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>返回指定数组类型的属性的集合 <paramref name="value" /> 参数，并使用指定的上下文和属性。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>通过使用指定的上下文，返回此对象是否支持属性。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <returns>如果应调用 true 来查找此对象的属性，则为 <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化 <see cref="T:System.ComponentModel.NestedContainer" /> 类的新实例。</summary>
      <param name="owner">
        <see cref="T:System.ComponentModel.IComponent" /> 拥有此嵌套的容器。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary>创建组件容器内的网站。</summary>
      <param name="component">
        <see cref="T:System.ComponentModel.IComponent" /> 若要创建一个站点。</param>
      <param name="name">要分配给名称 <paramref name="component" />, ，或 null 要跳过分配名称。</param>
      <returns>新创建的 <see cref="T:System.ComponentModel.ISite" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary>释放由嵌套的容器使用的资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary>获取指定类型的服务对象（如果可用）。</summary>
      <param name="service">要检索的服务的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" /> 实现请求的服务，或 null 如果无法解析服务。</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.NotifyParentPropertyAttribute" /> 类，使用指定的值以确定是否对该属性的值的更改通知的父属性。</summary>
      <param name="notifyParent">true 如果父应通知的更改;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.Equals(System.Object)">
      <summary>获取一个值，该值指示指定的对象是否与当前对象相同。</summary>
      <param name="obj">要测试相等的对象。</param>
      <returns>true 如果对象是此对象; 相同否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode">
      <summary>获取此对象的哈希代码。</summary>
      <returns>属于该属性的对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>true 如果该属性的当前值是属性; 默认值否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.NullableConverter" /> 类的新实例。</summary>
      <param name="type">指定可以为 null 的类型。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> 不可以为 null 的类型。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，它表示您想要将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">值参数所要转换成的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>给定该对象的一组属性值，使用指定上下文创建与此 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联的类型的实例。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="propertyValues">新属性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 null。 此方法始终返回 null。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回一个结果，即更改此对象上的某个值是否需要调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 以使用指定的上下文创建新值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果更改此对象上的某属性需要调用 true 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和特性返回由该值参数指定的数组类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>通过使用指定的上下文，返回此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 true 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。 此参数或其属性可以为 null。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回从 <see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果从 true 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 true 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定的值对象是否对此类型和对指定的上下文有效。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值对此对象有效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 表明关联的属性不会显示带括号的类。</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 类，使用指定的值以指示是否使用括号显示的属性。</summary>
      <param name="needParenthesis">true 如果该名称应括在括号; 中否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.Equals(System.Object)">
      <summary>比较指定的对象与此对象并测试相等。</summary>
      <param name="o">要比较的对象。</param>
      <returns>true 如果相等;，否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode">
      <summary>获取此对象的哈希代码。</summary>
      <returns>属于该属性的对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>true 如果该属性的当前值是属性; 默认值否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 类中，有选择地显示密码文本。</summary>
      <param name="password">true 若要指示应将属性显示作为密码文本;否则为 false。 默认值为 false。</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary>确定两个 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 实例是否相等。</summary>
      <param name="o">要与当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 进行比较的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
      <returns>如果指定的 true 等于当前的 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />，则为 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary>返回此实例的值是默认值的指示。</summary>
      <returns>如果此实例是该类的默认属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ProgressChangedEventArgs.#ctor(System.Int32,System.Object)">
      <summary>初始化 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" /> 类的新实例。</summary>
      <param name="progressPercentage">已完成的异步任务的百分比。</param>
      <param name="userState">唯一的用户状态。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> 类的新实例。</summary>
      <param name="propertyName">已更改属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyChangingEventArgs" /> 类的新实例。</summary>
      <param name="propertyName">其值已更改的属性名称。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有名称和在指定的属性的类 <see cref="T:System.ComponentModel.MemberDescriptor" />。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，其中包含的属性，其属性的名称。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称的类 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和在这两属性 <see cref="T:System.ComponentModel.MemberDescriptor" /> 和 <see cref="T:System.Attribute" /> 数组。</summary>
      <param name="descr">一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 包含该成员及其属性的名称。</param>
      <param name="attrs">
        <see cref="T:System.Attribute" /> 数组，其中包含你想要与属性关联的属性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 类具有指定的名称和属性。</summary>
      <param name="name">属性的名称。</param>
      <param name="attrs">类型的数组 <see cref="T:System.Attribute" /> ，其中包含属性特性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>支持此属性更改时得到通知其他对象。</summary>
      <param name="component">要添加的处理程序的组件。</param>
      <param name="handler">要作为侦听器添加的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary>当在派生类中重写返回是否重置对象更改其值。</summary>
      <param name="component">要测试其重置功能的组件。</param>
      <returns>true 如果重置组件，更改其值;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary>创建指定类型的实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，它表示要创建的类型。</param>
      <returns>类型的新实例。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary>将此与另一个对象以确定它们是否等效进行比较。</summary>
      <param name="obj">要与此比较的对象 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>true 如果这些值是等效的;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary>添加的特性 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到指定列表中的父类的属性。</summary>
      <param name="attributeList">
        <see cref="T:System.Collections.IList" /> 列出中的父类的属性。 最初，这是空的。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary>返回的默认 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <returns>属性描述符的集合。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary>返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 使用指定的特性数组作为筛选器。</summary>
      <param name="filter">要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 具有与指定的特性匹配的属性。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary>返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 给定对象的。</summary>
      <param name="instance">要为其获取属性的组件。</param>
      <returns>具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 给定对象使用指定的特性数组作为筛选器。</summary>
      <param name="instance">要为其获取属性的组件。</param>
      <param name="filter">要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary>获取指定类型的编辑器。</summary>
      <param name="editorBaseType">编辑器，用于区分某个属性支持的多个编辑器的基类型。</param>
      <returns>请求的编辑器类型的实例或 null 如果找不到一个编辑器。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>此对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary>此方法返回在成员的调用时应使用的对象。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 调用目标。</param>
      <param name="instance">潜在的调用目标。</param>
      <returns>
        <see cref="T:System.Object" /> 应在成员调用期间使用。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary>返回使用其名称的类型。</summary>
      <param name="typeName">要检索的类型程序集限定名称。</param>
      <returns>一个 <see cref="T:System.Type" /> 给定的类型名称相匹配或 null 如果找不到匹配项。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary>当在派生类中重写，在组件上获取的属性的当前值。</summary>
      <param name="component">若要检索的值的属性具有的组件。</param>
      <returns>给定组件属性的值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary>检索当前一套 ValueChanged 事件处理程序的特定组件</summary>
      <param name="component">要为其检索事件处理程序组件。</param>
      <returns>一个组合多路广播的事件处理程序中，或 null 如果没有事件处理程序当前分配到 <paramref name="component" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary>引发 ValueChanged 您实现的事件。</summary>
      <param name="component">引发事件的对象。</param>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>支持此属性更改时得到通知其他对象。</summary>
      <param name="component">要移除的处理程序的组件。</param>
      <param name="handler">要作为侦听器移除的委托。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="handler" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary>当在派生类中重写，将该组件的此属性的值重置为默认值。</summary>
      <param name="component">具有要重置为默认值的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>当在派生类中重写为不同的值设置个分量的值。</summary>
      <param name="component">要设置的属性值具有的组件。</param>
      <param name="value">新值。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>当在派生类中重写，确定一个值，该值指示是否需要持久保留此属性的值。</summary>
      <param name="component">具有要检查其持久性的属性的组件。</param>
      <returns>true 如果应保留该属性;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类的新实例。</summary>
      <param name="properties">类型的数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 提供此集合的属性。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 类，它是只读的。</summary>
      <param name="properties">类型的数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 提供此集合的属性。</param>
      <param name="readOnly">如果 true, ，指定不能修改该集合。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary>将指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加到集合。</summary>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>索引 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已添加到集合。</returns>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary>删除所有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 来自集合的对象。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary>返回集合中是否包含给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">要在集合中查找的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns>true 如果集合包含给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary>将整个集合复制到数组，从指定的索引号处开始。</summary>
      <param name="array">一个数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象复制到集合中的元素。</param>
      <param name="index">索引 <paramref name="array" /> 参数开始复制处开始。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary>返回 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称中使用布尔型来指示是否忽略大小写。</summary>
      <param name="name">名称 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 若要从集合中返回。</param>
      <param name="ignoreCase">true 如果您想要忽略的属性名称; 的大小写否则为 false。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称或 null 如果属性不存在。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary>返回此类的枚举数。</summary>
      <returns>类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary>返回的索引给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 要返回的索引。</param>
      <returns>索引的给定 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary>添加 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 到集合中指定的索引号。</summary>
      <param name="index">在其中添加索引 <paramref name="value" /> 到集合的参数。</param>
      <param name="value">要添加到集合中的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary>此集合中，使用指定的成员进行排序 <see cref="T:System.Collections.IComparer" />。</summary>
      <param name="sorter">用于进行排序的比较器 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary>对此集合的成员进行排序。 指定的顺序是首先应用，然后为此集合，通常为字母顺序的默认排序。</summary>
      <param name="names">一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary>从集合中移除指定的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary>删除 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 集合中的指定索引处。</summary>
      <param name="index">索引 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 若要从集合中移除。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary>对此集合的成员使用默认排序，对于此集合，通常为字母顺序排序。</summary>
      <returns>一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary>此集合中，使用指定的成员进行排序 <see cref="T:System.Collections.IComparer" />。</summary>
      <param name="comparer">用于进行排序的比较器 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。</param>
      <returns>一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary>对此集合的成员进行排序。 指定的顺序是首先应用，然后为此集合，通常为字母顺序的默认排序。</summary>
      <param name="names">一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。</param>
      <returns>一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary>对此集合的成员进行排序。 指定的顺序首先应用，然后使用指定的排序 <see cref="T:System.Collections.IComparer" />。</summary>
      <param name="names">一个用于描述的排序顺序的字符串数组 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。</param>
      <param name="comparer">用于进行排序的比较器 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 此集合中的对象。</param>
      <returns>一个新 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>向 <see cref="T:System.Collections.IDictionary" /> 添加一个带有所提供的键和值的元素。</summary>
      <param name="key">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <param name="value">用作要添加的元素的键的 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除所有元素。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary>确定是否 <see cref="T:System.Collections.IDictionary" /> 包含带有指定键的元素。</summary>
      <param name="key">要在 <see cref="T:System.Collections.IDictionary" /> 中定位的键。</param>
      <returns>如果 true 包含具有键的元素，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary>返回此类的枚举数。</summary>
      <returns>类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary>从 <see cref="T:System.Collections.IDictionary" /> 中移除带有指定键的元素。</summary>
      <param name="key">要移除的元素的键。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary>将某项添加到 <see cref="T:System.Collections.IList" /> 中。</summary>
      <param name="value">要添加到集合中的项。</param>
      <returns>新元素的插入位置。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary>从集合中移除所有项。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定集合中是否包含特定值。</summary>
      <param name="value">要在集合中定位的项。</param>
      <returns>true 如果找到该项，则集合中的否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定集合中的指定项的索引。</summary>
      <param name="value">要在集合中定位的项。</param>
      <returns>索引 <paramref name="value" /> 如果位于列表中，否则为-1。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将某个项插入到集合中的指定索引处。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">要插入到集合的项。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary>从集合中移除指定的值的第一个匹配项。</summary>
      <param name="value">要从集合中移除的项。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>移除指定索引处的项。</summary>
      <param name="index">要移除的项的从零开始的索引。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用指定的选项卡类名。</summary>
      <param name="tabClassName">要创建的选项卡类型的程序集限定的名称。 这种格式约定的示例，请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用指定的选项卡的类名称和选项卡上的作用域。</summary>
      <param name="tabClassName">要创建的选项卡类型的程序集限定的名称。 这种格式约定的示例，请参阅 <see cref="P:System.Type.AssemblyQualifiedName" />。</param>
      <param name="tabScope">一个 <see cref="T:System.ComponentModel.PropertyTabScope" /> ，该值指示此选项卡的作用域。 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用的选项卡上指定的类型。</summary>
      <param name="tabClass">要创建的选项卡的类型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 类使用的指定的类型的选项卡和选项卡上的作用域。</summary>
      <param name="tabClass">要创建的选项卡的类型。</param>
      <param name="tabScope">一个 <see cref="T:System.ComponentModel.PropertyTabScope" /> ，该值指示此选项卡的作用域。 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tabScope" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary>返回一个值，该值指示此实例是否等于指定的属性。</summary>
      <param name="other">一个 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 要与此实例进行比较或 null。</param>
      <returns>true 如果 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例是否相等; 否则为 false。</returns>
      <exception cref="T:System.TypeLoadException">指定的类型 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性 <paramref name="other" /> 找不到参数。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否等于指定的对象。</summary>
      <param name="other">要与此示例比较的对象，或 null。</param>
      <returns>true 如果 <paramref name="other" /> 指的是相同 <see cref="T:System.ComponentModel.PropertyTabAttribute" /> 实例; 否则为 false。</returns>
      <exception cref="T:System.TypeLoadException">指定的类型 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 属性<paramref name=" other" /> 找不到参数。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary>获取此对象的哈希代码。</summary>
      <returns>属于该属性的对象的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary>初始化使用指定的选项卡类名称和选项卡上的作用域数组，该属性。</summary>
      <param name="tabClassNames">类型为属性窗口上的选项卡创建的完全限定的类型名称的数组。</param>
      <param name="tabScopes">每个选项卡的作用域。 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。</param>
      <exception cref="T:System.ArgumentException">一个或多个中的值 <paramref name="tabScopes" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。- 或 -长度 <paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 数组不匹配。- 或 -<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary>初始化使用指定的选项卡类名称和选项卡上的作用域数组，该属性。</summary>
      <param name="tabClasses">选项卡来创建的类型。</param>
      <param name="tabScopes">每个选项卡的作用域。 如果范围是 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />, ，只对具有相应的组件显示 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。 如果它是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" />, ，显示了该文档上的所有组件。</param>
      <exception cref="T:System.ArgumentException">一个或多个中的值 <paramref name="tabScopes" /> 不是 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> 或 <see cref="F:System.ComponentModel.PropertyTabScope.Component" />。- 或 -长度 <paramref name="tabClassNames" /> 和 <paramref name="tabScopes" /> 数组不匹配。- 或 -<paramref name="tabClassNames" /> 或 <paramref name="tabScopes" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 同名的属性以及它的接收器类型的类。</summary>
      <param name="propertyName">将扩展到指定类型的对象的属性的名称。</param>
      <param name="receiverTypeName">此属性可以扩展数据类型的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 具有名称的属性的类并将其 <see cref="T:System.Type" />。</summary>
      <param name="propertyName">将扩展到指定类型的对象的属性的名称。</param>
      <param name="receiverType">
        <see cref="T:System.Type" /> 可接收属性的对象的数据类型。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 如果给定对象的值是否等于当前;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 类的新实例。</summary>
      <param name="isReadOnly">true 用于表明此属性绑定到的属性是只读的; false 来显示该属性是读/写。</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="value">要比较的另一个对象。</param>
      <returns>如果 true 与此实例相等，则为 <paramref name="value" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 类的新实例。</summary>
      <param name="recommendedAsConfigurable">true 如果此属性绑定到的属性可以用作应用程序设置;否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary>指示此实例与指定对象是否相等。</summary>
      <param name="obj">要比较的另一个对象。</param>
      <returns>如果 true 与此实例相等，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary>指示此实例的值是否为类的默认值。</summary>
      <returns>如果此实例是该类的默认属性，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.ReferenceConverter" /> 类的新实例。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，它表示要与此引用转换器关联的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为使用指定的上下文的引用对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>true 如果此对象可以执行转换，则否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的对象转换为引用类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为使用指定的上下文和参数的引用类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <returns>被转换的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取对引用数据类型的标准值集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 为独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的穷举列表。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可以从列表中选取的值的标准集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 可以调用来查找一组公共对象支持的值。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回一个值，该值指示是否可以将特定的值添加到标准值集合。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 提供另一个上下文。</param>
      <param name="value">要检查的值。</param>
      <returns>true 如果值允许的并且可以添加到标准值集合中; false 如果值不能添加到标准值集合。</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 与已更改组件的类。</summary>
      <param name="componentChanged">已更改的组件。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.RefreshEventArgs" /> 类，具有已更改组件的类型。</summary>
      <param name="typeChanged">
        <see cref="T:System.Type" /> 更改。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.#ctor(System.ComponentModel.RefreshProperties)">
      <summary>初始化 <see cref="T:System.ComponentModel.RefreshPropertiesAttribute" /> 类的新实例。</summary>
      <param name="refresh">一个 <see cref="T:System.ComponentModel.RefreshProperties" /> 值，该值指示刷新的性质。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.Equals(System.Object)">
      <summary>重写该对象的 <see cref="Overload:System.Object.Equals" /> 方法。</summary>
      <param name="value">要测试相等的对象。</param>
      <returns>true 如果指定的对象是否相同，则为否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.GetHashCode">
      <summary>返回该对象的哈希代码。</summary>
      <returns>该属性所属的对象哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>true 如果该属性的当前值是默认设置;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 类的新实例。</summary>
      <param name="runInstaller">true 如果程序集; 安装过程中应调用安装程序否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary>确定是否指定的值 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 等同于当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" />。</summary>
      <param name="obj">要比较的对象。</param>
      <returns>如果指定的 true 等于当前的 <see cref="T:System.ComponentModel.RunInstallerAttribute" />，则为 <see cref="T:System.ComponentModel.RunInstallerAttribute" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary>生成当前的哈希代码 <see cref="T:System.ComponentModel.RunInstallerAttribute" />。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.RunInstallerAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary>确定此属性是否为默认值。</summary>
      <returns>true 如果该属性的默认值为此属性类;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.RunWorkerCompletedEventArgs.#ctor(System.Object,System.Exception,System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" /> 类的新实例。</summary>
      <param name="result">异步操作的结果。</param>
      <param name="error">异步操作过程中发生任何错误。</param>
      <param name="cancelled">一个值，该值指示是否已取消异步操作。</param>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SByteConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> 类的新实例。</summary>
      <param name="bindable">true 若要指定适合将绑定到; 设置属性否则为 false。</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 Nothing）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 true 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.SingleConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.StringConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将给定的源类型的对象转换为使用指定的上下文的字符串。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的值转换为 <see cref="T:System.String" /> 对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">要使用的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary>检查以确认它不包含"\"的计算机名称的语法。</summary>
      <param name="value">包含要检查的计算机名称的字符串。</param>
      <returns>true 如果 <paramref name="value" /> 与正确的计算机名称格式匹配; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary>检查以查看它是否以"\\"开头的路径的语法。</summary>
      <param name="value">包含要检查的路径的字符串。</param>
      <returns>true 如果 <paramref name="value" /> 与正确的路径格式匹配; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary>检查以查看是否以"\"或驱动器号"c:"开头的路径的语法。</summary>
      <param name="value">包含要检查的路径的字符串。</param>
      <returns>true 如果 <paramref name="value" /> 与正确的路径格式匹配; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TimeSpanConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以转换为给定的源类型的对象 <see cref="T:System.TimeSpan" /> 使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示您希望从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定类型转换为 <see cref="T:System.TimeSpan" />。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="value" /> 不是有效的值为目标类型。</exception>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的对象转换为另一种类型。</summary>
      <param name="context">一个格式化程序的上下文。</param>
      <param name="culture">到的区域性 <paramref name="value" /> 将被转换。</param>
      <param name="value">要转换的对象。</param>
      <param name="destinationType">对象要转换为的类型。</param>
      <returns>被转换的对象。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类，并指定是否使用默认初始化值。</summary>
      <param name="defaultType">true 若要创建默认的类型; 工具箱项目属性 false ，将此属性没有默认值工具箱项支持关联。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类使用的类型指定的名称。</summary>
      <param name="toolboxItemTypeName">此工具箱项，并包含类型的程序集的类型的名称。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> 类使用指定的工具箱项的类型。</summary>
      <param name="toolboxItemType">工具箱项的类型。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 Nothing）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 true 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary>获取一个值，该值指示该属性的当前值是否为该属性的默认值。</summary>
      <returns>true 如果该属性的当前值是默认设置;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类使用指定的筛选器字符串。</summary>
      <param name="filterString">工具箱项的筛选器字符串。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 类使用指定的筛选器字符串和类型。</summary>
      <param name="filterString">工具箱项的筛选器字符串。</param>
      <param name="filterType">一个 <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> ，该值指示筛选器类型。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">要与此实例或 null 引用 （Visual Basic 中的 Nothing）进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果 true 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary>指示指定的对象是否具有匹配的筛选器字符串。</summary>
      <param name="obj">要测试匹配的筛选器字符串的对象。</param>
      <returns>true 如果指定的对象具有匹配的筛选器字符串; 否则为否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary>返回表示当前对象的字符串。</summary>
      <returns>表示当前对象的字符串。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回该转换器是否可以使用指定上下文将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary>返回此转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，它表示您想要将从转换的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，它表示您想要将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary>返回此转换器是否可以将对象转换为指定的类型。</summary>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，它表示您想要将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary>将给定的值转换为此转换器的类型。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>将给定的字符串转换为此转换器，使用固定区域性和指定的上下文的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary>将给定的字符串转换为此转换器，使用固定区域性的类型。</summary>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary>将给定的文本转换为一个对象，使用指定的上下文和区域性信息。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 null，则采用当前区域性。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary>将给定的文本转换为一个对象，使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="text">要转换的 <see cref="T:System.String" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary>将指定的文本转换为一个对象。</summary>
      <param name="text">要转换的对象文本表示。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的文本。</returns>
      <exception cref="T:System.NotSupportedException">无法将字符串转换为适当的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>使用指定的上下文和区域性信息将给定值对象转换为指定的类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 转换 <paramref name="value" /> 参数。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的类型使用的参数。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 转换 <paramref name="value" /> 参数。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>将指定的值转换为区域性不变的字符串表示形式，使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>一个 <see cref="T:System.String" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary>将指定的值转换为区域性不变的字符串表示形式。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>一个 <see cref="T:System.String" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将给定的值转换为字符串表示形式，使用指定的上下文和区域性信息。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>将给定的值转换为字符串表示形式，并使用给定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary>将指定的值转换为字符串表示形式。</summary>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary>重新创建 <see cref="T:System.Object" /> 对象给定的一组属性值。</summary>
      <param name="propertyValues">
        <see cref="T:System.Collections.IDictionary" /> 表示新属性值的字典。</param>
      <returns>如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 null。 此方法始终返回 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary>创建类型的实例这 <see cref="T:System.ComponentModel.TypeConverter" /> 相关联，则使用指定的上下文中，为该对象提供一组属性值。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="propertyValues">新属性值的 <see cref="T:System.Collections.IDictionary" />。</param>
      <returns>如果表示给定 <see cref="T:System.Collections.IDictionary" />，则为 <see cref="T:System.Object" />，或如果无法创建对象，则为 null。 此方法始终返回 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary>返回当转换无法执行时所引发的异常。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 若要转换，或 null 如果该对象不可用。</param>
      <returns>
        <see cref="T:System.Exception" /> ，表示要在不能执行的转换时引发的异常。</returns>
      <exception cref="T:System.NotSupportedException">此方法会自动引发。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary>返回当转换无法执行时所引发的异常。</summary>
      <param name="value">
        <see cref="T:System.Object" /> 若要转换，或 null 如果该对象不可用。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示转换试图将转换为的类型。</param>
      <returns>
        <see cref="T:System.Exception" /> ，表示要在不能执行的转换时引发的异常。</returns>
      <exception cref="T:System.NotSupportedException">此方法会自动引发。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary>返回更改此对象上的某个值是否要求对调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 方法来创建一个新值。</summary>
      <returns>如果更改此对象上的某属性需要调用 true 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>返回更改此对象上的某个值是否要求对调用 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> 若要创建一个新值，使用指定的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果更改此对象上的某属性需要调用 true 以创建新值，则为 <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回由值参数，使用指定的上下文中指定的数组的类型的属性的集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>使用指定的上下文和特性返回由该值参数指定的数组类型的属性集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <param name="attributes">用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary>返回由值参数指定的数组类型的属性集合。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，它指定要为其获取属性的数组类型。</param>
      <returns>具有为此数据类型公开的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />，或者，如果没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary>返回此对象是否支持属性。</summary>
      <returns>如果应调用 true 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>通过使用指定的上下文，返回此对象是否支持属性。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 true 来查找此对象的属性，则为 <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary>从适用于此类型转换器的数据类型的默认上下文中返回的标准值的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 包含一组标准的有效的值或 null 如果数据类型不支持标准值集。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>当与格式上下文一起提供时，返回此类型转换器设计用于的数据类型的标准值集合。</summary>
      <param name="context">提供格式上下文的 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，可用来提取有关从中调用此转换器的环境的附加信息。 此参数或其属性可以为 null。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary>返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为独占列表。</summary>
      <returns>如果从 true 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回从 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> 返回的标准值的集合是否为可能值的独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果从 true 返回的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 是可能值的穷举列表，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；如果还可能有其他值，则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary>返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <returns>如果应调用 true 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>使用指定的上下文返回此对象是否支持可以从列表中选取的标准值集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>如果应调用 true 来查找对象支持的一组公共值，则为 <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定的值对象是否对此类型和对指定的上下文有效。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的值对此对象有效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary>返回给定的值的对象是否对此类型有效。</summary>
      <param name="value">要测试其有效性的对象。</param>
      <returns>如果指定的值对此对象有效，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" /> ，表示此属性描述符绑定的组件的类型。</param>
      <param name="name">属性的名称。</param>
      <param name="propertyType">一个 <see cref="T:System.Type" /> ，它表示此属性的数据类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> 类的新实例。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" /> ，表示此属性描述符绑定的组件的类型。</param>
      <param name="name">属性的名称。</param>
      <param name="propertyType">一个 <see cref="T:System.Type" /> ，它表示此属性的数据类型。</param>
      <param name="attributes">
        <see cref="T:System.Attribute" /> 具有要与属性关联的特性数组。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary>返回是否会重置组件更改个分量的值。</summary>
      <param name="component">要测试其重置功能的组件。</param>
      <returns>true 如果重置组件，更改 component; 的值否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary>重置组件的此属性的值。</summary>
      <param name="component">具有要重置的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>返回此属性的值是否可以保持不变。</summary>
      <param name="component">若要检查其持久性的属性具有的组件。</param>
      <returns>true 如果该属性的值可以持续;否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary>对属性的集合进行排序。</summary>
      <param name="props">一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 具有要排序的属性。</param>
      <param name="names">想要出现在集合中的属性的顺序的名称的数组。</param>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> ，其中包含已排序的属性。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 类的新实例。</summary>
      <param name="values">
        <see cref="T:System.Collections.ICollection" /> ，它表示要放入集合中的对象。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary>将此集合的内容复制到数组。</summary>
      <param name="array">
        <see cref="T:System.Array" /> ，它表示要复制到数组。</param>
      <param name="index">从其开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary>返回该集合的枚举数。</summary>
      <returns>类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将此集合的内容复制到数组。</summary>
      <param name="array">要复制到的数组。</param>
      <param name="index">中开始复制处的数组的索引。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类使用默认类型转换器，这是一个空字符串 ("")。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类，使用指定的类型名称作为数据转换器此属性绑定到的对象。</summary>
      <param name="typeName">此属性绑定到要使用的对象的数据转换为的类的完全限定的名称。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 类，此属性绑定到的对象为数据转换器使用指定的类型。</summary>
      <param name="type">一个 <see cref="T:System.Type" /> ，表示要用于此属性绑定到的对象的数据转换的转换器类的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.Equals(System.Object)">
      <summary>返回给定对象的值是否等于当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" />。</summary>
      <param name="obj">要测试值的相等性的对象。</param>
      <returns>true 给定对象的值是否等于当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" />; 否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverterAttribute.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>当前 <see cref="T:System.ComponentModel.TypeConverterAttribute" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 类使用父类型说明提供程序。</summary>
      <param name="parent">父类型说明提供程序。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>创建可替换为另一种数据类型的对象。</summary>
      <param name="provider">可选的服务提供程序。</param>
      <param name="objectType">要创建的对象的类型。 此参数且永远不会 null。</param>
      <param name="argTypes">表示要传递给该对象的构造函数的参数类型的类型的可选数组。 此数组可为 null 或长度为零。</param>
      <param name="args">要传递给对象的构造函数的可选参数值数组。</param>
      <returns>Substitute <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary>获取每个对象缓存中，作为访问 <see cref="T:System.Collections.IDictionary" /> 的键/值对。</summary>
      <param name="instance">要为其获取缓存对象。</param>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 如果所提供的对象支持缓存; 否则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary>获取给定对象的扩展的自定义类型描述符。</summary>
      <param name="instance">要为其获取扩展的类型描述符对象。</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该对象提供扩展元数据。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary>获取指定对象的扩展程序提供。</summary>
      <param name="instance">要获取扩展程序提供程序的对象。</param>
      <returns>扩展程序提供程序的数组 <paramref name="instance" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary>获取指定组件的名称或 null 如果该组件没有名称。</summary>
      <param name="component">指定的组件。</param>
      <returns>指定组件的名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary>针对执行正常反射给定的对象。</summary>
      <param name="instance">类型的实例 (不应为 null)。</param>
      <returns>为此反射的类型 <paramref name="instance" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary>针对执行正常反射类型。</summary>
      <param name="objectType">要检索的对象的类型 <see cref="T:System.Reflection.IReflect" />。</param>
      <returns>为此反射的类型 <paramref name="objectType" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary>针对执行正常反射给定对象具有给定类型。</summary>
      <param name="objectType">要检索的对象的类型 <see cref="T:System.Reflection.IReflect" />。</param>
      <param name="instance">类型的实例。 可以为 null。</param>
      <returns>为此反射的类型 <paramref name="objectType" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary>将反射类型转换为运行时类型。</summary>
      <param name="reflectionType">要转换为其等效的运行时的类型。</param>
      <returns>一个 <see cref="T:System.Type" /> ，它表示的运行时等效项 <paramref name="reflectionType" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reflectionType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary>获取给定对象的自定义类型描述符。</summary>
      <param name="instance">类型的实例。 可以是 null 如果没有实例传递给 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该类型提供的元数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary>获取给定类型的自定义类型描述符。</summary>
      <param name="objectType">要为其检索类型描述符的对象的类型。</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该类型提供的元数据。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary>获取给定的类型和对象的自定义类型描述符。</summary>
      <param name="objectType">要为其检索类型描述符的对象的类型。</param>
      <param name="instance">类型的实例。 可以是 null 如果没有实例传递给 <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns>
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 可以为该类型提供的元数据。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary>获取一个值，该值指示指定的类型是否兼容的类型说明和及其类型说明提供程序链。</summary>
      <param name="type">要测试兼容性的类型。</param>
      <returns>true 如果 <paramref name="type" /> 兼容的类型说明和及其类型说明提供程序链; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类使用指定的类型名称。</summary>
      <param name="typeName">类型的限定的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProviderAttribute.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.ComponentModel.TypeDescriptionProviderAttribute" /> 类的新实例。</summary>
      <param name="type">要将存储在该属性的类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary>向目标组件实例添加类级别属性。</summary>
      <param name="instance">目标组件的实例。</param>
      <param name="attributes">要添加到组件的类的 <see cref="T:System.Attribute" /> 对象的数组。</param>
      <returns>用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary>向目标组件类型添加类级别属性。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">要添加到组件的类的 <see cref="T:System.Attribute" /> 对象数组。</param>
      <returns>用于添加指定属性的新创建的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary>为给定的编辑器基类型添加编辑器表。</summary>
      <param name="editorBaseType">要添加编辑器表的编辑器基类型。 如果针对此类型的表已存在，此方法将不起作用。</param>
      <param name="table">要添加的 <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>为某个组件的单个实例添加类型描述提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>为组件类添加类型说明提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>为某个组件的单个实例添加类型描述提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>为组件类添加类型说明提供程序。</summary>
      <param name="provider">要添加的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary>在两个对象之间创建主要和辅助关联。</summary>
      <param name="primary">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary">辅助 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="primary" /> 等于 <paramref name="secondary" />。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary>创建与指定组件关联的具有特定类型的设计器的实例。</summary>
      <param name="component">指定要与设计器关联的组件的 <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="designerBaseType">表示要创建的设计器的类型的 <see cref="T:System.Type" />。</param>
      <returns>如果找到组件的设计器实例，则为 <see cref="T:System.ComponentModel.Design.IDesigner" />；如果未找到设计器，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary>当传递现有的 <see cref="T:System.ComponentModel.EventDescriptor" /> 时，创建和现有事件描述符相同的新的事件描述符。</summary>
      <param name="componentType">要为其创建新事件的组件类型。</param>
      <param name="oldEventDescriptor">现有事件信息。</param>
      <param name="attributes">新属性。</param>
      <returns>将指定元数据属性与现有元数据属性进行合并的新 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>通过从类型上的指定事件动态生成描述符信息，创建与现有事件描述符相同的新事件描述符。</summary>
      <param name="componentType">该事件依赖的组件的类型。</param>
      <param name="name">事件的名称。</param>
      <param name="type">处理该事件的委托的类型。</param>
      <param name="attributes">此事件的属性。</param>
      <returns>绑定到类型的 <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary>创建可替换为另一种数据类型的对象。</summary>
      <param name="provider">提供 <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> 服务的服务提供程序。 此参数可以为 null。</param>
      <param name="objectType">要创建的对象的 <see cref="T:System.Type" />。</param>
      <param name="argTypes">要传递给对象的构造函数的可选参数类型数组。 此参数可以是 null 或长度为零的数组。</param>
      <param name="args">要传递给对象的构造函数的可选参数值数组。 如果不是 null，元素数则必须与 <paramref name="argTypes" /> 相同。</param>
      <returns>如果找到关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />，则为替代数据类型的实例；否则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="objectType" /> 是 null，或者，当 <paramref name="argTypes" /> 不是 null 时，则 <paramref name="args" /> 是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argTypes" /> 和 <paramref name="args" /> 具有不同的元素数。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary>使用指定的现有 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 和特性数组，从现有的属性描述符创建一个新的属性描述符。</summary>
      <param name="componentType">属性是其一个成员的组件的 <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor">现有的属性描述符。</param>
      <param name="attributes">此属性的新特性。</param>
      <returns>一个将指定的元数据属性与现有的元数据属性进行合并的新 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary>使用指定的属性名称、类型和属性数组创建属性描述符，并将其动态地绑定到类型。</summary>
      <param name="componentType">属性是其一个成员的组件的 <see cref="T:System.Type" />。</param>
      <param name="name">属性的名称。</param>
      <param name="type">属性的 <see cref="T:System.Type" />。</param>
      <param name="attributes">此属性的新特性。</param>
      <returns>绑定到指定类型并具有与现有元数据属性合并的指定元数据属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary>返回与指定的主要对象关联的类型的实例。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="primary">关联的主要对象。</param>
      <returns>如果存在关联，则为已与主要对象相关联的辅助类型的一个实例；否则，如果不存在指定的关联，为 <paramref name="primary" />。</returns>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary>返回指定组件的属性的集合。</summary>
      <param name="component">要为其获取特性的组件。</param>
      <returns>包含该组件的属性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果 <paramref name="component" /> 为 null，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary>为指定组件返回特性集合，并且创建了一个指示自定义类型描述符的布尔值。</summary>
      <param name="component">要为其获取特性的组件。</param>
      <param name="noCustomTypeDesc">如果 <paramref name="component" /> 的类型是 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />，使用自定义类型说明符中特性的基准要求集时为 true；否则为 false。</param>
      <returns>具有组件的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果组件为 null，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary>返回指定组件类型的属性集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>具有该组件类型的特性的 <see cref="T:System.ComponentModel.AttributeCollection" />。 如果组件为 null，则此方法返回一个空集合。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary>使用默认类型描述符，返回指定组件的类的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <returns>一个包含指定组件的类的名称的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary>使用自定义类型描述符返回指定组件的类的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <returns>一个包含指定组件的类的名称的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary>返回指定类型的类的名称。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>一个 <see cref="T:System.String" />，其中包含指定组件类型的类的名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="componentType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary>使用默认类型描述符返回指定组件的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <returns>包含指定组件的名称的 <see cref="T:System.String" />，如果没有任何组件名，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary>使用自定义类型描述符返回指定组件的名称。</summary>
      <param name="component">需要其类名的 <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc">若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <returns>为指定组件的类名，或者，如果不存在任何组件名，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary>返回指定组件类型的类型转换器。</summary>
      <param name="component">要为其获取转换器的组件。</param>
      <returns>指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary>为具有自定义类型描述符的指定组件类型返回一个类型转换器。</summary>
      <param name="component">要为其获取转换器的组件。</param>
      <param name="noCustomTypeDesc">若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <returns>指定组件的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary>返回指定类型的类型转换器。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>指定类型的 <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary>返回指定组件的默认事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <returns>如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary>返回具有自定义类型描述符的组件的默认事件。</summary>
      <param name="component">要获取其事件的组件。</param>
      <param name="noCustomTypeDesc">若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <returns>带有默认事件的 <see cref="T:System.ComponentModel.EventDescriptor" />；如果没有事件，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary>返回指定组件类型的默认事件。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>如果有默认事件，则为 <see cref="T:System.ComponentModel.EventDescriptor" />，或者，如果没有任何事件，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary>返回指定组件的默认属性。</summary>
      <param name="component">要获取其默认属性的组件。</param>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 null。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary>使用自定义类型描述符返回指定组件的默认属性。</summary>
      <param name="component">要获取其默认属性的组件。</param>
      <param name="noCustomTypeDesc">若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 null。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary>返回指定类型组件的默认属性。</summary>
      <param name="componentType">表示要获取其属性的类的 <see cref="T:System.Type" />。</param>
      <returns>具有默认属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />；如果没有属性，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary>获取指定组件的具有指定基类型的编辑器。</summary>
      <param name="component">要为其获取编辑器的组件。</param>
      <param name="editorBaseType">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <returns>可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary>为指定组件返回具有指定基类型和自定义类型描述符的编辑器。</summary>
      <param name="component">要为其获取编辑器的组件。</param>
      <param name="editorBaseType">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <param name="noCustomTypeDesc">表示是否应考虑自定义类型描述信息的标志。</param>
      <returns>可转换为指定编辑器类型的编辑器的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 或 <paramref name="editorBaseType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary>返回具有指定基类型的指定类型的编辑器。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="editorBaseType">表示要查找的编辑器的基类型的 <see cref="T:System.Type" />。</param>
      <returns>可转换为指定基类型的编辑器对象的一个实例，如果找不到请求类型的编辑器，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 或 <paramref name="editorBaseType" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary>返回指定组件的事件的集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来返回指定组件的事件集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <param name="attributes">可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns>具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary>通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的事件集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <param name="attributes">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <param name="noCustomTypeDesc">如果为 true，则考虑自定义类型描述信息；否则为 false。</param>
      <returns>具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary>对具有自定义类型描述符的指定组件，返回事件集合。</summary>
      <param name="component">要为其获取事件的组件。</param>
      <param name="noCustomTypeDesc">若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary>返回指定组件类型的事件的集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>具有此组件的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来返回指定组件类型的事件的集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">可以用作筛选器的类型 <see cref="T:System.Attribute" /> 的数组。</param>
      <returns>具有匹配此组件指定属性的事件的 <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary>返回组件的完全限定名。</summary>
      <param name="component">要为其查找名称的 <see cref="T:System.ComponentModel.Component" />。</param>
      <returns>如果组件没有名称，则为指定组件的完全限定名称，或 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="component" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary>返回指定组件的属性的集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <returns>具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来返回指定组件的属性的集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <param name="attributes">要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary>通过使用指定的属性数组作为筛选器，并使用自定义类型描述符来返回指定组件的属性集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <param name="attributes">要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <param name="noCustomTypeDesc">若要考虑自定义类型说明信息，则为 true；否则为 false。</param>
      <returns>具有与指定组件的指定属性相匹配的事件的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary>使用默认类型描述符为指定组件返回属性集合。</summary>
      <param name="component">要为其获取属性的组件。</param>
      <param name="noCustomTypeDesc">若不考虑自定义类型描述信息时，为 true；否则为 false。</param>
      <returns>具有指定组件的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="component" /> 是一个跨进程进行远程处理的对象。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary>返回指定组件类型的属性的集合。</summary>
      <param name="componentType">一个 <see cref="T:System.Type" />，表示要为其获取属性的组件。</param>
      <returns>具有指定组件类型的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary>通过将指定的属性数组用作筛选器来为指定类型的组件返回属性的集合。</summary>
      <param name="componentType">目标组件的 <see cref="T:System.Type" />。</param>
      <param name="attributes">要用作筛选器的 <see cref="T:System.Attribute" /> 类型数组。</param>
      <returns>具有与该类型组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary>返回指定组件的类型说明提供程序。</summary>
      <param name="instance">目标组件的实例。</param>
      <returns>一个与特定的组件关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary>返回指定类型的类型说明提供程序。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>与指定类型关联的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary>如果给定对象，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <param name="instance">目标组件的实例。</param>
      <returns>所指定对象的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary>如果给定类类型，则返回可用于执行反射的 <see cref="T:System.Type" />。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <returns>指定类的 <see cref="T:System.Type" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary>从缓存中清除指定组件的属性和事件。</summary>
      <param name="component">已更改属性或事件的组件。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary>从缓存中清除指定程序集的属性和事件。</summary>
      <param name="assembly">表示要刷新的程序集的 <see cref="T:System.Reflection.Assembly" />。 将刷新此程序集中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary>从缓存中清除指定模块的属性和事件。</summary>
      <param name="module">表示要刷新的模块的 <see cref="T:System.Reflection.Module" />。 将刷新此模块中的每个 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary>从缓存中清除指定类型的组件的属性和事件。</summary>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary>删除两个对象之间的关联。</summary>
      <param name="primary">主要 <see cref="T:System.Object" />。</param>
      <param name="secondary">辅助 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary>删除主要对象的所有关联。</summary>
      <param name="primary">关联中的主要 <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="primary" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>移除以前添加的与指定对象关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>删除以前添加的与指定类型关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary>移除以前添加的与指定对象关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance">目标组件的实例。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary>删除以前添加的与指定类型关联的类型说明提供程序。</summary>
      <param name="provider">要移除的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type">目标组件的 <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException">两个参数之一或两个参数均为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary>使用描述符的名称对描述符排序。</summary>
      <param name="infos">一个 <see cref="T:System.Collections.IList" />，其中包含要排序的描述符。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infos" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.TypeListConverter" /> 类用作可用类型的类型数组。</summary>
      <param name="types">类型的数组 <see cref="T:System.Type" /> 要用作可用的类型。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以转换指定 <see cref="T:System.Type" /> 使用给定的上下文的源对象。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType">
        <see cref="T:System.Type" /> 的源对象。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>获取一个值，该值指示此转换器是否可以将对象转换为给定的目标类型使用的上下文。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，表示您希望将转换为的类型。</param>
      <returns>如果该转换器能够执行转换，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>将指定的对象转换为该转换器的本机类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> ，它指定用于表示该字体的区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的目标类型。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture">一个可选的 <see cref="T:System.Globalization.CultureInfo" />。 如果未提供区域性设置，则使用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 要转换的值。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取此验证程序所面向的数据类型的标准值集合。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>包含标准有效值集的 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />；如果数据类型不支持标准值集，则为 null。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示是否从返回的标准值列表 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 方法为独占列表。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> 从返回 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 是可能值的穷举列表。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>获取一个值，该值指示此对象是否支持可以从使用指定的上下文的列表中选取的值的标准集。</summary>
      <param name="context">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <returns>true 因为 <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 应调用以查找一组公共对象支持的值。 此方法从不返回 false。</returns>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt16Converter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt32Converter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.UInt64Converter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用指定的序列化数据和上下文初始化 <see cref="T:System.ComponentModel.WarningException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。</param>
      <param name="context">要用于反序列化的目标。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 类，具有指定的消息和不带帮助文件。</summary>
      <param name="message">要向最终用户显示的消息。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 带有指定的详细的说明和指定的异常类。</summary>
      <param name="message">错误的详细的说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 类使用指定的消息，并有权访问指定的帮助文件。</summary>
      <param name="message">要向最终用户显示的消息。</param>
      <param name="helpUrl">当用户请求帮助时显示的帮助文件。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.WarningException" /> 类使用指定的消息，并有权访问指定的帮助文件和主题。</summary>
      <param name="message">要向最终用户显示的消息。</param>
      <param name="helpUrl">当用户请求帮助时显示的帮助文件。</param>
      <param name="helpTopic">当用户请求帮助时显示的帮助主题。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 参数名称和附加异常信息。</summary>
      <param name="info">将正在用于序列化或反序列化对象数据存储， <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> 已序列化或反序列化。</param>
      <param name="context">描述源和生成异常，以及序列化可以保留该上下文和调用方定义的附加上下文的一种方法的流的目标。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类所发生的最后一个 Win32 错误。</summary>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类，具有指定的错误。</summary>
      <param name="error">与此异常关联的 Win32 错误代码。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Int32,System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 带有指定的错误和指定的类的详细说明。</summary>
      <param name="error">与此异常关联的 Win32 错误代码。</param>
      <param name="message">错误的详细的说明。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类，具有指定的上下文和序列化信息。</summary>
      <param name="info">与此异常关联的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> ，表示此异常的上下文。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 类，具有指定的详细说明。</summary>
      <param name="message">错误的详细的说明。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.ComponentModel.Win32Exception" /> 带有指定的详细的说明和指定的异常类。</summary>
      <param name="message">错误的详细的说明。</param>
      <param name="innerException">对导致此异常的内部异常的引用。</param>
    </member>
    <member name="M:System.ComponentModel.Win32Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象与此的文件名和行号 <see cref="T:System.ComponentModel.Win32Exception" /> 发生。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationScopedSettingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ApplicationScopedSettingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor">
      <summary>初始化的实例 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类为其默认状态。</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent)">
      <summary>初始化的实例 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类使用提供的所有者组件。</summary>
      <param name="owner">将充当应用程序设置对象的所有者组件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.ComponentModel.IComponent,System.String)">
      <summary>初始化的实例 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类使用提供的所有者的组件和设置键。</summary>
      <param name="owner">将充当应用程序设置对象的所有者组件。</param>
      <param name="settingsKey">一个 <see cref="T:System.String" /> ，用于唯一标识的包装器类的单独实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> 为 null。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.#ctor(System.String)">
      <summary>初始化的实例 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类使用提供的设置键。</summary>
      <param name="settingsKey">一个 <see cref="T:System.String" /> ，用于唯一标识的包装器类的单独实例。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.GetPreviousVersion(System.String)">
      <summary>返回同一个应用程序的以前版本的命名的设置属性的值。</summary>
      <param name="propertyName">一个 <see cref="T:System.String" /> 包含其值是要返回的设置属性的名称。</param>
      <returns>
        <see cref="T:System.Object" /> 包含的值的指定 <see cref="T:System.Configuration.SettingsProperty" /> 找到; 否则为如果 null。</returns>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">该属性不存在。 属性计数为零，或在数据存储区中找不到该属性。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.PropertyChanged" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingChanging(System.Object,System.Configuration.SettingChangingEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Configuration.SettingChangingEventArgs" />。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(System.Object,System.Configuration.SettingsLoadedEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Configuration.SettingsLoadedEventArgs" />。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.OnSettingsSaving(System.Object,System.ComponentModel.CancelEventArgs)">
      <summary>引发 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" /> 事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Reload">
      <summary>刷新应用程序设置属性的值从持久性存储区。</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Reset">
      <summary>将保持的应用程序设置值还原为其对应的默认属性。</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法分析配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Save">
      <summary>存储应用程序设置属性的当前值。</summary>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsBase.Upgrade">
      <summary>更新以反映应用程序的较新安装的应用程序设置。</summary>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法分析配置文件。</exception>
    </member>
    <member name="M:System.Configuration.ApplicationSettingsGroup.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ApplicationSettingsGroup" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.AppSettingsReader" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.AppSettingsReader.GetValue(System.String,System.Type)">
      <summary>从指定的键获取值 <see cref="P:System.Configuration.ConfigurationSettings.AppSettings" /> 属性并返回包含从配置的值的指定类型的对象。</summary>
      <param name="key">要为其获取值键。</param>
      <param name="type">要返回的对象的类型。</param>
      <returns>指定键的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。- 或 -<paramref name="type" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="key" /> 中不存在 &lt;appSettings&gt; 配置节。- 或 -中的值 &lt;appSettings&gt; 配置节，用于 <paramref name="key" /> 的类型不是 <paramref name="type" />。</exception>
    </member>
    <member name="M:System.Configuration.ClientSettingsSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ClientSettingsSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
      <param name="info">包含要反序列化的信息的对象。</param>
      <param name="context">有关源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</param>
      <param name="inner">导致以下情况的内部异常 <see cref="T:System.Configuration.ConfigurationException" /> 抛出，如果有的话。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</param>
      <param name="inner">导致以下情况的内部异常 <see cref="T:System.Configuration.ConfigurationException" /> 抛出，如果有的话。</param>
      <param name="filename">导致以下情况的配置文件的路径 <see cref="T:System.Configuration.ConfigurationException" /> 引发。</param>
      <param name="line">此配置文件中的行号 <see cref="T:System.Configuration.ConfigurationException" /> 引发。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Exception,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</param>
      <param name="inner">导致以下情况的内部异常 <see cref="T:System.Configuration.ConfigurationException" /> 抛出，如果有的话。</param>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 会引起这 <see cref="T:System.Configuration.ConfigurationException" /> 引发。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</param>
      <param name="filename">导致以下情况的配置文件的路径 <see cref="T:System.Configuration.ConfigurationException" /> 引发。</param>
      <param name="line">此配置文件中的行号 <see cref="T:System.Configuration.ConfigurationException" /> 引发。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.#ctor(System.String,System.Xml.XmlNode)">
      <summary>初始化 <see cref="T:System.Configuration.ConfigurationException" /> 类的新实例。</summary>
      <param name="message">描述原因的消息这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</param>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 会引起这 <see cref="T:System.Configuration.ConfigurationException" /> 引发。</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>集 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象与此配置异常发生处的文件名和行号。</summary>
      <param name="info">包含要序列化的信息的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeFilename(System.Xml.XmlNode)">
      <summary>获取到配置文件的路径，从其内部 <see cref="T:System.Xml.XmlNode" /> 从中加载此配置异常引发时。</summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 会引起这 <see cref="T:System.Configuration.ConfigurationException" /> 将引发异常。</param>
      <returns>一个 string 表示节点的文件名。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationException.GetXmlNodeLineNumber(System.Xml.XmlNode)">
      <summary>获取配置文件中的行号的内部 <see cref="T:System.Xml.XmlNode" /> 表示此配置异常引发时对象。</summary>
      <param name="node">
        <see cref="T:System.Xml.XmlNode" /> 会引起这 <see cref="T:System.Configuration.ConfigurationException" /> 将引发异常。</param>
      <returns>int 表示节点的行号。</returns>
    </member>
    <member name="M:System.Configuration.ConfigurationSettings.GetConfig(System.String)">
      <summary>返回 <see cref="T:System.Configuration.ConfigurationSection" /> 对象的传递的配置节的名称和路径。</summary>
      <param name="sectionName">配置名称和路径，如"system.net/settings"。</param>
      <returns>
        <see cref="T:System.Configuration.ConfigurationSection" /> 对象的传递的配置节的名称和路径。<see cref="T:System.Configuration.ConfigurationSettings" /> 类提供了向后兼容性。 应使用 <see cref="T:System.Configuration.ConfigurationManager" /> 类或 <see cref="T:System.Web.Configuration.WebConfigurationManager" /> 类。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">无法检索请求的节。</exception>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.ConfigXmlDocument" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>创建的配置元素属性。</summary>
      <param name="prefix">前缀定义。</param>
      <param name="localName">本地使用的名称。</param>
      <param name="namespaceUri">分配给命名空间中的 URL。</param>
      <returns>
        <see cref="P:System.Xml.Serialization.XmlAttributes.XmlAttribute" /> 属性。</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateCDataSection(System.String)">
      <summary>创建 XML CData 部分。</summary>
      <param name="data">要使用的数据。</param>
      <returns>
        <see cref="T:System.Xml.XmlCDataSection" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateComment(System.String)">
      <summary>创建一个 XML 注释。</summary>
      <param name="data">注释数据。</param>
      <returns>
        <see cref="T:System.Xml.XmlComment" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>创建一个配置元素。</summary>
      <param name="prefix">前缀定义。</param>
      <param name="localName">本地使用的名称。</param>
      <param name="namespaceUri">Url 命名空间。</param>
      <returns>
        <see cref="T:System.Xml.XmlElement" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>创建空白。</summary>
      <param name="data">要使用的数据。</param>
      <returns>
        <see cref="T:System.Xml.XmlSignificantWhitespace" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateTextNode(System.String)">
      <summary>创建文本节点。</summary>
      <param name="text">要使用的文本。</param>
      <returns>
        <see cref="T:System.Xml.XmlText" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.CreateWhitespace(System.String)">
      <summary>创建空白区域。</summary>
      <param name="data">要使用的数据。</param>
      <returns>
        <see cref="T:System.Xml.XmlWhitespace" /> 值。</returns>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.Load(System.String)">
      <summary>加载配置文件。</summary>
      <param name="filename">文件的名称。</param>
    </member>
    <member name="M:System.Configuration.ConfigXmlDocument.LoadSingleElement(System.String,System.Xml.XmlTextReader)">
      <summary>加载一个配置元素。</summary>
      <param name="filename">文件的名称。</param>
      <param name="sourceReader">用于读取器的源。</param>
    </member>
    <member name="M:System.Configuration.DefaultSettingValueAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.DefaultSettingValueAttribute" /> 类的实例。</summary>
      <param name="value">一个 <see cref="T:System.String" /> 表示该属性的默认值。</param>
    </member>
    <member name="M:System.Configuration.DictionarySectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.DictionarySectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.DictionarySectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建一个新的配置处理程序并将其添加到基于指定的参数的节处理程序集合。</summary>
      <param name="parent">父对象。</param>
      <param name="context">配置上下文对象。</param>
      <param name="section">部分的 XML 节点。</param>
      <returns>配置对象。</returns>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
      <summary>返回同一个应用程序的以前版本的指定的设置属性的值。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
      <param name="property">
        <see cref="T:System.Configuration.SettingsProperty" /> 其值是要返回。</param>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyValue" /> 上次设置该应用程序; 早期版本中包含指定的属性设置的值或 null 如果找不到该设置。</returns>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.Reset(System.Configuration.SettingsContext)">
      <summary>重置为其默认值指定的应用程序与关联的应用程序设置。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
    </member>
    <member name="M:System.Configuration.IApplicationSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>指示提供程序已升级应用程序。 这可以通过为该提供程序升级根据其存储的设置。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
      <param name="properties">一个 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 包含其值是要检索的设置属性组。</param>
    </member>
    <member name="M:System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建一个配置节处理程序。</summary>
      <param name="parent">父对象。</param>
      <param name="configContext">配置上下文对象。</param>
      <param name="section">部分的 XML 节点。</param>
      <returns>创建的节处理程序对象。</returns>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.GetConfig(System.String)">
      <summary>获取指定的配置。</summary>
      <param name="configKey">配置键。</param>
      <returns>表示配置的对象。</returns>
    </member>
    <member name="M:System.Configuration.IConfigurationSystem.Init">
      <summary>用于初始化。</summary>
    </member>
    <member name="M:System.Configuration.IdnElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IdnElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.IgnoreSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IgnoreSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.IgnoreSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建一个新的配置处理程序并将指定的配置对象添加到节处理程序集合。</summary>
      <param name="parent">中相应的父配置节的配置设置。</param>
      <param name="configContext">为其配置节处理程序计算的配置值的虚拟路径。 此参数通常是保留并且是 null。</param>
      <param name="section">
        <see cref="T:System.Xml.XmlNode" /> ，包含要处理的配置信息。 提供直接访问权限的配置节的 XML 内容。</param>
      <returns>创建的配置处理程序对象。</returns>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.LoadComponentSettings">
      <summary>读取到其对应的属性的控件的应用程序设置并更新控件的状态。</summary>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.ResetComponentSettings">
      <summary>将控件的应用程序设置属性重置为其默认值。</summary>
    </member>
    <member name="M:System.Configuration.IPersistComponentSettings.SaveComponentSettings">
      <summary>控件的应用程序设置属性时仍然出现。</summary>
    </member>
    <member name="M:System.Configuration.IriParsingElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.IriParsingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.ISettingsProviderService.GetSettingsProvider(System.Configuration.SettingsProperty)">
      <summary>返回与指定的设置属性兼容的设置提供程序。</summary>
      <param name="property">
        <see cref="T:System.Configuration.SettingsProperty" /> 需要序列化。</param>
      <returns>如果找到， <see cref="T:System.Configuration.SettingsProvider" /> 程序可以继续保持指定的设置属性; 否则为 null。</returns>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.LocalFileSettingsProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.GetPreviousVersion(System.Configuration.SettingsContext,System.Configuration.SettingsProperty)">
      <summary>返回同一个应用程序的以前版本的命名的设置属性的值。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> ，介绍了使用应用程序设置属性的位置。</param>
      <param name="property">
        <see cref="T:System.Configuration.SettingsProperty" /> 其值是要返回。</param>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyValue" /> 表示应用程序设置，如果找到; 否则为 null。</returns>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>返回为指定的应用程序实例和设置属性组设置属性值的集合。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
      <param name="properties">一个 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 包含其值是要检索的设置属性组。</param>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 包含指定的设置属性组的值。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。</exception>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>初始化提供程序。</summary>
      <param name="name">提供程序的友好名称。</param>
      <param name="values">名称/值对的集合，表示在配置中为该提供程序指定的提供程序特定的属性。</param>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Reset(System.Configuration.SettingsContext)">
      <summary>重置为其默认值指定的应用程序相关联的所有应用程序设置属性。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。</exception>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
      <summary>设置指定组的属性设置的值。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
      <param name="values">一个 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 表示要设置的属性设置的组。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。- 或 -没有将设置保存到配置文件的常规错误。</exception>
    </member>
    <member name="M:System.Configuration.LocalFileSettingsProvider.Upgrade(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>尝试从同一应用程序的早期版本迁移以前用户范围的设置。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
      <param name="properties">一个 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 包含其值是要检索的设置属性组。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">遇到用户范围的设置，但当前配置仅支持应用程序范围的设置。- 或 -无法访问配置文件的以前版本。</exception>
    </member>
    <member name="M:System.Configuration.NameValueFileSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NameValueFileSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.NameValueFileSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建一个新的配置处理程序并将其添加到基于指定的参数的节处理程序集合。</summary>
      <param name="parent">父对象。</param>
      <param name="configContext">配置上下文对象。</param>
      <param name="section">部分 XML 节点。</param>
      <returns>配置对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">中指定的文件 file 属性 <paramref name="section" /> 存在但无法加载。- 或 -name 属性 <paramref name="section" /> 中指定的文件的根元素不匹配 file 属性。</exception>
    </member>
    <member name="M:System.Configuration.NameValueSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NameValueSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.NameValueSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>创建一个新的配置处理程序并将其添加到基于指定的参数的节处理程序集合。</summary>
      <param name="parent">父对象。</param>
      <param name="context">配置上下文对象。</param>
      <param name="section">部分的 XML 节点。</param>
      <returns>配置对象。</returns>
    </member>
    <member name="M:System.Configuration.NoSettingsVersionUpgradeAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.NoSettingsVersionUpgradeAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SchemeSettingElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SchemeSettingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SchemeSettingElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SchemeSettingElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SchemeSettingElementCollection.IndexOf(System.Configuration.SchemeSettingElement)">
      <summary>指定的索引 <see cref="T:System.Configuration.SchemeSettingElement" />。</summary>
      <param name="element">
        <see cref="T:System.Configuration.SchemeSettingElement" /> 的指定的索引位置。</param>
      <returns>指定的索引 <see cref="T:System.Configuration.SchemeSettingElement" />; 否则为-1。</returns>
    </member>
    <member name="M:System.Configuration.SettingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingChangingEventArgs.#ctor(System.String,System.String,System.String,System.Object,System.Boolean)">
      <summary>初始化 <see cref="T:System.Configuration.SettingChangingEventArgs" /> 类的实例。</summary>
      <param name="settingName">一个 <see cref="T:System.String" /> 包含应用程序设置的名称。</param>
      <param name="settingClass">一个 <see cref="T:System.String" /> 包含设置的类别说明。 通常将此参数设置为应用程序设置组的名称。</param>
      <param name="settingKey">一个 <see cref="T:System.String" /> 包含应用程序设置键。</param>
      <param name="newValue">
        <see cref="T:System.Object" /> ，其中包含要分配给应用程序设置属性的新值。</param>
      <param name="cancel">true 若要取消事件;否则为 false。</param>
    </member>
    <member name="M:System.Configuration.SettingElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingElement.#ctor(System.String,System.Configuration.SettingsSerializeAs)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingElement" /> 类基于提供的参数。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingElement" /> 对象的名称。</param>
      <param name="serializeAs">一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。 此对象是作为序列化方案用于存储配置设置的枚举。</param>
    </member>
    <member name="M:System.Configuration.SettingElement.Equals(System.Object)">
      <summary>比较当前 <see cref="T:System.Configuration.SettingElement" /> 实例与指定的对象。</summary>
      <param name="settings">要与进行比较的对象。</param>
      <returns>true 如果 <see cref="T:System.Configuration.SettingElement" /> 实例是否等于指定的对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.SettingElement.GetHashCode">
      <summary>获取唯一值，该值表示 <see cref="T:System.Configuration.SettingElement" /> 当前实例。</summary>
      <returns>唯一值，该值表示 <see cref="T:System.Configuration.SettingElement" /> 当前实例。</returns>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Add(System.Configuration.SettingElement)">
      <summary>将 <see cref="T:System.Configuration.SettingElement" /> 对象添加到集合中。</summary>
      <param name="element">要添加到集合的 <see cref="T:System.Configuration.SettingElement" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Clear">
      <summary>删除所有 <see cref="T:System.Configuration.SettingElement" /> 来自集合的对象。</summary>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Get(System.String)">
      <summary>从集合中获取 <see cref="T:System.Configuration.SettingElement" /> 对象。</summary>
      <param name="elementKey">字符串值，该值表示 <see cref="T:System.Configuration.SettingElement" /> 集合中的对象。</param>
      <returns>一个 <see cref="T:System.Configuration.SettingElement" /> 对象。</returns>
    </member>
    <member name="M:System.Configuration.SettingElementCollection.Remove(System.Configuration.SettingElement)">
      <summary>删除 <see cref="T:System.Configuration.SettingElement" /> 来自集合对象。</summary>
      <param name="element">一个 <see cref="T:System.Configuration.SettingElement" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsAttributeDictionary.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsAttributeDictionary.#ctor(System.Configuration.SettingsAttributeDictionary)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 类的新实例。</summary>
      <param name="attributes">与配置设置相关的键/值对的集合。</param>
    </member>
    <member name="M:System.Configuration.SettingsBase.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection,System.Configuration.SettingsProviderCollection)">
      <summary>初始化使用的内部属性 <see cref="T:System.Configuration.SettingsBase" /> 对象。</summary>
      <param name="context">设置属性相关的设置上下文。</param>
      <param name="properties">可从设置属性 <see cref="T:System.Configuration.SettingsBase" /> 实例。</param>
      <param name="providers">加载和保存属性值时，应使用初始化提供程序。</param>
    </member>
    <member name="M:System.Configuration.SettingsBase.Save">
      <summary>存储设置属性的当前值。</summary>
    </member>
    <member name="M:System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase)">
      <summary>提供了 <see cref="T:System.Configuration.SettingsBase" /> 类，该类是同步 （线程安全）。</summary>
      <param name="settingsBase">用于支持用户属性设置的类。</param>
      <returns>一个 <see cref="T:System.Configuration.SettingsBase" /> 同步的类。</returns>
    </member>
    <member name="M:System.Configuration.SettingsContext.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsContext" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsDescriptionAttribute" /> 类的实例。</summary>
      <param name="description">
        <see cref="T:System.String" /> 用作描述性文本。</param>
    </member>
    <member name="M:System.Configuration.SettingsGroupDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsGroupDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">一个 <see cref="T:System.String" /> 包含应用程序设置组的描述性文本。</param>
    </member>
    <member name="M:System.Configuration.SettingsGroupNameAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsGroupNameAttribute" /> 类的新实例。</summary>
      <param name="groupName">一个 <see cref="T:System.String" /> 包含应用程序设置属性组的名称。</param>
    </member>
    <member name="M:System.Configuration.SettingsLoadedEventArgs.#ctor(System.Configuration.SettingsProvider)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsLoadedEventArgs" /> 类的新实例。</summary>
      <param name="provider">一个 <see cref="T:System.Configuration.SettingsProvider" /> 对象从其加载设置。</param>
    </member>
    <member name="M:System.Configuration.SettingsManageabilityAttribute.#ctor(System.Configuration.SettingsManageability)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsManageabilityAttribute" /> 类的新实例。</summary>
      <param name="manageability">一个 <see cref="T:System.Configuration.SettingsManageability" /> 枚举所请求服务的值。</param>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.Configuration.SettingsProperty)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsProperty" /> 基于所提供的参数的类。</summary>
      <param name="propertyToCopy">指定现有的副本 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProperty" /> 类的新实例。 基于所提供的参数。</summary>
      <param name="name">指定现有名称 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsProperty.#ctor(System.String,System.Type,System.Configuration.SettingsProvider,System.Boolean,System.Object,System.Configuration.SettingsSerializeAs,System.Configuration.SettingsAttributeDictionary,System.Boolean,System.Boolean)">
      <summary>创建的新实例 <see cref="T:System.Configuration.SettingsProperty" /> 类根据所提供的参数。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</param>
      <param name="propertyType">一种 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
      <param name="provider">一个 <see cref="T:System.Configuration.SettingsProvider" /> 用于持久性对象。</param>
      <param name="isReadOnly">一个 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Configuration.SettingsProperty" /> 对象是只读的。</param>
      <param name="defaultValue">默认值为 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
      <param name="serializeAs">一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。 此对象是枚举，用于设置用于存储应用程序设置的序列化方案。</param>
      <param name="attributes">一个 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 对象。</param>
      <param name="throwOnErrorDeserializing">一个布尔值，指定是否在未成功反序列化属性时，将会引发错误。</param>
      <param name="throwOnErrorSerializing">一个布尔值，指定是否在未成功序列化属性时，将会引发错误。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Add(System.Configuration.SettingsProperty)">
      <summary>将 <see cref="T:System.Configuration.SettingsProperty" /> 对象添加到集合中。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Clear">
      <summary>删除所有 <see cref="T:System.Configuration.SettingsProperty" /> 来自集合的对象。</summary>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Clone">
      <summary>创建现有集合的副本。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsPropertyCollection" /> 类。</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.CopyTo(System.Array,System.Int32)">
      <summary>这会将复制 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 到一个数组对象。</summary>
      <param name="array">要向其中复制对象的数组。</param>
      <param name="index">开始复制的索引位置。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合。</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnAdd(System.Configuration.SettingsProperty)">
      <summary>在将添加到的内容时执行其他自定义处理 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnAddComplete(System.Configuration.SettingsProperty)">
      <summary>执行其他自定义处理添加到的内容之后 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnClear">
      <summary>清除的内容时执行其他自定义处理 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnClearComplete">
      <summary>执行后清除的内容的其他自定义处理 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnRemove(System.Configuration.SettingsProperty)">
      <summary>当移除的内容时执行其他自定义处理 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.OnRemoveComplete(System.Configuration.SettingsProperty)">
      <summary>执行其他自定义处理删除的内容后 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 实例。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Configuration.SettingsProperty" /> 来自集合对象。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</param>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyCollection.SetReadOnly">
      <summary>设置的集合是只读的。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类根据所提供的参数。</summary>
      <param name="info">存放有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的序列化流的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类根据提供的参数。</summary>
      <param name="message">一个包含一条异常消息字符串。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyIsReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyIsReadOnlyException" /> 类基于提供的参数。</summary>
      <param name="message">一个包含一条异常消息字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 基于提供的参数的类。</summary>
      <param name="info">存放有关所引发异常的序列化对象数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含有关源或目标的序列化流的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 基于提供的参数的类。</summary>
      <param name="message">一个包含一条异常消息字符串。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyNotFoundException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyNotFoundException" /> 基于提供的参数的类。</summary>
      <param name="message">一个包含一条异常消息字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValue.#ctor(System.Configuration.SettingsProperty)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyValue" /> 基于提供的参数的类。</summary>
      <param name="property">指定 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Add(System.Configuration.SettingsPropertyValue)">
      <summary>将 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象添加到集合中。</summary>
      <param name="property">一个 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</param>
      <exception cref="T:System.NotSupportedException">尝试将某项添加到集合中，但集合被标记为只读的。</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Clear">
      <summary>删除所有 <see cref="T:System.Configuration.SettingsPropertyValue" /> 来自集合的对象。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Clone">
      <summary>创建现有集合的副本。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 类。</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.CopyTo(System.Array,System.Int32)">
      <summary>这会将复制 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 集合到一个数组。</summary>
      <param name="array">要将集合复制到的数组。</param>
      <param name="index">开始复制的索引位置。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 对象应用于集合。</returns>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.Remove(System.String)">
      <summary>删除 <see cref="T:System.Configuration.SettingsPropertyValue" /> 来自集合对象。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象的名称。</param>
      <exception cref="T:System.NotSupportedException">尝试从该集合中移除项，但集合被标记为只读的。</exception>
    </member>
    <member name="M:System.Configuration.SettingsPropertyValueCollection.SetReadOnly">
      <summary>设置的集合是只读的。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类根据所提供的参数。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 它包含有关源或目标的序列化流的上下文信息。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类根据所提供的参数。</summary>
      <param name="message">一个包含一条异常消息字符串。</param>
    </member>
    <member name="M:System.Configuration.SettingsPropertyWrongTypeException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Configuration.SettingsPropertyWrongTypeException" /> 类根据所提供的参数。</summary>
      <param name="message">一个包含一条异常消息字符串。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Configuration.SettingsProvider.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProvider" /> 类的实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
      <summary>返回指定的应用程序实例和设置属性组的属性值的设置的集合。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前的应用程序使用。</param>
      <param name="collection">一个 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 包含其值是要检索的设置属性组。</param>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 包含指定的设置属性组的值。</returns>
    </member>
    <member name="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
      <summary>设置指定组的属性设置的值。</summary>
      <param name="context">一个 <see cref="T:System.Configuration.SettingsContext" /> 描述当前应用程序使用情况。</param>
      <param name="collection">一个 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 表示要设置的属性设置的组。</param>
    </member>
    <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProviderAttribute" /> 类的实例。</summary>
      <param name="providerTypeName">一个 <see cref="T:System.String" /> 包含设置提供程序的名称。</param>
    </member>
    <member name="M:System.Configuration.SettingsProviderAttribute.#ctor(System.Type)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProviderAttribute" /> 类的新实例。</summary>
      <param name="providerType">一个 <see cref="T:System.Type" /> 包含设置提供程序类型。</param>
    </member>
    <member name="M:System.Configuration.SettingsProviderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingsProviderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingsProviderCollection.Add(System.Configuration.Provider.ProviderBase)">
      <summary>向集合添加新的设置提供程序。</summary>
      <param name="provider">一个 <see cref="T:System.Configuration.Provider.ProviderBase" /> 要添加到集合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="provider" /> 参数的类型不是 <see cref="T:System.Configuration.SettingsProvider" />。- 或 -<see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 提供程序参数的属性为 null 或空字符串。- 或 -设置提供程序具有相同 <see cref="P:System.Configuration.Provider.ProviderBase.Name" /> 集合中已存在。</exception>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Configuration.SettingsSerializeAsAttribute.#ctor(System.Configuration.SettingsSerializeAs)">
      <summary>初始化 <see cref="T:System.Configuration.SettingsSerializeAsAttribute" /> 类的实例。</summary>
      <param name="serializeAs">一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 枚举值，该值指定序列化方案。</param>
    </member>
    <member name="M:System.Configuration.SettingValueElement.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SettingValueElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SettingValueElement.Equals(System.Object)">
      <summary>比较当前 <see cref="T:System.Configuration.SettingValueElement" /> 实例与指定的对象。</summary>
      <param name="settingValue">要比较的对象。</param>
      <returns>true 如果 <see cref="T:System.Configuration.SettingValueElement" /> 实例是否等于指定的对象; 否则为 false。</returns>
    </member>
    <member name="M:System.Configuration.SettingValueElement.GetHashCode">
      <summary>获取唯一值，该值表示 <see cref="T:System.Configuration.SettingValueElement" /> 当前实例。</summary>
      <returns>唯一值，该值表示 <see cref="T:System.Configuration.SettingValueElement" /> 当前实例。</returns>
    </member>
    <member name="M:System.Configuration.SingleTagSectionHandler.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.SingleTagSectionHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.SingleTagSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>在内部用于创建此对象的新实例。</summary>
      <param name="parent">此对象的父级。</param>
      <param name="context">此对象的上下文。</param>
      <param name="section">
        <see cref="T:System.Xml.XmlNode" /> 在配置中的对象。</param>
      <returns>创建的对象处理程序。</returns>
    </member>
    <member name="M:System.Configuration.SpecialSettingAttribute.#ctor(System.Configuration.SpecialSetting)">
      <summary>初始化 <see cref="T:System.Configuration.SpecialSettingAttribute" /> 类的新实例。</summary>
      <param name="specialSetting">一个 <see cref="T:System.Configuration.SpecialSetting" /> 定义应用程序设置属性的类别的枚举值。</param>
    </member>
    <member name="M:System.Configuration.UriSection.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.UriSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.UserScopedSettingAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.UserScopedSettingAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Configuration.UserSettingsGroup.#ctor">
      <summary>初始化 <see cref="T:System.Configuration.UserSettingsGroup" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)">
      <summary>使用指定的显示名称和说明初始化 <see cref="T:System.Diagnostics.BooleanSwitch" /> 类的新实例。</summary>
      <param name="displayName">要在用户界面上显示的名称。</param>
      <param name="description">切换描述。</param>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.BooleanSwitch" /> 使用指定的显示名称、 说明和默认开关值的类。</summary>
      <param name="displayName">要在用户界面中显示的名称。</param>
      <param name="description">切换描述。</param>
      <param name="defaultSwitchValue">该开关的默认值。</param>
    </member>
    <member name="M:System.Diagnostics.BooleanSwitch.OnValueChanged">
      <summary>确定 <see cref="P:System.Diagnostics.Switch.Value" /> 属性的新值是否可以被解析为一个布尔值。</summary>
    </member>
    <member name="M:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.ConsoleTraceListener.#ctor">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类并将跟踪输出写入到标准输出流。</summary>
    </member>
    <member name="M:System.Diagnostics.ConsoleTraceListener.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.ConsoleTraceListener" /> 类提供一个选项来跟踪输出写入到标准输出流或标准错误流。</summary>
      <param name="useErrorStream">true 要写入跟踪和调试输出到标准错误流; false 写入跟踪和调试输出到标准输出流。</param>
    </member>
    <member name="M:System.Diagnostics.ConsoleTraceListener.Close">
      <summary>关闭到为该跟踪侦听器指定的流的输出。</summary>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StartLogicalOperation">
      <summary>启动的线程上的逻辑操作。</summary>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StartLogicalOperation(System.Object)">
      <summary>具有指定标识在线程上启动某项逻辑操作。</summary>
      <param name="operationId">一个用于标识操作的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="operationId" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CorrelationManager.StopLogicalOperation">
      <summary>停止当前的逻辑操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.CorrelationManager.LogicalOperationStack" /> 属性是空的堆栈。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.CounterCreationData" /> 类的类型的计数器 NumberOfItems32, ，并使用空名称和帮助字符串。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationData.#ctor(System.String,System.String,System.Diagnostics.PerformanceCounterType)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.CounterCreationData" /> 类，使用指定的计数器名称和帮助字符串的指定类型的计数器。</summary>
      <param name="counterName">该计数器，在其类别必须是唯一的名称。</param>
      <param name="counterHelp">描述该计数器的行为的文本。</param>
      <param name="counterType">一个 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 标识该计数器的行为。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">您指定的值 <paramref name="counterType" /> ，它是不是成员的 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 枚举。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterHelp" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 类没有关联 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例。</summary>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationData[])">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 通过使用指定的数组类 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例。</summary>
      <param name="value">一个数组 <see cref="T:System.Diagnostics.CounterCreationData" /> 用来初始化此实例 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.#ctor(System.Diagnostics.CounterCreationDataCollection)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 通过使用指定的集合类 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> ，它持有 <see cref="T:System.Diagnostics.CounterCreationData" /> 用来初始化此实例 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Add(System.Diagnostics.CounterCreationData)">
      <summary>添加的一个实例 <see cref="T:System.Diagnostics.CounterCreationData" /> 到集合类。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.CounterCreationData" /> 要追加到现有集合对象。</param>
      <returns>新的 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationData[])">
      <summary>添加指定的数组 <see cref="T:System.Diagnostics.CounterCreationData" /> 到集合的实例。</summary>
      <param name="value">一个数组 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例要追加到现有集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.AddRange(System.Diagnostics.CounterCreationDataCollection)">
      <summary>将指定的集合添加 <see cref="T:System.Diagnostics.CounterCreationData" /> 到集合的实例。</summary>
      <param name="value">一套 <see cref="T:System.Diagnostics.CounterCreationData" /> 实例要追加到现有集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Contains(System.Diagnostics.CounterCreationData)">
      <summary>确定是否 <see cref="T:System.Diagnostics.CounterCreationData" /> 集合中存在的实例。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.CounterCreationData" /> 要在集合中查找对象。</param>
      <returns>true 如果指定 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象存在于集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.CopyTo(System.Diagnostics.CounterCreationData[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Diagnostics.CounterCreationData" /> 到数组，该数组的指定索引处开始。</summary>
      <param name="array">一个数组 <see cref="T:System.Diagnostics.CounterCreationData" /> 要添加到集合的实例。</param>
      <param name="index">要添加新实例的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">中的元素数 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> 大于从的可用空间 <paramref name="index" /> 到目标数组的末尾。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.IndexOf(System.Diagnostics.CounterCreationData)">
      <summary>返回的索引 <see cref="T:System.Diagnostics.CounterCreationData" /> 集合中的对象。</summary>
      <param name="value">
        <see cref="T:System.Diagnostics.CounterCreationData" /> 要在集合中定位对象。</param>
      <returns>指定的从零开始的索引 <see cref="T:System.Diagnostics.CounterCreationData" />, ，如果它是，在集合中找到; 否则为-1。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Insert(System.Int32,System.Diagnostics.CounterCreationData)">
      <summary>将插入 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象插入集合中指定索引处。</summary>
      <param name="index">开始的位置的从零开始索引 <see cref="T:System.Diagnostics.CounterCreationData" /> 要插入。</param>
      <param name="value">
        <see cref="T:System.Diagnostics.CounterCreationData" /> 要插入到集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 大于集合中的项的数目。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.OnValidate(System.Object)">
      <summary>检查指定的对象，以确定是否为有效 <see cref="T:System.Diagnostics.CounterCreationData" /> 类型。</summary>
      <param name="value">将验证的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterCreationDataCollection.Remove(System.Diagnostics.CounterCreationData)">
      <summary>删除 <see cref="T:System.Diagnostics.CounterCreationData" /> 来自集合对象。</summary>
      <param name="value">要从该集合中移除的 <see cref="T:System.Diagnostics.CounterCreationData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象。- 或 -<paramref name="value" /> 集合中不存在。</exception>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.CounterSample" /> 结构并设置 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 属性设为 0 （零）。</summary>
      <param name="rawValue">性能计数器样本与关联的数字值。</param>
      <param name="baseValue">可选的基原始计数器的值，当此示例基于多个计数器后，才使用。</param>
      <param name="counterFrequency">与其读取计数器的频率。</param>
      <param name="systemFrequency">与系统读取计数器的频率。</param>
      <param name="timeStamp">原始时间戳。</param>
      <param name="timeStamp100nSec">原始的、 带来高保真时间戳。</param>
      <param name="counterType">一个 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示此示例是一个快照的计数器的类型。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Diagnostics.PerformanceCounterType,System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.CounterSample" /> 结构并设置 <see cref="P:System.Diagnostics.CounterSample.CounterTimeStamp" /> 属性设置为传入的值。</summary>
      <param name="rawValue">性能计数器样本与关联的数字值。</param>
      <param name="baseValue">可选的基原始计数器的值，当此示例基于多个计数器后，才使用。</param>
      <param name="counterFrequency">与其读取计数器的频率。</param>
      <param name="systemFrequency">与系统读取计数器的频率。</param>
      <param name="timeStamp">原始时间戳。</param>
      <param name="timeStamp100nSec">原始的、 带来高保真时间戳。</param>
      <param name="counterType">一个 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示此示例是一个快照的计数器的类型。</param>
      <param name="counterTimeStamp">该示例时所用的时间。</param>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample)">
      <summary>计算使用单一样本点的计数器的性能数据。 此方法通常用于非计算所得的性能计数器类型。</summary>
      <param name="counterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构要作为基的点，用于计算的性能数据。</param>
      <returns>计算所得的性能值中。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Calculate(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>计算使用两个示例点的计数器的性能数据。 此方法通常用于计算所得的性能计数器类型，如平均值。</summary>
      <param name="counterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构要作为基的点，用于计算的性能数据。</param>
      <param name="nextCounterSample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构作为终结点用于计算的性能数据。</param>
      <returns>计算所得的性能值中。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Diagnostics.CounterSample)">
      <summary>指示是否指定 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否等于当前 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</summary>
      <param name="sample">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构与此实例进行比较。</param>
      <returns>true 如果 <paramref name="sample" /> 等同于当前实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.Equals(System.Object)">
      <summary>该值指示是否为指定的结构 <see cref="T:System.Diagnostics.CounterSample" /> 结构并且等于当前 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</summary>
      <param name="o">
        <see cref="T:System.Diagnostics.CounterSample" /> 结构要与当前结构进行比较。</param>
      <returns>true 如果 <paramref name="o" /> 是 <see cref="T:System.Diagnostics.CounterSample" /> 结构并且等于当前实例; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.GetHashCode">
      <summary>获取当前的计数器样本的哈希代码。</summary>
      <returns>当前的计数器样本哈希代码。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Equality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否相等。</summary>
      <param name="a">一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <param name="b">另一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构与指定的结构进行比较 <paramref name="a" /> 参数。</param>
      <returns>如果 <paramref name="a" /> 和 <paramref name="b" /> 相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSample.op_Inequality(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Diagnostics.CounterSample" /> 结构是否不相等。</summary>
      <param name="a">一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构。</param>
      <param name="b">另一个 <see cref="T:System.Diagnostics.CounterSample" /> 结构与指定的结构进行比较 <paramref name="a" /> 参数。</param>
      <returns>true 如果 <paramref name="a" /> 和 <paramref name="b" /> 不相等; 否则为 false</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample)">
      <summary>计算单个原始计数器示例的计算的值。</summary>
      <param name="newSample">一个 <see cref="T:System.Diagnostics.CounterSample" /> ，该值指示已在采用最新示例系统。</param>
      <returns>浮点值的表示形式的性能计数器计算。</returns>
    </member>
    <member name="M:System.Diagnostics.CounterSampleCalculator.ComputeCounterValue(System.Diagnostics.CounterSample,System.Diagnostics.CounterSample)">
      <summary>计算两个原始计数器示例的计算的值。</summary>
      <param name="oldSample">一个 <see cref="T:System.Diagnostics.CounterSample" /> ，该值指示前面的示例系统已。</param>
      <param name="newSample">一个 <see cref="T:System.Diagnostics.CounterSample" /> ，该值指示已在采用最新示例系统。</param>
      <returns>浮点值的表示形式的性能计数器计算。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="oldSample" /> 使用不同的计数器类型 <paramref name="newSample" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="newSample" /> 计数器类型都有性能数据帮助程序 (PDH) 错误。 有关详细信息，请参阅"检查 PDH 接口返回值"中 Win32 和 COM 开发部分的本文档。</exception>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean)">
      <summary>检查条件 ；如果条件为 false，则显示一个消息框，其中显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不会发送失败消息，也不显示消息框。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)">
      <summary>检查条件；如果条件为 false，则输出指定消息并显示指示调用堆栈的消息框。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不会发送指定消息，也不显示消息框。</param>
      <param name="message">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)">
      <summary>检查条件 ；如果条件为 false，则输出两条指定消息，并显示一个消息框，其中显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不会发送指定的消息，也不显示消息框。</param>
      <param name="message">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</param>
      <param name="detailMessage">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的详细消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])">
      <summary>检查条件;如果条件为 false, ，输出 （简单和格式化） 的两条消息，并显示一个消息框，显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不会发送指定的消息，也不显示消息框。</param>
      <param name="message">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</param>
      <param name="detailMessageFormat">复合格式字符串 （请参见备注） 将发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合。 此消息包含文本与零个或多个格式项，对应于对象中混合 <paramref name="args" /> 数组。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Close">
      <summary>刷新输出缓冲区，然后调用 Close 上的每个方法 <see cref="P:System.Diagnostics.Debug.Listeners" />。</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String)">
      <summary>发出指定的错误消息。</summary>
      <param name="message">要发出的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Fail(System.String,System.String)">
      <summary>发出一条错误消息和详细的错误消息。</summary>
      <param name="message">要发出的消息。</param>
      <param name="detailMessage">要发出的详细消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Flush">
      <summary>刷新输出缓冲区，并使放入缓冲区中的数据写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Indent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Debug.IndentLevel" /> 增加 1。</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Print(System.String)">
      <summary>写入消息中的跟踪侦听器后跟行结束符 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Print(System.String,System.Object[])">
      <summary>将格式化的字符串中的跟踪侦听器后跟行结束符 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串（请参见“备注”），它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 - 指示要格式化的参数小于零或大于或等于的数指定的要格式化的对象数。</exception>
    </member>
    <member name="M:System.Diagnostics.Debug.Unindent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Debug.IndentLevel" /> 减少 1。</summary>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object)">
      <summary>将对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.Object,System.String)">
      <summary>将类别名称和对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String)">
      <summary>将消息写入跟踪侦听器中 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.Write(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)">
      <summary>将对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true, ，该值被写入到跟踪侦听器集合中。</param>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>将类别名称和对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true, ，类别名称和值写入到集合中的跟踪侦听器。</param>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)">
      <summary>将消息写入跟踪侦听器中 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true, ，将消息写入到跟踪侦听器集合中。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)">
      <summary>类别名称和消息写入跟踪侦听器中 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true, ，类别名称和消息写入到集合中的跟踪侦听器。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object)">
      <summary>将对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)">
      <summary>将类别名称和对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String)">
      <summary>写入消息中的跟踪侦听器后跟行结束符 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])">
      <summary>写入格式化的消息中的跟踪侦听器后跟行结束符 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合。</summary>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串（请参见“备注”），它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)">
      <summary>将对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true, ，该值被写入到跟踪侦听器集合中。</param>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>将类别名称和对象的值写入 <see cref="M:System.Object.ToString" /> 方法中的跟踪侦听器 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true, ，类别名称和值写入到集合中的跟踪侦听器。</param>
      <param name="value">一个对象，其名称发送到 <see cref="P:System.Diagnostics.Debug.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)">
      <summary>将消息写入跟踪侦听器中 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true, ，将消息写入到跟踪侦听器集合中。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>类别名称和消息写入跟踪侦听器中 <see cref="P:System.Diagnostics.Debug.Listeners" /> 集合，如果条件为 true。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.#ctor">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.DefaultTraceListener" /> 类与"Default"作为其 <see cref="P:System.Diagnostics.TraceListener.Name" /> 属性值。</summary>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String)">
      <summary>发出或显示一条消息和堆栈跟踪始终失败的断言。</summary>
      <param name="message">要发出或显示的消息。</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Fail(System.String,System.String)">
      <summary>发出或显示详细的消息和堆栈跟踪始终失败的断言。</summary>
      <param name="message">要发出或显示的消息。</param>
      <param name="detailMessage">要发出或显示详细的消息。</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.Write(System.String)">
      <summary>将输出写入 OutputDebugString 函数并对其 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> 方法。</summary>
      <param name="message">要写入的消息 OutputDebugString 和 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />。</param>
    </member>
    <member name="M:System.Diagnostics.DefaultTraceListener.WriteLine(System.String)">
      <summary>将输出写入 OutputDebugString 函数并对其 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" /> 方法，然后由回车符和换行符 (\r\n)。</summary>
      <param name="message">要写入的消息 OutputDebugString 和 <see cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)" />。</param>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 将写入到指定的输出流的类。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 接收输出。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类，该类将写入到指定的输出流，并具有指定的名称。</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> 接收输出。</param>
      <param name="name">新实例的跟踪侦听器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 将写入指定的文本编写器的类。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 接收输出。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 类，该类将写入指定的文本编写器并具有指定的名称。</summary>
      <param name="writer">
        <see cref="T:System.IO.TextWriter" /> 接收输出。</param>
      <param name="name">新实例的跟踪侦听器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 将写入指定文件中的类。</summary>
      <param name="fileName">要接收输出的文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.DelimitedListTraceListener" /> 写入指定的文件，并具有指定的名称的类。</summary>
      <param name="fileName">要接收输出的文件的名称。</param>
      <param name="name">新实例的跟踪侦听器的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.GetSupportedAttributes">
      <summary>返回分隔的跟踪侦听器支持的自定义配置文件属性。</summary>
      <returns>字符串数组包含单个值"分隔符"。</returns>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>写入跟踪信息、 数据对象和事件信息写入输出文件或流。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要写入输出文件或流的数据对象。</param>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>写入跟踪信息、 数据对象和事件信息写入输出文件或流的数组。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要写入到输出文件或流的数据对象的数组。</param>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>写入跟踪信息、 消息和事件信息写入输出文件或流。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入输出文件或流的跟踪消息。</param>
    </member>
    <member name="M:System.Diagnostics.DelimitedListTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>写入跟踪信息、 格式化的对象和事件信息写入输出文件或流的数组。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的数组。</param>
    </member>
    <member name="M:System.Diagnostics.DiagnosticsConfigurationHandler.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.DiagnosticsConfigurationHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.DiagnosticsConfigurationHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
      <summary>分析的配置设置 &lt;system.diagnostics&gt; 元素 部分中的配置文件。</summary>
      <param name="parent">对象继承自父路径</param>
      <param name="configContext">保留。 在 ASP.NET 中用于传递正在评估的配置的虚拟路径。</param>
      <param name="section">位于要处理的节的根 XML 节点。</param>
      <returns>中的窗体的新的配置对象 <see cref="T:System.Collections.Hashtable" />。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到交换机。- 或 -断言找不到。- 或 -找不到跟踪。- 或 -找不到性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.EntryWrittenEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.EntryWrittenEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.EntryWrittenEventArgs.#ctor(System.Diagnostics.EventLogEntry)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EntryWrittenEventArgs" /> 与指定的事件日志条目的类。</summary>
      <param name="entry">
        <see cref="T:System.Diagnostics.EventLogEntry" /> ，表示已写入的条目。</param>
    </member>
    <member name="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类使用该事件条目的本地化消息和类别文本的指定的资源标识符。</summary>
      <param name="instanceId">资源标识符对应于事件源的消息资源文件中定义的字符串。</param>
      <param name="categoryId">资源标识符对应于事件源或为零，则指定的事件无类别的类别资源文件中定义的字符串。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="instanceId" /> 参数是负值或大于的值 <see cref="F:System.UInt32.MaxValue" />。- 或 - <paramref name="categoryId" /> 参数是负值或大于的值 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventInstance" /> 类使用的该事件条目和指定的事件日志条目类型的本地化消息和类别文本指定的资源标识符。</summary>
      <param name="instanceId">资源标识符对应于事件源的消息资源文件中定义的字符串。</param>
      <param name="categoryId">资源标识符对应于事件源或为零，则指定的事件无类别的类别资源文件中定义的字符串。</param>
      <param name="entryType">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值，该值指示事件类型。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="entryType" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="instanceId" /> 是负数值或一个值大于 <see cref="F:System.UInt32.MaxValue" />。- 或 - <paramref name="categoryId" /> 是负数值或一个值大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。 不将该实例与任何日志关联。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。 将该实例与本地计算机上的日志关联。</summary>
      <param name="logName">本地计算机上日志的名称。</param>
      <exception cref="T:System.ArgumentNullException">日志名称是否是 null。</exception>
      <exception cref="T:System.ArgumentException">日志名称无效。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。 将该实例与指定计算机上的日志关联。</summary>
      <param name="logName">指定算机上日志的名称。</param>
      <param name="machineName">日志所在的计算机。</param>
      <exception cref="T:System.ArgumentNullException">日志名称是否是 null。</exception>
      <exception cref="T:System.ArgumentException">日志名称无效。- 或 - 计算机名是无效的。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLog" /> 类的新实例。 将实例与指定的计算机上的日志关联，并为 <see cref="T:System.Diagnostics.EventLog" /> 实例创建或分配指定的源。</summary>
      <param name="logName">指定的计算机上日志的名称 </param>
      <param name="machineName">日志所在的计算机。</param>
      <param name="source">事件日志项的源。</param>
      <exception cref="T:System.ArgumentNullException">日志名称是否是 null。</exception>
      <exception cref="T:System.ArgumentException">日志名称无效。- 或 - 计算机名是无效的。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.BeginInit">
      <summary>开始初始化用于窗体或由其他组件使用的 <see cref="T:System.Diagnostics.EventLog" />。 此初始化在运行时发生。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Diagnostics.EventLog" /> 已初始化。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.Clear">
      <summary>从事件日志中移除所有项。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">未成功清除事件日志。- 或 - 无法打开日志。 Windows 错误代码不可用。</exception>
      <exception cref="T:System.ArgumentException">为不指定值 <see cref="P:System.Diagnostics.EventLog.Log" /> 属性。 请确保日志名称不是空字符串。</exception>
      <exception cref="T:System.InvalidOperationException">该日志不存在。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.Close">
      <summary>关闭事件日志并释放读写句柄。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">未成功释放事件日志读取句柄或写句柄。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)">
      <summary>通过使用为该事件源和对应的事件日志指定的配置属性，建立一个写入本地化事件消息的有效事件源。</summary>
      <param name="sourceData">事件源及其目标事件日志的配置属性。</param>
      <exception cref="T:System.ArgumentException">中指定的计算机名称 <paramref name="sourceData" /> 无效。- 或 - 中指定的源名称 <paramref name="sourceData" /> 是 null。- 或 - 中指定的日志名称 <paramref name="sourceData" /> 无效。 事件日志名称必须是可打印字符，而且不能包含字符 ' * '，'？ '，或 \。- 或 - 中指定的日志名称 <paramref name="sourceData" /> 不能用于创建用户日志。 事件日志名称 AppEvent、 SysEvent 和 SecEvent 仅供系统使用。- 或 - 日志名称与现有事件源名称相匹配。- 或 - 中指定的源名称 <paramref name="sourceData" /> 导致注册表项路径的长度超过 254 个字符。- 或 - 中指定的日志名称的前 8 个字符 <paramref name="sourceData" /> 不是唯一的。- 或 - 中指定的源名称 <paramref name="sourceData" /> 已经注册。- 或 - 中指定的源名称 <paramref name="sourceData" /> 匹配现有的事件日志名称。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceData" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)">
      <summary>建立指定的源名称作为向本地计算机上的日志中写入日志项的有效事件源。 此方法还可在本地计算机上创建一个新的自定义日志。</summary>
      <param name="source">应用程序在本地计算机上注册时所采用的源名称。</param>
      <param name="logName">源的项写入的日志名。 可能的值包括“应用程序”、“系统”或自定义事件日志。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为空字符串 ("") 或 null。- 或 - <paramref name="logName" /> 不是有效的事件日志名称。 事件日志名称必须包含可打印字符，并且不能包含字符 ' * '，'？ '，或 \。- 或 - <paramref name="logName" /> 不能用于创建用户日志。 事件日志名称 AppEvent、 SysEvent 和 SecEvent 仅供系统使用。- 或 - 日志名称与现有事件源名称相匹配。- 或 - 源名称会导致注册表项路径的长度超过 254 个字符。- 或 - 前 8 个字符 <paramref name="logName" /> 匹配现有的事件日志名称的前 8 个字符。- 或 - 源不能注册，因为它已存在于本地计算机上。- 或 - 源名称匹配现有的事件日志名称。</exception>
      <exception cref="T:System.InvalidOperationException">无法在本地计算机上打开事件日志的注册表项。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)">
      <summary>建立指定的源名称作为向指定计算机上的日志中写入项的有效事件源。 此方法还可用于在指定计算机上创建一个新的自定义日志。</summary>
      <param name="source">应用程序在指定计算机上注册时所采用的源。</param>
      <param name="logName">源的项写入的日志名。 可能的值包括“应用程序”、“系统”或自定义事件日志。 如果不指定值，则 <paramref name="logName" /> 默认为应用程序。</param>
      <param name="machineName">用来注册此事件源的计算机名称，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 不是有效的计算机名称。- 或 - <paramref name="source" /> 为空字符串 ("") 或 null。- 或 - <paramref name="logName" /> 不是有效的事件日志名称。 事件日志名称必须包含可打印字符，并且不能包含字符 ' * '，'？ '，或 \。- 或 - <paramref name="logName" /> 不能用于创建用户日志。 事件日志名称 AppEvent、 SysEvent 和 SecEvent 仅供系统使用。- 或 - 日志名称与现有事件源名称相匹配。- 或 - 源名称会导致注册表项路径的长度超过 254 个字符。- 或 - 前 8 个字符 <paramref name="logName" /> 命名指定的计算机的现有事件日志的前 8 个字符匹配。- 或 - 源不能注册，因为它已存在指定的计算机上。- 或 - 源名称与现有事件源名称相匹配。</exception>
      <exception cref="T:System.InvalidOperationException">无法在指定的计算机上打开事件日志的注册表项。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.Delete(System.String)">
      <summary>从本地计算机上移除事件日志。</summary>
      <param name="logName">要删除的日志的名称。 可能的值包括：“应用程序”、“安全性”、“系统”和计算机上的任何自定义事件日志。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="logName" /> 为空字符串 ("") 或 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法在本地计算机上打开事件日志的注册表项。- 或 - 本地计算机上不存在该日志。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">未成功清除事件日志。- 或 - 无法打开日志。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.Delete(System.String,System.String)">
      <summary>从指定计算机上移除事件日志。</summary>
      <param name="logName">要删除的日志的名称。 可能的值包括：“应用程序”、“安全”、“系统”和指定计算机上的任何自定义事件日志。</param>
      <param name="machineName">要从中删除日志的计算机名称，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="logName" /> 为空字符串 ("") 或 null。- 或 - <paramref name="machineName" /> 不是有效的计算机名称。</exception>
      <exception cref="T:System.InvalidOperationException">无法在指定的计算机上打开事件日志的注册表项。- 或 - 指定的计算机上不存在该日志。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">未成功清除事件日志。- 或 - 无法打开日志。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)">
      <summary>从本地计算机的事件日志中移除事件源注册。</summary>
      <param name="source">应用程序在事件日志系统中用来注册的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 参数在本地计算机的注册表中不存在。- 或 - 您没有为事件日志的注册表项的写访问权限。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)">
      <summary>从指定的计算机上移除应用程序的事件源注册。</summary>
      <param name="source">应用程序在事件日志系统中用来注册的名称。</param>
      <param name="machineName">要从中移除注册的计算机名，对于本地计算机则为“.”。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。 - 或 - <paramref name="source" /> 参数不存在指定的计算机的注册表中。- 或 - 您没有为事件日志的注册表项的写访问权限。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> 无法删除，因为在注册表中的父注册表项 <paramref name="source" /> 不包含具有相同名称的子项。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Diagnostics.EventLog" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.EventLog.EndInit">
      <summary>结束用于窗体或由其他组件使用的 <see cref="T:System.Diagnostics.EventLog" /> 的初始化。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLog.Exists(System.String)">
      <summary>确定该日志是否存在于本地计算机上。</summary>
      <param name="logName">要搜索的日志的名称。 可能的值包括：“应用程序”、“安全性”、“系统”、其他应用程序特定的日志（如与 Active Directory 关联的日志）或计算机上的任何自定义日志。</param>
      <returns>如果该日志存在于本地计算机上，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">LogName 是 null 或值为空。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.Exists(System.String,System.String)">
      <summary>确定该日志是否存在于指定计算机上。</summary>
      <param name="logName">要搜索的日志。 可能的值包括：“应用程序”、“安全性”、“系统”、其他应用程序特定的日志（如与 Active Directory 关联的日志）或计算机上的任何自定义日志。</param>
      <param name="machineName">要在其上搜索日志的计算机的名称，对于本地计算机则为“.”。</param>
      <returns>如果该日志存在于指定的计算机上，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数是无效的格式。 请确保您具有用于在其搜索您的计算机的正确的语法。- 或 - <paramref name="logName" /> 是 null 或值为空。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.GetEventLogs">
      <summary>在本地计算机上搜索所有的事件日志并创建一个包含该列表的 <see cref="T:System.Diagnostics.EventLog" /> 对象数组。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLog" /> 类型的数组，表示本地计算机上的日志。</returns>
      <exception cref="T:System.SystemException">对注册表没有读取访问权限。- 或 - 在计算机上已有任何事件日志服务。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.GetEventLogs(System.String)">
      <summary>在给定计算机上搜索所有事件日志并创建一个包含该列表的 <see cref="T:System.Diagnostics.EventLog" /> 对象数组。</summary>
      <param name="machineName">在其上搜索事件日志的计算机。</param>
      <returns>
        <see cref="T:System.Diagnostics.EventLog" /> 类型的数组，表示给定计算机上的日志。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数是无效的计算机名称。</exception>
      <exception cref="T:System.InvalidOperationException">对注册表没有读取访问权限。- 或 - 在计算机上已有任何事件日志服务。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)">
      <summary>获取指定的源注册到的日志的名称。</summary>
      <param name="source">事件源的名称。</param>
      <param name="machineName">要从中删除日志的计算机名称，对于本地计算机则为“.”。</param>
      <returns>与注册表中的指定源关联的日志名称。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)">
      <summary>更改已配置的行为，以便在事件日志达到其最大文件大小时写入新项。</summary>
      <param name="action">向事件日志写入新项的溢出行为。</param>
      <param name="retentionDays">每个事件日志项要保留的最小天数。 只有在 <paramref name="action" /> 设置为 <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" /> 时，才使用此参数。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="action" /> 不是有效 <see cref="P:System.Diagnostics.EventLog.OverflowAction" /> 值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="retentionDays" /> 是小于 1，或大于 365。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.EventLog.Log" /> 值不是有效的日志名称。- 或 -无法在目标计算机上打开事件日志的注册表项。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)">
      <summary>指定该事件日志的本地化名称，它显示在服务器事件查看器中。</summary>
      <param name="resourceFile">本地化资源文件的完全指定的路径。</param>
      <param name="resourceId">在资源文件内指明一个本地化字符串的资源标识符。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.EventLog.Log" /> 值不是有效的日志名称。- 或 -无法在目标计算机上打开事件日志的注册表项。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="resourceFile " />是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.SourceExists(System.String)">
      <summary>确定事件源是否已在本地计算机上注册。</summary>
      <param name="source">事件源的名称。</param>
      <returns>如果事件源已在本地计算机上注册，则为 true；否则为 false。</returns>
      <exception cref="T:System.Security.SecurityException">
        <paramref name="source" /> 找不到，但无法搜索部分或全部事件日志。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.SourceExists(System.String,System.String)">
      <summary>确定事件源是否已在指定的计算机上注册。</summary>
      <param name="source">事件源的名称。</param>
      <param name="machineName">在其上查看的计算机的名称，对于本地计算机则为“.”。</param>
      <returns>如果事件源已在给定计算机上注册，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 是无效的计算机名称。</exception>
      <exception cref="T:System.Security.SecurityException">
        <paramref name="source" /> 找不到，但无法搜索部分或全部事件日志。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String)">
      <summary>将信息类型项与给定的消息文本一起写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.EventLog.Source" /> 属性 <see cref="T:System.Diagnostics.EventLog" /> 尚未设置。- 或 - 方法在尝试注册新的事件源，但中的计算机名称 <see cref="P:System.Diagnostics.EventLog.MachineName" />  无效。- 或 -已为不同的事件日志注册来源。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)">
      <summary>将错误、警告、信息、成功审核或失败审核项与给定的消息文本一起写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.EventLog.Source" /> 属性 <see cref="T:System.Diagnostics.EventLog" /> 尚未设置。- 或 - 方法在尝试注册新的事件源，但中的计算机名称 <see cref="P:System.Diagnostics.EventLog.MachineName" />  无效。- 或 -已为不同的事件日志注册来源。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <summary>将一个具有给定消息文本和应用程序定义的事件标识符的项写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.EventLog.Source" /> 属性 <see cref="T:System.Diagnostics.EventLog" /> 尚未设置。- 或 - 方法在尝试注册新的事件源，但中的计算机名称 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 无效。- 或 -已为不同的事件日志注册来源。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
      <summary>将一个具有给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.EventLog.Source" /> 属性 <see cref="T:System.Diagnostics.EventLog" /> 尚未设置。- 或 - 方法在尝试注册新的事件源，但中的计算机名称 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 无效。- 或 -已为不同的事件日志注册来源。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
      <summary>将一个具有给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志，并向消息追加二进制数据。</summary>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <param name="rawData">包含与此项关联的二进制数据的字节数组。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.EventLog.Source" /> 属性 <see cref="T:System.Diagnostics.EventLog" /> 尚未设置。- 或 - 方法在尝试注册新的事件源，但中的计算机名称 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 无效。- 或 -已为不同的事件日志注册来源。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String)">
      <summary>使用指定的注册事件源将信息类型项与给定的消息文本一起写入事件日志。</summary>
      <param name="source">应用程序在指定计算机上注册时所采用的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值为空字符串 ("")。- 或 -<paramref name="source" /> 值是 null。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)">
      <summary>使用指定的注册事件源，将错误、警告、信息、成功审核或失败审核项与给定的消息文本一起写入事件日志。</summary>
      <param name="source">应用程序在指定计算机上注册时所采用的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值为空字符串 ("")。- 或 -<paramref name="source" /> 值是 null。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)">
      <summary>使用指定的注册事件源，将一个具有给定消息文本和应用程序定义的事件标识符的项写入事件日志。</summary>
      <param name="source">应用程序在指定计算机上注册时所采用的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值为空字符串 ("")。- 或 -<paramref name="source" /> 值是 null。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)">
      <summary>通过使用指定的注册事件源，将一个具有给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志。 事件查看器可使用 <paramref name="category" /> 筛选日志中的事件。</summary>
      <param name="source">应用程序在指定计算机上注册时所采用的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值为空字符串 ("")。- 或 -<paramref name="source" /> 值是 null。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])">
      <summary>（使用指定的注册事件源）将一个包含给定消息文本、应用程序定义的事件标识符和应用程序定义的类别的项写入事件日志，并向消息追加二进制数据。</summary>
      <param name="source">应用程序在指定计算机上注册时所采用的源。</param>
      <param name="message">要写入事件日志的字符串。</param>
      <param name="type">
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值之一。</param>
      <param name="eventID">事件的应用程序特定标识符。</param>
      <param name="category">与消息关联的应用程序特定子类别。</param>
      <param name="rawData">包含与此项关联的二进制数据的字节数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值为空字符串 ("")。- 或 -<paramref name="source" /> 值是 null。- 或 -<paramref name="eventID" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -消息字符串的长度超过 31,839 字节 （在 Windows Vista 之前的 Windows 操作系统上 32766 个字节）。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="type" /> 不是有效 <see cref="T:System.Diagnostics.EventLogEntryType" />。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])">
      <summary>写入包含给定的事件数据、消息替换字符串和关联的二进制数据的事件日志项。</summary>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="data">包含与此项关联的二进制数据的字节数组。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.EventLog.Source" /> 属性 <see cref="T:System.Diagnostics.EventLog" /> 尚未设置。- 或 - 方法在尝试注册新的事件源，但中的计算机名称 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 无效。- 或 -已为不同的事件日志注册来源。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 具有超过 256 个元素。- 或 -其中一个 <paramref name="values" /> 元素的长度超过 32766 个字节。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])">
      <summary>向事件日志写入本地化项。</summary>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.EventLog.Source" /> 属性 <see cref="T:System.Diagnostics.EventLog" /> 尚未设置。- 或 - 方法在尝试注册新的事件源，但中的计算机名称 <see cref="P:System.Diagnostics.EventLog.MachineName" /> 无效。- 或 -已为不同的事件日志注册来源。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 具有超过 256 个元素。- 或 -其中一个 <paramref name="values" /> 元素的长度超过 32766 个字节。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])">
      <summary>使用指定的已注册事件源，写入包含给定的事件数据、消息替换字符串和关联的二进制数据的事件日志项。</summary>
      <param name="source">在指定的计算机上为应用程序注册的事件源的名称。</param>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="data">包含与此项关联的二进制数据的字节数组。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值为空字符串 ("")。- 或 -<paramref name="source" /> 值是 null。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 具有超过 256 个元素。- 或 -其中一个 <paramref name="values" /> 元素的长度超过 32766 个字节。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])">
      <summary>使用指定的已注册事件源写入包含给定事件数据和消息替换字符串的事件日志项。</summary>
      <param name="source">在指定的计算机上为应用程序注册的事件源的名称。</param>
      <param name="instance">表示本地化事件日志项的 <see cref="T:System.Diagnostics.EventInstance" /> 实例。</param>
      <param name="values">要合并到事件日志项的消息文本中的字符串数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 值为空字符串 ("")。- 或 -<paramref name="source" /> 值是 null。- 或 -<paramref name="instance.InstanceId" /> 小于零或大于 <see cref="F:System.UInt16.MaxValue" />。- 或 -<paramref name="values" /> 具有超过 256 个元素。- 或 -其中一个 <paramref name="values" /> 元素的长度超过 32766 个字节。- 或 -源名称会导致注册表项路径的长度超过 254 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">无法打开事件日志的注册表项。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">向事件日志中写入该事件条目时，操作系统报告错误。 Windows 错误代码不可用。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)">
      <summary>对两个事件日志项进行比较。</summary>
      <param name="otherEntry">要比较的 <see cref="T:System.Diagnostics.EventLogEntry" />。</param>
      <returns>如果 <see cref="T:System.Diagnostics.EventLogEntry" /> 对象完全相同，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.CopyTo(System.Diagnostics.EventLogEntry[],System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 指向数组 <see cref="T:System.Diagnostics.EventLogEntry" /> 情况下，从特定数组索引处开始。</summary>
      <param name="entries">一维数组 <see cref="T:System.Diagnostics.EventLogEntry" /> 从集合复制的元素的目标的实例。 该数组的索引必须从零开始。</param>
      <param name="index">数组中开始复制的位置的索引（从零开始）。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.GetEnumerator">
      <summary>支持对简单迭代 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 对象。</summary>
      <returns>一个可用于循环访问集合的对象。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将该集合的元素复制到 <see cref="T:System.Array" />（从特定的 <see cref="T:System.Array" /> 索引开始）。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> 从集合复制的元素的目标。<see cref="T:System.Array" /> 必须具有从零开始的索引。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类具有指定的访问级别和要使用的计算机的名称。</summary>
      <param name="permissionAccess">指定访问级别的枚举值之一。</param>
      <param name="machineName">若要读取或写入事件的计算机的名称。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类，具有指定的权限项。</summary>
      <param name="permissionAccessEntries">表示权限项的对象的数组。<see cref="P:System.Diagnostics.EventLogPermission.PermissionEntries" /> 属性设置为此值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissionAccessEntries" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventLogPermission" /> 类，具有指定的权限状态。</summary>
      <param name="state">指定 （完全访问权限或没有对资源的访问） 的权限状态的枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionAttribute.CreatePermission">
      <summary>创建基于权限 <see cref="P:System.Diagnostics.EventLogPermissionAttribute.MachineName" /> 属性以及通过设置的请求的访问级别 <see cref="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess" /> 特性上的属性。</summary>
      <returns>
        <see cref="T:System.Security.IPermission" /> 表示创建的权限。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntry.#ctor(System.Diagnostics.EventLogPermissionAccess,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。<see cref="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess" /> 属性设置为此值。</param>
      <param name="machineName">若要读取或写入事件的计算机的名称。<see cref="P:System.Diagnostics.EventLogPermissionEntry.MachineName" /> 属性设置为此值。</param>
      <exception cref="T:System.ArgumentException">计算机名是无效的。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Add(System.Diagnostics.EventLogPermissionEntry)">
      <summary>添加指定 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 到此集合。</summary>
      <param name="value">要添加的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</param>
      <returns>所添加的从零开始的索引 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntry[])">
      <summary>将一组指定的权限条目追加到此集合。</summary>
      <param name="value">类型的数组 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 对象，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.AddRange(System.Diagnostics.EventLogPermissionEntryCollection)">
      <summary>将一组指定的权限条目追加到此集合。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.EventLogPermissionEntryCollection" /> ，包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Contains(System.Diagnostics.EventLogPermissionEntry)">
      <summary>确定此集合是否包含指定 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</summary>
      <param name="value">要查找的 <see cref="T:System.Diagnostics.EventLogPermissionEntry" />。</param>
      <returns>true 如果指定 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 属于该集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.CopyTo(System.Diagnostics.EventLogPermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组，从该数组的某个特定索引处开始。</summary>
      <param name="array">类型的数组 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 接收此集合的权限条目。</param>
      <param name="index">从此处开始复制的权限项从零开始的索引。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.IndexOf(System.Diagnostics.EventLogPermissionEntry)">
      <summary>确定此集合中指定的权限项的索引。</summary>
      <param name="value">要搜索的权限项。</param>
      <returns>指定的权限条目，则为-1 如果集合中找不到权限项的从零开始的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.EventLogPermissionEntry)">
      <summary>指定索引处插入到此集合的权限条目。</summary>
      <param name="index">集合中要插入权限项的从零开始的索引。</param>
      <param name="value">要插入到此集合的权限项。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnClear">
      <summary>清除集合的内容后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>新建建权限条目插入到集合之前，请执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在其中插入 <paramref name="value" />。</param>
      <param name="value">处的权限项的新值 <paramref name="index" />。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从集合中移除新建建权限条目时，请执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，到 <paramref name="value" /> 找不到。</param>
      <param name="value">要移除的权限项 <paramref name="index" />。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>在集合中设置一个值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，到 <paramref name="oldValue" /> 找不到。</param>
      <param name="oldValue">要替换的值 <paramref name="newValue" />。</param>
      <param name="newValue">处的权限项的新值 <paramref name="index" />。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogPermissionEntryCollection.Remove(System.Diagnostics.EventLogPermissionEntry)">
      <summary>从此集合中移除指定的权限条目。</summary>
      <param name="value">要删除的权限项。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventLogTraceListener" /> 而无需跟踪侦听器的类。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor(System.Diagnostics.EventLog)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventLogTraceListener" /> 类使用指定的事件日志。</summary>
      <param name="eventLog">要写入事件日志。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventLogTraceListener" /> 类使用指定的源。</summary>
      <param name="source">现有事件日志源的名称。</param>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.Close">
      <summary>关闭事件日志，以使其不再接收跟踪或调试输出。</summary>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>写入跟踪信息、 数据对象和事件信息写入事件日志。</summary>
      <param name="eventCache">一个对象，包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。</param>
      <param name="source">用于标识输出; 的名称通常生成跟踪事件的应用程序的名称。</param>
      <param name="severity">指定引发跟踪的事件的类型的枚举值之一。</param>
      <param name="id">事件的数值标识符。 组合 <paramref name="source" /> 和 <paramref name="id" /> 唯一地标识的事件。</param>
      <param name="data">要写入输出文件或流的数据对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 未指定。- 或 -日志项字符串超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>写入跟踪信息、 数据对象和事件信息写入事件日志的数组。</summary>
      <param name="eventCache">一个对象，包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。</param>
      <param name="source">用于标识输出; 的名称通常生成跟踪事件的应用程序的名称。</param>
      <param name="severity">指定引发跟踪的事件的类型的枚举值之一。</param>
      <param name="id">事件的数值标识符。 组合 <paramref name="source" /> 和 <paramref name="id" /> 唯一地标识的事件。</param>
      <param name="data">数据对象的数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 未指定。- 或 -日志项字符串超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>写入跟踪信息、 消息和事件信息写入事件日志。</summary>
      <param name="eventCache">一个对象，包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。</param>
      <param name="source">用于标识输出; 的名称通常生成跟踪事件的应用程序的名称。</param>
      <param name="severity">指定引发跟踪的事件的类型的枚举值之一。</param>
      <param name="id">事件的数值标识符。 组合 <paramref name="source" /> 和 <paramref name="id" /> 唯一地标识的事件。</param>
      <param name="message">跟踪消息中。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 未指定。- 或 -日志项字符串超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>写入跟踪信息、 格式化的对象和事件信息写入事件日志的数组。</summary>
      <param name="eventCache">一个对象，包含当前进程 ID、 线程 ID 以及堆栈跟踪信息。</param>
      <param name="source">用于标识输出; 的名称通常生成跟踪事件的应用程序的名称。</param>
      <param name="severity">指定引发跟踪的事件的类型的枚举值之一。</param>
      <param name="id">事件的数值标识符。 组合 <paramref name="source" /> 和 <paramref name="id" /> 唯一地标识的事件。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 未指定。- 或 -日志项字符串超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.Write(System.String)">
      <summary>此实例在事件日志中写入一条消息。</summary>
      <param name="message">要写入的消息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> 超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Diagnostics.EventLogTraceListener.WriteLine(System.String)">
      <summary>此实例在事件日志中写入一条消息。</summary>
      <param name="message">要写入的消息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="message" /> 超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Diagnostics.EventSourceCreationData.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.EventSourceCreationData" /> 初始化具有指定的事件源和事件日志名称。</summary>
      <param name="source">要注册为项源的事件日志的名称。</param>
      <param name="logName">来自源的项写入到日志的名称。</param>
    </member>
    <member name="M:System.Diagnostics.EventTypeFilter.#ctor(System.Diagnostics.SourceLevels)">
      <summary>初始化 <see cref="T:System.Diagnostics.EventTypeFilter" /> 类的新实例。</summary>
      <param name="level">按位组合 <see cref="T:System.Diagnostics.SourceLevels" /> 指定跟踪的消息的事件类型的值。</param>
    </member>
    <member name="M:System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>确定跟踪侦听器是否应跟踪事件。</summary>
      <param name="cache">一个 <see cref="T:System.Diagnostics.TraceEventCache" /> 表示跟踪事件的信息缓存。</param>
      <param name="source">源的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">跟踪标识符编号。</param>
      <param name="formatOrMessage">要用于写入数组的参数或一条消息用于编写的格式。</param>
      <param name="args">参数对象的数组。</param>
      <param name="data1">跟踪数据对象。</param>
      <param name="data">跟踪数据对象的数组。</param>
      <returns>true如果应生成跟踪;否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)">
      <summary>返回表示与指定文件关联的版本信息的 <see cref="T:System.Diagnostics.FileVersionInfo" />。</summary>
      <param name="fileName">要检索其版本信息的文件的完全限定路径和名称。</param>
      <returns>包含文件信息的 <see cref="T:System.Diagnostics.FileVersionInfo" />。 如果文件不包含版本信息，则 <see cref="T:System.Diagnostics.FileVersionInfo" /> 仅包含所请求文件的名称。</returns>
      <exception cref="T:System.IO.FileNotFoundException">找不到指定的文件。</exception>
    </member>
    <member name="M:System.Diagnostics.FileVersionInfo.ToString">
      <summary>返回 <see cref="T:System.Diagnostics.FileVersionInfo" /> 中属性及相应值的部分列表。</summary>
      <returns>该类中下列属性及相应值的列表： <see cref="P:System.Diagnostics.FileVersionInfo.FileName" />、<see cref="P:System.Diagnostics.FileVersionInfo.InternalName" />、<see cref="P:System.Diagnostics.FileVersionInfo.OriginalFilename" />、<see cref="P:System.Diagnostics.FileVersionInfo.FileVersion" />、<see cref="P:System.Diagnostics.FileVersionInfo.FileDescription" />、<see cref="P:System.Diagnostics.FileVersionInfo.ProductName" />、<see cref="P:System.Diagnostics.FileVersionInfo.ProductVersion" />、<see cref="P:System.Diagnostics.FileVersionInfo.IsDebug" />、<see cref="P:System.Diagnostics.FileVersionInfo.IsPatched" />、<see cref="P:System.Diagnostics.FileVersionInfo.IsPreRelease" />、<see cref="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild" />、<see cref="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild" />、<see cref="P:System.Diagnostics.FileVersionInfo.Language" />。如果文件不包含版本信息，则此列表将只包含所请求文件的名称。 布尔值将为 false，其他所有项将为 null。</returns>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CloseData">
      <summary>函数调用的性能 DLL 的封闭性能数据。</summary>
    </member>
    <member name="M:System.Diagnostics.ICollectData.CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>收集性能 DLL 的性能数据。</summary>
      <param name="id">调用索引。</param>
      <param name="valueName">指向包含请求的对象标识符的 Unicode 字符串列表的指针。</param>
      <param name="data">指向数据缓冲区的指针。</param>
      <param name="totalBytes">指向的字节数的指针。</param>
      <param name="res">此方法返回时，包含 <see cref="T:System.IntPtr" /> 数据后的第一个字节，对于错误，则为-1 或-2 更大的缓冲区是必需的。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Diagnostics.InstanceData.#ctor(System.String,System.Diagnostics.CounterSample)">
      <summary>初始化使用指定的示例和性能计数器实例的 InstanceData 类的新实例。</summary>
      <param name="instanceName">与性能计数器关联实例的名称。</param>
      <param name="sample">一个 <see cref="T:System.Diagnostics.CounterSample" /> 来自指定的实例 <paramref name="instanceName" /> 参数。</param>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 类，使用指定的性能计数器 （它定义性能实例）。</summary>
      <param name="counterName">该计数器，通常描述用于计算的数量的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.Contains(System.String)">
      <summary>确定是否具有指定名称的性能实例 (由一个索引标识 <see cref="T:System.Diagnostics.InstanceData" /> 对象) 的集合中存在。</summary>
      <param name="instanceName">要在此集合中查找的实例的名称。</param>
      <returns>true 如果该实例存在于集合;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollection.CopyTo(System.Diagnostics.InstanceData[],System.Int32)">
      <summary>将项目复制到指定的一维数组的指定索引处的集合中。</summary>
      <param name="instances">一维 <see cref="T:System.Array" /> 从集合复制的值的目标。</param>
      <param name="index">若要添加的新实例处的从零开始的索引值。</param>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.Contains(System.String)">
      <summary>确定指定的计数器的实例数据集合 (由一个索引标识 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象) 的集合中存在。</summary>
      <param name="counterName">性能计数器的名称。</param>
      <returns>true 集合中的一个实例数据集合，其中包含是否存在指定的计数器否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.InstanceDataCollectionCollection.CopyTo(System.Diagnostics.InstanceDataCollection[],System.Int32)">
      <summary>将复制的数组 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 到集合中，指定索引处的实例。</summary>
      <param name="counters">一个数组 <see cref="T:System.Diagnostics.InstanceDataCollection" /> （由它们所包含的计数器标识） 的实例将添加到集合。</param>
      <param name="index">要添加新实例的位置。</param>
    </member>
    <member name="M:System.Diagnostics.MonitoringDescriptionAttribute.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.MonitoringDescriptionAttribute" /> 类，使用指定的说明。</summary>
      <param name="description">应用程序定义的说明文本。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor">
      <summary>初始化一个新的只读实例 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类，而无需将该实例与任何系统或自定义性能计数器相关联。</summary>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)">
      <summary>初始化一个新的只读实例 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类，并将其与指定的系统或本地计算机上的自定义性能计数器关联。 此构造函数需要该类别包含单个实例。</summary>
      <param name="categoryName">此性能计数器与之关联的性能计数器类别 （性能对象） 的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 指定的类别不存在。- 或 -指定的类别标记为多个实例，并且需要要使用实例的名称创建的性能计数器。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)">
      <summary>初始化一个新的、 只读或读/写实例 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类，并将其与指定的系统或本地计算机上的自定义性能计数器关联。 此构造函数需要该类别包含单个实例。</summary>
      <param name="categoryName">此性能计数器与之关联的性能计数器类别 （性能对象） 的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="readOnly">true 若要访问只读模式中的计数器 （尽管计数器本身可以是读/写）; false 访问读/写模式中的计数器。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为一个空字符串 ("")。- 或 - <paramref name="counterName" /> 为一个空字符串 ("")。- 或 - 指定的类别不存在。 (if <paramref name="readOnly" /> is true).- 或 - 指定的类别不是.NET Framework 自定义类别 (如果 <paramref name="readOnly" /> 是 false)。- 或 -指定的类别标记为多个实例，并且需要要使用实例的名称创建的性能计数器。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)">
      <summary>初始化一个新的只读实例 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类，并将其与指定的系统或本地计算机上的自定义性能计数器和类别实例关联。</summary>
      <param name="categoryName">此性能计数器与之关联的性能计数器类别 （性能对象） 的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例或为空字符串的名称 ("")，如果该类别包含单个实例。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 指定的类别是无效的。- 或 -指定的类别标记为多个实例，并且需要要使用实例的名称创建的性能计数器。- 或 -<paramref name="instanceName" /> 长度超过 127 个字符。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>初始化一个新的、 只读或读/写实例 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类，并将其与指定的系统或本地计算机上的自定义性能计数器和类别实例关联。</summary>
      <param name="categoryName">此性能计数器与之关联的性能计数器类别 （性能对象） 的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例或为空字符串的名称 ("")，如果该类别包含单个实例。</param>
      <param name="readOnly">true 若要访问在只读模式下; 计数器 false 访问读/写模式中的计数器。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 此计数器设置请求的读/写权限无效。- 或 - 指定的类别不存在 (如果 <paramref name="readOnly" /> 是 true)。- 或 - 指定的类别不是.NET Framework 自定义类别 (如果 <paramref name="readOnly" /> 是 false)。- 或 -指定的类别标记为多个实例，并且需要要使用实例的名称创建的性能计数器。- 或 -<paramref name="instanceName" /> 长度超过 127 个字符。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化一个新的只读实例 <see cref="T:System.Diagnostics.PerformanceCounter" /> 类并将其关联与指定的系统或自定义性能计数器和类别实例，指定的计算机上。</summary>
      <param name="categoryName">此性能计数器与之关联的性能计数器类别 （性能对象） 的名称。</param>
      <param name="counterName">性能计数器的名称。</param>
      <param name="instanceName">性能计数器类别实例或为空字符串的名称 ("")，如果该类别包含单个实例。</param>
      <param name="machineName">计算机存在性能计数器和及其关联的类别。</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="categoryName" /> 为空字符串 ("")。- 或 - <paramref name="counterName" /> 为空字符串 ("")。- 或 - 此计数器设置请求的读/写权限无效。- 或 - 此计数器不存在指定的计算机上。- 或 -指定的类别标记为多个实例，并且需要要使用实例的名称创建的性能计数器。- 或 -<paramref name="instanceName" /> 长度超过 127 个字符。- 或 -<paramref name="categoryName" /> 和 <paramref name="counterName" /> 已本地化为不同的语言。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 或 <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.BeginInit">
      <summary>开始初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 使用窗体或由另一个组件的实例。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Close">
      <summary>关闭性能计数器并释放分配的此性能计数器实例的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.CloseSharedResources">
      <summary>释放由计数器分配的性能计数器库共享状态。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Decrement">
      <summary>减少由 1 到有效的原子操作关联的性能计数器。</summary>
      <returns>减少计数器的值。</returns>
      <exception cref="T:System.InvalidOperationException">此计数器是只读的因此应用程序不能减少。- 或 - 实例不是程序与性能计数器。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.EndInit">
      <summary>结束初始化 <see cref="T:System.Diagnostics.PerformanceCounter" /> 窗体或由另一个组件使用的实例。 此初始化在运行时发生。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.Increment">
      <summary>关联的性能计数器递增一个通过有效的原子操作。</summary>
      <returns>递增的计数器的值。</returns>
      <exception cref="T:System.InvalidOperationException">此计数器是只读的因此应用程序不能对其进行递增。- 或 - 实例不是程序与性能计数器。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)">
      <summary>递增或递减通过有效的原子操作指定的量关联的性能计数器的值。</summary>
      <param name="value">要递增的值。 （负值使计数器。）</param>
      <returns>新的计数器值。</returns>
      <exception cref="T:System.InvalidOperationException">此计数器是只读的因此应用程序不能对其进行递增。- 或 - 实例不是程序与性能计数器。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextSample">
      <summary>获取一个计数器样本，并为其返回的 raw、 或非计算所得，值。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.CounterSample" /> ，表示为此计数器获取系统的下一步原始值。</returns>
      <exception cref="T:System.InvalidOperationException">实例不是程序与性能计数器。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.NextValue">
      <summary>获取一个计数器样本，并为其返回计算所得的值。</summary>
      <returns>系统为此计数器获取下一个计算的值。</returns>
      <exception cref="T:System.InvalidOperationException">实例不是程序与性能计数器。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounter.RemoveInstance">
      <summary>删除指定的类别实例 <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName" /> 属性。</summary>
      <exception cref="T:System.InvalidOperationException">此计数器是只读的因此不能删除与类别关联的任何实例。- 或 - 实例不是程序与性能计数器。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类，使 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为空，并设置 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类集 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性设置为指定的值，并设置 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为本地计算机。</summary>
      <param name="categoryName">性能对象、 要与此关联的性能计数器类别的名称 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 为一个空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 类并设置 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性设置为指定的值。</summary>
      <param name="categoryName">性能对象、 要与此关联的性能计数器类别的名称 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例。</param>
      <param name="machineName">计算机存在性能计数器类别和及其关联的计数器。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 为一个空字符串 ("")。- 或 - <paramref name="machineName" /> 的语法不正确。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String)">
      <summary>确定指定的计数器已注册到此类别中，这将由 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性。</summary>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <returns>true 如果由指定的类别向注册该计数器 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 和 <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 属性; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 未设置属性。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String)">
      <summary>确定指定的计数器已注册到本地计算机上的指定类别。</summary>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <param name="categoryName">性能对象、 指定的性能计数器与之关联的性能计数器类别的名称。</param>
      <returns>true, 如果向本地计算机上的指定类别中注册该计数器否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 - <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 为一个空字符串 ("")。</exception>
      <exception cref="T:System.InvalidOperationException">类别名称不存在。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.CounterExists(System.String,System.String,System.String)">
      <summary>确定指定的计数器已注册到远程计算机上指定的类别。</summary>
      <param name="counterName">要查找的性能计数器的名称。</param>
      <param name="categoryName">性能对象、 指定的性能计数器与之关联的性能计数器类别的名称。</param>
      <param name="machineName">存在的性能计数器类别和及其相关的计数器的计算机的名称。</param>
      <returns>true, 如果向指定的计算机; 上的指定类别中注册该计数器否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 - <paramref name="counterName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 为一个空字符串 ("")。- 或 - <paramref name="machineName" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">类别名称不存在。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.CounterCreationDataCollection)">
      <summary>注册包含本地计算机上的指定的计数器的自定义性能计数器类别。</summary>
      <param name="categoryName">要创建并向系统注册的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> ，它指定要作为新类别的一部分创建的计数器。</param>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 与新的自定义类别或性能对象相关联。</returns>
      <exception cref="T:System.ArgumentException">在中指定的计数器名称 <paramref name="counterData" /> 集合是 null 或空字符串 ("")。- 或 - 在中指定一个计数器 <paramref name="counterData" /> 集合中已存在。- 或 - <paramref name="counterName" /> 参数具有无效的语法。 它可能包含反斜杠字符 ("\") 或具有长度大于 80 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">本地计算机上已存在该类别。- 或 - 布局 <paramref name="counterData" /> 集合不正确的基本计数器。 类型的计数器 AverageCount64, ，AverageTimer32, ，CounterMultiTimer, ，CounterMultiTimerInverse, ，CounterMultiTimer100Ns, ，CounterMultiTimer100NsInverse, ，RawFraction, ，SampleFraction 或 SampleCounter 必须其后紧接的基本计数器类型之一 (AverageBase, ，MultiBase, ，RawBase, ，或 SampleBase)。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.Diagnostics.CounterCreationDataCollection)">
      <summary>注册包含本地计算机上的指定的计数器的自定义性能计数器类别。</summary>
      <param name="categoryName">要创建并向系统注册的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="categoryType">其中一个 <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" />  值。</param>
      <param name="counterData">一个 <see cref="T:System.Diagnostics.CounterCreationDataCollection" /> ，它指定要作为新类别的一部分创建的计数器。</param>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 与新的自定义类别或性能对象相关联。</returns>
      <exception cref="T:System.ArgumentException">在中指定的计数器名称 <paramref name="counterData" /> 集合是 null 或空字符串 ("")。- 或 - 在中指定一个计数器 <paramref name="counterData" /> 集合中已存在。- 或 - <paramref name="counterName" /> 包含无效的语法。 它可能包含反斜杠字符 ("\") 或具有长度大于 80 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="counterData" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="categoryType" /> 以下值的范围之外的值是 ︰ MultiInstance, ，SingleInstance, ，或 Unknown。</exception>
      <exception cref="T:System.InvalidOperationException">本地计算机上已存在该类别。- 或 - 布局 <paramref name="counterData" /> 集合不正确的基本计数器。 类型的计数器 AverageCount64, ，AverageTimer32, ，CounterMultiTimer, ，CounterMultiTimerInverse, ，CounterMultiTimer100Ns, ，CounterMultiTimer100NsInverse, ，RawFraction, ，SampleFraction, ，或 SampleCounter 必须其后紧接的基本计数器类型之一 (AverageBase, ，MultiBase, ，RawBase, ，或 SampleBase)。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.Diagnostics.PerformanceCounterCategoryType,System.String,System.String)">
      <summary>注册包含的单个计数器的类型的自定义性能计数器类别 <see cref="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32" /> 本地计算机上。</summary>
      <param name="categoryName">要创建并向系统注册的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="categoryType">其中一个 <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" />  值，该值指示是否为该类别 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance" />, ，<see cref="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance" />, ，或 <see cref="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown" />。</param>
      <param name="counterName">若要创建新类别的一部分的新计数器的名称。</param>
      <param name="counterHelp">与新的自定义类别相关联的计数器的说明。</param>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 与新的系统类别或性能对象相关联。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" /> 是 null 或为空字符串 ("")。- 或 - 由指定的计数器 <paramref name="counterName" /> 已存在。- 或 - <paramref name="counterName" /> 包含无效的语法。 它可能包含反斜杠字符 ("\") 或具有长度大于 80 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">本地计算机上已存在该类别。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="counterHelp" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Create(System.String,System.String,System.String,System.String)">
      <summary>注册包含的单个计数器的类型的自定义性能计数器类别 NumberOfItems32 本地计算机上。</summary>
      <param name="categoryName">要创建并向系统注册的自定义性能计数器类别的名称。</param>
      <param name="categoryHelp">自定义类别的说明。</param>
      <param name="counterName">类型的新计数器的名称 NumberOfItems32, ，若要创建新类别的一部分。</param>
      <param name="counterHelp">与新的自定义类别相关联的计数器的说明。</param>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 与新的系统类别或性能对象相关联。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="counterName" /> 是 null 或为空字符串 ("")。- 或 - 由指定的计数器 <paramref name="counterName" /> 已存在。- 或 - <paramref name="counterName" /> 包含无效的语法。 它可能包含反斜杠字符 ("\") 或具有长度大于 80 个字符。</exception>
      <exception cref="T:System.InvalidOperationException">本地计算机上已存在该类别。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="counterHelp" /> 为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Delete(System.String)">
      <summary>从本地计算机上移除该类别和及其关联的计数器。</summary>
      <param name="categoryName">若要删除的自定义性能计数器类别的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数具有无效的语法。 它可能包含反斜杠字符 ("\") 或具有长度大于 80 个字符。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">不能删除类别，因为它不是自定义的类别。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String)">
      <summary>确定是否在本地计算机上注册该类别。</summary>
      <param name="categoryName">要查找的性能计数器类别的名称。</param>
      <returns>true 如果注册了该类别;，否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.Exists(System.String,System.String)">
      <summary>确定是否在指定的计算机上注册该类别。</summary>
      <param name="categoryName">要查找的性能计数器类别的名称。</param>
      <param name="machineName">要为该类别检查的计算机的名称。</param>
      <returns>true 如果注册了该类别;，否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。- 或 - <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.IO.IOException">找不到的网络路径。</exception>
      <exception cref="T:System.UnauthorizedAccessException">调用方没有所要求的权限。- 或 -没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories">
      <summary>检索本地计算机已注册的性能计数器类别的列表。</summary>
      <returns>一个数组 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象指示是否在本地计算机注册的类别。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCategories(System.String)">
      <summary>检索在指定的计算机注册的性能计数器类别的列表。</summary>
      <param name="machineName">要查找的计算机。</param>
      <returns>一个数组 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象指示是否在指定的计算机注册的类别。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters">
      <summary>检索正好包含一个实例的性能计数器类别中的计数器列表。</summary>
      <returns>一个数组 <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象指示与此单实例性能计数器类别相关联的计数器。</returns>
      <exception cref="T:System.ArgumentException">类别不是单个实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.InvalidOperationException">类别不具有关联的实例。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetCounters(System.String)">
      <summary>检索包含一个或多个实例的性能计数器类别中的计数器列表。</summary>
      <param name="instanceName">性能对象的实例为其检索关联的计数器列表。</param>
      <returns>一个数组 <see cref="T:System.Diagnostics.PerformanceCounter" /> 对象指示与此性能计数器类别的指定的对象实例相关联的计数器。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为此 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例未设置。- 或 - 类别不包含由指定的实例 <paramref name="instanceName" /> 参数。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.GetInstanceNames">
      <summary>检索与该类别相关联的性能对象实例的列表。</summary>
      <returns>与此类别关联的字符串表示的性能对象实例名称的数组是，或如果该类别包含只能有一个性能对象实例，单个项数组，包含一个空字符串 ("")。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 null。 可能未设置该属性。- 或 -类别不具有关联的实例。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String)">
      <summary>确定指定的性能对象实例是否存在于此标识的类别 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 对象的 <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性。</summary>
      <param name="instanceName">中要搜索此性能计数器类别的性能对象实例。</param>
      <returns>true 如果该类别包含指定的性能对象实例;否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 null。 可能未设置该属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String)">
      <summary>确定指定的类别，在本地计算机上是否包含指定的性能对象实例。</summary>
      <param name="instanceName">要搜索的性能对象实例。</param>
      <param name="categoryName">要搜索的性能计数器类别。</param>
      <returns>true 如果该类别包含指定的性能对象实例;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。- 或 - <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.InstanceExists(System.String,System.String,System.String)">
      <summary>确定指定的计算机上指定的类别是否包含指定的性能对象实例。</summary>
      <param name="instanceName">要搜索的性能对象实例。</param>
      <param name="categoryName">要搜索的性能计数器类别。</param>
      <param name="machineName">在其上查找类别实例对计算机的名称。</param>
      <returns>true 如果该类别包含指定的性能对象实例;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。- 或 - <paramref name="categoryName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="categoryName" /> 参数为空字符串 ("")。- 或 - <paramref name="machineName" /> 参数无效。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterCategory.ReadCategory">
      <summary>读取所有计数器和性能对象实例数据与此性能计数器类别相关联。</summary>
      <returns>
        <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> ，其中包含类别的计数器和性能对象实例数据。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 null。 可能未设置该属性。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterManager" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CloseData">
      <summary>调用的性能 dll 关闭性能数据 </summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterManager.System#Diagnostics#ICollectData#CollectData(System.Int32,System.IntPtr,System.IntPtr,System.Int32,System.IntPtr@)">
      <summary>性能数据收集例程。 由 PerfCount 性能 dll 调用。</summary>
      <param name="callIdx">调用索引。</param>
      <param name="valueNamePtr">指向包含请求的对象标识符的 Unicode 字符串列表的指针。</param>
      <param name="dataPtr">指向数据缓冲区的指针。</param>
      <param name="totalBytes">指向的字节数的指针。</param>
      <param name="res">此方法返回时，包含 <see cref="T:System.IntPtr" /> 值为-1。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类，具有指定的访问权限级别，计算机添加到使用，并通过性能计数器相关联的类别的名称。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值之一。</param>
      <param name="machineName">驻留性能计数器并其相关联的类别的服务器。</param>
      <param name="categoryName">性能计数器类别 （性能对象） 的性能计数器与之关联的名称。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 与指定的权限的访问级别项的类。</summary>
      <param name="permissionAccessEntries">一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象数组。<see cref="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries" /> 属性设置为此值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="permissionAccessEntries" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermission" /> 类，具有指定的权限状态。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionAttribute.CreatePermission">
      <summary>创建基于请求的访问级别，通过设置权限 <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess" /> 特性上的属性。</summary>
      <returns>
        <see cref="T:System.Security.IPermission" /> 表示创建的权限。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntry.#ctor(System.Diagnostics.PerformanceCounterPermissionAccess,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 类的新实例。</summary>
      <param name="permissionAccess">
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。<see cref="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess" /> 属性设置为此值。</param>
      <param name="machineName">性能计数器的类别所驻留的服务器。</param>
      <param name="categoryName">此性能计数器与之关联的性能计数器类别 （性能对象） 的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="categoryName" /> 为 null。- 或 -<paramref name="machineName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="permissionAccess" /> 不是有效 <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值。- 或 -<paramref name="machineName" /> 不是有效的计算机名称。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Add(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>添加指定 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 到此集合。</summary>
      <param name="value">要添加的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</param>
      <returns>所添加的从零开始的索引 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntry[])">
      <summary>将一组指定的权限条目追加到此集合。</summary>
      <param name="value">类型的数组 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象，它包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.AddRange(System.Diagnostics.PerformanceCounterPermissionEntryCollection)">
      <summary>将一组指定的权限条目追加到此集合。</summary>
      <param name="value">一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection" /> ，包含要添加的权限项。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Contains(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>确定此集合是否包含指定 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</summary>
      <param name="value">要查找的 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象。</param>
      <returns>true 如果指定 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象属于该集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.CopyTo(System.Diagnostics.PerformanceCounterPermissionEntry[],System.Int32)">
      <summary>将权限项从此集合复制到数组，从该数组的某个特定索引处开始。</summary>
      <param name="array">类型的数组 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 接收此集合的权限条目。</param>
      <param name="index">从此处开始复制的权限项从零开始的索引。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.IndexOf(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>确定此集合中指定的权限项的索引。</summary>
      <param name="value">要搜索权限项。</param>
      <returns>指定的权限条目，则为-1 如果集合中找不到权限项的从零开始的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Insert(System.Int32,System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>指定索引处插入到此集合的权限条目。</summary>
      <param name="index">集合中要插入权限项的从零开始的索引。</param>
      <param name="value">要插入到此集合的权限项。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnClear">
      <summary>清除集合的内容后执行其他自定义进程。</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnInsert(System.Int32,System.Object)">
      <summary>新建建权限条目插入到集合之前，请执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，在其中插入 <paramref name="value" />。</param>
      <param name="value">处的权限项的新值 <paramref name="index" />。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnRemove(System.Int32,System.Object)">
      <summary>当从集合中移除新建建权限条目时，请执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，到 <paramref name="value" /> 找不到。</param>
      <param name="value">要移除的权限项 <paramref name="index" />。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>在集合中设置一个值之前执行其他自定义进程。</summary>
      <param name="index">从零开始的索引，到 <paramref name="oldValue" /> 找不到。</param>
      <param name="oldValue">要替换的值 <paramref name="newValue" />。</param>
      <param name="newValue">处的权限项的新值 <paramref name="index" />。</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Remove(System.Diagnostics.PerformanceCounterPermissionEntry)">
      <summary>从此集合中移除指定的权限条目。</summary>
      <param name="value">要删除的权限项。</param>
    </member>
    <member name="M:System.Diagnostics.Process.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Process" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.BeginErrorReadLine">
      <summary>在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上开始进行异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性为 false。- 或 - <see cref="P:System.Diagnostics.Process.StandardError" /> 流上已在进行异步读取操作。- 或 - 同步读取操作已使用 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.BeginOutputReadLine">
      <summary>在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上开始进行异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 属性为 false。- 或 - <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上已在进行异步读取操作。- 或 - 同步读取操作已使用 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.CancelErrorRead">
      <summary>取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardError" /> 流上执行的异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">未针对异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.CancelOutputRead">
      <summary>取消在应用程序的重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流上执行的异步读取操作。</summary>
      <exception cref="T:System.InvalidOperationException">未针对异步读取操作启用 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Close">
      <summary>释放与此组件关联的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.CloseMainWindow">
      <summary>通过向进程的主窗口发送关闭消息来关闭拥有用户界面的进程。</summary>
      <returns>如果成功发送了关闭消息，则为 true；如果关联进程没有主窗口或禁用了主窗口(例如，如果当前显示模式对话框)，则为 false。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">已经退出该进程。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Dispose(System.Boolean)">
      <summary>释放此进程使用的所有资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.Process.EnterDebugMode">
      <summary>通过启用当前线程的本机属性 SeDebugPrivilege，将 <see cref="T:System.Diagnostics.Process" /> 组件置于与以特殊模式运行的操作系统进程交互的状态。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.GetCurrentProcess">
      <summary>获取新的 <see cref="T:System.Diagnostics.Process" /> 组件并将其与当前活动的进程关联。</summary>
      <returns>与运行调用应用程序的进程资源关联的新的 <see cref="T:System.Diagnostics.Process" /> 组件。</returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32)">
      <summary>返回新的 <see cref="T:System.Diagnostics.Process" /> 组件(给定本地计算机上某个进程的标识符)。</summary>
      <param name="processId">进程资源的系统唯一标识符。</param>
      <returns>与 <paramref name="processId" /> 参数标识的本地进程资源关联的 <see cref="T:System.Diagnostics.Process" /> 组件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="processId" /> 参数指定的进程未运行。 此标识符可能已过期。</exception>
      <exception cref="T:System.InvalidOperationException">此对象未启动该进程。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)">
      <summary>返回新的 <see cref="T:System.Diagnostics.Process" /> 组件(给定进程标识符和网络中计算机的名称)。</summary>
      <param name="processId">进程资源的系统唯一标识符。</param>
      <param name="machineName">网络上计算机的名称。</param>
      <returns>与 <paramref name="processId" /> 参数标识的远程进程资源关联的 <see cref="T:System.Diagnostics.Process" /> 组件。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="processId" /> 参数指定的进程未运行。 此标识符可能已过期。- 或 - <paramref name="machineName" /> 参数的语法无效。 名称的长度可能为零 (0)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此对象未启动该进程。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses">
      <summary>为本地计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</summary>
      <returns>类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示本地计算机上运行的所有进程资源。</returns>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcesses(System.String)">
      <summary>为指定计算机上的每个进程资源创建一个新的 <see cref="T:System.Diagnostics.Process" /> 组件。</summary>
      <param name="machineName">从其中读取进程列表的计算机。</param>
      <returns>类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示指定计算机上运行的所有进程资源。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数的语法无效。 其长度可能为零 (0)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> 参数为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统平台不支持在远程计算机上进行此操作。</exception>
      <exception cref="T:System.InvalidOperationException">访问用于获取进程信息的性能计数器 API 时出现问题。 此异常特定于 Windows NT、Windows 2000 和 Windows XP。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问基础系统 API 时出现问题。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String)">
      <summary>创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与本地计算机上共享指定的进程名称的所有进程资源关联。</summary>
      <param name="processName">该进程的友好名称。</param>
      <returns>类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示运行指定应用程序或文件的进程资源。</returns>
      <exception cref="T:System.InvalidOperationException">访问用于获取进程信息的性能计数器 API 时出现问题。 此异常特定于 Windows NT、Windows 2000 和 Windows XP。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)">
      <summary>创建新的 <see cref="T:System.Diagnostics.Process" /> 组件的数组，并将它们与远程计算机上共享指定进程名称的所有进程资源关联。</summary>
      <param name="processName">该进程的友好名称。</param>
      <param name="machineName">网络上计算机的名称。</param>
      <returns>类型 <see cref="T:System.Diagnostics.Process" /> 的数组，表示运行指定应用程序或文件的进程资源。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="machineName" /> 参数的语法无效。 其长度可能为零 (0)。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="machineName" /> 参数为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">操作系统平台不支持在远程计算机上进行此操作。</exception>
      <exception cref="T:System.InvalidOperationException">访问用于获取进程信息的性能计数器 API 时出现问题。 此异常特定于 Windows NT、Windows 2000 和 Windows XP。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问基础系统 API 时出现问题。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Kill">
      <summary>立即停止关联的进程。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">无法终止相关联的进程。- 或 -进程将终止。- 或 - 关联的进程是 Win16 可执行文件。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.Kill" />。 该方法仅对本地计算机上运行的进程可用。</exception>
      <exception cref="T:System.InvalidOperationException">已经退出该进程。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.LeaveDebugMode">
      <summary>使 <see cref="T:System.Diagnostics.Process" /> 组件离开允许它与以特殊模式运行的操作系统进程交互的状态。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.OnExited">
      <summary>引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.Refresh">
      <summary>放弃已缓存到进程组件的关联仅存的任何相关信息。</summary>
    </member>
    <member name="M:System.Diagnostics.Process.Start">
      <summary>启动(或重用)此 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 属性指定的进程资源，并将其与该组件关联。</summary>
      <returns>如果启动了进程资源，则为 true；如果没有启动新的进程资源(例如，如果重用了现有进程)，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在 <see cref="T:System.Diagnostics.Process" /> 组件的 <see cref="P:System.Diagnostics.Process.StartInfo" /> 中未指定任何文件名。- 或 - 当 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 或 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 的值为 true 时，<see cref="P:System.Diagnostics.Process.StartInfo" /> 属性的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 成员的值为 true。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放此进程对象。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)">
      <summary>启动由包含进程启动信息(例如，要启动的进程的文件名)的参数指定的进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</summary>
      <param name="startInfo">
        <see cref="T:System.Diagnostics.ProcessStartInfo" />，包含用于启动进程的信息(包括文件名和任何命令行参数)。</param>
      <returns>与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 null。 请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。 此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 true 的非 null 进程。 在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</returns>
      <exception cref="T:System.InvalidOperationException">在 <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中未指定任何文件名。- 或 - <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性值为 true，且 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" />、<see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 或 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 属性的值也为 true。- 或 -<paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性值为 true，且 <see cref="P:System.Diagnostics.ProcessStartInfo.UserName" /> 属性值不为 null 或空，或者 <see cref="P:System.Diagnostics.ProcessStartInfo.Password" /> 属性值不为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startInfo" /> 参数为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放此进程对象。</exception>
      <exception cref="T:System.IO.FileNotFoundException">在 <paramref name="startInfo" /> 参数的 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中指定的文件未找到。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时出错。- 或 -参数的长度与该进程的完整路径的长度的总和超过了 2080。 与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。” 或“拒绝访问。”</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String)">
      <summary>通过指定文档或应用程序文件的名称来启动进程资源，并将资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联。</summary>
      <param name="fileName">要在进程中运行的文档或应用程序文件的名称。</param>
      <returns>与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 null。 请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。 此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 true 的非 null 进程。 在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放此进程对象。</exception>
      <exception cref="T:System.IO.FileNotFoundException">PATH 环境变量具有一个包含引号的字符串。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String)">
      <summary>通过指定应用程序的名称和一组命令行参数来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件相关联。</summary>
      <param name="fileName">要在进程中运行的应用程序文件的名称。</param>
      <param name="arguments">启动该进程时传递的命令行参数。</param>
      <returns>与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 null。 请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。 此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 true 的非 null 进程。 在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="fileName" /> 或 <paramref name="arguments" /> 参数为 null。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时出错。- 或 -参数的长度与该进程的完整路径的长度的总和超过了 2080。 与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。” 或“拒绝访问。”</exception>
      <exception cref="T:System.ObjectDisposedException">已释放此进程对象。</exception>
      <exception cref="T:System.IO.FileNotFoundException">PATH 环境变量具有一个包含引号的字符串。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.Security.SecureString,System.String)">
      <summary>通过指定应用程序的名称、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</summary>
      <param name="fileName">要在进程中运行的应用程序文件的名称。</param>
      <param name="userName">启动进程时使用的用户名。</param>
      <param name="password">包含启动进程时要使用的密码的 <see cref="T:System.Security.SecureString" />。</param>
      <param name="domain">启动进程时要使用的域。</param>
      <returns>与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 null。 请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。 此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 true 的非 null 进程。 在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</returns>
      <exception cref="T:System.InvalidOperationException">未指定文件名。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="fileName" /> 不是可执行的 (.exe) 文件。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">已释放此进程对象。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.Start(System.String,System.String,System.String,System.Security.SecureString,System.String)">
      <summary>通过指定应用程序的名称、一组命令行参数、用户名、密码和域来启动一个进程资源，并将该资源与新的 <see cref="T:System.Diagnostics.Process" /> 组件关联起来。</summary>
      <param name="fileName">要在进程中运行的应用程序文件的名称。</param>
      <param name="arguments">启动该进程时传递的命令行参数。</param>
      <param name="userName">启动进程时使用的用户名。</param>
      <param name="password">包含启动进程时要使用的密码的 <see cref="T:System.Security.SecureString" />。</param>
      <param name="domain">启动进程时要使用的域。</param>
      <returns>与进程资源关联的新 <see cref="T:System.Diagnostics.Process" />，如果未启动进程资源，则为 null。 请注意，随着同一进程已在运行的实例启动的新进程将独立于其他进程。 此外，启动可能返回一个 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性已设置为 true 的非 null 进程。 在这种情况下，启动的进程可能已激活现有实例自身，然后退出。</returns>
      <exception cref="T:System.InvalidOperationException">未指定文件名。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <paramref name="fileName" /> 不是可执行的 (.exe) 文件。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">打开关联的文件时出错。- 或 -参数的长度与该关联文件的完整路径的长度的总和超过了 2080。 与此异常关联的错误消息可能为以下消息之一：“传递到系统调用的数据区域太小。” 或“拒绝访问。”</exception>
      <exception cref="T:System.ObjectDisposedException">已释放此进程对象。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.ToString">
      <summary>如果适用，则将进程的名称格式化为字符串，并与父组件类型组合。</summary>
      <returns>
        <see cref="P:System.Diagnostics.Process.ProcessName" />，与基组件的 <see cref="M:System.Object.ToString" /> 返回值组合。</returns>
      <exception cref="T:System.PlatformNotSupportedException">Windows 98 上不支持 <see cref="M:System.Diagnostics.Process.ToString" />。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit">
      <summary>指示 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程退出。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">无法访问等待设置。</exception>
      <exception cref="T:System.SystemException">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。- 或 - 没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。- 或 - 你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit" />。 此方法仅对本地计算机上运行的进程可用。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForExit(System.Int32)">
      <summary>指示 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程退出。</summary>
      <param name="milliseconds">等待关联进程退出的时间(以毫秒为单位)。 最大值为 32 位整数的最大可能值，这对于操作系统而言表示无限大。</param>
      <returns>如果关联进程已退出，则为 true；否则为 false。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法访问等待设置。</exception>
      <exception cref="T:System.SystemException">尚未设置进程 <see cref="P:System.Diagnostics.Process.Id" />，而且不存在可从其确定 <see cref="P:System.Diagnostics.Process.Id" /> 属性的 <see cref="P:System.Diagnostics.Process.Handle" />。- 或 - 没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。- 或 - 你正尝试为远程计算机上运行的进程调用 <see cref="M:System.Diagnostics.Process.WaitForExit(System.Int32)" />。 此方法仅对本地计算机上运行的进程可用。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle">
      <summary>使 <see cref="T:System.Diagnostics.Process" /> 组件无限期地等待关联进程进入空闲状态。 此重载仅适用于具有用户界面并因此具有消息循环的进程。</summary>
      <returns>如果关联进程已经达到空闲状态，则为 true。</returns>
      <exception cref="T:System.InvalidOperationException">进程不具有图形界面。- 或 -发生未知错误。 进程无法进入空闲状态。- 或 -已经退出该进程。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
    </member>
    <member name="M:System.Diagnostics.Process.WaitForInputIdle(System.Int32)">
      <summary>使 <see cref="T:System.Diagnostics.Process" /> 组件在指定的毫秒数内等待关联进程进入空闲状态。 此重载仅适用于具有用户界面并因此具有消息循环的进程。</summary>
      <param name="milliseconds">1 到 <see cref="F:System.Int32.MaxValue" /> 的值以毫秒为单位指定了等待关联进程变为空闲状态的时间量。 0 值指定立即返回，而 -1 值则指定无限期等待。</param>
      <returns>如果关联进程已经达到空闲状态，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">进程不具有图形界面。- 或 -发生未知错误。 进程无法进入空闲状态。- 或 -已经退出该进程。- 或 -没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
    </member>
    <member name="M:System.Diagnostics.ProcessModule.ToString">
      <summary>转换为字符串的模块的名称。</summary>
      <returns>
        <see cref="P:System.Diagnostics.ProcessModule.ModuleName" /> 属性的值。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor">
      <summary>在没有关联的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例的情况下，初始化 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.#ctor(System.Diagnostics.ProcessModule[])">
      <summary>使用指定的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例数组初始化 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 类的新实例。</summary>
      <param name="processModules">用来初始化此 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 实例的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例数组。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.Contains(System.Diagnostics.ProcessModule)">
      <summary>确定指定的进程模块是否在集合中。</summary>
      <param name="module">表示要在此集合中查找的模块的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例。</param>
      <returns>如果该模块存在于此集合中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.CopyTo(System.Diagnostics.ProcessModule[],System.Int32)">
      <summary>将 <see cref="T:System.Diagnostics.ProcessModule" /> 实例数组复制到集合中的指定索引处。</summary>
      <param name="array">要添加到集合的 <see cref="T:System.Diagnostics.ProcessModule" /> 实例数组。</param>
      <param name="index">要添加新实例的位置。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessModuleCollection.IndexOf(System.Diagnostics.ProcessModule)">
      <summary>提供指定模块在集合中的位置。</summary>
      <param name="module">检索其索引的 <see cref="T:System.Diagnostics.ProcessModule" />。</param>
      <returns>定义模块在 <see cref="T:System.Diagnostics.ProcessModuleCollection" /> 中的位置的从零开始的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 类的新实例，而不指定启动进程时使用的文件名。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 类的新实例，并指定启动进程时使用的诸如应用程序或文档的文件名。</summary>
      <param name="fileName">启动进程时使用的应用程序或文档。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.ProcessStartInfo" /> 类的新实例，指定启动该进程时使用的应用程序文件名以及要传递给该应用程序的一组命令行参数。</summary>
      <param name="fileName">启动进程时使用的应用程序。</param>
      <param name="arguments">进程启动时要传递给应用程序的命令行参数。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThread.ResetIdealProcessor">
      <summary>重置此线程以指示是没有单个的理想处理器将理想处理器。 换而言之，以便任何处理器是理想之选。</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">无法重置将理想处理器。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor">
      <summary>在没有关联的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例的情况下，初始化 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.#ctor(System.Diagnostics.ProcessThread[])">
      <summary>使用指定的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例数组初始化 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 类的新实例。</summary>
      <param name="processThreads">用来初始化此 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 实例的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例数组。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Add(System.Diagnostics.ProcessThread)">
      <summary>将进程线程追加到集合。</summary>
      <param name="thread">要添加到集合的线程。</param>
      <returns>集合中线程的从零开始的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Contains(System.Diagnostics.ProcessThread)">
      <summary>确定指定进程线程是否存在于集合中。</summary>
      <param name="thread">指示要在此集合中查找的线程的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例。</param>
      <returns>如果线程存在于集合中，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.CopyTo(System.Diagnostics.ProcessThread[],System.Int32)">
      <summary>将 <see cref="T:System.Diagnostics.ProcessThread" /> 实例数组复制到集合中的指定索引处。</summary>
      <param name="array">要添加到集合的 <see cref="T:System.Diagnostics.ProcessThread" /> 实例数组。</param>
      <param name="index">要添加新实例的位置。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.IndexOf(System.Diagnostics.ProcessThread)">
      <summary>提供指定线程在集合中的位置。</summary>
      <param name="thread">检索其索引的 <see cref="T:System.Diagnostics.ProcessThread" />。</param>
      <returns>定义线程在 <see cref="T:System.Diagnostics.ProcessThreadCollection" /> 中的位置的从零开始的索引。</returns>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Insert(System.Int32,System.Diagnostics.ProcessThread)">
      <summary>在集合中的指定位置插入进程线程。</summary>
      <param name="index">从零开始的索引，指示插入线程的位置。</param>
      <param name="thread">要插入到集合中的线程。</param>
    </member>
    <member name="M:System.Diagnostics.ProcessThreadCollection.Remove(System.Diagnostics.ProcessThread)">
      <summary>从集合中删除进程线程。</summary>
      <param name="thread">要从集合中删除的线程。</param>
    </member>
    <member name="M:System.Diagnostics.SourceFilter.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.SourceFilter" /> 类，同时指定跟踪源的名称。</summary>
      <param name="source">跟踪源的名称。</param>
    </member>
    <member name="M:System.Diagnostics.SourceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>确定跟踪侦听器是否应跟踪事件。</summary>
      <param name="cache">一个表示跟踪事件的信息缓存的对象。</param>
      <param name="source">源的名称。</param>
      <param name="eventType">用于标识事件类型的枚举值之一。</param>
      <param name="id">跟踪标识符编号。</param>
      <param name="formatOrMessage">要用于写入数组的参数或一条消息用于编写的格式。</param>
      <param name="args">参数对象的数组。</param>
      <param name="data1">跟踪数据对象。</param>
      <param name="data">跟踪数据对象的数组。</param>
      <returns>true 如果应生成跟踪;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.SourceSwitch" /> 类，同时指定的源的名称。</summary>
      <param name="name">源的名称。</param>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.SourceSwitch" /> 类中，指定显示名称和源开关的默认值。</summary>
      <param name="displayName">源开关的名称。</param>
      <param name="defaultSwitchValue">默认值为该交换机的。</param>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.OnValueChanged">
      <summary>时调用的值 <see cref="P:System.Diagnostics.Switch.Value" /> 属性更改。</summary>
      <exception cref="T:System.ArgumentException">新值 <see cref="P:System.Diagnostics.Switch.Value" /> 不属于某个 <see cref="T:System.Diagnostics.SourceLevels" /> 值。</exception>
    </member>
    <member name="M:System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)">
      <summary>确定是否跟踪侦听器应调用好，基于跟踪事件类型。</summary>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <returns>True 如果应调用的跟踪侦听器。否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.Stopwatch" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.GetTimestamp">
      <summary>获取计时器机制中的当前刻度数。</summary>
      <returns>一个长整型，表示基础计时器机制中的刻度计数器值。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Reset">
      <summary>停止时间间隔测量，并将运行时间重置为零。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Restart">
      <summary>停止时间间隔测量，将运行时间重置为零，然后开始测量运行时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Start">
      <summary>开始或继续测量某个时间间隔的运行时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.StartNew">
      <summary>初始化新的 <see cref="T:System.Diagnostics.Stopwatch" /> 实例，将运行时间属性设置为零，然后开始测量运行时间。</summary>
      <returns>刚刚开始测量运行时间的 <see cref="T:System.Diagnostics.Stopwatch" />。</returns>
    </member>
    <member name="M:System.Diagnostics.Stopwatch.Stop">
      <summary>停止测量某个时间间隔的运行时间。</summary>
    </member>
    <member name="M:System.Diagnostics.Switch.#ctor(System.String,System.String)">
      <summary>初始化 <see cref="T:System.Diagnostics.Switch" /> 类的新实例。</summary>
      <param name="displayName">开关的名称。</param>
      <param name="description">交换机的说明。</param>
    </member>
    <member name="M:System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.Switch" /> 类，同时指定显示名称、 说明和开关的默认值。</summary>
      <param name="displayName">开关的名称。</param>
      <param name="description">切换描述。</param>
      <param name="defaultSwitchValue">默认值为该交换机的。</param>
    </member>
    <member name="M:System.Diagnostics.Switch.GetSupportedAttributes">
      <summary>获取由交换机支持的自定义特性。</summary>
      <returns>一个字符串数组，包含此开关，支持的自定义特性的名称或 null 如果那里任何自定义特性都受不支持。</returns>
    </member>
    <member name="M:System.Diagnostics.Switch.OnSwitchSettingChanged">
      <summary>时调用 <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> 属性更改。</summary>
    </member>
    <member name="M:System.Diagnostics.Switch.OnValueChanged">
      <summary>时调用 <see cref="P:System.Diagnostics.Switch.Value" /> 属性更改。</summary>
    </member>
    <member name="M:System.Diagnostics.SwitchAttribute.#ctor(System.String,System.Type)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.SwitchAttribute" /> 类，同时指定的名称和交换机的类型。</summary>
      <param name="switchName">交换机的显示名称。</param>
      <param name="switchType">交换机的类型。</param>
    </member>
    <member name="M:System.Diagnostics.SwitchAttribute.GetAll(System.Reflection.Assembly)">
      <summary>返回所有开关指定的程序集的属性。</summary>
      <param name="assembly">要检查其交换机特性的程序集。</param>
      <returns>包含程序集的所有开关特性数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.SwitchLevelAttribute.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.SwitchLevelAttribute" /> 类，同时指定类型，它确定是否应记录一个跟踪。</summary>
      <param name="switchLevelType">
        <see cref="T:System.Type" /> ，它确定是否应记录一个跟踪。</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor">
      <summary>用 <see cref="T:System.IO.TextWriter" /> 作为输出接收者来初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类用作调试和跟踪输出的接收方使用的流。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 表示流 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入。</param>
      <exception cref="T:System.ArgumentNullException">该流是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 初始化具有指定名称用作调试的接收方使用的流和跟踪输出。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 表示流 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">该流是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类用作跟踪或调试输出的接收方使用指定的编写器。</summary>
      <param name="writer">一个 <see cref="T:System.IO.TextWriter" /> 用于接收来自 <see cref="T:System.Diagnostics.TextWriterTraceListener" />。</param>
      <exception cref="T:System.ArgumentNullException">编写器为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类具有指定名称，使用指定的编写器作为接收方的跟踪或调试输出。</summary>
      <param name="writer">一个 <see cref="T:System.IO.TextWriter" /> 用于接收来自 <see cref="T:System.Diagnostics.TextWriterTraceListener" />。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">编写器为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类，使用该文件用作调试和跟踪输出的接收方。</summary>
      <param name="fileName">文件的名称 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入。</param>
      <exception cref="T:System.ArgumentNullException">该文件是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 类具有指定名称，使用该文件用作调试的接收方和跟踪输出。</summary>
      <param name="fileName">文件的名称 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 写入。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">该流是 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Close">
      <summary>关闭 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> ，以便它不再接收跟踪或调试输出。</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)">
      <summary>释放此 <see cref="T:System.Diagnostics.TextWriterTraceListener" /> 对象。</summary>
      <param name="disposing">true 若要释放托管的资源;如果 false, ，<see cref="M:System.Diagnostics.TextWriterTraceListener.Dispose(System.Boolean)" /> 不起作用。</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Flush">
      <summary>刷新输出缓冲区的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />。</summary>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.Write(System.String)">
      <summary>将一条消息写入到此实例的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" />。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.TextWriterTraceListener.WriteLine(System.String)">
      <summary>将一条消息写入到此实例的 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> 后面带有行结束符。 默认的行终止符是回车符后跟一个换行符 (\r\n)。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean)">
      <summary>检查条件 ；如果条件为 false，则显示一个消息框，其中显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不会发送失败消息，也不显示消息框。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String)">
      <summary>检查条件；如果条件为 false，则输出指定消息并显示指示调用堆栈的消息框。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不会发送指定消息，也不显示消息框。</param>
      <param name="message">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Assert(System.Boolean,System.String,System.String)">
      <summary>检查条件 ；如果条件为 false，则输出两条指定消息，并显示一个消息框，其中显示调用堆栈。</summary>
      <param name="condition">要计算的条件表达式。 如果条件为 true，则不会发送指定的消息，也不显示消息框。</param>
      <param name="message">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的消息。</param>
      <param name="detailMessage">要发送到 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合的详细消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Close">
      <summary>刷新输出缓冲区，然后关闭 <see cref="P:System.Diagnostics.Trace.Listeners" />。</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String)">
      <summary>发出指定的错误消息。</summary>
      <param name="message">要发出的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Fail(System.String,System.String)">
      <summary>发出一条错误消息和一条详细的错误消息。</summary>
      <param name="message">要发出的消息。</param>
      <param name="detailMessage">要发出的详细消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Flush">
      <summary>刷新输出缓冲区，并使放入缓冲区中的数据写入 <see cref="P:System.Diagnostics.Trace.Listeners" />。</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Indent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 增加 1。</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Refresh">
      <summary>刷新跟踪配置数据。</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceError(System.String)">
      <summary>使用指定消息，将错误消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的信息性消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceError(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式化信息，将错误消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="format">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceInformation(System.String)">
      <summary>使用指定消息，将信息性消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="message">要写入的信息性消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceInformation(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式化信息，将信息性消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="format">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceWarning(System.String)">
      <summary>使用指定的消息将警告消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的信息性消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.TraceWarning(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式化信息，将警告消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="format">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Unindent">
      <summary>将当前的 <see cref="P:System.Diagnostics.Trace.IndentLevel" /> 减少 1。</summary>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object)">
      <summary>将对象 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.Object,System.String)">
      <summary>将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">一个 <see cref="T:System.Object" />，其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String)">
      <summary>将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.Write(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object)">
      <summary>如果条件为 true，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.Object,System.String)">
      <summary>如果条件为 true，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String)">
      <summary>如果条件为 true，则将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteIf(System.Boolean,System.String,System.String)">
      <summary>如果条件为 true，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object)">
      <summary>将对象 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.Object,System.String)">
      <summary>将类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法的值写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="value">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String)">
      <summary>将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLine(System.String,System.String)">
      <summary>将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object)">
      <summary>如果条件为 true，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.Object,System.String)">
      <summary>如果条件为 true，则向 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="value">其名称将发送至 <see cref="P:System.Diagnostics.Trace.Listeners" /> 的 <see cref="T:System.Object" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String)">
      <summary>如果条件为 true，则将消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.Trace.WriteLineIf(System.Boolean,System.String,System.String)">
      <summary>如果条件为 true，则将类别名称和消息写入 <see cref="P:System.Diagnostics.Trace.Listeners" /> 集合中的跟踪侦听器。</summary>
      <param name="condition">若要使消息被写入，则为 true；否则为 false。</param>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.TraceEventCache.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.TraceEventCache" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceFilter.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.TraceFilter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])">
      <summary>当在派生类中重写，确定跟踪侦听器是否应跟踪事件。</summary>
      <param name="cache">
        <see cref="T:System.Diagnostics.TraceEventCache" /> 包含有关跟踪事件的信息。</param>
      <param name="source">源的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">跟踪标识符编号。</param>
      <param name="formatOrMessage">这两种格式用于写入指定的参数数组 <paramref name="args" /> 参数或要写入的消息。</param>
      <param name="args">参数对象的数组。</param>
      <param name="data1">跟踪数据对象。</param>
      <param name="data">跟踪数据对象的数组。</param>
      <returns>true 若要跟踪指定的事件。否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor">
      <summary>初始化 <see cref="T:System.Diagnostics.TraceListener" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.#ctor(System.String)">
      <summary>用指定的名称作为侦听器来初始化 <see cref="T:System.Diagnostics.TraceListener" /> 类的新实例。</summary>
      <param name="name">
        <see cref="T:System.Diagnostics.TraceListener" /> 的名称。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Close">
      <summary>在派生类中被重写时，关闭输出流以使它不再接收跟踪或调试输出。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose">
      <summary>释放由 <see cref="T:System.Diagnostics.TraceListener" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Diagnostics.TraceListener" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器发出错误信息。</summary>
      <param name="message">要发出的消息。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Fail(System.String,System.String)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器发出错误信息和详细错误信息。</summary>
      <param name="message">要发出的消息。</param>
      <param name="detailMessage">要发出的详细消息。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Flush">
      <summary>在派生类中被重写时，刷新输出缓冲区。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.GetSupportedAttributes">
      <summary>获取跟踪侦听器支持的自定义特性。</summary>
      <returns>为跟踪侦听器支持的自定义特性命名的字符串数组；或者如果没有自定义特性，则为 null。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>向特定于侦听器的输出中写入跟踪信息、数据对象和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的跟踪数据。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>向特定于侦听器的输出中写入跟踪信息、数据对象的数组和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要作为数据发出的对象数组。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <summary>向特定于侦听器的输出写入跟踪和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>向特定于侦听器的输出中写入跟踪信息、消息和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>向特定于侦听器的输出中写入跟踪信息、格式化对象数组和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一，指定引发跟踪的事件类型。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>向侦听器特定的输出中写入跟踪信息、消息、相关活动标识和事件信息。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
      <param name="source">标识输出时使用的名称，通常为生成跟踪事件的应用程序的名称。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
      <param name="relatedActivityId"> 标识相关活动的 <see cref="T:System.Guid" /> 对象。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object)">
      <summary>实现 <see cref="M:System.Object.ToString" /> 类时，向所创建的侦听器写入对象的 <see cref="T:System.Diagnostics.TraceListener" /> 方法值。</summary>
      <param name="o">要为其编写完全限定类名的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.Object,System.String)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值。</summary>
      <param name="o">要为其编写完全限定类名的 <see cref="T:System.Object" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String)">
      <summary>在派生类中被重写时，向在该派生类中所创建的侦听器写入指定消息。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.Write(System.String,System.String)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和消息。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteIndent">
      <summary>实现此类时，向所创建的侦听器写入缩进，并将 <see cref="P:System.Diagnostics.TraceListener.NeedIndent" /> 属性重置为 false。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入对象的 <see cref="M:System.Object.ToString" /> 方法值，后跟行结束符。</summary>
      <param name="o">要为其编写完全限定类名的 <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.Object,System.String)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和对象的 <see cref="M:System.Object.ToString" /> 方法值，后跟行结束符。</summary>
      <param name="o">要为其编写完全限定类名的 <see cref="T:System.Object" />。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String)">
      <summary>在派生类中被重写时，向在该派生类中所创建的侦听器写入消息，后跟行结束符。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListener.WriteLine(System.String,System.String)">
      <summary>实现 <see cref="T:System.Diagnostics.TraceListener" /> 类时，向所创建的侦听器写入类别名称和消息，后跟行结束符。</summary>
      <param name="message">要写入的消息。</param>
      <param name="category">用于组织输出的类别名称。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Add(System.Diagnostics.TraceListener)">
      <summary>添加 <see cref="T:System.Diagnostics.TraceListener" /> 到列表。</summary>
      <param name="listener">一个 <see cref="T:System.Diagnostics.TraceListener" /> 将添加到列表。</param>
      <returns>在该位置插入新的侦听器的位置。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListener[])">
      <summary>添加一个数组 <see cref="T:System.Diagnostics.TraceListener" /> 到列表的对象。</summary>
      <param name="value">一个数组 <see cref="T:System.Diagnostics.TraceListener" /> 对象将添加到列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.AddRange(System.Diagnostics.TraceListenerCollection)">
      <summary>将另一个的内容添加 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 到列表。</summary>
      <param name="value">另一个 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 其内容添加到列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Clear">
      <summary>清除列表中的所有侦听器。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Contains(System.Diagnostics.TraceListener)">
      <summary>检查列表是否包含指定的侦听器。</summary>
      <param name="listener">一个 <see cref="T:System.Diagnostics.TraceListener" /> 在列表中查找。</param>
      <returns>true 如果侦听器是在列表中;否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.CopyTo(System.Diagnostics.TraceListener[],System.Int32)">
      <summary>复制当前的某一部分 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 到指定的数组的指定索引处的列表。</summary>
      <param name="listeners">类型的数组 <see cref="T:System.Array" /> 要复制到的元素。</param>
      <param name="index">若要从复制的当前列表中的起始索引号。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.GetEnumerator">
      <summary>获取此列表的枚举数。</summary>
      <returns>类型的枚举数 <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.IndexOf(System.Diagnostics.TraceListener)">
      <summary>获取指定的侦听器的索引。</summary>
      <param name="listener">一个 <see cref="T:System.Diagnostics.TraceListener" /> 在列表中查找。</param>
      <returns>侦听器，如果可以在列表中; 找到的索引否则为-1。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Insert(System.Int32,System.Diagnostics.TraceListener)">
      <summary>指定索引处插入该侦听器。</summary>
      <param name="index">要插入新的列表中的位置 <see cref="T:System.Diagnostics.TraceListener" />。</param>
      <param name="listener">一个 <see cref="T:System.Diagnostics.TraceListener" /> 要插入列表中。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在列表中的有效索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="listener" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.Diagnostics.TraceListener)">
      <summary>从集合中移除指定 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <param name="listener">一个 <see cref="T:System.Diagnostics.TraceListener" /> 若要从列表中删除。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.Remove(System.String)">
      <summary>移除集合中的第一个 <see cref="T:System.Diagnostics.TraceListener" /> 具有指定名称。</summary>
      <param name="name">名称 <see cref="T:System.Diagnostics.TraceListener" /> 若要从列表中删除。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.RemoveAt(System.Int32)">
      <summary>从集合中移除 <see cref="T:System.Diagnostics.TraceListener" /> 中指定索引处。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Diagnostics.TraceListener" /> 若要从列表中删除。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 不是在列表中的有效索引。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>复制当前的某一部分 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 到指定的数组 <see cref="T:System.Diagnostics.TraceListener" /> 对象。</summary>
      <param name="array">一维数组 <see cref="T:System.Diagnostics.TraceListener" /> 从复制的元素目标的对象 <see cref="T:System.Diagnostics.TraceListenerCollection" />。 该数组的索引必须从零开始。</param>
      <param name="index">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Add(System.Object)">
      <summary>添加到一个跟踪侦听器 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</summary>
      <param name="value">要添加到 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的对象。</param>
      <returns>新的跟踪侦听器的插入位置。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 为 null。- 或 -<paramref name="value" /> 不是 <see cref="T:System.Diagnostics.TraceListener" />。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Contains(System.Object)">
      <summary>确定是否 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 包含特定对象。</summary>
      <param name="value">要在 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中定位的对象。</param>
      <returns>true 如果 <see cref="T:System.Object" /> 中找到 <see cref="T:System.Diagnostics.TraceListenerCollection" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>确定索引中的特定对象 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</summary>
      <param name="value">要在 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中定位的对象。</param>
      <returns>索引 <paramref name="value" /> 如果位于 <see cref="T:System.Diagnostics.TraceListenerCollection" />; 否则为-1。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>将插入 <see cref="T:System.Diagnostics.TraceListener" /> 中指定位置处的对象 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</summary>
      <param name="index">应插入 <paramref name="value" /> 的从零开始的索引。</param>
      <param name="value">
        <see cref="T:System.Diagnostics.TraceListener" /> 要插入到对象 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.Diagnostics.TraceListener" /> 对象。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Remove(System.Object)">
      <summary>删除的对象从 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</summary>
      <param name="value">要从 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 中删除的对象。</param>
    </member>
    <member name="M:System.Diagnostics.TraceSource.#ctor(System.String)">
      <summary>使用指定的源名称初始化 <see cref="T:System.Diagnostics.TraceSource" /> 类的新实例。</summary>
      <param name="name">源的名称（通常为应用程序的名称）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.#ctor(System.String,System.Diagnostics.SourceLevels)">
      <summary>使用源的指定名称和执行跟踪的默认源级别初始化 <see cref="T:System.Diagnostics.TraceSource" /> 类的新实例。</summary>
      <param name="name">源的名称，通常为应用程序的名称。</param>
      <param name="defaultLevel">枚举的按位组合，指定要跟踪的默认源级别。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.Close">
      <summary>关闭跟踪侦听器集合中的所有跟踪侦听器。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSource.Flush">
      <summary>刷新跟踪侦听器集合中的所有跟踪侦听器。</summary>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.GetSupportedAttributes">
      <summary>获取跟踪源所支持的自定义特性。</summary>
      <returns>对跟踪源支持的自定义特性进行命名的字符串数组；如果不存在自定义特性，则为 null。</returns>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>使用指定的事件类型、事件标识符和跟踪数据，将跟踪数据写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">指定跟踪数据的事件类型的其中一个枚举值。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">跟踪数据。</param>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceData(System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>使用指定的事件类型、事件标识符和跟踪数据数组，将跟踪数据写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">指定跟踪数据的事件类型的其中一个枚举值。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">包含跟踪数据的对象数组。</param>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32)">
      <summary>使用指定的事件类型和事件标识符，将跟踪事件消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">指定跟踪数据的事件类型的其中一个枚举值。</param>
      <param name="id">事件的数值标识符。</param>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>使用指定的事件类型、事件标识符和消息，将跟踪事件消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">指定跟踪数据的事件类型的其中一个枚举值。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceEvent(System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>使用指定的事件类型、事件标识符以及参数数组和格式，将跟踪事件写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="eventType">指定跟踪数据的事件类型的其中一个枚举值。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串（请参见“备注”），它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的 object 数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 - 指示要格式化的参数小于零或大于或等于的数指定的要格式化的对象数。</exception>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceInformation(System.String)">
      <summary>使用指定消息，将信息性消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="message">要写入的信息性消息。</param>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceInformation(System.String,System.Object[])">
      <summary>使用指定的对象数组和格式化信息，将信息性消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合中的跟踪侦听器中。</summary>
      <param name="format">一个包含与零个或多个格式项混合的文本的复合格式字符串（请参见“备注”），它与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="format" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="format" /> 无效。- 或 - 指示要格式化的参数小于零或大于或等于的数指定的要格式化的对象数。</exception>
      <exception cref="T:System.ObjectDisposedException">尝试在终止期间跟踪事件。</exception>
    </member>
    <member name="M:System.Diagnostics.TraceSource.TraceTransfer(System.Int32,System.String,System.Guid)">
      <summary>使用指定的数字标识符、消息和相关活动标识符，将跟踪传输消息写入 <see cref="P:System.Diagnostics.TraceSource.Listeners" /> 集合的跟踪侦听器中。</summary>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <param name="relatedActivityId">标识相关活动的结构。</param>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TraceSwitch" /> 类，使用指定的显示名称和说明。</summary>
      <param name="displayName">要在用户界面上显示的名称。</param>
      <param name="description">切换描述。</param>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.#ctor(System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.TraceSwitch" /> 类，使用此开关指定的显示名称、 说明和默认值。</summary>
      <param name="displayName">要在用户界面上显示的名称。</param>
      <param name="description">切换描述。</param>
      <param name="defaultSwitchValue">该开关的默认值。</param>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.OnSwitchSettingChanged">
      <summary>更新并更正此开关的级别。</summary>
    </member>
    <member name="M:System.Diagnostics.TraceSwitch.OnValueChanged">
      <summary>集 <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> 属性设置为等效的整数 <see cref="P:System.Diagnostics.Switch.Value" /> 属性。</summary>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类，使用指定的流用作调试和跟踪输出的接收方。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 表示跟踪侦听器将写入的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.Stream,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类具有指定名称，使用指定的流用作接收方来调试和跟踪输出。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 表示跟踪侦听器将写入的流。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类用作调试的接收方使用指定的编写器和跟踪输出。</summary>
      <param name="writer">一个 <see cref="T:System.IO.TextWriter" /> ，它接收从跟踪侦听器的输出。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.IO.TextWriter,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类具有指定名称，使用指定的编写器作为接收方的调试和跟踪输出。</summary>
      <param name="writer">一个 <see cref="T:System.IO.TextWriter" /> ，它接收从跟踪侦听器的输出。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类，通过指定的文件用作调试和跟踪输出的接收方。</summary>
      <param name="filename">要写入的文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Diagnostics.XmlWriterTraceListener" /> 类具有指定名称，通过指定的文件用作调试的接收方和跟踪输出。</summary>
      <param name="filename">要写入的文件的名称。</param>
      <param name="name">新实例的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.Close">
      <summary>关闭 <see cref="P:System.Diagnostics.TextWriterTraceListener.Writer" /> 为此侦听器，使它不再接收跟踪或调试输出。</summary>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.Fail(System.String,System.String)">
      <summary>写入跟踪信息，包括一条错误消息和详细的错误消息写入文件或流。</summary>
      <param name="message">要写入的错误消息。</param>
      <param name="detailMessage">要追加到错误消息的详细的错误消息。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>写入跟踪信息、 数据对象和事件信息写入文件或流。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>写入跟踪信息、 数据对象和事件信息写入文件或流。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="data">要发出的数据对象的数组。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>写入跟踪信息、 消息和事件信息写入文件或流。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>写入跟踪信息、 格式化的消息和事件信息写入文件或流。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="eventType">
        <see cref="T:System.Diagnostics.TraceEventType" /> 值之一。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="format">包含零个或多个格式项的格式字符串，这些项与 <paramref name="args" /> 数组中的对象相对应。</param>
      <param name="args">包含零个或多个要格式化的对象的对象数组。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>写入跟踪信息包括相关的活动、 消息和事件信息写入文件或流的标识。</summary>
      <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" />。</param>
      <param name="source">源名称。</param>
      <param name="id">事件的数值标识符。</param>
      <param name="message">要写入的跟踪消息。</param>
      <param name="relatedActivityId">标识相关活动的 <see cref="T:System.Guid" /> 结构。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.Write(System.String)">
      <summary>将不包含任何附加上下文信息的原义消息写入文件或流。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.Diagnostics.XmlWriterTraceListener.WriteLine(System.String)">
      <summary>写入的原义消息不包含任何文件或流到后跟当前行终止符的附加上下文信息。</summary>
      <param name="message">要写入的消息。</param>
    </member>
    <member name="M:System.FileStyleUriParser.#ctor">
      <summary>创建一个基于文件方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.FtpStyleUriParser.#ctor">
      <summary>创建一个基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.GenericUriParser.#ctor(System.GenericUriParserOptions)">
      <summary>为层次结构的 URI 创建可自定义分析器。</summary>
      <param name="options">指定此选项 <see cref="T:System.GenericUriParser" />。</param>
    </member>
    <member name="M:System.GopherStyleUriParser.#ctor">
      <summary>创建一个可自定义分析器基于 Gopher 方案。</summary>
    </member>
    <member name="M:System.HttpStyleUriParser.#ctor">
      <summary>创建一个基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel)">
      <summary>用指定的流和压缩级别初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例。</summary>
      <param name="stream">要压缩的流。</param>
      <param name="compressionLevel">压缩流时，指示是否要强调速度或压缩效率的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">流不支持写入操作，例如压缩。 ( <see cref="P:System.IO.Stream.CanWrite" /> Stream 对象上的属性是 false。)</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)">
      <summary>使用指定的流和压缩级别，初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例，有选择性的打开流。</summary>
      <param name="stream">要压缩的流。</param>
      <param name="compressionLevel">压缩流时，指示是否要强调速度或压缩效率的枚举值之一。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.DeflateStream" /> 对象之后打开流对象，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">流不支持写入操作，例如压缩。 ( <see cref="P:System.IO.Stream.CanWrite" /> Stream 对象上的属性是 false。)</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>用指定的流和压缩模式初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">指示是要压缩还是解压缩流的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效 <see cref="T:System.IO.Compression.CompressionMode" /> 值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Compress" />  和 <see cref="P:System.IO.Stream.CanWrite" /> 是 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Decompress" />  和 <see cref="P:System.IO.Stream.CanRead" /> 是 false。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>使用指定的流和压缩模式，初始化 <see cref="T:System.IO.Compression.DeflateStream" /> 类的新实例，有选择性的打开流。</summary>
      <param name="stream">要压缩或解压缩的流。</param>
      <param name="mode">指示是要压缩还是解压缩流的枚举值之一。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.DeflateStream" /> 对象之后打开流，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效 <see cref="T:System.IO.Compression.CompressionMode" /> 值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Compress" />  和 <see cref="P:System.IO.Stream.CanWrite" /> 是 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Decompress" />  和 <see cref="P:System.IO.Stream.CanRead" /> 是 false。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （考虑使用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="array">将数据读入的字节数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从该偏移量开始读取流中的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成读取操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <returns>表示异步读取操作（可能仍处于挂起状态）的对象。</returns>
      <exception cref="T:System.IO.IOException">此方法尝试以异步方式读取该流的末尾或出现了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.DeflateStream" /> 实现不支持读取的操作。</exception>
      <exception cref="T:System.InvalidOperationException">无法完成此调用。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （考虑使用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="array">从中写入数据的缓冲区。</param>
      <param name="offset">
        <paramref name="buffer" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成写入操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>表示异步写入操作（可能仍处于挂起状态）的对象。</returns>
      <exception cref="T:System.IO.IOException">该方法尝试以异步方式写入该流的末尾或出现了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.DeflateStream" /> 实现不支持写入操作。</exception>
      <exception cref="T:System.InvalidOperationException">不能执行写操作，因为该流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Compression.DeflateStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。 （考虑使用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <returns>从流中读取的字节数，介于 0（零）和你请求的字节数之间。<see cref="T:System.IO.Compression.DeflateStream" /> 仅在流的末尾返回零 (0)；否则将一直阻塞，只到至少有一个字节可用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是源自 <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 上当前流的方法。</exception>
      <exception cref="T:System.SystemException">在调用的过程中引发了异常 <see cref="M:System.Threading.WaitHandle.WaitOne" />。</exception>
      <exception cref="T:System.InvalidOperationException">结束调用无效，因为此流的异步读取的操作仍未完成。</exception>
      <exception cref="T:System.InvalidOperationException">该流是 null。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作。 （考虑使用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="asyncResult">对未完成的异步 I/O 请求的引用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是源自 <see cref="M:System.IO.Compression.DeflateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 上当前流的方法。</exception>
      <exception cref="T:System.Exception">在调用的过程中引发了异常 <see cref="M:System.Threading.WaitHandle.WaitOne" />。</exception>
      <exception cref="T:System.InvalidOperationException">该流是 null。</exception>
      <exception cref="T:System.InvalidOperationException">结束写入调用无效。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Flush">
      <summary>此方法的当前实现没有任何功能。</summary>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>将若干解压缩的字节读入指定的字节数组。</summary>
      <param name="array">用于存储解压缩的字节的数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处放置读取的字节。</param>
      <param name="count">最多要读取的解压缩字节数。</param>
      <returns>已读入到字节数组中的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.IO.Compression.CompressionMode" /> 值 Compress 创建对象。- 或 - 基础流不支持读取。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 也不可小于零。- 或 -<paramref name="array" /> 长度减去起始点的索引是小于 <paramref name="count" />。</exception>
      <exception cref="T:System.IO.InvalidDataException">数据格式无效。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>此操作不受支持，它总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="offset">流中的位置。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 值之一。</param>
      <returns>一个长值。</returns>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.SetLength(System.Int64)">
      <summary>此操作不受支持，它总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">流的长度。</param>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.DeflateStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的字节数组中将压缩的字节写入基础流。</summary>
      <param name="array">包含要压缩的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处读取字节。</param>
      <param name="count">最多写入的字节数。</param>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel)">
      <summary>用指定的流和压缩级别初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例。</summary>
      <param name="stream">要将压缩数据写入到其中的流。</param>
      <param name="compressionLevel">压缩流时，指示是否要强调速度或压缩效率的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">流不支持写入操作，例如压缩。 ( <see cref="P:System.IO.Stream.CanWrite" /> Stream 对象上的属性是 false。)</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionLevel,System.Boolean)">
      <summary>使用指定的流和压缩级别，初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例，有选择性的打开流。</summary>
      <param name="stream">要将压缩数据写入到其中的流。</param>
      <param name="compressionLevel">压缩流时，指示是否要强调速度或压缩效率的枚举值之一。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.GZipStream" /> 对象之后打开流对象，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">流不支持写入操作，例如压缩。 ( <see cref="P:System.IO.Stream.CanWrite" /> Stream 对象上的属性是 false。)</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode)">
      <summary>用指定的流和压缩模式初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例。</summary>
      <param name="stream">压缩或解压缩后的数据被写入的流。</param>
      <param name="mode">指示是要压缩还是解压缩流的枚举值之一。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效 <see cref="T:System.IO.Compression.CompressionMode" /> 枚举值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Compress" />  和 <see cref="P:System.IO.Stream.CanWrite" /> 是 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Decompress" />  和 <see cref="P:System.IO.Stream.CanRead" /> 是 false。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.#ctor(System.IO.Stream,System.IO.Compression.CompressionMode,System.Boolean)">
      <summary>使用指定的流和压缩模式，初始化 <see cref="T:System.IO.Compression.GZipStream" /> 类的新实例，有选择性的打开流。</summary>
      <param name="stream">压缩或解压缩后的数据被写入的流。</param>
      <param name="mode">指示是要压缩还是解压缩流的枚举值之一。</param>
      <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.GZipStream" /> 对象之后打开流，则为 true；否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mode" /> 不是有效 <see cref="T:System.IO.Compression.CompressionMode" /> 值。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Compress" />  和 <see cref="P:System.IO.Stream.CanWrite" /> 是 false。- 或 -<see cref="T:System.IO.Compression.CompressionMode" /> 是 <see cref="F:System.IO.Compression.CompressionMode.Decompress" />  和 <see cref="P:System.IO.Stream.CanRead" /> 是 false。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读操作。 （考虑使用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="array">将数据读入的字节数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从该偏移量开始读取流中的数据。</param>
      <param name="count">最多读取的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成读取操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步读取请求与其他请求区别开来。</param>
      <returns>表示异步读取操作（可能仍处于挂起状态）的对象。</returns>
      <exception cref="T:System.IO.IOException">此方法尝试以异步方式读取该流的末尾或出现了磁盘错误。</exception>
      <exception cref="T:System.ArgumentException">一个或多个参数无效。</exception>
      <exception cref="T:System.ObjectDisposedException">在流关闭后调用方法。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.IO.Compression.GZipStream" /> 实现不支持读取的操作。</exception>
      <exception cref="T:System.InvalidOperationException">无法执行读取的操作，因为该流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作。 （考虑使用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="array">包含要写入当前流的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，从此处开始写入。</param>
      <param name="count">最多写入的字节数。</param>
      <param name="asyncCallback">可选的异步回调，在完成写入操作时调用。</param>
      <param name="asyncState">一个用户提供的对象，它将该特定的异步写入请求与其他请求区别开来。</param>
      <returns>表示异步写入操作（可能仍处于挂起状态）的对象。</returns>
      <exception cref="T:System.InvalidOperationException">基础流是 null。- 或 -关闭基础流。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Compression.GZipStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndRead(System.IAsyncResult)">
      <summary>等待挂起的异步读取完成。 （考虑使用 <see cref="M:System.IO.Stream.ReadAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="asyncResult">对要完成的挂起异步请求的引用。</param>
      <returns>从流中读取的字节数，介于 0（零）和你请求的字节数之间。<see cref="T:System.IO.Compression.GZipStream" /> 仅在流的末尾返回零 (0)；否则将一直阻塞，只到至少有一个字节可用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是源自 <see cref="M:System.IO.Compression.DeflateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 上当前流的方法。</exception>
      <exception cref="T:System.InvalidOperationException">无法执行结束操作，因为该流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.EndWrite(System.IAsyncResult)">
      <summary>处理异步写入操作的结束。 （考虑使用 <see cref="M:System.IO.Stream.WriteAsync(System.Byte[],System.Int32,System.Int32)" /> 方法进行替换；请参见“备注”部分。）</summary>
      <param name="asyncResult">表示异步调用的对象。</param>
      <exception cref="T:System.InvalidOperationException">基础流是 null。- 或 -关闭基础流。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Flush">
      <summary>此方法的当前实现没有任何功能。</summary>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>将若干解压缩的字节读入指定的字节数组。</summary>
      <param name="array">用于存储解压缩字节的数组。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处放置读取的字节。</param>
      <param name="count">最多要读取的解压缩字节数。</param>
      <returns>解压缩到字节数组中的字节数。 如果已到达流的末尾，则返回 0 或已读取的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.IO.Compression.CompressionMode" /> 值 Compress 创建对象。- 或 -基础流不支持读取。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 也不可小于零。- 或 -<paramref name="array" /> 长度减去起始点的索引是小于 <paramref name="count" />。</exception>
      <exception cref="T:System.IO.InvalidDataException">数据格式无效。</exception>
      <exception cref="T:System.ObjectDisposedException">流已关闭。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="offset">流中的位置。</param>
      <param name="origin">
        <see cref="T:System.IO.SeekOrigin" /> 值之一。</param>
      <returns>一个长值。</returns>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.SetLength(System.Int64)">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">流的长度。</param>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="M:System.IO.Compression.GZipStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>从指定的字节数组中将压缩的字节写入基础流。</summary>
      <param name="array">包含要压缩的数据的缓冲区。</param>
      <param name="offset">
        <paramref name="array" /> 中的字节偏移量，将在此处读取字节。</param>
      <param name="count">最多写入的字节数。</param>
      <exception cref="T:System.ObjectDisposedException">不能执行写操作，因为该流已关闭。</exception>
    </member>
    <member name="M:System.IO.ErrorEventArgs.#ctor(System.Exception)">
      <summary>初始化 <see cref="T:System.IO.ErrorEventArgs" /> 类的新实例。</summary>
      <param name="exception">
        <see cref="T:System.Exception" /> 表示已发生的错误。</param>
    </member>
    <member name="M:System.IO.ErrorEventArgs.GetException">
      <summary>获取 <see cref="T:System.Exception" /> 表示已发生的错误。</summary>
      <returns>
        <see cref="T:System.Exception" /> 表示已发生的错误。</returns>
    </member>
    <member name="M:System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)">
      <summary>初始化 <see cref="T:System.IO.FileSystemEventArgs" /> 类的新实例。</summary>
      <param name="changeType">其中一个 <see cref="T:System.IO.WatcherChangeTypes" /> 值，该值表示文件系统中检测到的更改的种类。</param>
      <param name="directory">受影响的文件或目录的根目录。</param>
      <param name="name">受影响的文件或目录的名称。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor">
      <summary>初始化 <see cref="T:System.IO.FileSystemWatcher" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String)">
      <summary>在给定要监视的指定目录的情况下，初始化 <see cref="T:System.IO.FileSystemWatcher" /> 类的新实例。</summary>
      <param name="path">要监视的目录，以标准表示法或通用命名约定 (UNC) 表示法表示。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数为空字符串 ("")。- 或 - 通过指定的路径 <paramref name="path" /> 参数不存在。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 过长。</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)">
      <summary>在给定要监视的指定目录和文件类型的情况下，初始化 <see cref="T:System.IO.FileSystemWatcher" /> 类的新实例。</summary>
      <param name="path">要监视的目录，以标准表示法或通用命名约定 (UNC) 表示法表示。</param>
      <param name="filter">要监视的文件的类型。 例如，“*.txt”监视所有文本文件的更改。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> 参数为 null。- 或 - <paramref name="filter" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> 参数为空字符串 ("")。- 或 - 通过指定的路径 <paramref name="path" /> 参数不存在。</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> 过长。</exception>
    </member>
    <member name="M:System.IO.FileSystemWatcher.BeginInit">
      <summary>开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.IO.FileSystemWatcher" />。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.FileSystemWatcher" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.EndInit">
      <summary>结束在窗体上使用或由另一个组件使用的 <see cref="T:System.IO.FileSystemWatcher" /> 的初始化。 初始化发生在运行时。</summary>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Changed" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Created" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Deleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Error" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.ErrorEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)">
      <summary>引发 <see cref="E:System.IO.FileSystemWatcher.Renamed" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.IO.RenamedEventArgs" />。</param>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)">
      <summary>一种同步方法，在给定要监视的更改的类型情况下，它会返回包含已发生的更改上的特定信息的结构。</summary>
      <param name="changeType">要监视的 <see cref="T:System.IO.WatcherChangeTypes" />。</param>
      <returns>
        <see cref="T:System.IO.WaitForChangedResult" />，包含关于已发生的更改的特定信息。</returns>
    </member>
    <member name="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
      <summary>一种同步方法，在给定要监视的更改的类型以及在超时前等待的时间（以毫秒表示）的情况下，它会返回包含已发生的更改上的特定信息的结构。</summary>
      <param name="changeType">要监视的 <see cref="T:System.IO.WatcherChangeTypes" />。</param>
      <param name="timeout">超时前等待的时间（以毫秒表示）。</param>
      <returns>
        <see cref="T:System.IO.WaitForChangedResult" />，包含关于已发生的更改的特定信息。</returns>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InternalBufferOverflowException" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化新的空实例 <see cref="T:System.IO.InternalBufferOverflowException" /> ，该类使用指定的可序列化 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</summary>
      <param name="info">T:System.IO.InternalBufferOverflowException 对象进行序列化所需的信息。</param>
      <param name="context">源和与 T:System.IO.InternalBufferOverflowException 对象相关联的序列化流的目标。</param>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.IO.InternalBufferOverflowException" /> 指定具有要显示的错误消息的类。</summary>
      <param name="message">要为异常提供的消息。</param>
    </member>
    <member name="M:System.IO.InternalBufferOverflowException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.IO.InternalBufferOverflowException" /> 要显示的消息和指定所生成的内部异常的类。</summary>
      <param name="message">要为异常提供的消息。</param>
      <param name="inner">内部异常。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor">
      <summary>初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String)">
      <summary>用指定的错误消息初始化 <see cref="T:System.IO.InvalidDataException" /> 类的新实例。</summary>
      <param name="message">解释异常原因的错误消息。</param>
    </member>
    <member name="M:System.IO.InvalidDataException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.IO.InvalidDataException" /> 类提供对导致此异常的内部异常的引用。</summary>
      <param name="message">解释异常原因的错误消息。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.IO.IODescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.IO.IODescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">要使用的说明。</param>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor">
      <summary>初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)">
      <summary>使用指定的 <see cref="T:System.ComponentModel.IContainer" /> 对象初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="container">容器的接口。</param>
      <exception cref="T:System.IO.IOException">无法找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String)">
      <summary>使用指定的端口名初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <exception cref="T:System.IO.IOException">无法找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)">
      <summary>使用指定的端口名和波特率初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <exception cref="T:System.IO.IOException">无法找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)">
      <summary>使用指定的端口名、波特率和奇偶校验位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <param name="parity">
        <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
      <exception cref="T:System.IO.IOException">无法找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)">
      <summary>使用指定的端口名、波特率、奇偶校验位和数据位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <param name="parity">
        <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
      <param name="dataBits">数据位值。</param>
      <exception cref="T:System.IO.IOException">无法找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
      <summary>使用指定的端口名、波特率、奇偶校验位、数据位和停止位初始化 <see cref="T:System.IO.Ports.SerialPort" /> 类的新实例。</summary>
      <param name="portName">要使用的端口（例如 COM1）。</param>
      <param name="baudRate">波特率。</param>
      <param name="parity">
        <see cref="P:System.IO.Ports.SerialPort.Parity" /> 值之一。</param>
      <param name="dataBits">数据位值。</param>
      <param name="stopBits">
        <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 值之一。</param>
      <exception cref="T:System.IO.IOException">无法找到或打开指定的端口。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Close">
      <summary>关闭端口连接，将 <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 属性设置为 false，并释放内部 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 -尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.DiscardInBuffer">
      <summary>丢弃来自串行驱动程序的接收缓冲区的数据。</summary>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 -尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.DiscardOutBuffer">
      <summary>丢弃来自串行驱动程序的传输缓冲区的数据。</summary>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.IO.Ports.SerialPort" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 -尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.GetPortNames">
      <summary>获取当前计算机的串行端口名的数组。</summary>
      <returns>当前计算机的串行端口名的数组。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法查询的串行端口名称。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Open">
      <summary>打开一个新的串行端口连接。</summary>
      <exception cref="T:System.UnauthorizedAccessException">访问被拒绝的端口。- 或 -当前的过程中或在系统上，另一个进程已打开，请指定的 COM 端口 <see cref="T:System.IO.Ports.SerialPort" /> 实例或非托管代码中。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">一个或多个此实例的属性均无效。 例如， <see cref="P:System.IO.Ports.SerialPort.Parity" />, ，<see cref="P:System.IO.Ports.SerialPort.DataBits" />, ，或 <see cref="P:System.IO.Ports.SerialPort.Handshake" /> 属性不是有效的值; <see cref="P:System.IO.Ports.SerialPort.BaudRate" /> 是否小于或等于为零; <see cref="P:System.IO.Ports.SerialPort.ReadTimeout" /> 或 <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> 属性小于零，不是 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
      <exception cref="T:System.ArgumentException">端口名称才会开始使用"COM"。- 或 -不支持所使用的端口的文件类型。</exception>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">上的当前实例的指定的端口 <see cref="T:System.IO.Ports.SerialPort" /> 已打开。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区读取一些字节并将那些字节写入字节数组中指定的偏移量处。</summary>
      <param name="buffer">将输入写入到其中的字节数组。</param>
      <param name="offset">要写入字节的 <paramref name="buffer" /> 中的偏移量。</param>
      <param name="count">最多读取的字节数。 如果 <paramref name="count" /> 大于输入缓冲区中的字节数，则读取较少的字节。</param>
      <returns>读取的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">传递的缓冲区 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数不在有效的区域的 <paramref name="buffer" /> 传递。 要么 <paramref name="offset" /> 或 <paramref name="count" /> 也不可小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 的长度大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.TimeoutException">任何字节不都不可用来读取。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中读取一些字符，然后将这些字符写入字符数组中指定的偏移量处。</summary>
      <param name="buffer">将输入写入到其中的字符数组。</param>
      <param name="offset">要写入字符的 <paramref name="buffer" /> 中的偏移量。</param>
      <param name="count">要读取的最大字符数。 如果 <paramref name="count" /> 大于输入缓冲区中的字符数，则读取较少的字符。</param>
      <returns>读取的字符数。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 大于缓冲区长度。- 或 -<paramref name="count" /> 为 1，并且在缓冲区中没有代理项字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 传递 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数不在有效的区域的 <paramref name="buffer" /> 传递。 要么 <paramref name="offset" /> 或 <paramref name="count" /> 也不可小于零。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">没有任何字符都不可用来读取。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadByte">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中同步读取一个字节。</summary>
      <returns>强制转换为 <see cref="T:System.Int32" /> 的字节；或者，如果已读取到流的末尾，则为 -1。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未完成之前超时期限已结束。- 或 -未不读取任何字节。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadChar">
      <summary>从 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区中同步读取一个字符。</summary>
      <returns>读取的字符。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未完成之前超时期限已结束。- 或 -在分配的超时期限内没有字符不可用。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadExisting">
      <summary>在编码的基础上，读取 <see cref="T:System.IO.Ports.SerialPort" /> 对象的流和输入缓冲区中所有立即可用的字节。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialPort" /> 对象的流和输入缓冲区的内容。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadLine">
      <summary>一直读取到输入缓冲区中的 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值。</summary>
      <returns>输入缓冲区中直到首次出现 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值的内容。</returns>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">该操作未完成之前超时期限已结束。- 或 -未不读取任何字节。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.ReadTo(System.String)">
      <summary>一直读取到输入缓冲区中的指定 <paramref name="value" /> 的字符串。</summary>
      <param name="value">指示读取操作停止位置的值。</param>
      <returns>输入缓冲区中直到指定 <paramref name="value" /> 的内容。</returns>
      <exception cref="T:System.ArgumentException">长度 <paramref name="value" /> 参数为 0。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">该操作未完成之前超时期限已结束。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>使用缓冲区中的数据将指定数量的字节写入串行端口。</summary>
      <param name="buffer">包含要写入端口的数据的字节数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。</param>
      <param name="count">要写入的字节数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 传递 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数不在有效的区域的 <paramref name="buffer" /> 传递。 要么 <paramref name="offset" /> 或 <paramref name="count" /> 也不可小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 的长度大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未完成之前超时期限已结束。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)">
      <summary>使用缓冲区中的数据将指定数量的字符写入串行端口。</summary>
      <param name="buffer">包含要写入端口的数据的字符数组。</param>
      <param name="offset">
        <paramref name="buffer" /> 参数中从零开始的字节偏移量，从此处开始将字节复制到端口。</param>
      <param name="count">要写入的字符数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 传递 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 参数不在有效的区域的 <paramref name="buffer" /> 传递。 要么 <paramref name="offset" /> 或 <paramref name="count" /> 也不可小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 的长度大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未完成之前超时期限已结束。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.Write(System.String)">
      <summary>将指定的字符串写入串行端口。</summary>
      <param name="text">输出字符串。</param>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
      <exception cref="T:System.ServiceProcess.TimeoutException">该操作未完成之前超时期限已结束。</exception>
    </member>
    <member name="M:System.IO.Ports.SerialPort.WriteLine(System.String)">
      <summary>将指定的字符串和 <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 值写入输出缓冲区。</summary>
      <param name="text">要写入输出缓冲区的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 参数为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口未打开。</exception>
      <exception cref="T:System.TimeoutException">
        <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> 方法无法写入到流。</exception>
    </member>
    <member name="M:System.IO.RenamedEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.IO.RenamedEventArgs" /> 类的新实例。</summary>
      <param name="changeType">
        <see cref="T:System.IO.WatcherChangeTypes" /> 值之一。</param>
      <param name="directory">受影响的文件或目录的名称。</param>
      <param name="name">受影响的文件或目录的名称。</param>
      <param name="oldName">受影响的文件或目录的旧名称。</param>
    </member>
    <member name="M:System.LdapStyleUriParser.#ctor">
      <summary>创建一个可自定义分析器基于轻型目录访问协议 (LDAP) 方案。</summary>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor">
      <summary>初始化 <see cref="T:System.Media.SoundPlayer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Media.SoundPlayer" /> 类，并附加在指定.wav 文件 <see cref="T:System.IO.Stream" />。</summary>
      <param name="stream">一个 <see cref="T:System.IO.Stream" /> 的一个.wav 文件。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Media.SoundPlayer" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要用于反序列化。</param>
      <param name="context">要用于反序列化的目标。</param>
      <exception cref="T:System.UriFormatException">
        <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 中指定 <paramref name="serializationInfo" /> 无法解析。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Media.SoundPlayer" /> 类，并附加指定的.wav 文件。</summary>
      <param name="soundLocation">要加载的.wav 文件的位置。</param>
      <exception cref="T:System.UriFormatException">指定的 URL 值 <paramref name="soundLocation" /> 无法解析。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.Load">
      <summary>以同步方式上载了一个声音。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">所用的加载时间超出的时间，以毫秒为单位，指定 <see cref="P:System.Media.SoundPlayer.LoadTimeout" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.LoadAsync">
      <summary>从流或使用新线程的 Web 资源加载.wav 文件。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">所用的加载时间超出的时间，以毫秒为单位，指定 <see cref="P:System.Media.SoundPlayer.LoadTimeout" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.OnLoadCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Media.SoundPlayer.LoadCompleted" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />  包含事件数据。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.OnSoundLocationChanged(System.EventArgs)">
      <summary>引发 <see cref="E:System.Media.SoundPlayer.SoundLocationChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.OnStreamChanged(System.EventArgs)">
      <summary>引发 <see cref="E:System.Media.SoundPlayer.StreamChanged" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Media.SoundPlayer.Play">
      <summary>播放.wav 文件使用的新线程，并首先加载.wav 文件，如果尚未加载。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">所用的加载时间超出的时间，以毫秒为单位，指定 <see cref="P:System.Media.SoundPlayer.LoadTimeout" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。</exception>
      <exception cref="T:System.InvalidOperationException">.Wav 标头已损坏;指定的文件 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 不是一个 PCM.wav 文件。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.PlayLooping">
      <summary>播放和循环.wav 文件使用的新线程，并首先加载.wav 文件，如果尚未加载。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">所用的加载时间超出的时间，以毫秒为单位，指定 <see cref="P:System.Media.SoundPlayer.LoadTimeout" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。</exception>
      <exception cref="T:System.InvalidOperationException">.Wav 标头已损坏;指定的文件 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 不是一个 PCM.wav 文件。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.PlaySync">
      <summary>播放.wav 文件，并首先加载.wav 文件，如果尚未加载。</summary>
      <exception cref="T:System.ServiceProcess.TimeoutException">所用的加载时间超出的时间，以毫秒为单位，指定 <see cref="P:System.Media.SoundPlayer.LoadTimeout" />。</exception>
      <exception cref="T:System.IO.FileNotFoundException">找不到 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 指定的文件。</exception>
      <exception cref="T:System.InvalidOperationException">.Wav 标头已损坏;指定的文件 <see cref="P:System.Media.SoundPlayer.SoundLocation" /> 不是一个 PCM.wav 文件。</exception>
    </member>
    <member name="M:System.Media.SoundPlayer.Stop">
      <summary>如果发生播放的声音停止播放。</summary>
    </member>
    <member name="M:System.Media.SoundPlayer.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>有关此成员的说明，请参见 <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> 方法。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />  要填充数据。</param>
      <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
    </member>
    <member name="M:System.Media.SystemSound.Play">
      <summary>播放系统声音类型。</summary>
    </member>
    <member name="M:System.Net.AuthenticationManager.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>调用每个已注册身份验证模块，若要查找第一个模块中，可以对身份验证请求作出响应。</summary>
      <param name="challenge">返回的 Internet 资源面临的挑战。</param>
      <param name="request">
        <see cref="T:System.Net.WebRequest" /> 启动身份验证质询。</param>
      <param name="credentials">
        <see cref="T:System.Net.ICredentials" /> 与此请求关联。</param>
      <returns>一个实例 <see cref="T:System.Net.Authorization" /> 类包含授权尝试的结果。 如果没有身份验证模块响应质询，则此方法返回 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="challenge" /> 为 null。- 或 - <paramref name="request" /> 为 null。- 或 - <paramref name="credentials" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>预身份验证请求。</summary>
      <param name="request">一个 <see cref="T:System.Net.WebRequest" /> 对 Internet 资源。</param>
      <param name="credentials">
        <see cref="T:System.Net.ICredentials" /> 与请求关联。</param>
      <returns>一个实例 <see cref="T:System.Net.Authorization" /> 类可对请求进行预身份验证; 否则为如果 null。 如果 <paramref name="credentials" /> 为 null，则此方法返回 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="request" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.Register(System.Net.IAuthenticationModule)">
      <summary>身份验证管理器注册一个身份验证模块。</summary>
      <param name="authenticationModule">
        <see cref="T:System.Net.IAuthenticationModule" /> 身份验证管理器注册。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationModule" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.Net.IAuthenticationModule)">
      <summary>从已注册的模块列表中移除指定的身份验证模块。</summary>
      <param name="authenticationModule">
        <see cref="T:System.Net.IAuthenticationModule" /> 若要从已注册的模块列表中删除。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationModule" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定 <see cref="T:System.Net.IAuthenticationModule" /> 未注册。</exception>
    </member>
    <member name="M:System.Net.AuthenticationManager.Unregister(System.String)">
      <summary>从已注册的模块列表中移除具有指定的身份验证方案的身份验证模块。</summary>
      <param name="authenticationScheme">要删除该模块的身份验证方案。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="authenticationScheme" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">未注册此身份验证方案的模块。</exception>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String)">
      <summary>创建的新实例 <see cref="T:System.Net.Authorization" /> 使用指定的授权的消息。</summary>
      <param name="token">服务器所需的已加密的授权消息。</param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean)">
      <summary>创建的新实例 <see cref="T:System.Net.Authorization" /> 类，具有指定的授权消息和完成状态。</summary>
      <param name="token">服务器所需的已加密的授权消息。</param>
      <param name="finished">授权尝试完成状态。true 授权尝试是否已完成;否则为 false。</param>
    </member>
    <member name="M:System.Net.Authorization.#ctor(System.String,System.Boolean,System.String)">
      <summary>创建的新实例 <see cref="T:System.Net.Authorization" /> 用指定的授权消息、 完成状态和连接组标识符。</summary>
      <param name="token">服务器所需的已加密的授权消息。</param>
      <param name="finished">授权尝试完成状态。true 授权尝试是否已完成;否则为 false。</param>
      <param name="connectionGroupId">用于创建专用的客户端-服务器连接只能绑定到此身份验证方案的唯一标识符。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor">
      <summary>初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.DateTime)">
      <summary>新实例初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类使用指定的缓存同步日期。</summary>
      <param name="cacheSyncDate">一个 <see cref="T:System.DateTime" /> 对象，它指定必须重新验证存储在缓存中的资源的时间。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan)">
      <summary>新实例初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类使用指定的期限控件和时间值。</summary>
      <param name="cacheAgeControl">以下项之一 <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 枚举值 ︰ <see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxAge" />, ，<see cref="F:System.Net.Cache.HttpCacheAgeControl.MaxStale" />, ，或 <see cref="F:System.Net.Cache.HttpCacheAgeControl.MinFresh" />。</param>
      <param name="ageOrFreshOrStale">一个 <see cref="T:System.TimeSpan" /> 值，该值指定一段时间。 有关详细信息，请参阅备注部分。</param>
      <exception cref="T:System.ArgumentException">为指定的值 <paramref name="cacheAgeControl" /> 参数不能用于此构造函数。</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan)">
      <summary>新实例初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类使用指定的最长存在时间、 生存期控制值和时间值。</summary>
      <param name="cacheAgeControl">一个 <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 值。</param>
      <param name="maxAge">一个 <see cref="T:System.TimeSpan" /> 值，该值指定资源的最长期限。</param>
      <param name="freshOrStale">一个 <see cref="T:System.TimeSpan" /> 值，该值指定一段时间。 有关详细信息，请参阅备注部分。  </param>
      <exception cref="T:System.ArgumentException">为指定的值 <paramref name="cacheAgeControl" /> 参数无效。</exception>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpCacheAgeControl,System.TimeSpan,System.TimeSpan,System.DateTime)">
      <summary>新实例初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类使用指定的最长存在时间、 生存期控制值、 时间值和缓存同步日期。</summary>
      <param name="cacheAgeControl">一个 <see cref="T:System.Net.Cache.HttpCacheAgeControl" /> 值。</param>
      <param name="maxAge">一个 <see cref="T:System.TimeSpan" /> 值，该值指定资源的最长期限。</param>
      <param name="freshOrStale">一个 <see cref="T:System.TimeSpan" /> 值，该值指定一段时间。 有关详细信息，请参阅备注部分。  </param>
      <param name="cacheSyncDate">一个 <see cref="T:System.DateTime" /> 对象，它指定必须重新验证存储在缓存中的资源的时间。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.#ctor(System.Net.Cache.HttpRequestCacheLevel)">
      <summary>新实例初始化 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" /> 类使用指定的缓存策略。</summary>
      <param name="level">一个 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 值。</param>
    </member>
    <member name="M:System.Net.Cache.HttpRequestCachePolicy.ToString">
      <summary>返回此实例的字符串表示。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值包含此实例的属性值。</returns>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor">
      <summary>初始化 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.#ctor(System.Net.Cache.RequestCacheLevel)">
      <summary>初始化 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 类的新实例。 使用指定的缓存策略。</summary>
      <param name="level">一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> ，它指定使用获取的资源的缓存行为 <see cref="T:System.Net.WebRequest" /> 对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">级别不是有效 <see cref="T:System.Net.Cache.RequestCacheLevel" />.value。</exception>
    </member>
    <member name="M:System.Net.Cache.RequestCachePolicy.ToString">
      <summary>返回此实例的字符串表示。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含 <see cref="P:System.Net.Cache.RequestCachePolicy.Level" /> 此实例。</returns>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElement.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" /> 类，具有指定的类型信息。</summary>
      <param name="typeName">一个字符串，标识的类型和包含它的程序集。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Add(System.Net.Configuration.AuthenticationModuleElement)">
      <summary>将一个元素添加到集合中。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.IndexOf(System.Net.Configuration.AuthenticationModuleElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <param name="element">
        <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</param>
      <returns>从零开始的索引 <paramref name="element" />。</returns>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Remove(System.Net.Configuration.AuthenticationModuleElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModuleElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.Net.Configuration.AuthenticationModulesSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.AuthenticationModulesSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.BypassElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElement.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Configuration.BypassElement" /> 类，具有指定的类型信息。</summary>
      <param name="address">一个字符串，标识资源的地址。</param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.BypassElementCollection" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Add(System.Net.Configuration.BypassElement)">
      <summary>将一个元素添加到集合中。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.BypassElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.IndexOf(System.Net.Configuration.BypassElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <param name="element">
        <see cref="T:System.Net.Configuration.BypassElement" />。</param>
      <returns>从零开始的索引 <paramref name="element" />。</returns>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Remove(System.Net.Configuration.BypassElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.BypassElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.BypassElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElement.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElement" /> 带有指定的地址和连接限制信息的类。</summary>
      <param name="address">一个字符串，标识的远程计算机的地址。</param>
      <param name="maxConnection">标识允许连接到的最大数目的整数 <paramref name="address" /> 从本地计算机。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Add(System.Net.Configuration.ConnectionManagementElement)">
      <summary>将一个元素添加到集合中。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.IndexOf(System.Net.Configuration.ConnectionManagementElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <param name="element">
        <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</param>
      <returns>从零开始的索引 <paramref name="element" />。</returns>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Remove(System.Net.Configuration.ConnectionManagementElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.Net.Configuration.ConnectionManagementSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.DefaultProxySection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.DefaultProxySection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.FtpCachePolicyElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.FtpCachePolicyElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.HttpCachePolicyElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.HttpCachePolicyElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.HttpListenerElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.HttpListenerElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.HttpListenerTimeoutsElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.HttpWebRequestElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.HttpWebRequestElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.Ipv6Element.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.Ipv6Element" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.MailSettingsSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.ModuleElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ModuleElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.NetSectionGroup.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.NetSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.NetSectionGroup.GetSectionGroup(System.Configuration.Configuration)">
      <summary>从指定的配置文件中获取 System.Net 配置节组。</summary>
      <param name="config">一个表示配置文件的 <see cref="T:System.Configuration.Configuration" />。</param>
      <returns>一个 <see cref="T:System.Net.Configuration.NetSectionGroup" /> 表示 System.Net 中的设置 <paramref name="config" />。</returns>
    </member>
    <member name="M:System.Net.Configuration.PerformanceCountersElement.#ctor">
      <summary>实例化 <see cref="T:System.Net.Configuration.PerformanceCountersElement" /> 对象。</summary>
    </member>
    <member name="M:System.Net.Configuration.ProxyElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ProxyElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.RequestCachingSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.RequestCachingSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.ServicePointManagerElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ServicePointManagerElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.SettingsSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.ConnectionManagementSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.SmtpNetworkElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SmtpNetworkElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.SmtpSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SmtpSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.SocketElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.SocketElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebProxyScriptElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebProxyScriptElement" /> 类的实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElement.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" /> 类使用指定的 URI 前缀和类型信息。</summary>
      <param name="prefix">包含的 URI 前缀的字符串。</param>
      <param name="type">用于处理创建的类使用的资源的请求包含的类型和程序集信息的字符串 <paramref name="prefix" /> URI 前缀。 有关详细信息，请参阅“备注”部分。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElement.#ctor(System.String,System.Type)">
      <summary>新实例初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElement" /> 类使用指定的 URI 前缀和类型标识符。</summary>
      <param name="prefix">包含的 URI 前缀的字符串。</param>
      <param name="type">一个 <see cref="T:System.Type" /> ，它标识处理对资源的创建请求的类使用 <paramref name="prefix" /> URI 前缀。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Add(System.Net.Configuration.WebRequestModuleElement)">
      <summary>将一个元素添加到集合中。</summary>
      <param name="element">要添加到集合中的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Clear">
      <summary>移除集合中的所有元素。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.IndexOf(System.Net.Configuration.WebRequestModuleElement)">
      <summary>返回指定的配置元素的索引。</summary>
      <param name="element">
        <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</param>
      <returns>从零开始的索引 <paramref name="element" />。</returns>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Remove(System.Net.Configuration.WebRequestModuleElement)">
      <summary>移除集合中的指定配置元素。</summary>
      <param name="element">要移除的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.Remove(System.String)">
      <summary>移除具有指定键的元素。</summary>
      <param name="name">要移除的元素的键。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModuleElementCollection.RemoveAt(System.Int32)">
      <summary>移除指定索引处的元素。</summary>
      <param name="index">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.Net.Configuration.WebRequestModulesSection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebRequestModulesSection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Configuration.WebUtilityElement.#ctor">
      <summary>初始化 <see cref="T:System.Net.Configuration.WebUtilityElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor">
      <summary>初始化 <see cref="T:System.Net.Cookie" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Cookie" /> 与指定类 <see cref="P:System.Net.Cookie.Name" /> 和 <see cref="P:System.Net.Cookie.Value" />。</summary>
      <param name="name">名称 <see cref="T:System.Net.Cookie" />。 以下字符必须不在内部使用 <paramref name="name" />︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。 美元符号字符 （"$"） 不能为第一个字符。</param>
      <param name="value">值 <see cref="T:System.Net.Cookie" />。 以下字符必须不在内部使用 <paramref name="value" />︰ 分号、 逗号。</param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 null。- 或 - <paramref name="name" /> 参数长度为零。- 或 - <paramref name="name" /> 参数包含无效字符。- 或 - <paramref name="value" /> 参数是 null 。- 或 - <paramref name="value" /> 参数包含一个包含无效字符的字符串未用引号引起来。</exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Cookie" /> 与指定类 <see cref="P:System.Net.Cookie.Name" />, ，<see cref="P:System.Net.Cookie.Value" />, ，和 <see cref="P:System.Net.Cookie.Path" />。</summary>
      <param name="name">名称 <see cref="T:System.Net.Cookie" />。 以下字符必须不在内部使用 <paramref name="name" />︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。 美元符号字符 （"$"） 不能为第一个字符。</param>
      <param name="value">值 <see cref="T:System.Net.Cookie" />。 以下字符必须不在内部使用 <paramref name="value" />︰ 分号、 逗号。</param>
      <param name="path">与此源服务器上的 Uri 的子集 <see cref="T:System.Net.Cookie" /> 适用。 默认值是"/"。</param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 null。- 或 - <paramref name="name" /> 参数长度为零。- 或 - <paramref name="name" /> 参数包含无效字符。- 或 - <paramref name="value" /> 参数是 null 。- 或 - <paramref name="value" /> 参数包含一个包含无效字符的字符串未用引号引起来。</exception>
    </member>
    <member name="M:System.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Cookie" /> 与指定类 <see cref="P:System.Net.Cookie.Name" />, ，<see cref="P:System.Net.Cookie.Value" />, ，<see cref="P:System.Net.Cookie.Path" />, ，和 <see cref="P:System.Net.Cookie.Domain" />。</summary>
      <param name="name">名称 <see cref="T:System.Net.Cookie" />。 以下字符必须不在内部使用 <paramref name="name" />︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。 美元符号字符 （"$"） 不能为第一个字符。</param>
      <param name="value">值 <see cref="T:System.Net.Cookie" /> 对象。 以下字符必须不在内部使用 <paramref name="value" />︰ 分号、 逗号。</param>
      <param name="path">与此源服务器上的 Uri 的子集 <see cref="T:System.Net.Cookie" /> 适用。 默认值是"/"。</param>
      <param name="domain">此可选的 internet 域 <see cref="T:System.Net.Cookie" /> 是否有效。 默认值这是主机 <see cref="T:System.Net.Cookie" /> 尚未收到来自。</param>
      <exception cref="T:System.Net.CookieException">
        <paramref name="name" /> 参数为 null。- 或 - <paramref name="name" /> 参数长度为零。- 或 - <paramref name="name" /> 参数包含无效字符。- 或 - <paramref name="value" /> 参数是 null 。- 或 - <paramref name="value" /> 参数包含一个包含无效字符的字符串未用引号引起来。</exception>
    </member>
    <member name="M:System.Net.Cookie.Equals(System.Object)">
      <summary>重写 <see cref="M:System.Object.Equals(System.Object)" /> 方法。</summary>
      <param name="comparand">对引用 <see cref="T:System.Net.Cookie" />。</param>
      <returns>返回 true 如果 <see cref="T:System.Net.Cookie" /> 是否等同于 <paramref name="comparand" />。 两个 <see cref="T:System.Net.Cookie" /> 实例相等，如果其 <see cref="P:System.Net.Cookie.Name" />, ，<see cref="P:System.Net.Cookie.Value" />, ，<see cref="P:System.Net.Cookie.Path" />, ，<see cref="P:System.Net.Cookie.Domain" />, ，和 <see cref="P:System.Net.Cookie.Version" /> 属性是否相等。<see cref="P:System.Net.Cookie.Name" /> 和 <see cref="P:System.Net.Cookie.Domain" /> 字符串比较不区分大小写。</returns>
    </member>
    <member name="M:System.Net.Cookie.GetHashCode">
      <summary>重写 <see cref="M:System.Object.GetHashCode" /> 方法。</summary>
      <returns>此实例的 32 位有符号的整数哈希代码。</returns>
    </member>
    <member name="M:System.Net.Cookie.ToString">
      <summary>重写 <see cref="M:System.Object.ToString" /> 方法。</summary>
      <returns>返回的字符串表示形式 <see cref="T:System.Net.Cookie" /> 适用于 HTTP Cookie 中包括的对象 ︰ 请求标头。</returns>
    </member>
    <member name="M:System.Net.CookieCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.CookieCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.Cookie)">
      <summary>添加 <see cref="T:System.Net.Cookie" /> 到 <see cref="T:System.Net.CookieCollection" />。</summary>
      <param name="cookie">
        <see cref="T:System.Net.Cookie" /> 要添加到 <see cref="T:System.Net.CookieCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.CookieCollection.Add(System.Net.CookieCollection)">
      <summary>将内容添加 <see cref="T:System.Net.CookieCollection" /> 与当前实例。</summary>
      <param name="cookies">要添加的 <see cref="T:System.Net.CookieCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Array,System.Int32)">
      <summary>中的元素复制 <see cref="T:System.Net.CookieCollection" /> 实例 <see cref="T:System.Array" /> 类，从特定索引处开始。</summary>
      <param name="array">目标 <see cref="T:System.Array" /> 到 <see cref="T:System.Net.CookieCollection" /> 将被复制。</param>
      <param name="index">在目标中从零开始的索引 <see cref="T:System.Array" /> 开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 在此元素的数目 <see cref="T:System.Net.CookieCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">在此元素 <see cref="T:System.Net.CookieCollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Net.CookieCollection.CopyTo(System.Net.Cookie[],System.Int32)">
      <summary>此元素复制 <see cref="T:System.Net.CookieCollection" /> 到 <see cref="T:System.Net.Cookie" /> 数组中从目标数组的指定索引处开始。</summary>
      <param name="array">目标 <see cref="T:System.Net.Cookie" /> 数组转换为其 <see cref="T:System.Net.CookieCollection" /> 将被复制。</param>
      <param name="index">在目标中从零开始的索引 <see cref="T:System.Array" /> 开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 在此元素的数目 <see cref="T:System.Net.CookieCollection" /> 大于从的可用空间 <paramref name="index" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">在此元素 <see cref="T:System.Net.CookieCollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Net.CookieCollection.GetEnumerator">
      <summary>获取可循环访问的枚举器 <see cref="T:System.Net.CookieCollection" />。</summary>
      <returns>实现的实例 <see cref="T:System.Collections.IEnumerator" /> 可循环访问的接口 <see cref="T:System.Net.CookieCollection" />。</returns>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor">
      <summary>初始化 <see cref="T:System.Net.CookieContainer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.CookieContainer" /> 类具有指定值的数目 <see cref="T:System.Net.Cookie" /> 容器可以包含的实例。</summary>
      <param name="capacity">数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="capacity" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.CookieContainer" /> 具有特定属性的类。</summary>
      <param name="capacity">数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。</param>
      <param name="perDomainCapacity">数 <see cref="T:System.Net.Cookie" /> 每个域的实例。</param>
      <param name="maxCookieSize">最大大小 （字节） 对任何单一 <see cref="T:System.Net.Cookie" /> 中 <see cref="T:System.Net.CookieContainer" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="perDomainCapacity" /> 不等于 <see cref="F:System.Int32.MaxValue" />。和 <paramref name="(perDomainCapacity" /> 小于或等于零或 <paramref name="perDomainCapacity" /> 大于 <paramref name="capacity)" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maxCookieSize" /> 小于或等于零。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.Cookie)">
      <summary>添加 <see cref="T:System.Net.Cookie" /> 到 <see cref="T:System.Net.CookieContainer" />。 此方法使用从域 <see cref="T:System.Net.Cookie" /> 来确定哪些域集合相关联 <see cref="T:System.Net.Cookie" /> 与。</summary>
      <param name="cookie">要添加到 <see cref="T:System.Net.Cookie" /> 的 <see cref="T:System.Net.CookieContainer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">对于域 <paramref name="cookie" /> 是 null 或空字符串 ("")。</exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookie" /> 大于 <paramref name="maxCookieSize" />。- 或 - 对于域 <paramref name="cookie" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Net.CookieCollection)">
      <summary>将内容添加 <see cref="T:System.Net.CookieCollection" /> 到 <see cref="T:System.Net.CookieContainer" />。</summary>
      <param name="cookies">要添加到 <see cref="T:System.Net.CookieCollection" /> 的 <see cref="T:System.Net.CookieContainer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.Cookie)">
      <summary>添加 <see cref="T:System.Net.Cookie" /> 到 <see cref="T:System.Net.CookieContainer" /> 特定 uri。</summary>
      <param name="uri">URI 的 <see cref="T:System.Net.Cookie" /> 要添加到 <see cref="T:System.Net.CookieContainer" />。</param>
      <param name="cookie">要添加到 <see cref="T:System.Net.Cookie" /> 的 <see cref="T:System.Net.CookieContainer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null 或 <paramref name="cookie" /> 为 null。</exception>
      <exception cref="T:System.Net.CookieException">
        <paramref name="cookie" /> 大于 <paramref name="maxCookieSize" />。- 或 - 对于域 <paramref name="cookie" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.Add(System.Uri,System.Net.CookieCollection)">
      <summary>将内容添加 <see cref="T:System.Net.CookieCollection" /> 到 <see cref="T:System.Net.CookieContainer" /> 特定 uri。</summary>
      <param name="uri">URI 的 <see cref="T:System.Net.CookieCollection" /> 要添加到 <see cref="T:System.Net.CookieContainer" />。</param>
      <param name="cookies">要添加到 <see cref="T:System.Net.CookieCollection" /> 的 <see cref="T:System.Net.CookieContainer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookies" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">一个 cookie 中的域 <paramref name="cookies" /> 是 null。</exception>
      <exception cref="T:System.Net.CookieException">中的 cookie 之一 <paramref name="cookies" /> 包含了无效的域。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookieHeader(System.Uri)">
      <summary>获取包含表示的 HTTP cookie 的 HTTP cookie 标头 <see cref="T:System.Net.Cookie" /> 与特定 URI 相关联的实例。</summary>
      <param name="uri">URI 的 <see cref="T:System.Net.Cookie" /> 所需的实例。</param>
      <returns>HTTP cookie 标头，使用字符串表示 <see cref="T:System.Net.Cookie" /> 用分号分隔的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.GetCookies(System.Uri)">
      <summary>获取 <see cref="T:System.Net.CookieCollection" /> ，其中包含 <see cref="T:System.Net.Cookie" /> 与特定 URI 相关联的实例。</summary>
      <param name="uri">URI 的 <see cref="T:System.Net.Cookie" /> 所需的实例。</param>
      <returns>一个 <see cref="T:System.Net.CookieCollection" /> ，其中包含 <see cref="T:System.Net.Cookie" /> 与特定 URI 相关联的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.CookieContainer.SetCookies(System.Uri,System.String)">
      <summary>添加 <see cref="T:System.Net.Cookie" /> 实例的 HTTP cookie 标头与一个或多个 cookie <see cref="T:System.Net.CookieContainer" /> 为特定的 URI。</summary>
      <param name="uri">URI 的 <see cref="T:System.Net.CookieCollection" />。</param>
      <param name="cookieHeader">HTTP 设置 cookie 的内容标头返回的 HTTP 服务器时，与 <see cref="T:System.Net.Cookie" /> 以逗号分隔的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookieHeader" /> 为 null。</exception>
      <exception cref="T:System.Net.CookieException">其中一个 cookie 无效。- 或 - 将一个 cookie 添加到容器时出错。</exception>
    </member>
    <member name="M:System.Net.CookieException.#ctor">
      <summary>初始化 <see cref="T:System.Net.CookieException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Net.CookieException" /> 类具有特定值的 <paramref name="serializationInfo" /> 和 <paramref name="streamingContext" />。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要使用。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 要使用。</param>
    </member>
    <member name="M:System.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.CookieException" />。</summary>
      <param name="serializationInfo">承载序列化对象数据的对象。 要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">关于来源和目标的上下文信息 用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.CookieException" />。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要使用。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 要使用。</param>
    </member>
    <member name="M:System.Net.CredentialCache.#ctor">
      <summary>创建 <see cref="T:System.Net.CredentialCache" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)">
      <summary>添加 <see cref="T:System.Net.NetworkCredential" /> 凭据缓存与 SMTP 一起使用的实例并将其与主机的计算机、 端口和身份验证协议。 使用此方法添加的凭据才是有效的 SMTP。 由于 HTTP 或 FTP 请求时，此方法不起作用。</summary>
      <param name="host">一个 <see cref="T:System.String" /> 标识主计算机。</param>
      <param name="port">一个 <see cref="T:System.Int32" /> ，它指定要连接到打开的端口 <paramref name="host" />。</param>
      <param name="authenticationType">一个 <see cref="T:System.String" /> ，它标识连接到时使用的身份验证方案 <paramref name="host" /> 使用 <paramref name="cred" />。 请参阅“备注”。</param>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 将添加到凭据缓存。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。- 或 -<paramref name="authType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authType" /> 不接受的值。 请参阅“备注”。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于零。</exception>
    </member>
    <member name="M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)">
      <summary>添加 <see cref="T:System.Net.NetworkCredential" /> 用于协议 SMTP 以外，以及将其与统一资源标识符 (URI) 前缀和身份验证协议关联到凭据缓存实例。</summary>
      <param name="uriPrefix">一个 <see cref="T:System.Uri" /> ，它指定凭据授予访问权的资源的 URI 前缀。</param>
      <param name="authType">在名为的资源使用的身份验证方案 <paramref name="uriPrefix" />。</param>
      <param name="cred">
        <see cref="T:System.Net.NetworkCredential" /> 将添加到凭据缓存。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。- 或 - <paramref name="authType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">不止一次添加相同的凭据。</exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)">
      <summary>返回 <see cref="T:System.Net.NetworkCredential" /> 实例与指定的主机、 端口和身份验证协议相关联。</summary>
      <param name="host">一个 <see cref="T:System.String" /> 标识主计算机。</param>
      <param name="port">一个 <see cref="T:System.Int32" /> ，它指定要连接到打开的端口 <paramref name="host" />。</param>
      <param name="authenticationType">一个 <see cref="T:System.String" /> ，它标识连接到时使用的身份验证方案 <paramref name="host" />。 请参阅“备注”。</param>
      <returns>一个 <see cref="T:System.Net.NetworkCredential" /> 或者，如果在缓存中，没有任何匹配的凭据 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。- 或 - <paramref name="authType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="authType" /> 不接受的值。 请参阅“备注”。- 或 -<paramref name="host" /> 等于空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于零。</exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)">
      <summary>返回 <see cref="T:System.Net.NetworkCredential" /> 实例与指定的统一资源标识符 (URI) 和身份验证类型相关联。</summary>
      <param name="uriPrefix">一个 <see cref="T:System.Uri" /> ，它指定凭据授予访问权的资源的 URI 前缀。</param>
      <param name="authType">在名为的资源使用的身份验证方案 <paramref name="uriPrefix" />。</param>
      <returns>一个 <see cref="T:System.Net.NetworkCredential" /> 或者，如果在缓存中，没有任何匹配的凭据 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 或 <paramref name="authType" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.CredentialCache.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Net.CredentialCache" /> 实例的枚举器。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Net.CredentialCache" />。</returns>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)">
      <summary>删除 <see cref="T:System.Net.NetworkCredential" /> 实例从缓存中，如果与指定的主机、 端口和身份验证协议相关联。</summary>
      <param name="host">一个 <see cref="T:System.String" /> 标识主计算机。</param>
      <param name="port">一个 <see cref="T:System.Int32" /> ，它指定要连接到打开的端口 <paramref name="host" />。</param>
      <param name="authenticationType">一个 <see cref="T:System.String" /> ，它标识连接到时使用的身份验证方案 <paramref name="host" />。 请参阅“备注”。</param>
    </member>
    <member name="M:System.Net.CredentialCache.Remove(System.Uri,System.String)">
      <summary>删除 <see cref="T:System.Net.NetworkCredential" /> 实例从缓存中，如果与指定的统一资源标识符 (URI) 前缀和身份验证协议相关联。</summary>
      <param name="uriPrefix">一个 <see cref="T:System.Uri" /> ，它指定凭据所用于的资源的 URI 前缀。</param>
      <param name="authType">在名为主机所使用的身份验证方案 <paramref name="uriPrefix" />。</param>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)">
      <summary>以异步方式返回指定的主机的 Internet 协议 (IP) 地址。</summary>
      <param name="hostNameOrAddress">主机名或 IP 地址来解决。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 引用该异步请求的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostNameOrAddress" /> 大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostNameOrAddress" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)">
      <summary>开始一个异步请求的 <see cref="T:System.Net.IPHostEntry" /> 有关指定的 DNS 主机名的信息。</summary>
      <param name="hostName">主机的 DNS 名称。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="stateObject">一个用户定义对象，其中包含操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 引用该异步请求的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">执行 DNS 查询时遇到错误。</exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostEntry(System.Net.IPAddress,System.AsyncCallback,System.Object)">
      <summary>以异步方式 IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。</summary>
      <param name="address">要解析的 IP 地址。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="stateObject">一个用户定义对象，其中包含操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 引用该异步请求的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="address" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.BeginGetHostEntry(System.String,System.AsyncCallback,System.Object)">
      <summary>以异步方式解析主机名或 IP 地址到 <see cref="T:System.Net.IPHostEntry" /> 实例。</summary>
      <param name="hostNameOrAddress">主机名或 IP 地址来解决。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="stateObject">一个用户定义对象，其中包含操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 引用该异步请求的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostNameOrAddress" /> 大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostNameOrAddress" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)">
      <summary>开始一个异步请求，若要解决 DNS 主机名或 IP 地址到 <see cref="T:System.Net.IPAddress" /> 实例。</summary>
      <param name="hostName">主机的 DNS 名称。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="stateObject">一个用户定义对象，其中包含操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 引用该异步请求的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">调用方没有权限访问 DNS 信息。</exception>
    </member>
    <member name="M:System.Net.Dns.EndGetHostAddresses(System.IAsyncResult)">
      <summary>结束对 DNS 信息的异步请求。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)" /> 方法。</param>
      <returns>类型的数组 <see cref="T:System.Net.IPAddress" /> ，针对指定的主机保留的 IP 地址 <paramref name="hostNameOrAddress" /> 参数 <see cref="M:System.Net.Dns.BeginGetHostAddresses(System.String,System.AsyncCallback,System.Object)" />。</returns>
    </member>
    <member name="M:System.Net.Dns.EndGetHostByName(System.IAsyncResult)">
      <summary>结束对 DNS 信息的异步请求。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 为调用所返回的实例 <see cref="M:System.Net.Dns.BeginGetHostByName(System.String,System.AsyncCallback,System.Object)" /> 方法。</param>
      <returns>
        <see cref="T:System.Net.IPHostEntry" /> 对象，其中包含有关主机的 DNS 信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Dns.EndGetHostEntry(System.IAsyncResult)">
      <summary>结束对 DNS 信息的异步请求。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="Overload:System.Net.Dns.BeginGetHostEntry" /> 方法。</param>
      <returns>
        <see cref="T:System.Net.IPHostEntry" /> 实例，它包含有关主机的地址信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Dns.EndResolve(System.IAsyncResult)">
      <summary>结束对 DNS 信息的异步请求。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 为调用所返回的实例 <see cref="M:System.Net.Dns.BeginResolve(System.String,System.AsyncCallback,System.Object)" /> 方法。</param>
      <returns>
        <see cref="T:System.Net.IPHostEntry" /> 对象，其中包含有关主机的 DNS 信息。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostAddresses(System.String)">
      <summary>返回指定的主机的 Internet 协议 (IP) 地址。</summary>
      <param name="hostNameOrAddress">主机名或 IP 地址来解决。</param>
      <returns>类型的数组 <see cref="T:System.Net.IPAddress" /> ，由指定的主机保留的 IP 地址 <paramref name="hostNameOrAddress" /> 参数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostNameOrAddress" /> 大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostNameOrAddress" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostAddressesAsync(System.String)">
      <summary>用以异步操作返回指定的主机的 Internet 协议 (IP) 地址。</summary>
      <param name="hostNameOrAddress">主机名或 IP 地址来解决。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回类型的数组 <see cref="T:System.Net.IPAddress" /> ，由指定的主机保留的 IP 地址 <paramref name="hostNameOrAddress" /> 参数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostNameOrAddress" /> 大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostNameOrAddress" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.Net.IPAddress)">
      <summary>创建 <see cref="T:System.Net.IPHostEntry" /> 实例与指定 <see cref="T:System.Net.IPAddress" />。</summary>
      <param name="address">一个 <see cref="T:System.Net.IPAddress" />。</param>
      <returns>一个 <see cref="T:System.Net.IPHostEntry" />。一个 <see cref="T:System.Net.IPHostEntry" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="address" />。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostByAddress(System.String)">
      <summary>创建 <see cref="T:System.Net.IPHostEntry" /> 实例从一个 IP 地址。</summary>
      <param name="address">IP 地址。</param>
      <returns>一个 <see cref="T:System.Net.IPHostEntry" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="address" />。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostByName(System.String)">
      <summary>获取指定的 DNS 主机名的 DNS 信息。</summary>
      <param name="hostName">主机的 DNS 名称。</param>
      <returns>
        <see cref="T:System.Net.IPHostEntry" /> 对象，其中包含在指定的地址的主机信息 <paramref name="hostName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostName" /> 大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostName" />。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntry(System.Net.IPAddress)">
      <summary>IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。</summary>
      <param name="address">IP 地址。</param>
      <returns>
        <see cref="T:System.Net.IPHostEntry" /> 实例，它包含有关中指定的主机的地址信息 <paramref name="address" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="address" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntry(System.String)">
      <summary>主机名或 IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。</summary>
      <param name="hostNameOrAddress">主机名或 IP 地址来解决。</param>
      <returns>
        <see cref="T:System.Net.IPHostEntry" /> 实例，它包含有关中指定的主机的地址信息 <paramref name="hostNameOrAddress" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostNameOrAddress" /> 参数是否大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostNameOrAddress" /> 参数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 参数是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)">
      <summary>IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 作为异步操作的实例。</summary>
      <param name="address">IP 地址。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.IPHostEntry" /> 实例，它包含有关中指定的主机的地址信息 <paramref name="address" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="address" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostEntryAsync(System.String)">
      <summary>主机名或 IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 作为异步操作的实例。</summary>
      <param name="hostNameOrAddress">主机名或 IP 地址来解决。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.IPHostEntry" /> 实例，它包含有关中指定的主机的地址信息 <paramref name="hostNameOrAddress" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostNameOrAddress" /> 参数是否大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostNameOrAddress" /> 参数。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hostNameOrAddress" /> 参数是无效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.Dns.GetHostName">
      <summary>获取本地计算机的主机名。</summary>
      <returns>一个字符串，包含 DNS 主机名的本地计算机。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">在本地主机名称解析时遇到错误。</exception>
    </member>
    <member name="M:System.Net.Dns.Resolve(System.String)">
      <summary>DNS 主机名或 IP 地址解析为 <see cref="T:System.Net.IPHostEntry" /> 实例。</summary>
      <param name="hostName">DNS 样式的主机名或 IP 地址。</param>
      <returns>
        <see cref="T:System.Net.IPHostEntry" /> 实例，它包含有关中指定的主机的地址信息 <paramref name="hostName" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="hostName" /> 大于 255 个字符。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">在解析时遇到错误 <paramref name="hostName" />。</exception>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.DnsEndPoint" /> 类的主机名或字符串表示形式的 IP 地址和端口号。</summary>
      <param name="host">主机名或 IP 地址的字符串表示。</param>
      <param name="port">关联的端口号与地址，则为 0 来指定任何可用端口。<paramref name="port" /> 正在主机顺序。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="host" /> 参数包含一个空字符串。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 参数是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。- 或 - <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>新实例初始化 <see cref="T:System.Net.DnsEndPoint" /> 类的主机名或字符串表示形式的 IP 地址、 端口号和地址族。</summary>
      <param name="host">主机名或 IP 地址的字符串表示。</param>
      <param name="port">关联的端口号与地址，则为 0 来指定任何可用端口。<paramref name="port" /> 正在主机顺序。</param>
      <param name="addressFamily">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="host" /> 参数包含一个空字符串。- 或 - <paramref name="addressFamily" /> 为 <see cref="F:System.Net.Sockets.AddressFamily.Unknown" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 参数是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。- 或 - <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
    </member>
    <member name="M:System.Net.DnsEndPoint.Equals(System.Object)">
      <summary>比较两个 <see cref="T:System.Net.DnsEndPoint" /> 对象。</summary>
      <param name="comparand">一个 <see cref="T:System.Net.DnsEndPoint" /> 实例要与当前实例进行比较。</param>
      <returns>true 如果两个 <see cref="T:System.Net.DnsEndPoint" /> 实例是否相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.GetHashCode">
      <summary>返回的哈希值 <see cref="T:System.Net.DnsEndPoint" />。</summary>
      <returns>整数哈希值 <see cref="T:System.Net.DnsEndPoint" />。</returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.ToString">
      <summary>返回主机名或字符串表示形式的 IP 地址和端口号 <see cref="T:System.Net.DnsEndPoint" />。</summary>
      <returns>一个包含地址族、 主机名或 IP 地址字符串和指定的端口号的字符串 <see cref="T:System.Net.DnsEndPoint" />。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>创建的新实例 <see cref="T:System.Net.DnsPermission" /> 类，用于允许 DNS 的无限制的访问或不允许 DNS 访问。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Copy">
      <summary>创建当前权限实例的相同副本。</summary>
      <returns>新实例 <see cref="T:System.Net.DnsPermission" /> 类的当前实例的相同副本。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.FromXml(System.Security.SecurityElement)">
      <summary>重新构造 <see cref="T:System.Net.DnsPermission" /> 从 XML 编码的实例。</summary>
      <param name="securityElement">编码用于重新构造 XML <see cref="T:System.Net.DnsPermission" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是 <see cref="T:System.Net.DnsPermission" /> 元素。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.Intersect(System.Security.IPermission)">
      <summary>创建是当前权限实例的交集的权限实例与指定的权限实例。</summary>
      <param name="target">
        <see cref="T:System.Net.DnsPermission" /> 要与当前实例相交的实例。</param>
      <returns>一个 <see cref="T:System.Net.DnsPermission" /> 实例，它表示当前的交集 <see cref="T:System.Net.DnsPermission" /> 实例与指定 <see cref="T:System.Net.DnsPermission" /> 实例，或 null 如果交集为空。 如果当前实例和 <paramref name="target" /> 是不受限制，此方法返回一个新 <see cref="T:System.Net.DnsPermission" /> 是不受限制; 否则为它将返回的实例 null。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" /> ，也不 null。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限实例是否为指定的权限实例的子集。</summary>
      <param name="target">第二个 <see cref="T:System.Net.DnsPermission" /> 测试子集关系的实例。</param>
      <returns>false 如果当前实例是不受限制和 <paramref name="target" /> 是 null 或不受限制; 否则为 true。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" /> ，也不 null。</exception>
    </member>
    <member name="M:System.Net.DnsPermission.IsUnrestricted">
      <summary>检查该对象的总体权限状态。</summary>
      <returns>true 如果 <see cref="T:System.Net.DnsPermission" /> 实例使用创建 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.ToXml">
      <summary>创建的 XML 编码 <see cref="T:System.Net.DnsPermission" /> 实例和其当前状态。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> 实例，它包含的 XML 编码表示形式的安全对象，包括状态信息。</returns>
    </member>
    <member name="M:System.Net.DnsPermission.Union(System.Security.IPermission)">
      <summary>创建是当前权限实例的并集的权限实例与指定的权限实例。</summary>
      <param name="target">
        <see cref="T:System.Net.DnsPermission" /> 实例与当前实例进行合并。</param>
      <returns>一个 <see cref="T:System.Net.DnsPermission" /> 实例，它表示当前的联合 <see cref="T:System.Net.DnsPermission" /> 实例与指定 <see cref="T:System.Net.DnsPermission" /> 实例。 如果 <paramref name="target" /> 是 null, ，此方法返回当前实例的副本。 如果当前实例或 <paramref name="target" /> 是不受限制，则此方法返回 <see cref="T:System.Net.DnsPermission" /> 实例中不受限制; 否则为它返回 <see cref="T:System.Net.DnsPermission" /> 是受限制的实例。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 既不是 <see cref="T:System.Net.DnsPermission" /> ，也不 null。</exception>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值初始化 <see cref="T:System.Net.DnsPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 参数不是有效 <see cref="T:System.Security.Permissions.SecurityAction" />。</exception>
    </member>
    <member name="M:System.Net.DnsPermissionAttribute.CreatePermission">
      <summary>创建并返回的新实例 <see cref="T:System.Net.DnsPermission" /> 类。</summary>
      <returns>一个 <see cref="T:System.Net.DnsPermission" /> 与安全声明相对应。</returns>
    </member>
    <member name="M:System.Net.EndPoint.#ctor">
      <summary>初始化 <see cref="T:System.Net.EndPoint" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
      <summary>创建 <see cref="T:System.Net.EndPoint" /> 实例从 <see cref="T:System.Net.SocketAddress" /> 实例。</summary>
      <param name="socketAddress">套接字地址作为连接的终结点。</param>
      <returns>一个新 <see cref="T:System.Net.EndPoint" /> 实例，它是从指定初始化 <see cref="T:System.Net.SocketAddress" /> 实例。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试进行不在子代类中重写时，访问该方法。</exception>
    </member>
    <member name="M:System.Net.EndPoint.Serialize">
      <summary>序列化到的终结点信息 <see cref="T:System.Net.SocketAddress" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Net.SocketAddress" /> 实例，它包含的终结点信息。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试进行不在子代类中重写时，访问该方法。</exception>
    </member>
    <member name="M:System.Net.EndpointPermission.Equals(System.Object)">
      <summary>确定指定的 Object 是否等同于当前的 Object。</summary>
      <param name="obj">要与当前的 <see cref="T:System.Object" /> 进行比较的 Object。</param>
      <returns>如果指定的 true 等于当前的 Object，则为 Object；否则为 false。</returns>
    </member>
    <member name="M:System.Net.EndpointPermission.GetHashCode">
      <summary>用作特定类型的哈希函数。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Net.EndpointPermission.ToString">
      <summary>返回表示当前 <see cref="T:System.Net.EndpointPermission" /> 实例的字符串。</summary>
      <returns>一个字符串，表示当前 <see cref="T:System.Net.EndpointPermission" /> 实例。</returns>
    </member>
    <member name="M:System.Net.FileWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.FileWebRequest" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，它包含序列化新所需的信息 <see cref="T:System.Net.FileWebRequest" /> 对象。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象，其中包含与新关联的序列化流的源 <see cref="T:System.Net.FileWebRequest" /> 对象。</param>
    </member>
    <member name="M:System.Net.FileWebRequest.Abort">
      <summary>取消对 Internet 资源的请求。</summary>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>开始对用于写入数据的 <see cref="T:System.IO.Stream" /> 对象执行异步请求。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FileWebRequest.Method" /> 属性是 GET 和应用程序将写入该流。</exception>
      <exception cref="T:System.InvalidOperationException">正在使用的以前调用流 <see cref="M:System.Net.FileWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.ApplicationException">不写入流才可用。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="T:System.Net.FileWebRequest" /> 已中止。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>开始对文件系统资源的异步请求。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.InvalidOperationException">该流已在使用的以前调用 <see cref="M:System.Net.FileWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="T:System.Net.FileWebRequest" /> 已中止。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>结束对的异步请求 <see cref="T:System.IO.Stream" /> 应用程序用于将数据写入的实例。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 引用对流的挂起请求。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象应用程序用于写入数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>结束对文件系统资源的异步请求。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 引用对响应的挂起请求。</param>
      <returns>一个 <see cref="T:System.Net.WebResponse" /> ，其中包含来自文件系统资源的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />  用于指定此序列化的目标。</param>
    </member>
    <member name="M:System.Net.FileWebRequest.GetRequestStream">
      <summary>返回 <see cref="T:System.IO.Stream" /> 将数据写入到文件系统资源的对象。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 将数据写入到文件系统资源。</returns>
      <exception cref="T:System.Net.WebException">请求超时。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.GetResponse">
      <summary>返回对文件系统请求的响应。</summary>
      <returns>一个 <see cref="T:System.Net.WebResponse" /> ，其中包含来自文件系统资源的响应。</returns>
      <exception cref="T:System.Net.WebException">请求已超时。</exception>
    </member>
    <member name="M:System.Net.FileWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 具有所需的数据进行序列化对象 <see cref="T:System.Net.FileWebRequest" />。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ，它持有的序列化的数据 <see cref="T:System.Net.FileWebRequest" />。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.FileWebRequest" /> 关联的序列化流的目标。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.FileWebResponse" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，它包含序列化新的 <see cref="T:System.Net.FileWebResponse" /> 实例所需的信息。</param>
      <param name="streamingContext">一个实例 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类，该类包含与新关联的序列化流的源 <see cref="T:System.Net.FileWebResponse" /> 实例。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.Close">
      <summary>关闭响应流。</summary>
    </member>
    <member name="M:System.Net.FileWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.FileWebResponse.GetResponseStream">
      <summary>从文件系统资源返回数据的流。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 用于从文件系统资源中读取数据。</returns>
    </member>
    <member name="M:System.Net.FileWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.FileWebResponse" />。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> , ，后者将容纳的序列化的数据 <see cref="T:System.Net.FileWebResponse" />。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 包含与新关联的序列化流的目标 <see cref="T:System.Net.FileWebResponse" />。</param>
    </member>
    <member name="M:System.Net.FtpWebRequest.Abort">
      <summary>终止异步 FTP 操作。</summary>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>开始以异步方式打开请求的内容流以便写入。</summary>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含操作的相关信息。 操作完成时，此对象传递给 <paramref name="callback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 实例，指示操作的状态。</returns>
      <exception cref="T:System.InvalidOperationException">此方法的以前调用或 <see cref="M:System.Net.FtpWebRequest.GetRequestStream" /> 尚未完成。</exception>
      <exception cref="T:System.Net.WebException">无法建立到 FTP 服务器的连接。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FtpWebRequest.Method" /> 属性未设置为 <see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile" />。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>开始以异步方式向 FTP 服务器发送请求并从 FTP 服务器接收响应。</summary>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含操作的相关信息。 操作完成时，此对象传递给 <paramref name="callback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 实例，指示操作的状态。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.FtpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 已为此实例调用。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>结束由 <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 启动的挂起的异步操作。</summary>
      <param name="asyncResult">在操作开始时返回的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <returns>与此实例关联的可写 <see cref="T:System.IO.Stream" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 未能通过调用 <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">有关标识的操作已调用此方法 <paramref name="asyncResult" />。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>结束由 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 启动的挂起的异步操作。</summary>
      <param name="asyncResult">在操作开始时返回的 <see cref="T:System.IAsyncResult" />。</param>
      <returns>包含一个 <see cref="T:System.Net.FtpWebResponse" /> 实例的 <see cref="T:System.Net.WebResponse" /> 引用。 此对象包含 FTP 服务器对请求的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 未能通过调用 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">有关标识的操作已调用此方法 <paramref name="asyncResult" />。</exception>
      <exception cref="T:System.Net.WebException">使用 HTTP 代理服务器时出错。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetRequestStream">
      <summary>检索用于向 FTP 服务器上载数据的流。</summary>
      <returns>可写 <see cref="T:System.IO.Stream" /> 实例，用于存储要由当前请求发送到服务器的数据。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 已调用，并且尚未完成。- 或 -当启用了 HTTP 代理，而您试图将 FTP 命令之外的其他 <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />, ，<see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory" />, ，或 <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails" />。</exception>
      <exception cref="T:System.Net.WebException">无法建立到 FTP 服务器的连接。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.FtpWebRequest.Method" /> 属性未设置为 <see cref="F:System.Net.WebRequestMethods.Ftp.UploadFile" /> 或 <see cref="F:System.Net.WebRequestMethods.Ftp.AppendFile" />。</exception>
    </member>
    <member name="M:System.Net.FtpWebRequest.GetResponse">
      <summary>返回 FTP 服务器响应。</summary>
      <returns>包含一个 <see cref="T:System.Net.FtpWebResponse" /> 实例的 <see cref="T:System.Net.WebResponse" /> 引用。 此对象包含 FTP 服务器对请求的响应。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.FtpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 已为此实例调用。- 或 -当启用了 HTTP 代理，而您试图将 FTP 命令之外的其他 <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />, ，<see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectory" />, ，或 <see cref="F:System.Net.WebRequestMethods.Ftp.ListDirectoryDetails" />。</exception>
      <exception cref="T:System.Net.WebException">
        <see cref="P:System.Net.FtpWebRequest.EnableSsl" /> 设置为 true, ，但服务器不支持此功能。- 或 -一个 <see cref="P:System.Net.FtpWebRequest.Timeout" /> 已指定，并且超时时间已过。</exception>
    </member>
    <member name="M:System.Net.FtpWebResponse.Close">
      <summary>释放由响应所持有的资源。</summary>
    </member>
    <member name="M:System.Net.FtpWebResponse.GetResponseStream">
      <summary>检索包含从 FTP 服务器发送的响应数据的流。</summary>
      <returns>可读 <see cref="T:System.IO.Stream" /> 返回包含数据的实例，且响应; 否则为 <see cref="F:System.IO.Stream.Null" /> 如果无响应数据由服务器返回。</returns>
      <exception cref="T:System.InvalidOperationException">响应未返回数据流。</exception>
    </member>
    <member name="M:System.Net.GlobalProxySelection.#ctor">
      <summary>初始化 <see cref="T:System.Net.GlobalProxySelection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.GlobalProxySelection.GetEmptyWebProxy">
      <summary>返回一个空代理实例。</summary>
      <returns>
        <see cref="T:System.Net.IWebProxy" /> ，不包含任何信息。</returns>
    </member>
    <member name="M:System.Net.HttpListener.#ctor">
      <summary>初始化 <see cref="T:System.Net.HttpListener" /> 类的新实例。</summary>
      <exception cref="T:System.PlatformNotSupportedException">此类不能在当前操作系统上使用。 Windows Server 2003 或 Windows XP SP2 被需要使用此类的实例。</exception>
    </member>
    <member name="M:System.Net.HttpListener.Abort">
      <summary>立刻关闭 <see cref="T:System.Net.HttpListener" /> 对象，这样会放弃所有当前排队的请求。</summary>
    </member>
    <member name="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
      <summary>开始异步检索传入的请求。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，引用客户端请求可用时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含操作的相关信息。 操作完成时，此对象传递给 <paramref name="callback" /> 委托。</param>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <exception cref="T:System.Net.HttpListenerException">Win32 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性来确定该异常的原因。</exception>
      <exception cref="T:System.InvalidOperationException">此对象尚未启动，或者当前已停止。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListener.Close">
      <summary>关闭 <see cref="T:System.Net.HttpListener" />。</summary>
    </member>
    <member name="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)">
      <summary>完成检索传入的客户端请求的异步操作。</summary>
      <param name="asyncResult">启动异步操作时获得的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <returns>表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 未能通过调用 <see cref="M:System.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpListener.EndGetContext(System.IAsyncResult)" /> 已调用方法为指定 <paramref name="asyncResult" /> 对象。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListener.GetContext">
      <summary>等待传入的请求，接收到请求时返回。</summary>
      <returns>表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</returns>
      <exception cref="T:System.Net.HttpListenerException">Win32 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性来确定该异常的原因。</exception>
      <exception cref="T:System.InvalidOperationException">此对象尚未启动，或者当前已停止。- 或 -<see cref="T:System.Net.HttpListener" /> 没有响应的任何统一资源标识符 (URI) 前缀。 请参阅“备注”。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListener.GetContextAsync">
      <summary>等待传入请求以作为异步操作。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回表示客户端请求的 <see cref="T:System.Net.HttpListenerContext" /> 对象。</returns>
    </member>
    <member name="M:System.Net.HttpListener.Start">
      <summary>允许此实例接收传入的请求。</summary>
      <exception cref="T:System.Net.HttpListenerException">Win32 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性来确定该异常的原因。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListener.Stop">
      <summary>使此实例停止接收传入的请求。</summary>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListener.System#IDisposable#Dispose">
      <summary>释放此 <see cref="T:System.Net.HttpListener" /> 对象持有的资源。</summary>
    </member>
    <member name="M:System.Net.HttpListenerBasicIdentity.#ctor(System.String,System.String)">
      <summary>使用指定的用户名和密码初始化 <see cref="T:System.Net.HttpListenerBasicIdentity" /> 类的新实例。</summary>
      <param name="username">用户名。</param>
      <param name="password">密码。</param>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)">
      <summary>接受的 WebSocket 连接作为异步操作。</summary>
      <param name="subProtocol">支持的 WebSocket 子协议。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> 为空字符串- 或 - <paramref name="subProtocol" /> 包含非法字符。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">发送完成 WebSocket 握手的响应时出错。</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)">
      <summary>接受 WebSocket 连接指定受支持的 WebSocket 子协议、 接收缓冲区大小和 WebSocket 保持活动状态的间隔以异步操作。</summary>
      <param name="subProtocol">支持的 WebSocket 子协议。</param>
      <param name="receiveBufferSize">接收缓冲区的大小以字节为单位。</param>
      <param name="keepAliveInterval">WebSocket 协议保持活动状态的间隔（以毫秒为单位）。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> 为空字符串- 或 - <paramref name="subProtocol" /> 包含非法字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keepAliveInterval" /> 来说过小。- 或 - <paramref name="receiveBufferSize" /> 为不超过 16 个字节- 或 - <paramref name="receiveBufferSize" /> 将大于 64 kb。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">发送完成 WebSocket 握手的响应时出错。</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})">
      <summary>接受 WebSocket 连接指定受支持的 WebSocket 子协议，接收缓冲区的大小、 WebSocket 保持活动状态的时间间隔，以及作为异步操作的内部缓冲区。</summary>
      <param name="subProtocol">支持的 WebSocket 子协议。</param>
      <param name="receiveBufferSize">接收缓冲区的大小以字节为单位。</param>
      <param name="keepAliveInterval">WebSocket 协议保持活动状态的间隔（以毫秒为单位）。</param>
      <param name="internalBuffer">若要使用此操作的内部缓冲区。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> 为空字符串- 或 - <paramref name="subProtocol" /> 包含非法字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keepAliveInterval" /> 来说过小。- 或 - <paramref name="receiveBufferSize" /> 为不超过 16 个字节- 或 - <paramref name="receiveBufferSize" /> 将大于 64 kb。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">发送完成 WebSocket 握手的响应时出错。</exception>
    </member>
    <member name="M:System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)">
      <summary>接受 WebSocket 连接同时支持的 WebSocket 的子协议和 WebSocket 保持活动状态的时间间隔指定为异步操作。</summary>
      <param name="subProtocol">支持的 WebSocket 子协议。</param>
      <param name="keepAliveInterval">WebSocket 协议保持活动状态的间隔（以毫秒为单位）。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.WebSockets.HttpListenerWebSocketContext" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="subProtocol" /> 为空字符串- 或 - <paramref name="subProtocol" /> 包含非法字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="keepAliveInterval" /> 来说过小。</exception>
      <exception cref="T:System.Net.WebSockets.WebSocketException">发送完成 WebSocket 握手的响应时出错。</exception>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor">
      <summary>初始化 <see cref="T:System.Net.HttpListenerException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.HttpListenerException" /> 类使用指定的错误代码。</summary>
      <param name="errorCode">一个 <see cref="T:System.Int32" /> 值，该值标识所发生的错误。</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Int32,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.HttpListenerException" /> 类使用指定的错误代码和消息。</summary>
      <param name="errorCode">一个 <see cref="T:System.Int32" /> 值，该值标识所发生的错误。</param>
      <param name="message">一个 <see cref="T:System.String" /> ，描述发生的错误。</param>
    </member>
    <member name="M:System.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.HttpListenerException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含要反序列化新所需的信息 <see cref="T:System.Net.HttpListenerException" /> 对象。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Add(System.String)">
      <summary>添加到集合的统一资源标识符 (URI) 前缀。</summary>
      <param name="uriPrefix">一个 <see cref="T:System.String" /> ，它标识与传入的请求进行比较的 URI 信息。 前缀必须以正斜杠 （"/"） 结尾。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriPrefix" /> 不使用 http:// 或 https:// 方案。 这些是仅有的方案支持 <see cref="T:System.Net.HttpListener" /> 对象。- 或 -<paramref name="uriPrefix" /> 不是格式正确的 URI 前缀。 请确保字符串终止与"/"。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.HttpListener" /> 关联与此集合已关闭。</exception>
      <exception cref="T:System.Net.HttpListenerException">Windows 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性来确定该异常的原因。 如果另一个，将引发此异常 <see cref="T:System.Net.HttpListener" /> 已经添加前缀 <paramref name="uriPrefix" />。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Clear">
      <summary>从集合中移除所有的统一资源标识符 (URI) 前缀。</summary>
      <exception cref="T:System.Net.HttpListenerException">Windows 函数调用失败。 检查异常的 <see cref="P:System.Net.HttpListenerException.ErrorCode" /> 属性来确定该异常的原因。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.HttpListener" /> 关联与此集合已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Contains(System.String)">
      <summary>返回 <see cref="T:System.Boolean" /> 值，该值指示是否在集合中包含指定的前缀。</summary>
      <param name="uriPrefix">一个 <see cref="T:System.String" /> ，其中包含要测试的统一资源标识符 (URI) 前缀。</param>
      <returns>true 如果此集合包含指定的前缀 <paramref name="uriPrefix" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.Array,System.Int32)">
      <summary>中的内容复制 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 到指定的数组。</summary>
      <param name="array">一维 <see cref="T:System.Array" /> ，它接收此集合中的统一资源标识符 (URI) 前缀字符串。</param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 有多个维度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">此集合包含多个元素不是可以存储在 <paramref name="array" /> 起价 <paramref name="offset" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.HttpListener" /> 关联与此集合已关闭。</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="array" /> 不能存储字符串值。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
      <summary>中的内容复制 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 到指定的字符串数组。</summary>
      <param name="array">接收此集合中的统一资源标识符 (URI) 前缀字符串的一维字符串数组。</param>
      <param name="offset">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 有多个维度。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">此集合包含多个元素不是可以存储在 <paramref name="array" /> 起价 <paramref name="offset" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.HttpListener" /> 关联与此集合已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.GetEnumerator">
      <summary>返回可用于循环访问集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对此集合中的字符串的访问。</returns>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.Remove(System.String)">
      <summary>从由前缀的列表中移除指定的统一资源标识符 (URI) <see cref="T:System.Net.HttpListener" /> 对象。</summary>
      <param name="uriPrefix">一个 <see cref="T:System.String" /> ，其中包含要删除的 URI 前缀。</param>
      <returns>true 如果 <paramref name="uriPrefix" /> 中找到 <see cref="T:System.Net.HttpListenerPrefixCollection" /> 和已删除; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriPrefix" /> 为 null。</exception>
      <exception cref="T:System.Net.HttpListenerException">Windows 函数调用失败。 若要确定该异常的原因，请检查该异常的错误代码。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.HttpListener" /> 关联与此集合已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可用于循环访问集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对此集合中的字符串的访问。</returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
      <summary>开始对客户端的 X.509 v.3 证书的异步请求。</summary>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含操作的相关信息。 在操作完成时，此对象传递给回调委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，该值指示操作的状态。</returns>
    </member>
    <member name="M:System.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
      <summary>结束对客户端的 X.509 v.3 证书的异步请求。</summary>
      <param name="asyncResult">挂起的请求的证书。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 操作开始时返回的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 未能通过调用 <see cref="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)" /><paramref name="e." /></exception>
      <exception cref="T:System.InvalidOperationException">有关标识的操作已调用此方法 <paramref name="asyncResult" />。</exception>
    </member>
    <member name="M:System.Net.HttpListenerRequest.GetClientCertificate">
      <summary>检索客户端的 X.509 v.3 证书。</summary>
      <returns>一个 <see cref="N:System.Security.Cryptography.X509Certificates" /> 对象，其中包含客户端的 X.509 v.3 证书。</returns>
      <exception cref="T:System.InvalidOperationException">对此方法的调用来检索客户端的 X.509 v.3 证书正在进行中，因此不能成为另一个调用此方法。</exception>
    </member>
    <member name="M:System.Net.HttpListenerRequest.GetClientCertificateAsync">
      <summary>用以异步操作中检索客户端的 X.509 v.3 证书。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="N:System.Security.Cryptography.X509Certificates" /> 对象，其中包含客户端的 X.509 v.3 证书。</returns>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Abort">
      <summary>关闭到客户端连接而不发送响应。</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AddHeader(System.String,System.String)">
      <summary>将指定的标头和值添加到此响应的 HTTP 标头。</summary>
      <param name="name">要设置的 HTTP 标头的名称。</param>
      <param name="value">值为 <paramref name="name" /> 标头。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 null 或空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentException">不允许您为指定的标头指定一个值。- 或 -<paramref name="name" /> 或 <paramref name="value" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535 个字符。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendCookie(System.Net.Cookie)">
      <summary>添加指定 <see cref="T:System.Net.Cookie" /> 到此响应 cookie 集合。</summary>
      <param name="cookie">
        <see cref="T:System.Net.Cookie" /> 要添加到集合以与此响应发送。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
      <summary>将一个值追加到指定的 HTTP 标头与此响应发送。</summary>
      <param name="name">要追加的 HTTP 标头的名称 <paramref name="value" /> 到。</param>
      <param name="value">要追加到的值 <paramref name="name" /> 标头。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是 null 或空字符串 ("")。- 或 -不允许您为指定的标头指定一个值。- 或 -<paramref name="name" /> 或 <paramref name="value" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535 个字符。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close">
      <summary>将发送到客户端的响应并释放由此所持有的资源 <see cref="T:System.Net.HttpListenerResponse" /> 实例。</summary>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
      <summary>指定的字节数组返回客户端并释放由此所持有的资源 <see cref="T:System.Net.HttpListenerResponse" /> 实例。</summary>
      <param name="responseEntity">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送到客户端的响应。</param>
      <param name="willBlock">true 为了阻止客户端，则为刷新流时执行否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="responseEntity" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.CopyFrom(System.Net.HttpListenerResponse)">
      <summary>将指定的属性复制 <see cref="T:System.Net.HttpListenerResponse" /> 到此响应。</summary>
      <param name="templateResponse">
        <see cref="T:System.Net.HttpListenerResponse" /> 要复制的实例。</param>
    </member>
    <member name="M:System.Net.HttpListenerResponse.Redirect(System.String)">
      <summary>配置要将客户端重定向到指定的 URL 的响应。</summary>
      <param name="url">客户端应该用来查找所请求的资源的 URL。</param>
    </member>
    <member name="M:System.Net.HttpListenerResponse.SetCookie(System.Net.Cookie)">
      <summary>添加或更新 <see cref="T:System.Net.Cookie" /> 中与此响应发送的 cookie 集合。</summary>
      <param name="cookie">一个 <see cref="T:System.Net.Cookie" /> 此响应。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cookie" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">Cookie 已存在于集合中并不会替换。</exception>
    </member>
    <member name="M:System.Net.HttpListenerResponse.System#IDisposable#Dispose">
      <summary>释放由 <see cref="T:System.Net.HttpListenerResponse" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.HttpVersion.#ctor">
      <summary>初始化 <see cref="T:System.Net.HttpVersion" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor">
      <summary>初始化 <see cref="T:System.Net.HttpWebRequest" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.HttpWebRequest" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">包含序列化新 <see cref="T:System.Net.HttpWebRequest" /> 对象所需信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="streamingContext">包含与新 <see cref="T:System.Net.HttpWebRequest" /> 对象关联的序列化流的源和目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</param>
    </member>
    <member name="M:System.Net.HttpWebRequest.Abort">
      <summary>取消对 Internet 资源的请求。</summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32)">
      <summary>向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。</summary>
      <param name="range">范围的开始点或结束点。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)">
      <summary>向请求添加指定范围的字节范围标头。</summary>
      <param name="from">开始发送数据的位置。</param>
      <param name="to">停止发送数据的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> 大于 <paramref name="to" />- 或 - <paramref name="from" /> 或 <paramref name="to" /> 小于 0。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int64)">
      <summary>向请求添加从请求数据的开始处或结束处的特定范围的字节范围标头。</summary>
      <param name="range">范围的开始点或结束点。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.Int64,System.Int64)">
      <summary>向请求添加指定范围的字节范围标头。</summary>
      <param name="from">开始发送数据的位置。</param>
      <param name="to">停止发送数据的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> 大于 <paramref name="to" />- 或 - <paramref name="from" /> 或 <paramref name="to" /> 小于 0。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32)">
      <summary>向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。</summary>
      <param name="rangeSpecifier">范围说明。</param>
      <param name="range">范围的开始点或结束点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int32,System.Int32)">
      <summary>向请求添加指定范围的范围标头。</summary>
      <param name="rangeSpecifier">范围说明。</param>
      <param name="from">开始发送数据的位置。</param>
      <param name="to">停止发送数据的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> 大于 <paramref name="to" />- 或 - <paramref name="from" /> 或 <paramref name="to" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64)">
      <summary>向请求添加从请求数据的开始处或结束处计算的特定范围的 Range 标头。</summary>
      <param name="rangeSpecifier">范围说明。</param>
      <param name="range">范围的开始点或结束点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.AddRange(System.String,System.Int64,System.Int64)">
      <summary>向请求添加指定范围的范围标头。</summary>
      <param name="rangeSpecifier">范围说明。</param>
      <param name="from">开始发送数据的位置。</param>
      <param name="to">停止发送数据的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rangeSpecifier" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="from" /> 大于 <paramref name="to" />- 或 - <paramref name="from" /> 或 <paramref name="to" /> 小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rangeSpecifier" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">无法添加范围标头。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>开始对用于写入数据的 <see cref="T:System.IO.Stream" /> 对象执行异步请求。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">此请求的状态对象。</param>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 属性为 GET 或 HEAD。- 或 - <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，<see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，<see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。</exception>
      <exception cref="T:System.InvalidOperationException">对 <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 的前一次调用正在使用流- 或 - 将 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 设置为一个值，且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。- 或 - 线程池中线程即将耗尽。</exception>
      <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，写入数据的请求不得使用缓存。 如果你正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。</exception>
      <exception cref="T:System.ObjectDisposedException">在 .NET Compact Framework 应用程序中，未正确获得和关闭一个内容长度为零的请求流。 有关处理零内容长度的请求的详细信息，请参阅 Network Programming in the .NET Compact Framework。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>开始对 Internet 资源的异步请求。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托 </param>
      <param name="state">此请求的状态对象。</param>
      <returns>引用响应的异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.InvalidOperationException">对 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 的上一个调用已使用该流- 或 - 将 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 设置为一个值，且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。- 或 - 线程池中线程即将耗尽。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 为 GET 或 HEAD，并且 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 大于零或 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 true。- 或 - <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，并且 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1 或者 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，且 <see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。- 或 - <see cref="T:System.Net.HttpWebRequest" /> 具有实体主体，但在不调用 <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 方法的情况下调用了 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 方法。- 或 - <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 大于零，但应用程序不会写入所有承诺的数据。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>结束对用来写入数据的 <see cref="T:System.IO.Stream" /> 对象的异步请求。</summary>
      <param name="asyncResult">对流的挂起请求。</param>
      <returns>用于写入请求数据的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">请求未完成，没有可用的流。</exception>
      <exception cref="T:System.ArgumentException">当前实例没有从对 <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 的调用返回 <paramref name="asyncResult" />。</exception>
      <exception cref="T:System.InvalidOperationException">以前使用 <paramref name="asyncResult" /> 调用过此方法。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。- 或 - 处理请求时出错。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)">
      <summary>结束对用于写入数据的 <see cref="T:System.IO.Stream" /> 对象的异步请求，并输出与该流关联的 <see cref="T:System.Net.TransportContext" />。</summary>
      <param name="asyncResult">对流的挂起请求。</param>
      <param name="context">
        <see cref="T:System.Net.TransportContext" /> 的 <see cref="T:System.IO.Stream" />。</param>
      <returns>用于写入请求数据的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.ArgumentException">当前实例没有从对 <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> 的调用返回 <paramref name="asyncResult" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">以前使用 <paramref name="asyncResult" /> 调用过此方法。</exception>
      <exception cref="T:System.IO.IOException">请求未完成，没有可用的流。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。- 或 - 处理请求时出错。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>结束对 Internet 资源的异步请求。</summary>
      <param name="asyncResult">对响应的挂起请求。</param>
      <returns>包含来自 Internet 资源的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">之前已使用 <paramref name="asyncResult." /> 调用了此方法- 或 - <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 属性大于 0，但数据尚未写入到请求流。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。- 或 - 处理请求时出错。</exception>
      <exception cref="T:System.ArgumentException">当前实例没有从对 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 的调用返回 <paramref name="asyncResult" />。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象时所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream">
      <summary>获取用于写入请求数据的 <see cref="T:System.IO.Stream" /> 对象。</summary>
      <returns>用于写入请求数据的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 属性为 GET 或 HEAD。- 或 - <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，<see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，<see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法被调用多次。- 或 - 将 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 设置为一个值，且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。</exception>
      <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，写入数据的请求不得使用缓存。 如果你正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。- 或 - 请求的超时期限到期。- 或 - 处理请求时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">在 .NET Compact Framework 应用程序中，未正确获得和关闭一个内容长度为零的请求流。 有关处理零内容长度的请求的详细信息，请参阅 Network Programming in the .NET Compact Framework。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)">
      <summary>获取用于写入请求数据的 <see cref="T:System.IO.Stream" /> 对象，并输出与流关联的 <see cref="T:System.Net.TransportContext" />。</summary>
      <param name="context">
        <see cref="T:System.Net.TransportContext" /> 的 <see cref="T:System.IO.Stream" />。</param>
      <returns>用于写入请求数据的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.Exception">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法无法获取 <see cref="T:System.IO.Stream" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法被调用多次。- 或 - 将 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 设置为一个值，且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。</exception>
      <exception cref="T:System.NotSupportedException">请求缓存验证程序指示对此请求的响应可从缓存中提供；但是，写入数据的请求不得使用缓存。 如果你正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 属性为 GET 或 HEAD。- 或 - <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，<see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，<see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。- 或 - 请求的超时期限到期。- 或 - 处理请求时出错。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.GetResponse">
      <summary>返回来自 Internet 资源的响应。</summary>
      <returns>包含来自 Internet 资源的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.InvalidOperationException">该流已由对 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 的上一个调用使用。- 或 - 将 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 设置为一个值，且 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> 为 GET 或 HEAD，且 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 大于或等于零，或 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 true。- 或 - <see cref="P:System.Net.HttpWebRequest.KeepAlive" /> 为 true，<see cref="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering" /> 为 false，<see cref="P:System.Net.HttpWebRequest.ContentLength" /> 为 -1，<see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false，<see cref="P:System.Net.HttpWebRequest.Method" /> 为 POST 或 PUT。- 或 - <see cref="T:System.Net.HttpWebRequest" /> 具有实体主体，但在不调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的情况下调用了 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 方法。- 或 - <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 大于零，但应用程序不会写入所有承诺的数据。</exception>
      <exception cref="T:System.NotSupportedException">请求缓存验证程序表示对此请求的响应可从缓存中提供；但是该请求包含要发送到服务器的数据。 发送数据的请求不可使用缓存。 如果你正在使用错误实现的自定义缓存验证程序，则会发生此异常。</exception>
      <exception cref="T:System.Net.WebException">之前已调用 <see cref="M:System.Net.HttpWebRequest.Abort" />。- 或 - 请求的超时期限到期。- 或 - 处理请求时出错。</exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor">
      <summary>初始化 <see cref="T:System.Net.HttpWebResponse" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.HttpWebResponse" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.HttpWebRequest" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.HttpWebRequest" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.HttpWebResponse.Close">
      <summary>关闭响应流。</summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.HttpWebResponse" /> 使用的非托管资源，并可根据需要释放托管资源。</summary>
      <param name="disposing">如果释放托管资源和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseHeader(System.String)">
      <summary>获取与响应一起返回的标头的内容。</summary>
      <param name="headerName">要返回的标头值。</param>
      <returns>指定的标头的内容。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.GetResponseStream">
      <summary>获取流，该流用于读取来自服务器的响应的体。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" />，包含响应的体。</returns>
      <exception cref="T:System.Net.ProtocolViolationException">没有响应流。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="M:System.Net.HttpWebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。</summary>
      <param name="serializationInfo">此 <see cref="T:System.Net.HttpWebResponse" /> 要序列化到的对象。</param>
      <param name="streamingContext">序列化的目标。</param>
    </member>
    <member name="M:System.Net.IAuthenticationModule.Authenticate(System.String,System.Net.WebRequest,System.Net.ICredentials)">
      <summary>返回的实例 <see cref="T:System.Net.Authorization" /> 以响应来自服务器的身份验证质询的类。</summary>
      <param name="challenge">由服务器发送的身份验证质询。</param>
      <param name="request">
        <see cref="T:System.Net.WebRequest" /> 与质询关联的实例。</param>
      <param name="credentials">与质询关联的凭据。</param>
      <returns>
        <see cref="T:System.Net.Authorization" /> 实例，包含有关该请求的授权消息或 null 如果不能处理这一难题。</returns>
    </member>
    <member name="M:System.Net.IAuthenticationModule.PreAuthenticate(System.Net.WebRequest,System.Net.ICredentials)">
      <summary>返回的实例 <see cref="T:System.Net.Authorization" /> 到服务器的身份验证请求的类。</summary>
      <param name="request">
        <see cref="T:System.Net.WebRequest" /> 与身份验证请求关联的实例。</param>
      <param name="credentials">与身份验证请求关联的凭据。</param>
      <returns>
        <see cref="T:System.Net.Authorization" /> 包含请求的授权消息实例。</returns>
    </member>
    <member name="M:System.Net.ICertificatePolicy.CheckValidationResult(System.Net.ServicePoint,System.Security.Cryptography.X509Certificates.X509Certificate,System.Net.WebRequest,System.Int32)">
      <summary>验证服务器证书。</summary>
      <param name="srvPoint">
        <see cref="T:System.Net.ServicePoint" /> ，将使用该证书。</param>
      <param name="certificate">要验证的证书。</param>
      <param name="request">接收到此证书请求。</param>
      <param name="certificateProblem">使用此证书时遇到问题。</param>
      <returns>true 如果应遵守此证书;否则为 false。</returns>
    </member>
    <member name="M:System.Net.ICredentialPolicy.ShouldSendCredential(System.Uri,System.Net.WebRequest,System.Net.NetworkCredential,System.Net.IAuthenticationModule)">
      <summary>返回 <see cref="T:System.Boolean" /> ，该值指示是否使用的实例所做的资源请求一起发送客户端的凭据 <see cref="T:System.Net.WebRequest" /> 类。</summary>
      <param name="challengeUri">
        <see cref="T:System.Uri" /> 中将接收该请求。 有关详细信息，请参阅“备注”部分。</param>
      <param name="request">
        <see cref="T:System.Net.WebRequest" /> ，表示所请求的资源。</param>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 如果此方法返回时将随请求发送的 true。</param>
      <param name="authenticationModule">
        <see cref="T:System.Net.IAuthenticationModule" /> 将执行身份验证时，如果需要身份验证。</param>
      <returns>true 如果将凭据发送与请求;否则为 false。</returns>
    </member>
    <member name="M:System.Net.ICredentials.GetCredential(System.Uri,System.String)">
      <summary>返回 <see cref="T:System.Net.NetworkCredential" /> 与指定的 URI、 和身份验证类型相关联的对象。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 客户端提供了有关身份验证。</param>
      <param name="authType">身份验证，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性。</param>
      <returns>
        <see cref="T:System.Net.NetworkCredential" /> 与指定的 URI 和身份验证类型相关联; 如果没有凭据，则有 null。</returns>
    </member>
    <member name="M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)">
      <summary>返回指定的主机、 端口和身份验证协议的凭据。</summary>
      <param name="host">对客户端进行身份验证的主机。</param>
      <param name="port">上的端口 <paramref name="host " />客户端与之通信。</param>
      <param name="authenticationType">身份验证协议中。</param>
      <returns>一个 <see cref="T:System.Net.NetworkCredential" /> 为指定的主机、 端口和身份验证协议或 null 是否有任何凭据可用于指定的主机、 端口和身份验证协议。</returns>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Net.IPAddress" /> 类地址指定为 <see cref="T:System.Byte" /> 数组。</summary>
      <param name="address">IP 地址的字节数组值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 包含错误的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Net.IPAddress" /> 类地址指定为 <see cref="T:System.Byte" /> 数组和指定的范围标识符。</summary>
      <param name="address">IP 地址的字节数组值。</param>
      <param name="scopeid">该范围标识符长整型值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 包含错误的 IP 地址。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scopeid" /> &lt; 0 或 <paramref name="scopeid" /> &gt; 0x00000000FFFFFFFF </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Net.IPAddress" /> 类地址指定为 <see cref="T:System.Int64" />。</summary>
      <param name="newAddress">IP 地址长整型值。 例如，值 0x2414188f big endian 格式应该是 IP 地址"143.24.20.36"。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="newAddress" /> &lt; 0 或 <paramref name="newAddress" /> &gt; 0x00000000FFFFFFFF </exception>
    </member>
    <member name="M:System.Net.IPAddress.Equals(System.Object)">
      <summary>比较两个 IP 地址。</summary>
      <param name="comparand">
        <see cref="T:System.Net.IPAddress" /> 实例要与当前实例进行比较。</param>
      <returns>true 如果两个地址相等，则否则为 false。</returns>
    </member>
    <member name="M:System.Net.IPAddress.GetAddressBytes">
      <summary>提供了一份 <see cref="T:System.Net.IPAddress" /> 作为字节数组。</summary>
      <returns>
        <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Net.IPAddress.GetHashCode">
      <summary>返回 IP 地址哈希的值。</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
      <summary>将由主机字节顺序的较短的值转换为网络字节顺序。</summary>
      <param name="host">以主机字节顺序表示要转换的数字。</param>
      <returns>较短的值，以网络字节顺序表示。</returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
      <summary>将由主机字节顺序的整数值转换为网络字节顺序。</summary>
      <param name="host">以主机字节顺序表示要转换的数字。</param>
      <returns>表示以网络字节顺序的整数值。</returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
      <summary>将由主机字节顺序的长整型值转换为网络字节顺序。</summary>
      <param name="host">以主机字节顺序表示要转换的数字。</param>
      <returns>以网络字节顺序表示一个长值。</returns>
    </member>
    <member name="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
      <summary>指示指定的 IP 地址是否对环回地址。</summary>
      <param name="address">IP 地址。</param>
      <returns>true 如果 <paramref name="address" /> 是环回地址; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.IPAddress.MapToIPv4">
      <summary>将 <see cref="T:System.Net.IPAddress" /> 对象映射到 IPv4 地址。</summary>
      <returns>返回 <see cref="T:System.Net.IPAddress" />。IPv4 地址。</returns>
    </member>
    <member name="M:System.Net.IPAddress.MapToIPv6">
      <summary>映射 <see cref="T:System.Net.IPAddress" /> 对象传递给 IPv6 地址。</summary>
      <returns>返回 <see cref="T:System.Net.IPAddress" />。IPv6 地址。</returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
      <summary>将由网络字节顺序的较短的值转换为主机字节顺序。</summary>
      <param name="network">以网络字节顺序表示要转换的数字。</param>
      <returns>较短的值，以主机字节顺序表示。</returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
      <summary>将由网络字节顺序的整数值转换为主机字节顺序。</summary>
      <param name="network">以网络字节顺序表示要转换的数字。</param>
      <returns>以主机字节顺序表示一个整数值。</returns>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
      <summary>将由网络字节顺序的长整型值转换为主机字节顺序。</summary>
      <param name="network">以网络字节顺序表示要转换的数字。</param>
      <returns>表示主机字节顺序的长值。</returns>
    </member>
    <member name="M:System.Net.IPAddress.Parse(System.String)">
      <summary>IP 地址将字符串转换为 <see cref="T:System.Net.IPAddress" /> 实例。</summary>
      <param name="ipString">一个字符串，包含点分隔的四表示法对 IPv4 和 IPv6 冒号十六进制表示法中的 IP 地址。</param>
      <returns>一个 <see cref="T:System.Net.IPAddress" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipString" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="ipString" /> 不是有效的 IP 地址。</exception>
    </member>
    <member name="M:System.Net.IPAddress.ToString">
      <summary>将 Internet 地址转换为其标准表示法。</summary>
      <returns>一个字符串，包含 IP 地址或 IPv6 冒号十六进制表示法中任一 IPv4 以点分隔四。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">地址族是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ，地址是不正确。</exception>
    </member>
    <member name="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
      <summary>确定字符串是否为有效 IP 地址。</summary>
      <param name="ipString">要验证的字符串。</param>
      <param name="address">字符串的 <see cref="T:System.Net.IPAddress" /> 版本。</param>
      <returns>如果 <paramref name="ipString" /> 是有效 IP 地址，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.IPEndPoint" /> 类具有指定的地址和端口号。</summary>
      <param name="address">Internet 主机的 IP 地址。</param>
      <param name="port">与关联的端口号 <paramref name="address" />, ，或为 0 以指定任何可用端口。<paramref name="port" /> 正在主机顺序。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。- 或 - <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。- 或 - <paramref name="address" /> 为小于 0 或大于 0x00000000FFFFFFFF。</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.IPEndPoint" /> 类具有指定的地址和端口号。</summary>
      <param name="address">一个 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">与关联的端口号 <paramref name="address" />, ，或为 0 以指定任何可用端口。<paramref name="port" /> 正在主机顺序。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。- 或 - <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。- 或 - <paramref name="address" /> 为小于 0 或大于 0x00000000FFFFFFFF。</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
      <summary>从套接字地址创建一个终结点。</summary>
      <param name="socketAddress">
        <see cref="T:System.Net.SocketAddress" /> 要用于终结点。</param>
      <returns>
        <see cref="T:System.Net.EndPoint" /> 实例使用指定的套接字地址。</returns>
      <exception cref="T:System.ArgumentException">AddressFamily <paramref name="socketAddress" /> 是否不等于当前实例的 AddressFamily。- 或 - <paramref name="socketAddress" />.大小 &lt; 8。</exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Equals(System.Object)">
      <summary>确定指定的 <see cref="T:System.Object" /> 是否等同于当前的 <see cref="T:System.Object" />。</summary>
      <param name="comparand">要与当前的 <see cref="T:System.Object" /> 进行比较的 <see cref="T:System.Object" />。</param>
      <returns>如果指定的 true 等于当前的 <see cref="T:System.Object" />，则为 <see cref="T:System.Object" />；否则为 false。</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.GetHashCode">
      <summary>返回 <see cref="T:System.Net.IPEndPoint" /> 实例的哈希值。</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Serialize">
      <summary>序列化到的终结点信息 <see cref="T:System.Net.SocketAddress" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Net.SocketAddress" /> 实例，包含终结点的套接字地址。</returns>
    </member>
    <member name="M:System.Net.IPEndPoint.ToString">
      <summary>返回指定的终结点的 IP 地址和端口号。</summary>
      <returns>包含 IP 地址和指定的终结点 (例如，192.168.1.2: 80) 的端口号的字符串。</returns>
    </member>
    <member name="M:System.Net.IPHostEntry.#ctor">
      <summary>初始化 <see cref="T:System.Net.IPHostEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.IWebProxy.GetProxy(System.Uri)">
      <summary>返回的代理的 URI。</summary>
      <param name="destination">一个 <see cref="T:System.Uri" /> ，它指定所请求的 Internet 资源。</param>
      <returns>一个 <see cref="T:System.Uri" /> 实例，它包含用于联系代理服务器的 URI <paramref name="destination" />。</returns>
    </member>
    <member name="M:System.Net.IWebProxy.IsBypassed(System.Uri)">
      <summary>指示指定的主机不使用的代理后应。</summary>
      <param name="host">
        <see cref="T:System.Uri" /> 要检查代理的主机使用。</param>
      <returns>true 如果代理服务器不应该用于 <paramref name="host" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.IWebProxyScript.Close">
      <summary>关闭脚本。</summary>
    </member>
    <member name="M:System.Net.IWebProxyScript.Load(System.Uri,System.String,System.Type)">
      <summary>加载脚本。</summary>
      <param name="scriptLocation">仅供内部使用。</param>
      <param name="script">仅供内部使用。</param>
      <param name="helperType">仅供内部使用。</param>
      <returns>一个 <see cref="T:System.Boolean" /> ，该值指示是否已成功加载脚本。</returns>
    </member>
    <member name="M:System.Net.IWebProxyScript.Run(System.String,System.String)">
      <summary>运行一个脚本。</summary>
      <param name="url">仅供内部使用。</param>
      <param name="host">仅供内部使用。</param>
      <returns>
        <see cref="T:System.String" />。返回一个仅限内部使用的值。</returns>
    </member>
    <member name="M:System.Net.IWebRequestCreate.Create(System.Uri)">
      <summary>创建一个 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <param name="uri">Web 资源的统一资源标识符 (URI)。</param>
      <returns>一个 <see cref="T:System.Net.WebRequest" /> 实例。</returns>
      <exception cref="T:System.NotSupportedException">中指定的请求方案 <paramref name="uri" /> 不支持此 <see cref="T:System.Net.IWebRequestCreate" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。在指定的 URI <paramref name="uri" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.AlternateView" /> 具有指定 <see cref="T:System.IO.Stream" />。</summary>
      <param name="contentStream">包含此视图的内容的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.AlternateView" /> 具有指定 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Net.Mime.ContentType" />。</summary>
      <param name="contentStream">包含此附件的内容的流。</param>
      <param name="contentType">内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.IO.Stream,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.AlternateView" /> 具有指定 <see cref="T:System.IO.Stream" /> 和媒体类型。</summary>
      <param name="contentStream">包含此附件的内容的流。</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.AlternateView" /> 具有指定的文件名。</summary>
      <param name="fileName">包含此可选视图的内容文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误，如磁盘错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">由操作系统为指定的文件句柄，例如写入还是读写访问时不允许请求的访问，并且文件句柄设置为只读访问权限。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.AlternateView" /> 用指定的文件名和内容类型。</summary>
      <param name="fileName">包含此可选视图的内容文件的名称。</param>
      <param name="contentType">内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效的值。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误，如磁盘错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">由操作系统为指定的文件句柄，例如写入还是读写访问时不允许请求的访问，并且文件句柄设置为只读访问权限。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.AlternateView" /> 用指定的文件名称和媒体类型。</summary>
      <param name="fileName">包含此可选视图的内容文件的名称。</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效的值。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.IO.IOException">发生了 I/O 错误，如磁盘错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">由操作系统为指定的文件句柄，例如写入还是读写访问时不允许请求的访问，并且文件句柄设置为只读访问权限。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String)">
      <summary>创建 <see cref="T:System.Net.Mail.AlternateView" /> 电子邮件中指定的内容使用 <see cref="T:System.String" />。</summary>
      <param name="content">
        <see cref="T:System.String" /> ，包含电子邮件的内容。</param>
      <returns>
        <see cref="T:System.Net.Mail.AlternateView" /> 代表了一封电子邮件的替换视图的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Net.Mime.ContentType)">
      <summary>创建 <see cref="T:System.Net.Mail.AlternateView" /> 电子邮件中指定的内容使用 <see cref="T:System.String" /> 和指定的 MIME 媒体类型的内容。</summary>
      <param name="content">一个 <see cref="T:System.String" /> ，包含此附件的内容。</param>
      <param name="contentType">一个 <see cref="T:System.Net.Mime.ContentType" /> 描述中的数据 <paramref name="string" />。</param>
      <returns>
        <see cref="T:System.Net.Mail.AlternateView" /> 代表了一封电子邮件的替换视图的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.CreateAlternateViewFromString(System.String,System.Text.Encoding,System.String)">
      <summary>创建 <see cref="T:System.Net.Mail.AlternateView" /> 电子邮件中指定的内容使用 <see cref="T:System.String" />, ，则指定的文本编码和 MIME 媒体类型的内容。</summary>
      <param name="content">一个 <see cref="T:System.String" /> ，包含此附件的内容。</param>
      <param name="contentEncoding">一个 <see cref="T:System.Text.Encoding" />。 此值可以是 null.</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <returns>
        <see cref="T:System.Net.Mail.AlternateView" /> 代表了一封电子邮件的替换视图的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="content" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AlternateView.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Mail.AlternateView" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Mail.AlternateViewCollection.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.AlternateViewCollection" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.Attachment" /> 用指定的流和内容类型的类。</summary>
      <param name="contentStream">可读 <see cref="T:System.IO.Stream" /> ，包含此附件的内容。</param>
      <param name="contentType">一个 <see cref="T:System.Net.Mime.ContentType" /> 描述中的数据 <paramref name="stream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> 为 null。- 或 -<paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.Attachment" /> 类具有指定的流和名称。</summary>
      <param name="contentStream">可读 <see cref="T:System.IO.Stream" /> ，包含此附件的内容。</param>
      <param name="name">一个 <see cref="T:System.String" /> ，其中包含的值为 <see cref="P:System.Net.Mime.ContentType.Name" /> 属性 <see cref="T:System.Net.Mime.ContentType" /> 与此附件关联。 此值可为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.Attachment" /> 类，具有指定的流、 名称和 MIME 类型信息。</summary>
      <param name="contentStream">可读 <see cref="T:System.IO.Stream" /> ，包含此附件的内容。</param>
      <param name="name">一个 <see cref="T:System.String" /> ，其中包含的值为 <see cref="P:System.Net.Mime.ContentType.Name" /> 属性 <see cref="T:System.Net.Mime.ContentType" /> 与此附件关联。 此值可为 null。</param>
      <param name="mediaType">一个 <see cref="T:System.String" /> ，包含此附件的 MIME 内容标头信息。 此值可为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不在正确的格式。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.Attachment" /> 类，具有指定的内容字符串。</summary>
      <param name="fileName">一个 <see cref="T:System.String" /> ，其中包含要用于创建此附件的文件路径。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> 为空。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.Attachment" /> 类，具有指定的内容字符串和 <see cref="T:System.Net.Mime.ContentType" />。</summary>
      <param name="fileName">一个 <see cref="T:System.String" /> ，其中包含要用于创建此附件的文件路径。</param>
      <param name="contentType">一个 <see cref="T:System.Net.Mime.ContentType" /> 描述中的数据 <paramref name="string" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mediaType" /> 不在正确的格式。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.Attachment" /> 使用指定的内容字符串和 MIME 类型信息的类。</summary>
      <param name="fileName">一个 <see cref="T:System.String" /> ，包含此附件的内容。</param>
      <param name="mediaType">一个 <see cref="T:System.String" /> ，包含此附件的 MIME 内容标头信息。 此值可为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不在正确的格式。</exception>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.Net.Mime.ContentType)">
      <summary>创建使用从指定的字符串，并指定内容邮件附件 <see cref="T:System.Net.Mime.ContentType" />。</summary>
      <param name="content">一个 <see cref="T:System.String" /> ，包含此附件的内容。</param>
      <param name="contentType">一个 <see cref="T:System.Net.Mime.ContentType" /> 对象，表示要使用的多用途 Internet 邮件交换 (MIME) 协议的 Content-type 标头。</param>
      <returns>一个 <see cref="T:System.Net.Mail.Attachment" /> 类型的对象。</returns>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String)">
      <summary>创建一个使用指定的字符串，并指定的 MIME 内容类型名中的内容的邮件附件。</summary>
      <param name="content">一个 <see cref="T:System.String" /> ，包含此附件的内容。</param>
      <param name="name">与此附件关联的内容类型中的 MIME 内容类型名称值。</param>
      <returns>一个 <see cref="T:System.Net.Mail.Attachment" /> 类型的对象。</returns>
    </member>
    <member name="M:System.Net.Mail.Attachment.CreateAttachmentFromString(System.String,System.String,System.Text.Encoding,System.String)">
      <summary>创建邮件附件的附件使用指定的字符串、 指定的 MIME 内容类型名，字符编码和 MIME 标头信息中的内容。</summary>
      <param name="content">一个 <see cref="T:System.String" /> ，包含此附件的内容。</param>
      <param name="name">与此附件关联的内容类型中的 MIME 内容类型名称值。</param>
      <param name="contentEncoding">一个 <see cref="T:System.Text.Encoding" />。 此值可为 null。</param>
      <param name="mediaType">一个 <see cref="T:System.String" /> ，包含此附件的 MIME 内容标头信息。 此值可为 null。</param>
      <returns>一个 <see cref="T:System.Net.Mail.Attachment" /> 类型的对象。</returns>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream)">
      <summary>实例化 <see cref="T:System.Net.Mail.AttachmentBase" /> 具有指定 <see cref="T:System.IO.Stream" />。</summary>
      <param name="contentStream">包含此附件的内容的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>实例化 <see cref="T:System.Net.Mail.AttachmentBase" /> 具有指定 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Net.Mime.ContentType" />。</summary>
      <param name="contentStream">包含此附件的内容的流。</param>
      <param name="contentType">内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.IO.Stream,System.String)">
      <summary>实例化 <see cref="T:System.Net.Mail.AttachmentBase" /> 具有指定 <see cref="T:System.IO.Stream" /> 和媒体类型。</summary>
      <param name="contentStream">包含此附件的内容的流。</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String)">
      <summary>实例化 <see cref="T:System.Net.Mail.AttachmentBase" /> 具有指定的文件名。</summary>
      <param name="fileName">持有此附件的内容文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>实例化 <see cref="T:System.Net.Mail.AttachmentBase" /> 用指定的文件名和内容类型。</summary>
      <param name="fileName">持有此附件的内容文件的名称。</param>
      <param name="contentType">内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.#ctor(System.String,System.String)">
      <summary>实例化 <see cref="T:System.Net.Mail.AttachmentBase" /> 用指定的文件名称和媒体类型。</summary>
      <param name="fileName">持有此附件的内容文件的名称。</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.AttachmentBase" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Net.Mail.AttachmentBase.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Mail.AttachmentBase" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Mail.AttachmentCollection.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.AttachmentCollection" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 使用所提供 <see cref="T:System.IO.Stream" />。</summary>
      <param name="contentStream">包含此嵌入资源的内容的流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.Net.Mime.ContentType)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 提供的值与 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Net.Mime.ContentType" />。</summary>
      <param name="contentStream">包含此嵌入资源的内容的流。</param>
      <param name="contentType">内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.IO.Stream,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 具有指定 <see cref="T:System.IO.Stream" /> 和媒体类型。</summary>
      <param name="contentStream">包含此嵌入资源的内容的流。</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentStream" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 使用指定的文件名。</summary>
      <param name="fileName">持有此嵌入资源的内容文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String,System.Net.Mime.ContentType)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 用指定的文件名和内容类型。</summary>
      <param name="fileName">包含此嵌入资源的内容的文件名。</param>
      <param name="contentType">内容类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.LinkedResource" /> 用指定的文件名称和媒体类型。</summary>
      <param name="fileName">包含此嵌入资源的内容的文件名。</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="mediaType" /> 不是有效的值。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String)">
      <summary>创建 <see cref="T:System.Net.Mail.LinkedResource" /> 中要包括在电子邮件附件作为嵌入资源的字符串对象。 默认媒体类型是纯文本和默认内容类型是 ASCII。</summary>
      <param name="content">一个包含嵌入的资源包括在电子邮件附件中的字符串。</param>
      <returns>一个 <see cref="T:System.Net.Mail.LinkedResource" /> 对象，其中包含要包含在电子邮件附件中的嵌入的资源。</returns>
      <exception cref="T:System.ArgumentNullException">指定的内容字符串为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Net.Mime.ContentType)">
      <summary>创建 <see cref="T:System.Net.Mail.LinkedResource" /> 中要包括在电子邮件附件作为嵌入资源，使用指定的内容类型和媒体类型为纯文本的字符串对象。</summary>
      <param name="content">一个包含嵌入的资源包括在电子邮件附件中的字符串。</param>
      <param name="contentType">内容类型。</param>
      <returns>一个 <see cref="T:System.Net.Mail.LinkedResource" /> 对象，其中包含要包含在电子邮件附件中的嵌入的资源。</returns>
      <exception cref="T:System.ArgumentNullException">指定的内容字符串为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResource.CreateLinkedResourceFromString(System.String,System.Text.Encoding,System.String)">
      <summary>创建 <see cref="T:System.Net.Mail.LinkedResource" /> 中要包括在电子邮件附件作为嵌入资源，使用指定的内容类型和媒体类型的字符串对象。</summary>
      <param name="content">一个包含嵌入的资源包括在电子邮件附件中的字符串。</param>
      <param name="contentEncoding">内容类型。</param>
      <param name="mediaType">MIME 媒体类型的内容。</param>
      <returns>一个 <see cref="T:System.Net.Mail.LinkedResource" /> 对象，其中包含要包含在电子邮件附件中的嵌入的资源。</returns>
      <exception cref="T:System.ArgumentNullException">指定的内容字符串为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.LinkedResourceCollection.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.LinkedResourceCollection" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String)">
      <summary>使用指定的地址序列化 <see cref="T:System.Net.Mail.MailAddress" /> 类的新实例。</summary>
      <param name="address">一个 <see cref="T:System.String" />，它包含一个电子邮件地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 的格式无法识别。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String,System.String)">
      <summary>使用指定的地址和显示名称序列化 <see cref="T:System.Net.Mail.MailAddress" /> 类的新实例。</summary>
      <param name="address">一个 <see cref="T:System.String" />，它包含一个电子邮件地址。</param>
      <param name="displayName">一个 <see cref="T:System.String" />，它包含与 <paramref name="address" /> 相关联的显示名称。 此参数可以为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 的格式无法识别。- 或 -<paramref name="address" /> 包含非 ASCII 字符。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddress.#ctor(System.String,System.String,System.Text.Encoding)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.MailAddress" /> 类使用指定的地址、 显示名称和编码。</summary>
      <param name="address">一个 <see cref="T:System.String" /> ，其中包含的电子邮件地址。</param>
      <param name="displayName">一个 <see cref="T:System.String" /> ，其中包含与关联的显示名称 <paramref name="address" />。</param>
      <param name="displayNameEncoding">
        <see cref="T:System.Text.Encoding" /> ，它定义为使用的字符集 <paramref name="displayName" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="displayName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> is <see cref="F:System.String.Empty" /> ("").- 或 -<paramref name="displayName" /> is <see cref="F:System.String.Empty" /> ("").</exception>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 不识别的格式。- 或 -<paramref name="address" /> 包含非 ASCII 字符。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddress.Equals(System.Object)">
      <summary>比较两个邮件地址。</summary>
      <param name="value">一个 <see cref="T:System.Net.Mail.MailAddress" /> 实例要与当前实例进行比较。</param>
      <returns>true 如果两个邮件地址相等，则否则为 false。</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddress.GetHashCode">
      <summary>返回邮件地址哈希的值。</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddress.ToString">
      <summary>返回此实例的字符串表示。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含此内容 <see cref="T:System.Net.Mail.MailAddress" />。</returns>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.MailAddressCollection" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.Add(System.String)">
      <summary>向集合添加的电子邮件地址的列表。</summary>
      <param name="addresses">电子邮件地址将添加到 <see cref="T:System.Net.Mail.MailAddressCollection" />。 必须用逗号字符分隔多个电子邮件地址 （"，"）。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" addresses" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name=" addresses" /> 参数为空字符串。</exception>
      <exception cref="T:System.FormatException">
        <paramref name=" addresses" /> 参数包含无效或不受支持的电子邮件地址。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.InsertItem(System.Int32,System.Net.Mail.MailAddress)">
      <summary>将插入到电子邮件地址 <see cref="T:System.Net.Mail.MailAddressCollection" />, 中的指定位置。</summary>
      <param name="index">通过指定要插入的电子邮件地址的位置 <paramref name="item" />。</param>
      <param name="item">要插入到集合中的电子邮件地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" item" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.SetItem(System.Int32,System.Net.Mail.MailAddress)">
      <summary>替换指定索引处的元素。</summary>
      <param name="index">要替换的电子邮件地址元素的索引。</param>
      <param name="item">要替换的元素在集合中的电子邮件地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name=" item" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.MailAddressCollection.ToString">
      <summary>在此返回的字符串表示形式的电子邮件地址 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含此集合中的电子邮件地址。</returns>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.Net.Mail.MailAddress,System.Net.Mail.MailAddress)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.MailMessage" /> 使用指定的类 <see cref="T:System.Net.Mail.MailAddress" /> 类对象。</summary>
      <param name="from">一个 <see cref="T:System.Net.Mail.MailAddress" /> 包含电子邮件的发件人的地址。</param>
      <param name="to">一个 <see cref="T:System.Net.Mail.MailAddress" /> ，其中包含的收件人的电子邮件地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="to" /> 为 null。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="from" /> 或 <paramref name="to" /> 格式不正确。</exception>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.MailMessage" /> 使用指定的类 <see cref="T:System.String" /> 类对象。</summary>
      <param name="from">一个 <see cref="T:System.String" /> 包含电子邮件的发件人的地址。</param>
      <param name="to">一个 <see cref="T:System.String" /> ，其中包含的电子邮件的收件人的地址。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="to" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> is <see cref="F:System.String.Empty" /> ("").- 或 -<paramref name="to" /> is <see cref="F:System.String.Empty" /> ("").</exception>
      <exception cref="T:System.FormatException">
        <paramref name="from" /> 或 <paramref name="to" /> 格式不正确。</exception>
    </member>
    <member name="M:System.Net.Mail.MailMessage.#ctor(System.String,System.String,System.String,System.String)">
      <summary>初始化 <see cref="T:System.Net.Mail.MailMessage" /> 类的新实例。</summary>
      <param name="from">一个 <see cref="T:System.String" /> 包含电子邮件的发件人的地址。</param>
      <param name="to">一个 <see cref="T:System.String" /> ，其中包含的收件人的电子邮件地址。</param>
      <param name="subject">一个 <see cref="T:System.String" /> ，其中包含的主题文本。</param>
      <param name="body">一个 <see cref="T:System.String" /> ，其中包含消息正文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="to" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> is <see cref="F:System.String.Empty" /> ("").- 或 -<paramref name="to" /> is <see cref="F:System.String.Empty" /> ("").</exception>
      <exception cref="T:System.FormatException">
        <paramref name="from" /> 或 <paramref name="to" /> 格式不正确。</exception>
    </member>
    <member name="M:System.Net.Mail.MailMessage.Dispose">
      <summary>释放由 <see cref="T:System.Net.Mail.MailMessage" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.Mail.MailMessage.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Mail.MailMessage" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpClient" /> 类通过使用配置文件设置。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpClient" /> 通过使用指定的 SMTP 服务器发送电子邮件的类。</summary>
      <param name="host">一个 <see cref="T:System.String" /> ，其中包含名称或用于 SMTP 事务的宿主计算机的 IP 地址。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpClient" /> 通过使用指定的 SMTP 服务器和端口来发送电子邮件的类。</summary>
      <param name="host">一个 <see cref="T:System.String" /> ，其中包含名称或 SMTP 交易记录所用的主机的 IP 地址。</param>
      <param name="port">
        <see cref="T:System.Int32" /> 大于零，其中包含要在上使用的端口 <paramref name="host" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不能小于零。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Dispose">
      <summary>将一条 QUIT 消息发送到 SMTP 服务器、 正常结束 TCP 连接，并释放所有资源的当前实例所使用的 <see cref="T:System.Net.Mail.SmtpClient" /> 类。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Dispose(System.Boolean)">
      <summary>将一条 QUIT 消息发送到 SMTP 服务器、 正常结束 TCP 连接时，释放使用的当前实例的所有资源 <see cref="T:System.Net.Mail.SmtpClient" /> 类，并可根据需要释放托管资源。</summary>
      <param name="disposing">如果释放托管资源和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.OnSendCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> 事件。</summary>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Send(System.Net.Mail.MailMessage)">
      <summary>将指定的消息发送到 SMTP 服务器以进行传递。</summary>
      <param name="message">一个 <see cref="T:System.Net.Mail.MailMessage" /> ，其中包含要发送的消息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.Mail.SmtpClient" /> 具有 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 - <see cref="P:System.Net.Mail.MailMessage.From" /> 为 null。- 或 - 没有中指定的收件人 <see cref="P:System.Net.Mail.MailMessage.To" />, ，<see cref="P:System.Net.Mail.MailMessage.CC" />, ，和 <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 属性。- 或 - <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 是 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 等于空字符串 ("")。- 或 - <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Port" /> 为零，负数或大于 65535。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">SMTP 服务器的连接失败。- 或 -身份验证失败。- 或 -该操作已超时。- 或 -<see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true 但 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> 或 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />。- 或 -<see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true, 但 SMTP 邮件服务器未将其宣传 STARTTLS EHLO 命令的响应中。</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">
        <paramref name="message" /> 无法传递到一个或多个中的收件人才 <see cref="P:System.Net.Mail.MailMessage.To" />, ，<see cref="P:System.Net.Mail.MailMessage.CC" />, ，或 <see cref="P:System.Net.Mail.MailMessage.Bcc" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.Send(System.String,System.String,System.String,System.String)">
      <summary>将指定的电子邮件发送到 SMTP 服务器以进行传递。 邮件发件人、 收件人、 主题和消息正文使用指定 <see cref="T:System.String" /> 对象。</summary>
      <param name="from">一个 <see cref="T:System.String" /> 包含邮件发件人的地址信息。</param>
      <param name="recipients">一个 <see cref="T:System.String" /> ，其中包含消息发送到的地址。</param>
      <param name="subject">一个 <see cref="T:System.String" /> ，其中包含消息的主题行。</param>
      <param name="body">一个 <see cref="T:System.String" /> ，其中包含消息正文。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="recipients" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 为 <see cref="F:System.String.Empty" />。- 或 -<paramref name="recipients" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.Mail.SmtpClient" /> 具有 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 -<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 是 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 等于空字符串 ("")。- 或 - <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Port" /> 为零，负数或大于 65535。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">SMTP 服务器的连接失败。- 或 -身份验证失败。- 或 -该操作已超时。- 或 - <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true 但 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> 或 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />。- 或 -<see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true, 但 SMTP 邮件服务器未将其宣传 STARTTLS EHLO 命令的响应中。</exception>
      <exception cref="T:System.Net.Mail.SmtpFailedRecipientsException">该邮件无法传递到一个或多个中的收件人才 <paramref name="recipients" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsync(System.Net.Mail.MailMessage,System.Object)">
      <summary>将指定的电子邮件发送到 SMTP 服务器以进行传递。 此方法不会阻止调用线程，并允许调用方将对象传递给该操作完成时调用的方法。</summary>
      <param name="message">一个 <see cref="T:System.Net.Mail.MailMessage" /> ，其中包含要发送的消息。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。- 或 -<see cref="P:System.Net.Mail.MailMessage.From" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.Mail.SmtpClient" /> 具有 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 - 没有中指定的收件人 <see cref="P:System.Net.Mail.MailMessage.To" />, ，<see cref="P:System.Net.Mail.MailMessage.CC" />, ，和 <see cref="P:System.Net.Mail.MailMessage.Bcc" /> 属性。- 或 - <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 是 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 等于空字符串 ("")。- 或 - <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Port" /> 为零，负数或大于 65535。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">SMTP 服务器的连接失败。- 或 -身份验证失败。- 或 -该操作已超时。- 或 - <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true 但 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> 或 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />。- 或 -<see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true, 但 SMTP 邮件服务器未将其宣传 STARTTLS EHLO 命令的响应中。- 或 -<paramref name="message" /> 无法传递到一个或多个中的收件人才 <see cref="P:System.Net.Mail.MailMessage.To" />, ，<see cref="P:System.Net.Mail.MailMessage.CC" />, ，或 <see cref="P:System.Net.Mail.MailMessage.Bcc" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsync(System.String,System.String,System.String,System.String,System.Object)">
      <summary>将一封电子邮件发送到 SMTP 服务器以进行传递。 邮件发件人、 收件人、 主题和消息正文使用指定 <see cref="T:System.String" /> 对象。 此方法不会阻止调用线程，并允许调用方将对象传递给该操作完成时调用的方法。</summary>
      <param name="from">一个 <see cref="T:System.String" /> 包含邮件发件人的地址信息。</param>
      <param name="recipients">一个 <see cref="T:System.String" /> 包含消息发送到的地址。</param>
      <param name="subject">一个 <see cref="T:System.String" /> ，其中包含消息的主题行。</param>
      <param name="body">一个 <see cref="T:System.String" /> ，其中包含消息正文。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="recipient" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 为 <see cref="F:System.String.Empty" />。- 或 -<paramref name="recipient" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.Mail.SmtpClient" /> 具有 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 调用正在进行。- 或 - <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 是 null。- 或 -<see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 等于空字符串 ("")。- 或 - <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" /> 和 <see cref="P:System.Net.Mail.SmtpClient.Port" /> 为零，负数或大于 65535。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.Net.Mail.SmtpException">SMTP 服务器的连接失败。- 或 -身份验证失败。- 或 -该操作已超时。- 或 - <see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true 但 <see cref="P:System.Net.Mail.SmtpClient.DeliveryMethod" /> 属性设置为 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory" /> 或 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis" />。- 或 -<see cref="P:System.Net.Mail.SmtpClient.EnableSsl" /> 设置为 true, 但 SMTP 邮件服务器未将其宣传 STARTTLS EHLO 命令的响应中。- 或 -该邮件无法传递到一个或多个中的收件人才 <paramref name="recipients" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendAsyncCancel">
      <summary>取消异步操作以发送电子邮件。</summary>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendMailAsync(System.Net.Mail.MailMessage)">
      <summary>将指定的消息发送到 SMTP 服务器以进行异步操作的形式传递。</summary>
      <param name="message">一个 <see cref="T:System.Net.Mail.MailMessage" /> ，其中包含要发送的消息。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="message" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpClient.SendMailAsync(System.String,System.String,System.String,System.String)">
      <summary>将指定的消息发送到 SMTP 服务器以进行异步操作的形式传递。 。 邮件发件人、 收件人、 主题和消息正文使用指定 <see cref="T:System.String" /> 对象。</summary>
      <param name="from">一个 <see cref="T:System.String" /> 包含邮件发件人的地址信息。</param>
      <param name="recipients">一个 <see cref="T:System.String" /> ，其中包含消息发送到的地址。</param>
      <param name="subject">一个 <see cref="T:System.String" /> ，其中包含消息的主题行。</param>
      <param name="body">一个 <see cref="T:System.String" /> ，其中包含消息正文。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="from" /> 为 null。- 或 -<paramref name="recipients" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="from" /> 为 <see cref="F:System.String.Empty" />。- 或 -<paramref name="recipients" /> 为 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类替换为指定的状态代码。</summary>
      <param name="statusCode">一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类，具有指定的状态代码和错误消息。</summary>
      <param name="statusCode">一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。</param>
      <param name="message">一个 <see cref="T:System.String" /> ，描述发生的错误。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.Mail.SmtpException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.Mail.SmtpException" /> 所需的信息。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> ，其中包含的源和目标的新实例相关联的序列化流。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> ，描述发生的错误。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> ，描述发生的错误。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.Mail.SmtpException" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.Mail.SmtpException" />。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含 <see cref="T:System.Net.Mail.SmtpException" /> 的序列化数据。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.Mail.SmtpException" /> 关联的序列化流的目标。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类，具有指定的状态代码和电子邮件地址。</summary>
      <param name="statusCode">一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。</param>
      <param name="failedRecipient">一个 <see cref="T:System.String" /> ，其中包含的电子邮件地址。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Net.Mail.SmtpStatusCode,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 用指定的状态代码、 电子邮件地址和服务器响应。</summary>
      <param name="statusCode">一个 <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值。</param>
      <param name="failedRecipient">一个 <see cref="T:System.String" /> ，其中包含的电子邮件地址。</param>
      <param name="serverResponse">一个 <see cref="T:System.String" /> ，其中包含服务器的响应。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 所需的信息。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> ，其中包含的源和新的实例相关联的序列化流的目标。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> ，其中包含错误消息。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和内部异常初始化 <see cref="T:System.Net.Mail.SmtpException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> ，描述发生的错误。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.#ctor(System.String,System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpException" /> 用指定的错误消息、 电子邮件地址和内部异常。</summary>
      <param name="message">一个 <see cref="T:System.String" /> ，描述发生的错误。</param>
      <param name="failedRecipient">一个 <see cref="T:System.String" /> ，其中包含的电子邮件地址。</param>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" />。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，它包含序列化的数据 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" />。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例，它包含与新关联的序列化流的目标 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" />。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，它包含序列化新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 实例关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String)">
      <summary>使用指定的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 初始化 <see cref="T:System.String" /> 类的新实例。</summary>
      <param name="message">异常消息。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类与指定 <see cref="T:System.String" /> 和内部 <see cref="T:System.Exception" />。</summary>
      <param name="message">异常消息。</param>
      <param name="innerException">内部异常。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.#ctor(System.String,System.Net.Mail.SmtpFailedRecipientException[])">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类与指定 <see cref="T:System.String" /> 和类型的数组 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" />。</summary>
      <param name="message">异常消息。</param>
      <param name="innerExceptions">传递错误与收件人的数组。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" />。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要使用。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 要使用。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpFailedRecipientsException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.Mail.SmtpFailedRecipientsException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类使用指定的状态。</summary>
      <param name="unrestricted">true 如果新的权限不受限制;否则为 false。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Net.Mail.SmtpAccess)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类使用指定的访问级别。</summary>
      <param name="access">
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Net.Mail.SmtpPermission" /> 类使用指定的权限状态的值。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.AddPermission(System.Net.Mail.SmtpAccess)">
      <summary>将指定的访问级别值添加到该权限。</summary>
      <param name="access">
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpPermission" /> ，等同于当前的权限。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.FromXml(System.Security.SecurityElement)">
      <summary>设置使用指定的 XML 编码的权限的状态。</summary>
      <param name="securityElement">XML 编码要用于设置的当前权限状态。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 未介绍 <see cref="T:System.Net.Mail.SmtpPermission" /> 对象。- 或 -<paramref name="securityElement" /> 不包含所需的状态信息，以重新构造权限。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" /> 要与当前的权限。 它必须与当前权限属于同一类型。</param>
      <returns>
        <see cref="T:System.Net.Mail.SmtpPermission" /> ，它表示当前的权限和指定的权限的交集。 返回 null 如果交集为空或 <paramref name="target" /> 是 null。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前的权限是否为指定权限的子集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" /> 这是要用于测试子集关系。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.ToXml">
      <summary>创建权限状态的 XML 编码。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> ，其中包含当前权限的 XML 编码。</returns>
    </member>
    <member name="M:System.Net.Mail.SmtpPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" /> 要与当前权限组合。</param>
      <returns>一个新 <see cref="T:System.Net.Mail.SmtpPermission" /> 表示当前的权限和指定的权限的并集的权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Mail.SmtpPermission" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Net.Mail.SmtpPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">其中一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 值，该值指定的权限行为。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效 <see cref="T:System.Security.Permissions.SecurityAction" />。</exception>
    </member>
    <member name="M:System.Net.Mail.SmtpPermissionAttribute.CreatePermission">
      <summary>创建将与存储一个权限对象 <see cref="T:System.Security.Permissions.SecurityAction" /> 程序集的元数据中。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.SmtpPermission" /> 实例。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.#ctor">
      <summary>新实例初始化 <see cref="T:System.Net.Mime.ContentDisposition" /> 类 <see cref="P:System.Net.Mime.ContentDisposition.DispositionType" /> 的 <see cref="F:System.Net.Mime.DispositionTypeNames.Attachment" />。</summary>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Mime.ContentDisposition" /> 类，具有指定的处置信息。</summary>
      <param name="disposition">一个 <see cref="T:System.Net.Mime.DispositionTypeNames" /> 值，该值包含该部署。</param>
      <exception cref="T:System.FormatException">
        <paramref name="disposition" /> 是 null 或等于 <see cref="F:System.String.Empty" /> ("")。</exception>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.Equals(System.Object)">
      <summary>确定是否指定的 content-disposition 标头 <see cref="T:System.Net.Mime.ContentDisposition" /> 对象是否等于此对象的 content-disposition 标头。</summary>
      <param name="rparam">
        <see cref="T:System.Net.Mime.ContentDisposition" /> 对象与此对象进行比较。</param>
      <returns>true 如果的 content-disposition 标头相同;否则为 false。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.GetHashCode">
      <summary>确定指定的哈希代码 <see cref="T:System.Net.Mime.ContentDisposition" /> 对象</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentDisposition.ToString">
      <summary>返回 <see cref="T:System.String" /> 此实例表示形式。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含此实例的属性值。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.#ctor">
      <summary>初始化 <see cref="T:System.Net.Mime.ContentType" /> 类的新默认实例。</summary>
    </member>
    <member name="M:System.Net.Mime.ContentType.#ctor(System.String)">
      <summary>使用指定的字符串初始化 <see cref="T:System.Net.Mime.ContentType" /> 类的新实例。</summary>
      <param name="contentType">一个 <see cref="T:System.String" />，例如，包含 MIME 媒体类型、子类型和可选参数的 "text/plain; charset=us-ascii"。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contentType" /> 为 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">
        <paramref name="contentType" /> 所用的形式无法进行分析。</exception>
    </member>
    <member name="M:System.Net.Mime.ContentType.Equals(System.Object)">
      <summary>确定是否指定的 content-type 标头 <see cref="T:System.Net.Mime.ContentType" /> 对象是否等于此对象的内容类型标头。</summary>
      <param name="rparam">
        <see cref="T:System.Net.Mime.ContentType" /> 对象与此对象进行比较。</param>
      <returns>true 如果内容类型标头相同;否则为 false。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.GetHashCode">
      <summary>确定指定的哈希代码 <see cref="T:System.Net.Mime.ContentType" /> 对象</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="M:System.Net.Mime.ContentType.ToString">
      <summary>返回此 <see cref="T:System.Net.Mime.ContentType" /> 对象的字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" /> ，包含对此的当前设置 <see cref="T:System.Net.Mime.ContentType" />。</returns>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkCredential" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.Security.SecureString)">
      <summary>新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名和密码。</summary>
      <param name="userName">与凭据关联的用户名。</param>
      <param name="password">与凭据关联的用户名密码。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.SecureString" /> 此平台上不支持类。</exception>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.Security.SecureString,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名、 密码和域。</summary>
      <param name="userName">与凭据关联的用户名。</param>
      <param name="password">与凭据关联的用户名密码。</param>
      <param name="domain">这些凭据与关联的域。</param>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.SecureString" /> 此平台上不支持类。</exception>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名和密码。</summary>
      <param name="userName">与凭据关联的用户名。</param>
      <param name="password">与凭据关联的用户名密码。</param>
    </member>
    <member name="M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.NetworkCredential" /> 类，具有指定的用户名、 密码和域。</summary>
      <param name="userName">与凭据关联的用户名。</param>
      <param name="password">与凭据关联的用户名密码。</param>
      <param name="domain">这些凭据与关联的域。</param>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)">
      <summary>返回的实例 <see cref="T:System.Net.NetworkCredential" /> 类指定的主机、 端口和身份验证类型。</summary>
      <param name="host">对客户端进行身份验证的主机。</param>
      <param name="port">上的端口 <paramref name="host" /> 客户端与之通信。</param>
      <param name="authenticationType">身份验证请求，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性。</param>
      <returns>一个 <see cref="T:System.Net.NetworkCredential" /> 为指定的主机、 端口和身份验证协议或 null 是否有任何凭据可用于指定的主机、 端口和身份验证协议。</returns>
    </member>
    <member name="M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)">
      <summary>返回的实例 <see cref="T:System.Net.NetworkCredential" /> 指定的统一资源标识符 (URI) 和身份验证类型的类。</summary>
      <param name="uri">客户端提供的身份验证的 URI。</param>
      <param name="authType">身份验证请求，如中所定义的类型 <see cref="P:System.Net.IAuthenticationModule.AuthenticationType" /> 属性。</param>
      <returns>一个 <see cref="T:System.Net.NetworkCredential" /> 对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformation.#ctor">
      <summary>初始化此类的成员。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Add(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
      <param name="address">要添加到集合的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Clear">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Contains(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>检查集合是否包含指定 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 对象。</summary>
      <param name="address">
        <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 要在集合中搜索对象。</param>
      <returns>true 如果 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 对象存在于集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.GatewayIPAddressInformation[],System.Int32)">
      <summary>将元素复制到一维数组类型的此集合中 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" />。</summary>
      <param name="array">一维数组，用于接收集合的副本。</param>
      <param name="offset">中的从零开始索引 <paramref name="array" /> 处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 在此元素的数目 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 大于从的可用空间 <paramref name="count" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">在此元素 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Remove(System.Net.NetworkInformation.GatewayIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
      <param name="address">要删除的对象。</param>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IcmpV4Statistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IcmpV4Statistics" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IcmpV6Statistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IcmpV6Statistics" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Add(System.Net.IPAddress)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
      <param name="address">要添加到集合的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Clear">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Contains(System.Net.IPAddress)">
      <summary>检查集合是否包含指定 <see cref="T:System.Net.IPAddress" /> 对象。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 要在集合中搜索对象。</param>
      <returns>true 如果 <see cref="T:System.Net.IPAddress" /> 对象存在于集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.CopyTo(System.Net.IPAddress[],System.Int32)">
      <summary>将元素复制到一维数组类型的此集合中 <see cref="T:System.Net.IPAddress" />。</summary>
      <param name="array">一维数组，用于接收集合的副本。</param>
      <param name="offset">中的从零开始索引 <paramref name="array" /> 处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 在此元素的数目 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 大于从的可用空间 <paramref name="offset" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">在此元素 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.Remove(System.Net.IPAddress)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
      <param name="address">要删除的对象。</param>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Add(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
      <param name="address">要添加到集合的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Clear">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Contains(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>检查集合是否包含指定 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 对象。</summary>
      <param name="address">
        <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 要在集合中搜索对象。</param>
      <returns>true 如果 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 对象存在于集合; 否则为。false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.IPAddressInformation[],System.Int32)">
      <summary>将集合复制到指定的数组。</summary>
      <param name="array">一维数组，用于接收集合的副本。</param>
      <param name="offset">中的从零开始索引 <paramref name="array" /> 处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 在此元素的数目 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 大于从的可用空间 <paramref name="offset" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">在此元素 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.Remove(System.Net.NetworkInformation.IPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
      <param name="address">要删除的对象。</param>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPGlobalProperties" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)">
      <summary>开始一个异步请求来检索本地计算机上的稳定的单播 IP 地址表。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.NotImplementedException">未在平台上实现此方法。 此方法使用本机 NotifyStableUnicastIpAddressTable Windows Vista 和更高版本支持的函数。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">调用本机 NotifyStableUnicastIpAddressTable 函数失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)">
      <summary>结束挂起的异步请求来检索本地计算机上的稳定的单播 IP 地址表。</summary>
      <param name="asyncResult">引用该异步请求的 <see cref="T:System.IAsyncResult" />。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 用于存储状态信息和对此异步操作的任何用户定义数据。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用本机 GetAdaptersAddresses 函数失败。</exception>
      <exception cref="T:System.NotImplementedException">未在平台上实现此方法。 此方法使用本机 NotifyStableUnicastIpAddressTable Windows Vista 和更高版本支持的函数。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有必要 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Read" /> 权限。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpConnections">
      <summary>返回本地计算机上的信息的 Internet 协议版本 4 (IPv4) 和 IPv6 传输控制协议 (TCP) 连接。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.TcpConnectionInformation" /> 数组，其中包含的对象; 如果检测到没有活动的 TCP 连接的描述活动的 TCP 连接，则为空数组。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetTcpTable 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveTcpListeners">
      <summary>返回本地计算机上的终结点信息有关的 Internet 协议版本 4 (IPv4) 和 IPv6 传输控制协议 (TCP) 侦听器。</summary>
      <returns>一个 <see cref="T:System.Net.IPEndPoint" /> 数组，其中包含对象，用于描述活动的 TCP 侦听器，则为空数组，如果检测到没有活动的 TCP 侦听器。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetTcpTable 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetActiveUdpListeners">
      <summary>返回本地计算机上的信息的 Internet 协议版本 4 (IPv4) 和 IPv6 用户数据报协议 (UDP) 侦听器。</summary>
      <returns>
        <see cref="T:System.Net.IPEndPoint" /> 数组，其中包含的对象; 如果没有 UDP 侦听器检测到描述 UDP 侦听器，则为空数组。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">对 Win32 函数的调用 GetUdpTable 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV4Statistics">
      <summary>为本地计算机提供 Internet 控制消息协议 (ICMP) 版本 4 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IcmpV4Statistics" /> 提供本地计算机的 ICMP 版本 4 通信统计数据的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetIcmpStatistics 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIcmpV6Statistics">
      <summary>为本地计算机提供 Internet 控制消息协议 (ICMP) 版本 6 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IcmpV6Statistics" /> 提供本地计算机的 ICMP 版本 6 通信统计数据的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数 GetIcmpStatisticsEx 失败。</exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机的操作系统不是 Windows XP 或更高版本。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties">
      <summary>获取一个对象，提供有关本地计算机的网络连接和通信统计信息的信息。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.IPGlobalProperties" /> 对象，其中包含有关本地计算机的信息。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv4GlobalStatistics">
      <summary>提供有关本地计算机的 Internet 协议版本 4 (IPv4) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 提供本地计算机的 IPv4 流量统计信息的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">对 Win32 函数的调用 GetIpStatistics 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPv6GlobalStatistics">
      <summary>提供有关本地计算机的 Internet 协议版本 6 (IPv6) 统计数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 提供本地计算机的 IPv6 流量统计信息的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">对 Win32 函数的调用 GetIpStatistics 失败。</exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机未运行操作系统支持 IPv6。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv4Statistics">
      <summary>提供有关本地计算机的传输控制协议 /internet 协议版本 4 (TCP/IPv4) 统计数据。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.TcpStatistics" /> 提供本地计算机的 TCP/IPv4 流量统计信息的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">对 Win32 函数的调用 GetTcpStatistics 失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetTcpIPv6Statistics">
      <summary>提供有关本地计算机的传输控制协议 /internet 协议版本 6 (TCP/IPv6) 统计数据。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.TcpStatistics" /> 提供本地计算机的 TCP/IPv6 流量统计信息的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">对 Win32 函数的调用 GetTcpStatistics 失败。</exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机未运行操作系统支持 IPv6。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv4Statistics">
      <summary>提供有关本地计算机的用户数据报协议或 Internet 协议版本 4 (UDP/IPv4) 统计数据。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.UdpStatistics" /> 提供本地计算机的 UDP/IPv4 流量统计信息的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">对 Win32 函数 GetUdpStatistics 的调用失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUdpIPv6Statistics">
      <summary>提供有关本地计算机的用户数据报协议或 Internet 协议版本 6 (UDP/IPv6) 统计数据。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.UdpStatistics" /> 提供本地计算机的 UDP/IPv6 流量统计信息的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">对 Win32 函数的调用 GetUdpStatistics 失败。</exception>
      <exception cref="T:System.PlatformNotSupportedException">本地计算机未运行操作系统支持 IPv6。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses">
      <summary>检索本地计算机上的稳定的单播 IP 地址表。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> ，包含稳定的本地计算机上的单播 IP 地址的列表。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用本机 GetAdaptersAddresses 函数失败。</exception>
      <exception cref="T:System.NotImplementedException">未在平台上实现此方法。 此方法使用本机 NotifyStableUnicastIpAddressTable Windows Vista 和更高版本支持的函数。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有必要 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Read" /> 权限。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">调用本机 NotifyStableUnicastIpAddressTable 函数失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddressesAsync">
      <summary>检索本地计算机上的稳定的单播 IP 地址表作为异步操作。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">调用本机 GetAdaptersAddresses 函数失败。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有必要 <see cref="F:System.Net.NetworkInformation.NetworkInformationAccess.Read" /> 权限。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">调用本机 NotifyStableUnicastIpAddressTable 函数失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPGlobalStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPInterfaceProperties" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties">
      <summary>为该网络接口提供 Internet 协议版本 4 (IPv4) 配置数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" /> 对象，它包含 IPv4 配置数据，或 null 如果没有数据可用的接口。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">接口不支持 IPv4 协议。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties">
      <summary>为该网络接口提供 Internet 协议版本 6 (IPv6) 配置数据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPv6InterfaceProperties" /> 包含 IPv6 配置数据的对象。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">接口不支持 IPv6 协议。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.IPInterfaceStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPInterfaceStatistics" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv4InterfaceProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPv4InterfaceProperties" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv4InterfaceStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPv4InterfaceStatistics" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv6InterfaceProperties.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.IPv6InterfaceProperties" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.IPv6InterfaceProperties.GetScopeId(System.Net.NetworkInformation.ScopeLevel)">
      <summary>获取作用域 ID 与 Internet 协议版本 6 (IPv6) 相关联的网络接口地址。</summary>
      <param name="scopeLevel">作用域级别。</param>
      <returns>返回 <see cref="T:System.Int64" />。与 IPv6 地址关联的网络接口作用域 ID。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Add(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为集合是只读的并且无法将元素添加到集合。</summary>
      <param name="address">要添加到集合的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Clear">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为集合是只读的并且不能删除元素。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>检查集合是否包含指定 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 对象。</summary>
      <param name="address">
        <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 要在集合中搜索对象。</param>
      <returns>true 如果 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 对象存在于集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.MulticastIPAddressInformation[],System.Int32)">
      <summary>将元素复制到一维数组类型的此集合中 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" />。</summary>
      <param name="array">一维数组，用于接收集合的副本。</param>
      <param name="offset">中的从零开始索引 <paramref name="array" /> 处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 在此元素的数目 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 大于从的可用空间 <paramref name="count" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">在此元素 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.MulticastIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为集合是只读的并且不能删除元素。</summary>
      <param name="address">要删除的对象。</param>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkChange.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.NetworkChange" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkChange.RegisterNetworkChange(System.Net.NetworkInformation.NetworkChange)">
      <summary>注册以接收网络更改事件的网络更改实例。</summary>
      <param name="nc">要注册的实例。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor(System.Int32)">
      <summary>用指定的错误代码初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationException" /> 类的新实例。</summary>
      <param name="errorCode">一个 Win32 错误代码。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationException" /> 类的新实例。</summary>
      <param name="serializationInfo">一个包含序列化的异常数据的 SerializationInfo 对象。</param>
      <param name="streamingContext">包含有关序列化的异常上下文信息的 StreamingContext。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>新实例初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 类使用指定 <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>使用指定的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 初始化 <see cref="T:System.Security.Permissions.PermissionState" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.AddPermission(System.Net.NetworkInformation.NetworkInformationAccess)">
      <summary>将指定的值添加到此权限。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Copy">
      <summary>创建并返回该权限的相同副本。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> ，等同于当前的权限</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.FromXml(System.Security.SecurityElement)">
      <summary>设置此权限的用户使用指定的 XML 编码的状态。</summary>
      <param name="securityElement">一个 <see cref="T:System.Security.SecurityElement" /> 包含的 XML 编码要用于设置的当前权限状态</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是权限编码。- 或 -<paramref name="securityElement" /> 不是编码的 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。- 或 -<paramref name="securityElement" /> 具有无效 <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" /> 要与当前的权限。 它必须与当前权限属于同一类型。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> ，它表示当前的权限和指定的权限的交集。 此新权限是 null 如果交集为空或 <paramref name="target" /> 是 null。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" /> 这是要用于测试子集关系。 此权限必须与当前权限相同的类型</param>
      <returns>如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.ToXml">
      <summary>创建此权限的状态的 XML 编码。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> ，其中包含当前权限的 XML 编码。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermission.Union(System.Security.IPermission)">
      <summary>创建的权限，则此权限的指定的权限的并集。</summary>
      <param name="target">一个 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" />  权限将与当前权限结合起来。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">一个 <see cref="T:System.Security.Permissions.SecurityAction" /> 值，该值指定的权限行为。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.CreatePermission">
      <summary>创建并返回一个新 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> ，对应于此属性。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces">
      <summary>返回在本地计算机描述的网络接口的对象。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 数组，其中包含的对象; 如果检测到没有接口说明可用的网络接口，则为空数组。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Windows 系统函数调用失败。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPProperties">
      <summary>返回一个描述该网络接口的配置对象。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPInterfaceProperties" /> 描述此网络接口的对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPStatistics">
      <summary>获取此 IP 统计信息 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 实例。</summary>
      <returns>返回 <see cref="T:System.Net.NetworkInformation.IPInterfaceStatistics" />。IP 统计信息。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIPv4Statistics">
      <summary>获取此 IPv4 统计信息 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.IPv4InterfaceStatistics" /> 对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable">
      <summary>指示是否任何网络连接不可用。</summary>
      <returns>true 如果网络连接不可用;否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress">
      <summary>返回的媒体访问控制 (MAC) 或该适配器的物理地址。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 对象，其中包含的物理地址。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示接口是否支持指定的协议。</summary>
      <param name="networkInterfaceComponent">一个 <see cref="T:System.Net.NetworkInformation.NetworkInterfaceComponent" /> 值。</param>
      <returns>true 如果支持指定的协议;否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 类的新实例。</summary>
      <param name="address">一个 <see cref="T:System.Byte" /> 数组，其中包含该地址。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)">
      <summary>比较两个 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。</summary>
      <param name="comparand">
        <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />  要与当前实例进行比较。</param>
      <returns>true 如果此实例和指定的实例中包含相同的地址;否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes">
      <summary>返回当前实例的地址。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含该地址。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode">
      <summary>返回的物理地址的哈希值。</summary>
      <returns>整数哈希值。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)">
      <summary>分析指定 <see cref="T:System.String" /> ，并将其内容存储的地址以字节形式 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 此方法返回。</summary>
      <param name="address">一个 <see cref="T:System.String" /> 包含用于初始化的地址 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 此方法返回的实例。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例与指定的地址。</returns>
      <exception cref="T:System.FormatException">
        <paramref name="address" /> 参数包含非法硬件地址。如果，也会发生此异常 <paramref name="address" /> 参数中包含字符串格式不正确。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.PhysicalAddress.ToString">
      <summary>返回 <see cref="T:System.String" /> 形式显示的此实例的地址。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含此实例中包含的地址。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.Ping" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.NetworkInformation.Ping" /> 对象使用的非托管资源，并可根据需要释放托管资源。</summary>
      <param name="disposing">如果释放托管资源和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.OnPingCompleted(System.Net.NetworkInformation.PingCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" />  对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress)">
      <summary>尝试将 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机中接收相应的 ICMP 回显回复消息。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 介绍 ICMP 回显回复消息，如果其中一个已收到，或描述失败的原因，如果已接收不到任何消息的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32)">
      <summary>尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机中接收相应的 ICMP 回显回复消息。 此方法允许您指定该操作的超时值。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，它提供有关 ICMP 回显回复消息的信息，如果其中一个已收到，或如果不收到任何消息提供失败的原因。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[])">
      <summary>尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机中接收相应的 ICMP 回显回复消息。 此重载允许您指定该操作的超时值。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 介绍 ICMP 回显回复消息，如果其中一个已收到，或提供对失败的原因如果不收到任何消息的对象。 该方法将返回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> 如果数据包的大小超过最大传输单元 (MTU)。</returns>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 是 null, ，或 <paramref name="buffer" /> 大小大于 65500 个字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" /> 和从该计算机中接收相应的 ICMP 回显回复消息。 此重载允许您指定的操作和控制碎片的超时值和 ICMP 回显消息数据包的生存时间值。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" />  用来控制碎片和 ICMP 回显消息数据包的生存时间值的对象。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 介绍 ICMP 回显回复消息，如果其中一个已收到，或提供对失败的原因如果不收到任何消息的对象。 该方法将返回 <see cref="F:System.Net.NetworkInformation.IPStatus.PacketTooBig" /> 如果数据包的大小超过最大传输单元 (MTU)。</returns>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 是 null, ，或 <paramref name="buffer" /> 大小大于 65500 个字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String)">
      <summary>尝试将 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并接收相应 ICMP 回显回复消息从该计算机。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 介绍 ICMP 回显回复消息，如果其中一个已收到，或提供对失败的原因如果不收到任何消息的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为空字符串 ("")。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32)">
      <summary>尝试将 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并接收相应 ICMP 回显回复消息从该计算机。 此方法允许您指定该操作的超时值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，它提供有关 ICMP 回显回复消息的信息，如果其中一个已收到，或如果不收到任何消息提供失败的原因。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[])">
      <summary>尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并接收相应 ICMP 回显回复消息从该计算机。 此重载允许您指定该操作的超时值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，它提供有关 ICMP 回显回复消息的信息，如果其中一个已收到，或如果不收到任何消息提供失败的原因。</returns>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为空字符串 ("")。- 或 -<paramref name="buffer" /> 是 null, ，或 <paramref name="buffer" /> 大小大于 65500 个字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.Send(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并接收相应 ICMP 回显回复消息从该计算机。 此重载允许您指定的操作和控制碎片的超时值和 ICMP 数据包的生存时间值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" />  用来控制碎片和 ICMP 回显消息数据包的生存时间值的对象。</param>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，它提供有关 ICMP 回显回复消息的信息，如果其中一个已收到，或如果不收到任何消息提供失败的原因。</returns>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为零长度字符串。- 或 -<paramref name="buffer" /> 是 null, ，或 <paramref name="buffer" /> 大小大于 65500 个字节。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
      <summary>以异步方式尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机中接收相应的 ICMP 回显回复消息。 此重载允许您指定的操作和控制碎片的超时值和 ICMP 回显消息数据包的生存时间值。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" />  用来控制碎片和 ICMP 回显消息数据包的生存时间值的对象。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)">
      <summary>以异步方式尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机中接收相应的 ICMP 回显回复消息。 此重载允许您指定该操作的超时值。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Object)">
      <summary>以异步方式尝试将 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机中接收相应的 ICMP 回显回复消息。 此重载允许您指定该操作的超时值。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Object)" />  方法正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.Net.IPAddress,System.Object)">
      <summary>以异步方式尝试将 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机中接收相应的 ICMP 回显回复消息。</summary>
      <param name="address">
        <see cref="T:System.Net.IPAddress" /> 标识 ICMP 回显消息的目标计算机。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  方法正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions,System.Object)">
      <summary>以异步方式尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并从该计算机会收到相应的 ICMP 回显回复消息。 此重载允许您指定的操作和控制碎片的超时值和 ICMP 数据包的生存时间值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="buffer">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" />  用来控制碎片和 ICMP 回显消息数据包的生存时间值的对象。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为空字符串 ("")。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 无法解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Byte[],System.Object)">
      <summary>以异步方式尝试将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并从该计算机会收到相应的 ICMP 回显回复消息。 此重载允许您指定该操作的超时值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为空字符串 ("")。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" />  正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="hostNameOrAddress" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 无法解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Int32,System.Object)">
      <summary>以异步方式尝试将 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并从该计算机会收到相应的 ICMP 回显回复消息。 此重载允许您指定该操作的超时值。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">
        <see cref="T:System.Int32" /> （后发送回送消息） 将指定的最大毫秒数的值时要等待的 ICMP 回显回复消息。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="hostNameOrAddress" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 无法解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)">
      <summary>以异步方式尝试将 Internet 控制消息协议 (ICMP) 回显消息发送到指定的计算机，并从该计算机会收到相应的 ICMP 回显回复消息。</summary>
      <param name="hostNameOrAddress">一个 <see cref="T:System.String" /> 标识 ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="userToken">一个对象，传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostNameOrAddress" /> 是 null 或为空字符串 ("")。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="M:System.Net.NetworkInformation.Ping.SendAsync(System.String,System.Object)" />  方法正在进行中。</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="address" /> 为 IPv6 地址，并在本地计算机正在运行的操作系统早于 Windows 2000。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="hostNameOrAddress" /> 无法解析为有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendAsyncCancel">
      <summary>取消所有挂起的异步请求以发送 Internet 控制消息协议 (ICMP) 回显消息并接收相应的 ICMP 回显回复消息。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)">
      <summary>将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。</summary>
      <param name="address">标识 ICMP 回显消息的目标计算机的 IP 地址。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />  正在进行中。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)">
      <summary>将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。 此重载允许您指定该操作的超时值。</summary>
      <param name="address">标识 ICMP 回显消息的目标计算机的 IP 地址。</param>
      <param name="timeout">最大 （后发送回送消息） 的毫秒数要等待的 ICMP 回显回复消息。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])">
      <summary>将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。 此重载允许您指定的操作以及要用于发送和接收缓冲区的超时值。</summary>
      <param name="address">标识 ICMP 回显消息的目标计算机的 IP 地址。</param>
      <param name="timeout">最大 （后发送回送消息） 的毫秒数要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />  正在进行中。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 个字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>将与指定的数据缓冲区的 Internet 控制消息协议 (ICMP) 回显消息发送到具有指定的计算机 <see cref="T:System.Net.IPAddress" />, ，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。 此重载允许您指定的操作，一个缓冲区来用于发送和接收，一个超时值和控制碎片和 ICMP 回显消息数据包的生存时间值。</summary>
      <param name="address">标识 ICMP 回显消息的目标计算机的 IP 地址。</param>
      <param name="timeout">最大 （后发送回送消息） 的毫秒数要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" />  用来控制碎片和 ICMP 回显消息数据包的生存时间值的对象。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。- 或 -<paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 小于零。</exception>
      <exception cref="T:System.InvalidOperationException">调用 <see cref="Overload:System.Net.NetworkInformation.Ping.SendPingAsync" />  正在进行中。</exception>
      <exception cref="T:System.Net.NetworkInformation.PingException">在发送或接收 ICMP 消息时引发了异常。 请参阅所引发的异常的内部异常。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="address" /> 不是有效的 IP 地址。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已被释放。</exception>
      <exception cref="T:System.ArgumentException">大小 <paramref name="buffer" /> 超过 65500 个字节。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)">
      <summary>发送 Internet 控制消息协议 (ICMP) 回显消息具有指定的数据缓冲到指定的计算机，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。</summary>
      <param name="hostNameOrAddress">ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)">
      <summary>发送 Internet 控制消息协议 (ICMP) 回显消息具有指定的数据缓冲到指定的计算机，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。 此重载允许您指定该操作的超时值。</summary>
      <param name="hostNameOrAddress">ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">最大 （后发送回送消息） 的毫秒数要等待的 ICMP 回显回复消息。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])">
      <summary>发送 Internet 控制消息协议 (ICMP) 回显消息具有指定的数据缓冲到指定的计算机，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。 此重载允许您指定的操作以及要用于发送和接收缓冲区的超时值。</summary>
      <param name="hostNameOrAddress">ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">最大 （后发送回送消息） 的毫秒数要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)">
      <summary>发送 Internet 控制消息协议 (ICMP) 回显消息具有指定的数据缓冲到指定的计算机，并从该计算机作为异步操作中接收相应的 ICMP 回显回复消息。 此重载允许您指定的操作，一个缓冲区来用于发送和接收，一个超时值和控制碎片和 ICMP 回显消息数据包的生存时间值。</summary>
      <param name="hostNameOrAddress">ICMP 回显消息的目标计算机。 为此参数指定的值可以是主机名或 IP 地址的字符串表示。</param>
      <param name="timeout">最大 （后发送回送消息） 的毫秒数要等待的 ICMP 回显回复消息。</param>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送 ICMP 回显消息并在 ICMP 回显回复消息中返回的数据。 数组不能包含超过 65500 个字节。</param>
      <param name="options">一个 <see cref="T:System.Net.NetworkInformation.PingOptions" />  用来控制碎片和 ICMP 回显消息数据包的生存时间值的对象。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Net.NetworkInformation.PingException" /> 类的新实例。</summary>
      <param name="serializationInfo">承载序列化对象数据的对象。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> ，它指定有关源或此序列化的目标的上下文信息。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Net.NetworkInformation.PingException" /> 类的新实例。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PingException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Net.NetworkInformation.PingException" />  类使用指定的消息和内部异常。</summary>
      <param name="message">描述该错误的 <see cref="T:System.String" />。</param>
      <param name="innerException">引发当前异常的异常。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.PingOptions.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 类，并将时间设置为 Live 和碎片的值。</summary>
      <param name="ttl">
        <see cref="T:System.Int32" /> 大于零值，该值指定的数倍 <see cref="T:System.Net.NetworkInformation.Ping" /> 可以转发数据包。</param>
      <param name="dontFragment">true 若要防止将数据发送到远程主机的碎片化;否则为 false。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ttl " />小于或等于零。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.TcpConnectionInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.TcpConnectionInformation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.TcpStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.TcpStatistics" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UdpStatistics.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.UdpStatistics" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformation.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Add(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
      <param name="address">要添加到集合的对象。</param>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Clear">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为为此集合不支持此操作。</summary>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Contains(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>检查集合是否包含指定 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 对象。</summary>
      <param name="address">
        <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 要在集合中搜索对象。</param>
      <returns>true 如果 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 对象存在于集合; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.CopyTo(System.Net.NetworkInformation.UnicastIPAddressInformation[],System.Int32)">
      <summary>将元素复制到一维数组类型的此集合中 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" />。</summary>
      <param name="array">一维数组，用于接收集合的副本。</param>
      <param name="offset">中的从零开始索引 <paramref name="array" /> 处开始复制。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维的。- 或 - 在此元素的数目 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> 大于从的可用空间 <paramref name="offset" /> 目标从头到尾 <paramref name="array" />。</exception>
      <exception cref="T:System.InvalidCastException">在此元素 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> 无法自动转换为目标类型 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Remove(System.Net.NetworkInformation.UnicastIPAddressInformation)">
      <summary>引发 <see cref="T:System.NotSupportedException" /> 因为集合是只读的并且不能删除元素。</summary>
      <param name="address">要删除的对象。</param>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
    </member>
    <member name="M:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可用于循环访问此集合的对象。</summary>
      <returns>实现的对象 <see cref="T:System.Collections.IEnumerator" /> 接口，并提供对访问 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor">
      <summary>初始化 <see cref="T:System.Net.ProtocolViolationException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.ProtocolViolationException" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 包含反序列化所需的信息 <see cref="T:System.Net.ProtocolViolationException" />。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.ProtocolViolationException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Net.ProtocolViolationException" /> 类的新实例。</summary>
      <param name="message">错误消息字符串。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象时所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.ProtocolViolationException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。</summary>
      <param name="serializationInfo">此 <see cref="T:System.Net.ProtocolViolationException" /> 要序列化到的对象。</param>
      <param name="streamingContext">序列化的目标。</param>
    </member>
    <member name="M:System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>初始化 <see cref="T:System.Net.Security.AuthenticatedStream" /> 类的新实例。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.AuthenticatedStream" />  用于发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">一个 <see cref="T:System.Boolean" /> ，该值指示是否关闭此 <see cref="T:System.Net.Security.AuthenticatedStream" />  对象也会关闭 <paramref name="innerStream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Security.AuthenticatedStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.Net.Security.NegotiateStream" /> 初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.NegotiateStream" /> 用于发送和接收数据。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.Security.NegotiateStream" /> 类使用指定 <see cref="T:System.IO.Stream" /> 和流封闭行为。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.NegotiateStream" /> 用于发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">true 若要指示该关闭此 <see cref="T:System.Net.Security.NegotiateStream" /> 不起任何作用 <paramref name="innerstream" />; false 以指示该关闭此 <see cref="T:System.Net.Security.NegotiateStream" /> 也会关闭 <paramref name="innerStream" />。 有关详细信息，请参阅备注部分。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。</summary>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的客户端凭据和渠道绑定。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="binding">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 所用的扩展保护。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。- 或 -<paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的凭据、 身份验证选项和通道绑定。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="binding">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 所用的扩展保护。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="allowedImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。- 或 -<paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程将使用指定的客户端凭据。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的凭据和身份验证选项。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="allowedImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。 身份验证过程使用指定的客户端凭据和渠道绑定。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="binding">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 所用的扩展保护。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。- 或 -<paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。 身份验证过程使用指定的凭据、 身份验证选项和通道绑定。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="binding">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 所用的扩展保护。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="allowedImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。- 或 -<paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。 身份验证过程将使用指定的客户端凭据。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>调用由客户端进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。 身份验证过程使用指定的凭据和身份验证选项。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="allowedImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="allowedImpersonationLevel" /> 不是有效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。</summary>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的服务器凭据和身份验证选项。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用于建立服务器的标识。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="requiredImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential " />是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, ，<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, ，或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,，</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于尝试 r 进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与客户端进行身份验证。 不能将该流尝试重新与服务器进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的服务器凭据、 身份验证选项和扩展保护策略。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="policy">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 所用的扩展保护。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="requiredImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 上传入的扩展的保护策略 <paramref name="policy" /> 参数都是 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential " />是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, ，<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, ，或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,，</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于尝试 r 进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与客户端进行身份验证。 不能将该流尝试重新与服务器进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 不支持扩展的保护的平台上。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的扩展的保护策略。</summary>
      <param name="policy">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 所用的扩展保护。</param>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 上传入的扩展的保护策略 <paramref name="policy" /> 参数都是 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 不支持扩展的保护的平台上。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。 身份验证过程使用指定的服务器凭据和身份验证选项。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用于建立服务器的标识。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="requiredImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential " />是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, ，<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, ，或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,，</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于尝试 r 进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与客户端进行身份验证。 不能将该流尝试重新与服务器进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。 身份验证过程使用指定的服务器凭据、 身份验证选项和扩展保护策略。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="policy">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 所用的扩展保护。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="requiredImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 上传入的扩展的保护策略 <paramref name="policy" /> 参数都是 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential " />是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, ，<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, ，或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,，</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于尝试 r 进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与客户端进行身份验证。 不能将该流尝试重新与服务器进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 不支持扩展的保护的平台上。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)">
      <summary>由服务器进行身份验证客户端上，和 （可选） 中的客户端-服务器连接作为异步操作的服务器。 身份验证过程使用指定的扩展的保护策略。</summary>
      <param name="policy">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 所用的扩展保护。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 上传入的扩展的保护策略 <paramref name="policy" /> 参数都是 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 不支持扩展的保护的平台上。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)">
      <summary>由客户端开始一个异步操作以对客户端上，和 （可选） 中的客户端-服务器连接的服务器进行身份验证调用。 此方法不会阻止。</summary>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含有关操作的信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)">
      <summary>由客户端开始一个异步操作以对客户端上，和 （可选） 中的客户端-服务器连接的服务器进行身份验证调用。 身份验证过程使用指定的凭据和渠道绑定。 此方法不会阻止。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="binding">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 所用的扩展保护。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。- 或 -<paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>由客户端开始一个异步操作以对客户端上，和 （可选） 中的客户端-服务器连接的服务器进行身份验证调用。 身份验证过程使用指定的凭据、 身份验证选项和通道绑定。 此方法不会阻止。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="binding">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 所用的扩展保护。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="allowedImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。- 或 -<paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)">
      <summary>由客户端开始一个异步操作以对客户端上，和 （可选） 中的客户端-服务器连接的服务器进行身份验证调用。 身份验证过程使用指定的凭据。 此方法不会阻止。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。- 或 -<paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>由客户端开始一个异步操作以对客户端上，和 （可选） 中的客户端-服务器连接的服务器进行身份验证调用。 身份验证过程使用指定的凭据和身份验证选项。 此方法不会阻止。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="targetName">唯一标识的服务器进行身份验证服务主体名称 (SPN)。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="allowedImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。- 或 -<paramref name="targetName" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与服务器进行身份验证。 不能将流重试客户端身份验证。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)">
      <summary>由服务器以便开始一个异步操作以验证客户端，和 （可选） 中的客户端-服务器连接的服务器。 此方法不会阻止。</summary>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含有关操作的信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>由服务器以便开始一个异步操作以验证客户端，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的服务器凭据和身份验证选项。 此方法不会阻止。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="requiredImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含有关操作的信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, ，<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, ，或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,，</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与客户端进行身份验证。 不能将该流尝试重新与服务器进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)">
      <summary>由服务器以便开始一个异步操作以验证客户端，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的服务器凭据、 身份验证选项和扩展保护策略。 此方法不会阻止。</summary>
      <param name="credential">
        <see cref="T:System.Net.NetworkCredential" /> 用来建立客户端的标识。</param>
      <param name="policy">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 所用的扩展保护。</param>
      <param name="requiredProtectionLevel">其中一个 <see cref="T:System.Net.Security.ProtectionLevel" /> 值，指示该流的安全服务。</param>
      <param name="requiredImpersonationLevel">其中一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值，指示服务器如何使用客户端的凭据来访问资源。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 上传入的扩展的保护策略 <paramref name="policy" /> 参数都是 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="credential" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="requiredImpersonationLevel" /> 必须是 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, ，<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, ，或 <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,，</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -此流先前已使用尝试与客户端进行身份验证。 不能将该流尝试重新与服务器进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 不支持扩展的保护的平台上。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)">
      <summary>由服务器以便开始一个异步操作以验证客户端，和 （可选） 中的客户端-服务器连接的服务器。 身份验证过程使用指定的扩展的保护策略。 此方法不会阻止。</summary>
      <param name="policy">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 所用的扩展保护。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 和 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> 上传入的扩展的保护策略 <paramref name="policy" /> 参数都是 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.NotSupportedException">不支持 windows 95 和 Windows 98。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <paramref name="policy" /> 参数设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 不支持扩展的保护的平台上。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读的操作从流中读取数据并将它存储在指定的数组。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 从流中读取的模式接收字节的数组。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 从此处开始存储读取的数据从该流。</param>
      <param name="count">最大要从流中读取的字节数。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成读取的操作时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含读操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 小于 0。- 或 -<paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 -<paramref name="offset" /> 加上 <paramref name="count" /> 的长度大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.IO.IOException">读取的操作失败。- 或 -加密是在使用中，但无法解密数据。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的读取的操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作，可将 <see cref="T:System.Byte" />s 从指定的缓冲区写入流。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 提供写入流中的字节的数组。</param>
      <param name="offset">中的从零开始的位置<paramref name=" buffer" /> 从此处开始读取要写入到流的字节。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 值，该值指定要读取的字节数 <paramref name="buffer" />。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成写入操作时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义的对象，包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset is less than 0" />。- 或 -<paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 -<paramref name="offset" /> 加上计数大于的长度 <paramref name="buffer" />。</exception>
      <exception cref="T:System.IO.IOException">写入操作失败。- 或 -加密是在使用中，但不是加密的数据。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的写入操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Security.NegotiateStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)">
      <summary>结束对的调用已启动的挂起的异步客户端身份验证操作 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">没有挂起的客户端身份验证才能完成。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)">
      <summary>结束对的调用已启动的挂起的异步客户端身份验证操作 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.Security.Authentication.InvalidCredentialException">身份验证失败。 此对象可用于重新进行身份验证。</exception>
      <exception cref="T:System.InvalidOperationException">没有任何挂起的身份验证，才能完成。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)">
      <summary>结束异步读取操作，它通过调用已启动 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
      <returns>一个 <see cref="T:System.Int32" /> 从基础流中读取指定的字节数的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">AsyncResult 不是通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有任何挂起的读的操作完成。</exception>
      <exception cref="T:System.IO.IOException">读取的操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作，通过调用已启动 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">AsyncResult 不是通过调用 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有任何正在等待的写入操作完成。</exception>
      <exception cref="T:System.IO.IOException">写入操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Flush">
      <summary>使所有缓冲的数据都写入基础设备。</summary>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从该流中读取数据并将其存储在指定的数组。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 从流中读取的模式接收字节的数组。</param>
      <param name="offset">一个 <see cref="T:System.Int32" /> 包含中的从零开始的位置 <paramref name="buffer" /> 从此处开始存储读取的数据从该流。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 包含要从流中读取的字节的最大数目。</param>
      <returns>一个 <see cref="T:System.Int32" /> 从基础流中读取指定的字节数的值。 当没有更多要读取的数据时，返回 0。</returns>
      <exception cref="T:System.IO.IOException">读取的操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
      <exception cref="T:System.NotSupportedException">一个 <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 操作正在进行。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="offset">忽略此值。</param>
      <param name="origin">忽略此值。</param>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">不支持查找 <see cref="T:System.Net.Security.NegotiateStream" />。</exception>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)">
      <summary>设置基础流的长度。</summary>
      <param name="value">
        <see cref="T:System.Int64" /> 值，该值指定流的长度。</param>
    </member>
    <member name="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定数目的 <see cref="T:System.Byte" />s 到使用指定的缓冲区和偏移量的基础流。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 提供写入流中的字节的数组。</param>
      <param name="offset">
        <see cref="T:System.Int32" /> 包含中的从零开始的位置<paramref name=" buffer" /> 从此处开始读取要写入到流的字节。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 包含要读取的字节数 <paramref name="buffer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset is less than 0" />。- 或 -<paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 -<paramref name="offset" /> 加上计数大于的长度 <paramref name="buffer" />。</exception>
      <exception cref="T:System.IO.IOException">写入操作失败。- 或 -加密是在使用中，但不是加密的数据。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的写入操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream)">
      <summary>使用指定的 <see cref="T:System.Net.Security.SslStream" /> 初始化 <see cref="T:System.IO.Stream" /> 类的新实例。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。- 或 -<paramref name="innerStream" /> 不是可写的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.Security.SslStream" /> 类使用指定 <see cref="T:System.IO.Stream" /> 和流封闭行为。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">一个布尔值，指示的闭包行为 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。 此参数指示是否内部流处于打开状态。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。- 或 -<paramref name="innerStream" /> 不是可写的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback)">
      <summary>新实例初始化 <see cref="T:System.Net.Security.SslStream" /> 类使用指定 <see cref="T:System.IO.Stream" />, 、 流关闭行为和证书验证委托。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">一个布尔值，指示的闭包行为 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。 此参数指示是否内部流处于打开状态。</param>
      <param name="userCertificateValidationCallback">一个 <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> 委托，负责验证远程方提供的证书。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。- 或 -<paramref name="innerStream" /> 不是可写的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback)">
      <summary>新实例初始化 <see cref="T:System.Net.Security.SslStream" /> 类使用指定 <see cref="T:System.IO.Stream" />, ，流式闭包的行为、 证书验证委托和证书选择委托。</summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">一个布尔值，指示的闭包行为 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。 此参数指示是否内部流处于打开状态。</param>
      <param name="userCertificateValidationCallback">一个 <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> 委托，负责验证远程方提供的证书。</param>
      <param name="userCertificateSelectionCallback">一个 <see cref="T:System.Net.Security.LocalCertificateSelectionCallback" /> 委托，负责选择要用于身份验证的证书。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。- 或 -<paramref name="innerStream" /> 不是可写的。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.#ctor(System.IO.Stream,System.Boolean,System.Net.Security.RemoteCertificateValidationCallback,System.Net.Security.LocalCertificateSelectionCallback,System.Net.Security.EncryptionPolicy)">
      <summary>新实例初始化 <see cref="T:System.Net.Security.SslStream" /> 类使用指定 <see cref="T:System.IO.Stream" /></summary>
      <param name="innerStream">一个 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。</param>
      <param name="leaveInnerStreamOpen">一个布尔值，指示的闭包行为 <see cref="T:System.IO.Stream" /> 使用对象 <see cref="T:System.Net.Security.SslStream" /> 用于发送和接收数据。 此参数指示是否内部流处于打开状态。</param>
      <param name="userCertificateValidationCallback">一个 <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" /> 委托，负责验证远程方提供的证书。</param>
      <param name="userCertificateSelectionCallback">一个 <see cref="T:System.Net.Security.LocalCertificateSelectionCallback" /> 委托，负责选择要用于身份验证的证书。</param>
      <param name="encryptionPolicy">要使用的 <see cref="T:System.Net.Security.EncryptionPolicy" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="innerStream" /> 不可读。- 或 -<paramref name="innerStream" /> 不是可写的。- 或 -<paramref name="encryptionPolicy" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="innerStream" /> 为 null。- 或 -<paramref name="innerStream" /> 等于 <see cref="F:System.IO.Stream.Null" />。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String)">
      <summary>由客户端进行身份验证服务器和 （可选） 中的客户端-服务器连接的客户端调用。</summary>
      <param name="targetHost">共享此服务器的名称 <see cref="T:System.Net.Security.SslStream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetHost" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此服务器身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>由客户端进行身份验证服务器和 （可选） 中的客户端-服务器连接的客户端调用。 身份验证过程使用指定的证书集合和 SSL 协议。</summary>
      <param name="targetHost">将共享此服务器的名称 <see cref="T:System.Net.Security.SslStream" />。</param>
      <param name="clientCertificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> ，其中包含客户端证书。</param>
      <param name="enabledSslProtocols">
        <see cref="T:System.Security.Authentication.SslProtocols" /> 值，该值表示所使用的身份验证协议。</param>
      <param name="checkCertificateRevocation">一个 <see cref="T:System.Boolean" /> 值，该值指定是否在身份验证期间检查证书吊销列表。</param>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String)">
      <summary>由客户端进行身份验证服务器和 （可选） 中以异步操作的客户端-服务器连接的客户端调用。</summary>
      <param name="targetHost">共享此服务器的名称 <see cref="T:System.Net.Security.SslStream" />。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetHost" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此服务器身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsClientAsync(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>由客户端进行身份验证服务器和 （可选） 中以异步操作的客户端-服务器连接的客户端调用。 身份验证过程使用指定的证书集合和 SSL 协议。</summary>
      <param name="targetHost">将共享此服务器的名称 <see cref="T:System.Net.Security.SslStream" />。</param>
      <param name="clientCertificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> ，其中包含客户端证书。</param>
      <param name="enabledSslProtocols">
        <see cref="T:System.Security.Authentication.SslProtocols" /> 值，该值表示所使用的身份验证协议。</param>
      <param name="checkCertificateRevocation">一个 <see cref="T:System.Boolean" /> 值，该值指定是否在身份验证期间检查证书吊销列表。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>由服务器进行身份验证服务器和 （可选） 中使用指定的证书的客户端-服务器连接的客户端调用。</summary>
      <param name="serverCertificate">用于对服务器进行身份验证的证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此客户端身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" /> 方法不支持在 Windows 95、 Windows 98 或 Windows Millennium。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>由服务器进行身份验证服务器和 （可选） 中使用指定的证书、 要求和安全协议的客户端-服务器连接的客户端调用。</summary>
      <param name="serverCertificate">在 x509 证书用于对服务器进行身份验证。</param>
      <param name="clientCertificateRequired">一个 <see cref="T:System.Boolean" /> 值，该值指定用于身份验证证书是否要求客户端。 请注意，这只请求--如果没有证书，则提供服务器仍然接受连接请求。</param>
      <param name="enabledSslProtocols">
        <see cref="T:System.Security.Authentication.SslProtocols" />  值，该值表示所使用的身份验证协议。</param>
      <param name="checkCertificateRevocation">一个 <see cref="T:System.Boolean" /> 值，该值指定是否在身份验证期间检查证书吊销列表。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enabledSslProtocols" /> 不是有效 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此客户端身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServer" /> 方法不支持在 Windows 95、 Windows 98 或 Windows Millennium。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>由服务器进行身份验证服务器和 （可选） 中使用异步操作的形式指定的证书的客户端-服务器连接的客户端调用。</summary>
      <param name="serverCertificate">用于对服务器进行身份验证的证书。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此客户端身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="Overload:System.Net.Security.SslStream.AuthenticateAsServerAsync" /> 方法不支持在 Windows 95、 Windows 98 或 Windows Millennium。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.AuthenticateAsServerAsync(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean)">
      <summary>由服务器进行身份验证服务器和 （可选） 中以异步操作使用指定的证书、 要求和安全协议的客户端-服务器连接的客户端调用。</summary>
      <param name="serverCertificate">在 x509 证书用于对服务器进行身份验证。</param>
      <param name="clientCertificateRequired">一个 <see cref="T:System.Boolean" /> 值，该值指定用于身份验证证书是否要求客户端。 请注意，这只请求--如果没有证书，则提供服务器仍然接受连接请求。</param>
      <param name="enabledSslProtocols">
        <see cref="T:System.Security.Authentication.SslProtocols" />  值，该值表示所使用的身份验证协议。</param>
      <param name="checkCertificateRevocation">一个 <see cref="T:System.Boolean" /> 值，该值指定是否在身份验证期间检查证书吊销列表。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.AsyncCallback,System.Object)">
      <summary>由客户端开始一个异步操作以验证服务器和 （可选） 客户端调用。</summary>
      <param name="targetHost">共享此服务器的名称 <see cref="T:System.Net.Security.SslStream" />。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义对象，其中包含操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetHost" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此服务器身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsClient(System.String,System.Security.Cryptography.X509Certificates.X509CertificateCollection,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>由客户端开始一个异步操作以验证服务器和 （可选） 使用指定的证书和安全协议的客户端调用。</summary>
      <param name="targetHost">共享此服务器的名称 <see cref="T:System.Net.Security.SslStream" />。</param>
      <param name="clientCertificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 包含客户端证书。</param>
      <param name="enabledSslProtocols">
        <see cref="T:System.Security.Authentication.SslProtocols" /> 值，该值表示所使用的身份验证协议。</param>
      <param name="checkCertificateRevocation">一个 <see cref="T:System.Boolean" /> 值，该值指定是否在身份验证期间检查证书吊销列表。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义对象，其中包含操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetHost" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enabledSslProtocols" /> 不是有效 <see cref="T:System.Security.Authentication.SslProtocols" />  值。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此服务器身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.AsyncCallback,System.Object)">
      <summary>由服务器以便开始一个异步操作以对客户端进行身份验证和 （可选） 中的客户端-服务器连接的服务器。</summary>
      <param name="serverCertificate">在 x509 证书用于对服务器进行身份验证。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义对象，其中包含操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此客户端身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> 方法不支持在 Windows 95、 Windows 98 或 Windows Millennium。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginAuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate,System.Boolean,System.Security.Authentication.SslProtocols,System.Boolean,System.AsyncCallback,System.Object)">
      <summary>由服务器以便开始一个异步操作以进行身份验证服务器和 （可选） 使用指定的证书、 要求和安全协议的客户端调用。</summary>
      <param name="serverCertificate">在 x509 证书用于对服务器进行身份验证。</param>
      <param name="clientCertificateRequired">一个 <see cref="T:System.Boolean" /> 值，该值指定用于身份验证证书是否要求客户端。 请注意，这只请求--如果没有证书，则提供服务器仍然接受连接请求。</param>
      <param name="enabledSslProtocols">
        <see cref="T:System.Security.Authentication.SslProtocols" />  值，该值表示所使用的身份验证协议。</param>
      <param name="checkCertificateRevocation">一个 <see cref="T:System.Boolean" /> 值，该值指定是否在身份验证期间检查证书吊销列表。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成身份验证时要调用的方法的委托。</param>
      <param name="asyncState">一个用户定义对象，其中包含操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverCertificate" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enabledSslProtocols" /> 不是有效 <see cref="T:System.Security.Authentication.SslProtocols" /> 值。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">已经发生身份验证。- 或 -使用此服务器身份验证 <see cref="T:System.Net.Security.SslStream" /> 之前已尝试进行。- 或 - 正在进行身份验证。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" /> 方法不支持在 Windows 95、 Windows 98 或 Windows Millennium。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读的操作从流中读取数据并将它存储在指定的数组。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 从流中读取的模式接收字节的数组。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 从此处开始存储读取的数据从该流。</param>
      <param name="count">最大要从流中读取的字节数。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成读取的操作时要调用的方法的委托。</param>
      <param name="asyncState">用户定义的对象，其中包含读操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>一个指示异步操作状态的 <see cref="T:System.IAsyncResult" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />.<paramref name="-or-" /><paramref name="offset" /> &gt; 的长度 <paramref name="buffer" />。- 或 -<paramref name="offset" /> + count &gt; 的长度 <paramref name="buffer" />。</exception>
      <exception cref="T:System.IO.IOException">读取的操作失败。- 或 -加密是在使用中，但无法解密数据。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的读取的操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写操作，可将 <see cref="T:System.Byte" />s 从指定的缓冲区写入流。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 提供写入流中的字节的数组。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 从此处开始读取要写入到流的字节。</param>
      <param name="count">
        <see cref="T:System.Int32" /> 值，该值指定要读取的字节数 <paramref name="buffer" />。</param>
      <param name="asyncCallback">
        <see cref="T:System.AsyncCallback" /> 引用在完成写入操作时要调用的方法的委托。</param>
      <param name="asyncState">用户定义的对象，其中包含写操作的相关信息。 操作完成时，此对象传递给 <paramref name="asyncCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，它指示异步操作的状态。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />.<paramref name="-or-" /><paramref name="offset" /> &gt; 的长度 <paramref name="buffer" />。- 或 -<paramref name="offset" /> + count &gt; 的长度 <paramref name="buffer" />。</exception>
      <exception cref="T:System.IO.IOException">写入操作失败。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的写入操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Security.SslStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Security.SslStream.EndAuthenticateAsClient(System.IAsyncResult)">
      <summary>结束挂起的异步服务器身份验证操作入门的以前调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsServer" />。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">没有挂起的服务器身份验证才能完成。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndAuthenticateAsServer(System.IAsyncResult)">
      <summary>结束挂起的异步客户端身份验证操作入门的以前调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="Overload:System.Net.Security.SslStream.BeginAuthenticateAsClient" />。</exception>
      <exception cref="T:System.Security.Authentication.AuthenticationException">身份验证失败，此对象处于不可用状态。</exception>
      <exception cref="T:System.InvalidOperationException">没有挂起的客户端身份验证才能完成。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndRead(System.IAsyncResult)">
      <summary>结束异步读取的操作开始使用的以前调用 <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
      <returns>一个 <see cref="T:System.Int32" /> 从基础流中读取指定的字节数的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="M:System.Net.Security.SslStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有任何挂起的读的操作完成。</exception>
      <exception cref="T:System.IO.IOException">读取的操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.EndWrite(System.IAsyncResult)">
      <summary>结束异步写操作入门的以前调用 <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用实例 <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="M:System.Net.Security.SslStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">没有任何正在等待的写入操作完成。</exception>
      <exception cref="T:System.IO.IOException">写入操作失败。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Flush">
      <summary>使所有缓冲的数据都写入基础设备。</summary>
    </member>
    <member name="M:System.Net.Security.SslStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从该流中读取数据并将其存储在指定的数组。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 从此流中读取的接收字节的数组。</param>
      <param name="offset">一个 <see cref="T:System.Int32" /> ，其中包含中的从零开始的位置 <paramref name="buffer" /> 从此处开始存储读取的数据从该流。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> 包含要从此流中读取的字节的最大数目。</param>
      <returns>一个 <see cref="T:System.Int32" /> 值，该值指定读取的字节数。 当没有更多要读取的数据时，返回 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />.<paramref name="-or-" /><paramref name="offset" /> &gt; 的长度 <paramref name="buffer" />。- 或 -<paramref name="offset" /> + count &gt; 的长度 <paramref name="buffer" />。</exception>
      <exception cref="T:System.IO.IOException">读取的操作失败。 如果无法确定失败的原因，请检查内部异常。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的读取的操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="offset">忽略此值。</param>
      <param name="origin">忽略此值。</param>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">不支持查找 <see cref="T:System.Net.Security.SslStream" /> 对象。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.SetLength(System.Int64)">
      <summary>设置基础流的长度。</summary>
      <param name="value">
        <see cref="T:System.Int64" /> 值，该值指定流的长度。</param>
    </member>
    <member name="M:System.Net.Security.SslStream.Write(System.Byte[])">
      <summary>将指定的数据写入该流。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 提供写入流中的字节的数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">写入操作失败。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的写入操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.Security.SslStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将指定数目的 <see cref="T:System.Byte" />s 到使用指定的缓冲区和偏移量的基础流。</summary>
      <param name="buffer">一个 <see cref="T:System.Byte" /> 提供写入流中的字节的数组。</param>
      <param name="offset">一个 <see cref="T:System.Int32" /> ，其中包含中的从零开始的位置 <paramref name="buffer" /> 从此处开始读取要写入到流的字节。</param>
      <param name="count">一个 <see cref="T:System.Int32" /> ，其中包含要读取的字节数 <paramref name="buffer" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" />
        <paramref name="&lt;" />
        <paramref name="0" />.<paramref name="-or-" /><paramref name="offset" /> &gt; 的长度 <paramref name="buffer" />。- 或 -<paramref name="offset" /> + count &gt; 的长度 <paramref name="buffer" />。</exception>
      <exception cref="T:System.IO.IOException">写入操作失败。</exception>
      <exception cref="T:System.NotSupportedException">已存在正在进行的写入操作。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">身份验证后未发生。</exception>
    </member>
    <member name="M:System.Net.ServicePoint.CloseConnectionGroup(System.String)">
      <summary>从此 <see cref="T:System.Net.ServicePoint" /> 对象移除指定的连接组。</summary>
      <param name="connectionGroupName">连接组的名称，该连接组包含要关闭的和要从此服务点移除的连接。</param>
      <returns>指示连接组是否关闭的 <see cref="T:System.Boolean" /> 值。</returns>
    </member>
    <member name="M:System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)">
      <summary>对 TCP 连接启用或禁用 keep-alive 选项。</summary>
      <param name="enabled">如果设置为 true，则将使用指定的 <paramref name="keepAliveTime " />和 <paramref name="keepAliveInterval" /> 值启用 TCP 连接上的 TCP keep-alive 选项。如果设置为 false，则将禁用 TCP keep-alive 选项，并忽略剩余参数。默认值为 False。</param>
      <param name="keepAliveTime">指定发送第一个 keep-alive 数据包之前没有活动的超时时间（以毫秒为单位）。该值必须大于 0。  如果传递的值小于或等于零，则会引发 <see cref="T:System.ArgumentOutOfRangeException" />。</param>
      <param name="keepAliveInterval">指定当未收到确认消息时发送连续 keep-alive 数据包之间的间隔（以毫秒为单位）。该值必须大于 0。  如果传递的值小于或等于零，则会引发 <see cref="T:System.ArgumentOutOfRangeException" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">为指定的值 <paramref name="keepAliveTime" /> 或 <paramref name="keepAliveInterval" /> 参数小于或等于 0。</exception>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.String,System.Net.IWebProxy)">
      <summary>查找现有的 <see cref="T:System.Net.ServicePoint" /> 对象或创建新的 <see cref="T:System.Net.ServicePoint" /> 对象，以管理与指定的统一资源标识符 (URI) 的通信。</summary>
      <param name="uriString">要联系的 Internet 资源的 URI。</param>
      <param name="proxy">此请求的代理数据。</param>
      <returns>管理该请求的通信的 <see cref="T:System.Net.ServicePoint" /> 对象。</returns>
      <exception cref="T:System.UriFormatException">在指定的 URI <paramref name="uriString" /> 无效。</exception>
      <exception cref="T:System.InvalidOperationException">最大数 <see cref="T:System.Net.ServicePoint" /> 中定义的对象 <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 已达到。</exception>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri)">
      <summary>查找现有的 <see cref="T:System.Net.ServicePoint" /> 对象或创建新的 <see cref="T:System.Net.ServicePoint" /> 对象来管理与指定 <see cref="T:System.Uri" /> 对象的通信。</summary>
      <param name="address">要联系的 Internet 资源的 <see cref="T:System.Uri" /> 对象。</param>
      <returns>管理该请求的通信的 <see cref="T:System.Net.ServicePoint" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">最大数 <see cref="T:System.Net.ServicePoint" /> 中定义的对象 <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 已达到。</exception>
    </member>
    <member name="M:System.Net.ServicePointManager.FindServicePoint(System.Uri,System.Net.IWebProxy)">
      <summary>查找现有的 <see cref="T:System.Net.ServicePoint" /> 对象或创建新的 <see cref="T:System.Net.ServicePoint" /> 对象来管理与指定 <see cref="T:System.Uri" /> 对象的通信。</summary>
      <param name="address">
        <see cref="T:System.Uri" /> 对象，包含要联系的 Internet 资源的地址。</param>
      <param name="proxy">此请求的代理数据。</param>
      <returns>管理该请求的通信的 <see cref="T:System.Net.ServicePoint" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">最大数 <see cref="T:System.Net.ServicePoint" /> 中定义的对象 <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 已达到。</exception>
    </member>
    <member name="M:System.Net.ServicePointManager.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)">
      <summary>对 TCP 连接启用或禁用 keep-alive 选项。</summary>
      <param name="enabled">如果设置为 true，则将使用指定的 <paramref name="keepAliveTime " />和 <paramref name="keepAliveInterval" /> 值启用 TCP 连接上的 TCP keep-alive 选项。如果设置为 false，则将禁用 TCP keep-alive 选项，并忽略剩余参数。默认值为 False。</param>
      <param name="keepAliveTime">指定发送第一个 keep-alive 数据包之前没有活动的超时时间（以毫秒为单位）。该值必须大于 0。  如果传递的值小于或等于零，则会引发 <see cref="T:System.ArgumentOutOfRangeException" />。</param>
      <param name="keepAliveInterval">指定当未收到确认消息时发送连续 keep-alive 数据包之间的间隔（以毫秒为单位）。该值必须大于 0。  如果传递的值小于或等于零，则会引发 <see cref="T:System.ArgumentOutOfRangeException" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">为指定的值 <paramref name="keepAliveTime" /> 或 <paramref name="keepAliveInterval" /> 参数小于或等于 0。</exception>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>创建的新实例 <see cref="T:System.Net.SocketAddress" /> 类为给定的地址族。</summary>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。</param>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
      <summary>创建的新实例 <see cref="T:System.Net.SocketAddress" /> 类使用指定的地址族和缓冲区大小。</summary>
      <param name="family">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。</param>
      <param name="size">要为基础的缓冲区分配的字节数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 为小于 2。 需要这 2 个字节来存储 <paramref name="family" />。</exception>
    </member>
    <member name="M:System.Net.SocketAddress.Equals(System.Object)">
      <summary>确定指定的 Object 是否等同于当前的 Object。</summary>
      <param name="comparand">要与当前的 <see cref="T:System.Object" /> 进行比较的 Object。</param>
      <returns>如果指定的 true 等于当前的 Object，则为 Object；否则为 false。</returns>
    </member>
    <member name="M:System.Net.SocketAddress.GetHashCode">
      <summary>用作特定类型的哈希函数，适合在哈希算法和数据结构（如哈希表）中使用。</summary>
      <returns>当前 <see cref="T:System.Object" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Net.SocketAddress.ToString">
      <summary>返回有关套接字地址信息。</summary>
      <returns>一个字符串，包含以下信息 <see cref="T:System.Net.SocketAddress" />。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.SocketPermission" /> 类的指定权限的给定的传输地址。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkAccess" /> 值之一。</param>
      <param name="transport">
        <see cref="T:System.Net.TransportType" /> 值之一。</param>
      <param name="hostName">目标传输地址主机名。</param>
      <param name="portNumber">目标传输地址的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Net.SocketPermission" /> 类，它允许无限制地的访问 <see cref="T:System.Net.Sockets.Socket" /> 或不允许访问 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
    </member>
    <member name="M:System.Net.SocketPermission.AddPermission(System.Net.NetworkAccess,System.Net.TransportType,System.String,System.Int32)">
      <summary>将权限添加到的目标传输地址的权限集。</summary>
      <param name="access">
        <see cref="T:System.Net.NetworkAccess" /> 值之一。</param>
      <param name="transport">
        <see cref="T:System.Net.TransportType" /> 值之一。</param>
      <param name="hostName">目标传输地址主机名。</param>
      <param name="portNumber">目标传输地址的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostName" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.Copy">
      <summary>创建 <see cref="T:System.Net.SocketPermission" /> 实例的副本。</summary>
      <returns>新实例 <see cref="T:System.Net.SocketPermission" /> 副本的当前实例的类。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.FromXml(System.Security.SecurityElement)">
      <summary>重新构造 <see cref="T:System.Net.SocketPermission" /> 的 XML 编码的实例。</summary>
      <param name="securityElement">用于重新构造的 XML 编码 <see cref="T:System.Net.SocketPermission" /> 实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是这种类型的权限元素。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.Intersect(System.Security.IPermission)">
      <summary>返回两个区域之间的逻辑交集 <see cref="T:System.Net.SocketPermission" /> 实例。</summary>
      <param name="target">
        <see cref="T:System.Net.SocketPermission" /> 要与当前实例相交的实例。</param>
      <returns>
        <see cref="T:System.Net.SocketPermission" /> 实例，它表示两个交集 <see cref="T:System.Net.SocketPermission" /> 实例。 如果该交集为空，该方法返回 null。 如果 <paramref name="target" /> 参数为空引用，该方法返回 null。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 参数不是 <see cref="T:System.Net.SocketPermission" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Net.DnsPermission" /> 不会授予给方法调用方。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前的权限是否为指定权限的子集。</summary>
      <param name="target">一个 <see cref="T:System.Net.SocketPermission" /> 这是要用于测试子集关系。</param>
      <returns>如果 <paramref name="target" /> 是 null, ，此方法返回 true 如果当前实例不定义的任何权限; 否则为 false。 如果 <paramref name="target" /> 不是 null, ，此方法返回 true 如果当前实例定义的一个子集 <paramref name="target" /> 权限; 否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.Sockets.SocketException" />。</exception>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Net.DnsPermission" /> 不会授予给方法调用方。</exception>
    </member>
    <member name="M:System.Net.SocketPermission.IsUnrestricted">
      <summary>检查该对象的总体权限状态。</summary>
      <returns>true 如果 <see cref="T:System.Net.SocketPermission" /> 使用创建实例 Unrestricted 值从 <see cref="T:System.Security.Permissions.PermissionState" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.ToXml">
      <summary>创建的 XML 编码 <see cref="T:System.Net.SocketPermission" /> 实例和其当前状态。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> 实例，它包含的 XML 编码表示形式 <see cref="T:System.Net.SocketPermission" /> 实例，包括状态信息。</returns>
    </member>
    <member name="M:System.Net.SocketPermission.Union(System.Security.IPermission)">
      <summary>返回两个区域之间的逻辑联合 <see cref="T:System.Net.SocketPermission" /> 实例。</summary>
      <param name="target">
        <see cref="T:System.Net.SocketPermission" /> 实例与当前实例进行合并。</param>
      <returns>
        <see cref="T:System.Net.SocketPermission" /> 实例，它表示两个联合 <see cref="T:System.Net.SocketPermission" /> 实例。 如果 <paramref name="target" /> 参数是 null, ，它将返回当前实例的副本。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Net.SocketPermission" />。</exception>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.SecurityAction" /> 值初始化 <see cref="T:System.Net.SocketPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</exception>
    </member>
    <member name="M:System.Net.SocketPermissionAttribute.CreatePermission">
      <summary>创建并返回的新实例 <see cref="T:System.Net.SocketPermission" /> 类。</summary>
      <returns>一个实例 <see cref="T:System.Net.SocketPermission" /> 与安全声明相对应的类。</returns>
      <exception cref="T:System.ArgumentException">一个或多个当前实例的 <see cref="P:System.Net.SocketPermissionAttribute.Access" />, ，<see cref="P:System.Net.SocketPermissionAttribute.Host" />, ，<see cref="P:System.Net.SocketPermissionAttribute.Transport" />, ，或 <see cref="P:System.Net.SocketPermissionAttribute.Port" /> 属性是 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="comparand">与该实例进行比较的对象。</param>
      <returns>true 如果 <paramref name="comparand" /> 的一个实例 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 并且等于该实例的值; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>一个 Int32 哈希代码。</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>测试两个指定 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例是否相等。</summary>
      <param name="packetInformation1">
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> 相等运算符左侧的实例。</param>
      <param name="packetInformation2">
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> 相等运算符右侧的实例。</param>
      <returns>如果 <paramref name="packetInformation1" /> 和 <paramref name="packetInformation2" /> 相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)">
      <summary>测试两个指定 <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例是否不相等。</summary>
      <param name="packetInformation1">
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> 不等运算符左侧的实例。</param>
      <param name="packetInformation2">
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> 不等运算符右侧的实例。</param>
      <returns>true 如果 <paramref name="packetInformation1" /> 和 <paramref name="packetInformation2" /> 不相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>初始化的新版本 <see cref="T:System.Net.Sockets.IPv6MulticastOption" /> 类指定的 IP 多播组。</summary>
      <param name="group">
        <see cref="T:System.Net.IPAddress" /> 多路广播的组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.IPv6MulticastOption.#ctor(System.Net.IPAddress,System.Int64)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.IPv6MulticastOption" /> 用指定的 IP 多播的组和本地接口地址。</summary>
      <param name="group">组 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="ifindex">本地接口地址。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ifindex" /> 小于 0。- 或 - <paramref name="ifindex" /> 大于 0x00000000FFFFFFFF。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)">
      <summary>初始化 <see cref="T:System.Net.Sockets.LingerOption" /> 类的新实例。</summary>
      <param name="enable">true 后保持连接 <see cref="M:System.Net.Sockets.Socket.Close" /> 方法是调用; 否则为 false。</param>
      <param name="seconds">若要保持的秒数之后连接 <see cref="M:System.Net.Sockets.Socket.Close" /> 调用方法。</param>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress)">
      <summary>初始化的新版本 <see cref="T:System.Net.Sockets.MulticastOption" /> 类指定的 IP 多播组。</summary>
      <param name="group">
        <see cref="T:System.Net.IPAddress" /> 多路广播的组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.MulticastOption" /> 类具有指定的 IP 多播的组地址和接口索引。</summary>
      <param name="group">
        <see cref="T:System.Net.IPAddress" /> 多路广播的组。</param>
      <param name="interfaceIndex">用来发送和接收多播的数据包的接口的索引。</param>
    </member>
    <member name="M:System.Net.Sockets.MulticastOption.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.MulticastOption" /> 类，具有指定的 IP 多播地址和与网络接口相关联的本地 IP 地址进行分组。</summary>
      <param name="group">组 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="mcint">本地 <see cref="T:System.Net.IPAddress" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。- 或 - <paramref name="mcint" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)">
      <summary>创建的新实例 <see cref="T:System.Net.Sockets.NetworkStream" /> 为指定的类 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> ， <see cref="T:System.Net.Sockets.NetworkStream" /> 将用于发送和接收数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="socket" /> 未连接参数。- 或 - <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性 <paramref name="socket" /> 参数不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。- 或 - <paramref name="socket" /> 参数处于阻止状态。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.NetworkStream" /> 为指定的类 <see cref="T:System.Net.Sockets.Socket" /> 具有指定 <see cref="T:System.Net.Sockets.Socket" /> 所有权。</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> ， <see cref="T:System.Net.Sockets.NetworkStream" /> 将用于发送和接收数据。</param>
      <param name="ownsSocket">设置为 true 以指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 将拥有 <see cref="T:System.Net.Sockets.Socket" />; 否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="socket" /> 未连接参数。- 或 - 值 <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性 <paramref name="socket" /> 参数不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。- 或 - <paramref name="socket" /> 参数处于阻止状态。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)">
      <summary>创建的新实例 <see cref="T:System.Net.Sockets.NetworkStream" /> 为指定的类 <see cref="T:System.Net.Sockets.Socket" /> 与指定的访问权限。</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> ， <see cref="T:System.Net.Sockets.NetworkStream" /> 将用于发送和接收数据。</param>
      <param name="access">按位组合 <see cref="T:System.IO.FileAccess" /> 值用于指定类型的访问权限提供给 <see cref="T:System.Net.Sockets.NetworkStream" /> 通过提供 <see cref="T:System.Net.Sockets.Socket" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="socket" /> 未连接参数。- 或 - <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性 <paramref name="socket" /> 参数不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。- 或 - <paramref name="socket" /> 参数处于阻止状态。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)">
      <summary>创建的新实例 <see cref="T:System.Net.Sockets.NetworkStream" /> 为指定的类 <see cref="T:System.Net.Sockets.Socket" /> 与指定的访问权限和指定 <see cref="T:System.Net.Sockets.Socket" /> 所有权。</summary>
      <param name="socket">
        <see cref="T:System.Net.Sockets.Socket" /> ， <see cref="T:System.Net.Sockets.NetworkStream" /> 将用于发送和接收数据。</param>
      <param name="access">按位组合 <see cref="T:System.IO.FileAccess" /> 值，该值指定的访问提供给类型 <see cref="T:System.Net.Sockets.NetworkStream" /> 通过提供 <see cref="T:System.Net.Sockets.Socket" />。</param>
      <param name="ownsSocket">设置为 true 以指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 将拥有 <see cref="T:System.Net.Sockets.Socket" />; 否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="socket" /> 参数为 null。</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="socket" /> 未连接参数。- 或 - <see cref="P:System.Net.Sockets.Socket.SocketType" /> 属性 <paramref name="socket" /> 参数不是 <see cref="F:System.Net.Sockets.SocketType.Stream" />。- 或 - <paramref name="socket" /> 参数处于阻止状态。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步读从 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是内存中用于存储从读取的数据的位置 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 此处开始存储数据。</param>
      <param name="size">要读取的字节数 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它是执行时 <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 完成。</param>
      <param name="state">一个包含任何其他用户定义数据的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它表示异步调用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。- 或 - <paramref name="offset" /> 参数是否大于的长度 <paramref name="buffer" /> 参数。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 个的长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.IO.IOException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。- 或 - 没有从网络上读取时发生故障。- 或 -访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步写到流。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要写入到数据 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 开始发送数据。</param>
      <param name="size">要写入的字节数 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托，它是执行时 <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> 完成。</param>
      <param name="state">一个包含任何其他用户定义数据的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它表示异步调用。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。- 或 - <paramref name="offset" /> 参数是否大于的长度 <paramref name="buffer" />。- 或 - <paramref name="size" /> 参数小于 0。- 或 - <paramref name="size" /> 参数是否大于的长度 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.IO.IOException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。- 或 - 写入到网络时失败。- 或 -访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Close(System.Int32)">
      <summary>关闭 <see cref="T:System.Net.Sockets.NetworkStream" /> 后等待指定的时间，以允许发送数据。</summary>
      <param name="timeout">32 位有符号的整数，指定要发送所有剩余数据在关闭之前所等待的毫秒数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 参数是小于-1。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Sockets.NetworkStream" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)">
      <summary>处理异步读取的结束。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> ，它表示异步调用。</param>
      <returns>从读取的字节数 <see cref="T:System.Net.Sockets.NetworkStream" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数为 null。</exception>
      <exception cref="T:System.IO.IOException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。- 或 - 访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)">
      <summary>处理异步写入结束。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> ，它表示异步调用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。</exception>
      <exception cref="T:System.IO.IOException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。- 或 - 在写入到网络时出错。- 或 -访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Finalize">
      <summary>释放由 <see cref="T:System.Net.Sockets.NetworkStream" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Flush">
      <summary>刷新流中的数据。 此方法保留供将来使用。</summary>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)">
      <summary>刷新流中的数据作为异步操作。</summary>
      <param name="cancellationToken">一个取消标记，用于传播应取消此操作的通知。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>从读取数据 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是内存中用于存储从读取的数据的位置 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 此处开始存储到的数据。</param>
      <param name="size">要读取的字节数 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <returns>从读取的字节数 <see cref="T:System.Net.Sockets.NetworkStream" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。- 或 - <paramref name="offset" /> 参数是否大于的长度 <paramref name="buffer" />。- 或 - <paramref name="size" /> 参数小于 0。- 或 - <paramref name="size" /> 参数是否大于的长度 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。- 或 -访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.IO.IOException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 已关闭。- 或 - 没有从网络读取失败。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>将流的当前位置设置为给定的值。 此方法当前不支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="offset">未使用此参数。</param>
      <param name="origin">未使用此参数。</param>
      <returns>流中的位置。</returns>
      <exception cref="T:System.NotSupportedException">任何使用此属性。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)">
      <summary>设置流的长度。 此方法始终引发 <see cref="T:System.NotSupportedException" />。</summary>
      <param name="value">未使用此参数。</param>
      <exception cref="T:System.NotSupportedException">任何使用此属性。</exception>
    </member>
    <member name="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>将数据写入 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要写入到数据 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 从其开始写入数据。</param>
      <param name="size">要写入的字节数 <see cref="T:System.Net.Sockets.NetworkStream" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 参数小于 0。- 或 - <paramref name="offset" /> 参数是否大于的长度 <paramref name="buffer" />。- 或 - <paramref name="size" /> 参数小于 0。- 或 - <paramref name="size" /> 参数是否大于的长度 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.IO.IOException">写入到网络时失败。- 或 -访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 已关闭。- 或 - 从网络读取时出错。</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用指定的缓冲区。</summary>
      <param name="buffer">要发送使用数据的字节数组 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数不能为 null</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用指定的缓冲区、 缓冲区偏移量和计数。</summary>
      <param name="buffer">要发送使用数据的字节数组 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</param>
      <param name="offset">以字节为单位，从开始处的偏移量 <paramref name="buffer" /> 放到的位置 <paramref name="buffer" /> 开始发送中指定的数据 <paramref name="buffer" /> 参数。</param>
      <param name="count">要从开始发送的字节数 <paramref name="offset" /> 参数。 如果 <paramref name="count" /> 为零，则不发送任何字节。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须小于缓冲区的大小</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用指定的缓冲区，缓冲区偏移量和计数的选项来合并此元素与从套接字层传输到单个发送请求中的下一个元素。</summary>
      <param name="buffer">要发送使用数据的字节数组 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</param>
      <param name="offset">以字节为单位，从开始处的偏移量 <paramref name="buffer" /> 放到的位置 <paramref name="buffer" /> 开始发送中指定的数据 <paramref name="buffer" /> 参数。</param>
      <param name="count">若要从开始发送的字节数 <paramref name="offset" /> 参数。 如果 <paramref name="count" /> 为零，则不发送任何字节。</param>
      <param name="endOfPacket">一个布尔值，指定此元素不应结合使用在单个的下一个元素将从套接字层请求发送到传输。 此标志用于数据报或面向消息的套接字上精细地控制每个消息的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须小于缓冲区的大小</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用指定的文件。</summary>
      <param name="filepath">要使用传输的文件的文件名 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filepath" /> 参数不能为 null</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用指定的文件名路径、 偏移量和计数。</summary>
      <param name="filepath">要使用传输的文件的文件名 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</param>
      <param name="offset">以字节为单位，从文件中开始发送中指定的文件中的位置的文件的开头的偏移量 <paramref name="filepath" /> 参数。</param>
      <param name="count">要从开始发送的字节数 <paramref name="offset" /> 参数。 如果 <paramref name="count" /> 为零，发送整个文件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filepath" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须指示的文件的大小小于 <paramref name="filepath" /> 参数。</exception>
    </member>
    <member name="M:System.Net.Sockets.SendPacketsElement.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类使用指定的文件名路径、 缓冲区偏移量和计数的选项将合并此元素与从套接字层传输到单个发送请求中的下一个元素。</summary>
      <param name="filepath">要使用传输的文件的文件名 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</param>
      <param name="offset">以字节为单位，从文件中开始发送中指定的文件中的位置的文件的开头的偏移量 <paramref name="filepath" /> 参数。</param>
      <param name="count">要从开始发送的字节数 <paramref name="offset" /> 参数。 如果 <paramref name="count" /> 为零，发送整个文件。</param>
      <param name="endOfPacket">一个布尔值，指定此元素不应结合使用在单个的下一个元素将从套接字层请求发送到传输。 此标志用于数据报或面向消息的套接字上精细地控制每个消息的内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filepath" /> 参数不能为 null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 和 <paramref name="count" /> 参数必须大于或等于零。<paramref name="offset" /> 和 <paramref name="count" /> 必须指示的文件的大小小于 <paramref name="filepath" /> 参数。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.Socket" /> 类使用指定的地址族、 套接字类型和协议。</summary>
      <param name="addressFamily">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。</param>
      <param name="socketType">
        <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</param>
      <param name="protocolType">
        <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</param>
      <exception cref="T:System.Net.Sockets.SocketException">组合 <paramref name="addressFamily" />, ，<paramref name="socketType" />, ，和 <paramref name="protocolType" /> 导致无效的套接字。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketInformation)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.Socket" /> 类使用返回值的指定的值 <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />。</summary>
      <param name="socketInformation">返回的套接字信息 <see cref="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)" />。</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.Socket" /> 类使用指定的套接字类型和协议。</summary>
      <param name="socketType">
        <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</param>
      <param name="protocolType">
        <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</param>
      <exception cref="T:System.Net.Sockets.SocketException">组合  <paramref name="socketType" /> 和 <paramref name="protocolType" /> 导致无效的套接字。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Accept">
      <summary>创建一个新 <see cref="T:System.Net.Sockets.Socket" /> 为新创建的连接。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.Socket" /> 为新创建的连接。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">接受套接字不侦听连接。 必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 之前调用 <see cref="M:System.Net.Sockets.Socket.Accept" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>开始一个异步操作以接受传入的连接尝试。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentException">参数无效。 如果所提供的缓冲区不足够大，则会发生此异常。 缓冲区必须至少为 2 * (sizeof(SOCKADDR_STORAGE + 16) 字节。如果指定了多个缓冲区，，也会发生此异常 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">参数超出了范围。 如果出现异常 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" /> 小于 0。</exception>
      <exception cref="T:System.InvalidOperationException">请求的操作无效。 如果发生此异常接受 <see cref="T:System.Net.Sockets.Socket" /> 不侦听连接或已接受套接字绑定。必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 方法之前调用 <see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。如果已连接套接字或套接字操作已在使用指定的运行，也会发生此异常 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以接受传入的连接尝试。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 引用了异步 <see cref="T:System.Net.Sockets.Socket" /> 创建。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">Windows NT 是必需的此方法。</exception>
      <exception cref="T:System.InvalidOperationException">接受套接字不侦听连接。 必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 之前调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。- 或 - 已接受套接字绑定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> 小于 0。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以接受传入的连接尝试并接收第一个客户端应用程序所发送的数据块。</summary>
      <param name="receiveSize">要接受来自该发件人的字节数。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 引用了异步 <see cref="T:System.Net.Sockets.Socket" /> 创建。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">Windows NT 是必需的此方法。</exception>
      <exception cref="T:System.InvalidOperationException">接受套接字不侦听连接。 必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 之前调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。- 或 - 已接受套接字绑定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> 小于 0。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginAccept(System.Net.Sockets.Socket,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始异步操作以接受传入的连接尝试从指定的套接字并接收第一个客户端应用程序所发送的数据块。</summary>
      <param name="acceptSocket">接受 <see cref="T:System.Net.Sockets.Socket" /> 对象。 此值可能为 null。</param>
      <param name="receiveSize">最大接收的字节数。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，可引用异步 <see cref="T:System.Net.Sockets.Socket" /> 对象创建。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">Windows NT 是必需的此方法。</exception>
      <exception cref="T:System.InvalidOperationException">接受套接字不侦听连接。 必须调用 <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 和 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 之前调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。- 或 - 已接受套接字绑定。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="receiveSize" /> 小于 0。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>开始一个对远程主机连接的异步请求。</summary>
      <param name="remoteEP">表示远程主机的 <see cref="T:System.Net.EndPoint" />。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>引用异步连接的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个对远程主机连接的异步请求。 主机由 <see cref="T:System.Net.IPAddress" /> 和端口号指定。</summary>
      <param name="address">远程主机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">远程主机的端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用连接操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含连接操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>引用异步连接的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Net.Sockets.Socket" /> 不在套接字族中。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个对远程主机连接的异步请求。 主机由 <see cref="T:System.Net.IPAddress" /> 数组和端口号指定。</summary>
      <param name="addresses">至少一个用于指定远程主机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">远程主机的端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用连接操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含连接操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>引用异步连接的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">此方法对使用 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 的套接字有效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个对远程主机连接的异步请求。 主机由主机名和端口号指定。</summary>
      <param name="host">远程主机的名称。</param>
      <param name="port">远程主机的端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用连接操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含连接操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>引用异步连接的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)">
      <summary>开始一个异步请求来断开与远程终结点的连接。</summary>
      <param name="reuseSocket">true 如果之后，可以重用此套接字连接已关闭;否则为 false。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，可引用异步操作。</returns>
      <exception cref="T:System.NotSupportedException">操作系统是 Windows 2000 或更早版本，并且此方法需要 Windows XP。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>开始异步接收数据从连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 在其中存储接收到的数据的参数。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关接收操作的信息。 当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>开始异步接收数据从连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 存储接收的数据。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关接收操作的信息。 当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>开始异步接收数据从连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffers">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关接收操作的信息。 当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>开始异步接收数据从连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffers">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关接收操作的信息。 当操作完成时，此对象会被传递给 <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>开始以异步方式从指定的网络设备上接收数据。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 在其中存储数据的参数。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> 表示的数据源。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
      <summary>开始异步接收指定的数据的字节数，到使用指定的数据缓冲区的指定位置 <see cref="T:System.Net.Sockets.SocketFlags" />, ，并将终结点和数据包信息存储...</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 在其中存储数据的参数。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> 表示的数据源。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步读取。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">操作系统是 Windows 2000 或更早版本，并且此方法需要 Windows XP。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>将数据异步发送到连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 从此处开始发送数据的参数。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步发送。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度少于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>将数据异步发送到连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 从此处开始发送数据的参数。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步发送。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度少于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
      <summary>将数据异步发送到连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffers">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步发送。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSend(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)">
      <summary>将数据异步发送到连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffers">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步发送。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)">
      <summary>将文件发送 <paramref name="fileName" /> 到连接 <see cref="T:System.Net.Sockets.Socket" /> 对象使用 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 标志。</summary>
      <param name="fileName">一个字符串，包含的路径和要发送的文件的名称。 此参数可以为 null。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，表示异步发送。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.NotSupportedException">套接字未连接到远程主机。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该文件 <paramref name="fileName" /> 找不到。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions,System.AsyncCallback,System.Object)">
      <summary>文件和数据缓冲区将异步发送到连接 <see cref="T:System.Net.Sockets.Socket" /> 对象。</summary>
      <param name="fileName">一个字符串，包含的路径和要发送的文件的名称。 此参数可以为 null。</param>
      <param name="preBuffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送该文件之前，发送的数据。 此参数可以为 null。</param>
      <param name="postBuffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送该文件之后发送的数据。 此参数可以为 null。</param>
      <param name="flags">按位组合 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 此操作完成时要调用的委托。 此参数可以为 null。</param>
      <param name="state">用户定义的对象，其中包含此请求的状态信息。 此参数可以为 null。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 表示异步操作的对象。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
      <exception cref="T:System.NotSupportedException">操作系统不是 Windows NT 或更高版本。- 或 - 套接字未连接到远程主机。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该文件 <paramref name="fileName" /> 找不到。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
      <summary>以异步方式将数据发送到特定的远程主机。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="offset">中的从零开始的位置 <paramref name="buffer" /> 从此处开始发送数据。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> 表示远程设备。</param>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此请求的状态信息的对象。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步发送。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)">
      <summary>将相关联 <see cref="T:System.Net.Sockets.Socket" /> 与本地终结点。</summary>
      <param name="localEP">本地 <see cref="T:System.Net.EndPoint" /> 联 <see cref="T:System.Net.Sockets.Socket" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>取消对远程主机连接的异步请求。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 用来与远程主机的连接请求通过调用某个对象 <see cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数不能为 null 和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close">
      <summary>关闭 <see cref="T:System.Net.Sockets.Socket" /> 连接和释放所有关联资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close(System.Int32)">
      <summary>关闭 <see cref="T:System.Net.Sockets.Socket" /> 连接并释放所有关联资源与指定的超时时间，以允许发送排队的数据。</summary>
      <param name="timeout">最多等待 <paramref name="timeout" /> 秒以发送任何剩余的数据，然后关闭套接字。</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)">
      <summary>建立与远程主机的连接。</summary>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> 表示远程设备。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)">
      <summary>建立与远程主机的连接。 主机指定的 IP 地址和端口号。</summary>
      <param name="address">远程主机的 IP 地址。</param>
      <param name="port">远程主机的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>建立与远程主机的连接。 主机指定的 IP 地址数组和端口号。</summary>
      <param name="addresses">远程主机的 IP 地址。</param>
      <param name="port">远程主机的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="address" /> 的长度为零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)">
      <summary>建立与远程主机的连接。 主机由主机名和端口号指定。</summary>
      <param name="host">远程主机的名称。</param>
      <param name="port">远程主机的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">此方法对 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列中的套接字有效。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 正在进行 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>开始对到远程主机的连接的异步请求。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentException">参数无效。 如果指定了多个缓冲区，会发生此异常 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数不能为 null 和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 是侦听或套接字操作已在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。 如果此异常也会发生本地终结点和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不是相同的地址族。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>开始对到远程主机的连接的异步请求。</summary>
      <param name="socketType">
        <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</param>
      <param name="protocolType">
        <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</param>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentException">参数无效。 如果指定了多个缓冲区，会发生此异常 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性不为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数不能为 null 和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 是侦听或套接字操作已在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。 如果此异常也会发生本地终结点和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不是相同的地址族。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Disconnect(System.Boolean)">
      <summary>关闭套接字连接，并允许重用套接字。</summary>
      <param name="reuseSocket">true 如果关闭当前连接; 之后，可以重用此套接字否则为 false。</param>
      <exception cref="T:System.PlatformNotSupportedException">此方法要求 Windows 2000 或更早版本，否则将引发异常。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>开始一个异步请求来断开与远程终结点的连接。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> 参数不能为 null。</exception>
      <exception cref="T:System.InvalidOperationException">套接字操作已经在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose">
      <summary>释放 <see cref="T:System.Net.Sockets.Socket" /> 类的当前实例所使用的所有资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Sockets.Socket" /> 使用的非托管资源，并可根据需要释放托管资源。</summary>
      <param name="disposing">如果释放托管资源和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Sockets.Socket.DuplicateAndClose(System.Int32)">
      <summary>复制目标进程的套接字引用，并关闭此进程的套接字。</summary>
      <param name="targetProcessId">在其中创建重复的套接字引用的目标进程的 ID。</param>
      <returns>要传递到目标进程的套接字引用。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="targetProcessID" /> 不是有效的进程 id。- 或 - 重复的套接字引用失败。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.IAsyncResult)">
      <summary>异步接受传入的连接尝试，并创建一个新 <see cref="T:System.Net.Sockets.Socket" /> 对象以处理远程主机通信。 此方法返回包含传输的初始数据的缓冲区。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，包含传输的字节数。</param>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 存储此异步操作，以及任何用户的状态信息的对象定义的数据。</param>
      <returns>一个 <see cref="T:System.Net.Sockets.Socket" /> 对象以处理与远程主机的通信。</returns>
      <exception cref="T:System.NotSupportedException">Windows NT 是必需的此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为空。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 之前已调用方法。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问时出错 <see cref="T:System.Net.Sockets.Socket" /> 请参阅备注部分以了解更多信息。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.Byte[]@,System.Int32@,System.IAsyncResult)">
      <summary>异步接受传入的连接尝试，并创建一个新 <see cref="T:System.Net.Sockets.Socket" /> 对象以处理远程主机通信。 此方法返回包含初始数据和传输的字节数的缓冲区。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，包含传输的字节数。</param>
      <param name="bytesTransferred">传输的字节数。</param>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 存储此异步操作，以及任何用户的状态信息的对象定义的数据。</param>
      <returns>一个 <see cref="T:System.Net.Sockets.Socket" /> 对象以处理与远程主机的通信。</returns>
      <exception cref="T:System.NotSupportedException">Windows NT 是必需的此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为空。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 之前已调用方法。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问时出错 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)">
      <summary>异步接受传入的连接尝试，并创建一个新 <see cref="T:System.Net.Sockets.Socket" /> 来处理远程主机通信。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 用于存储此异步操作，以及任何用户定义的数据的状态信息。</param>
      <returns>一个 <see cref="T:System.Net.Sockets.Socket" /> 以便处理与远程主机的通信。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 不是通过调用 <see cref="M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndAccept(System.IAsyncResult)" /> 之前已调用方法。</exception>
      <exception cref="T:System.NotSupportedException">Windows NT 是必需的此方法。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)">
      <summary>结束挂起的异步连接请求。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 用于存储状态信息和对此异步操作的任何用户定义数据。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndConnect(System.IAsyncResult)" /> 之前已调用的异步连接。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)">
      <summary>结束挂起的异步断开连接请求。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 存储状态信息以及此异步操作的任何用户定义数据的对象。</param>
      <exception cref="T:System.NotSupportedException">操作系统是 Windows 2000 或更早版本，并且此方法需要 Windows XP。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginDisconnect(System.Boolean,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndDisconnect(System.IAsyncResult)" /> 之前已调用的异步连接。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.Net.WebException">断开连接的请求已超时。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)">
      <summary>结束挂起的异步读取。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 用于存储状态信息和对此异步操作的任何用户定义数据。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 之前已调用为异步读取。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>结束挂起的异步读取。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 用于存储状态信息和对此异步操作的任何用户定义数据。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceive(System.IAsyncResult)" /> 之前已调用为异步读取。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
      <summary>结束挂起的异步读取从特定的终结点。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 用于存储状态信息和对此异步操作的任何用户定义数据。</param>
      <param name="endPoint">源 <see cref="T:System.Net.EndPoint" />。</param>
      <returns>如果成功，则接收的字节数。 如果不成功，返回 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" /> 之前已调用为异步读取。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>结束挂起的异步读取从特定的终结点。 此方法还显示有关比数据包的详细信息 <see cref="M:System.Net.Sockets.Socket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)" />。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 用于存储状态信息和对此异步操作的任何用户定义数据。</param>
      <param name="socketFlags">按位组合 <see cref="T:System.Net.Sockets.SocketFlags" /> 所接收的数据包的值。</param>
      <param name="endPoint">源 <see cref="T:System.Net.EndPoint" />。</param>
      <param name="ipPacketInformation">
        <see cref="T:System.Net.IPAddress" /> 和接收的数据包的接口。</param>
      <returns>如果成功，则接收的字节数。 如果不成功，返回 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null- 或 - <paramref name="endPoint" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 之前已调用为异步读取。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)">
      <summary>结束挂起的异步发送。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 它存储此异步操作的状态信息。</param>
      <returns>如果成功，字节数已发送到 <see cref="T:System.Net.Sockets.Socket" />; 否则为一个无效的 <see cref="T:System.Net.Sockets.Socket" /> 错误。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> 之前已调用的异步发送。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult,System.Net.Sockets.SocketError@)">
      <summary>结束挂起的异步发送。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 它存储此异步操作的状态信息。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <returns>如果成功，字节数已发送到 <see cref="T:System.Net.Sockets.Socket" />; 否则为一个无效的 <see cref="T:System.Net.Sockets.Socket" /> 错误。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> 之前已调用的异步发送。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)">
      <summary>结束挂起的异步发送的文件。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 存储此异步操作的状态信息的对象。</param>
      <exception cref="T:System.NotSupportedException">Windows NT 是必需的此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为空。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSendFile(System.IAsyncResult)" /> 先前曾为异步调用 <see cref="M:System.Net.Sockets.Socket.BeginSendFile(System.String,System.AsyncCallback,System.Object)" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)">
      <summary>结束挂起的异步发送到特定位置。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 用于存储状态信息和对此异步操作的任何用户定义数据。</param>
      <returns>如果成功，发送的字节数;否则为一个无效的 <see cref="T:System.Net.Sockets.Socket" /> 错误。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSendTo(System.IAsyncResult)" /> 之前已调用的异步发送。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Finalize">
      <summary>释放 <see cref="T:System.Net.Sockets.Socket" /> 类使用的资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
      <summary>返回指定的值 <see cref="T:System.Net.Sockets.Socket" /> 选项时，表示为一个对象。</summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</param>
      <returns>一个对象，表示该选项的值。 当 <paramref name="optionName" /> 参数设置为 <see cref="F:System.Net.Sockets.SocketOptionName.Linger" /> 返回值是实例 <see cref="T:System.Net.Sockets.LingerOption" /> 类。 当 <paramref name="optionName" /> 设置为 <see cref="F:System.Net.Sockets.SocketOptionName.AddMembership" /> 或 <see cref="F:System.Net.Sockets.SocketOptionName.DropMembership" />, ，返回值是实例 <see cref="T:System.Net.Sockets.MulticastOption" /> 类。 当 <paramref name="optionName" /> 是任何其他值，则返回值是一个整数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。- 或 -<paramref name="optionName" /> 已设置为不受支持的值 <see cref="F:System.Net.Sockets.SocketOptionName.MaxConnections" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>返回指定 <see cref="T:System.Net.Sockets.Socket" /> 选项设置，表示为字节数组。</summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</param>
      <param name="optionValue">类型的数组 <see cref="T:System.Byte" /> ，是否要接收的选项设置。</param>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。- 或 -在.NET Compact Framework 应用程序中，Windows CE 默认缓冲区空间设置为 32768 个字节。 您可以更改每个套接字缓冲区空间，通过调用 <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>返回指定的值 <see cref="T:System.Net.Sockets.Socket" /> 数组中的选项。</summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</param>
      <param name="optionLength">预期的返回值长度 （字节）。</param>
      <returns>类型的数组 <see cref="T:System.Byte" /> 包含值的套接字选项。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。- 或 -在.NET Compact Framework 应用程序中，Windows CE 默认缓冲区空间设置为 32768 个字节。 您可以更改每个套接字缓冲区空间，通过调用 <see cref="Overload:System.Net.Sockets.Socket.SetSocketOption" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])">
      <summary>设置为低级别操作模式 <see cref="T:System.Net.Sockets.Socket" /> 使用数字控制代码。</summary>
      <param name="ioControlCode">
        <see cref="T:System.Int32" /> 值，该值指定要执行的操作的控制代码。</param>
      <param name="optionInValue">一个 <see cref="T:System.Byte" /> 数组，其中包含该操作所需的输入的数据。</param>
      <param name="optionOutValue">一个 <see cref="T:System.Byte" /> 数组，其中包含由操作返回的输出数据。</param>
      <returns>中的字节数 <paramref name="optionOutValue" /> 参数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">尝试更改阻止模式，而无需使用 <see cref="P:System.Net.Sockets.Socket.Blocking" /> 属性。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])">
      <summary>设置为低级别操作模式 <see cref="T:System.Net.Sockets.Socket" /> 使用 <see cref="T:System.Net.Sockets.IOControlCode" /> 枚举来指定控制代码。</summary>
      <param name="ioControlCode">一个 <see cref="T:System.Net.Sockets.IOControlCode" /> 值，该值指定要执行的操作的控制代码。</param>
      <param name="optionInValue">类型的数组 <see cref="T:System.Byte" /> ，其中包含该操作所需的输入的数据。</param>
      <param name="optionOutValue">类型的数组 <see cref="T:System.Byte" /> ，其中包含由操作返回的输出数据。</param>
      <returns>中的字节数 <paramref name="optionOutValue" /> 参数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">尝试更改阻止模式，而无需使用 <see cref="P:System.Net.Sockets.Socket.Blocking" /> 属性。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Listen(System.Int32)">
      <summary>位置 <see cref="T:System.Net.Sockets.Socket" /> 处于侦听状态。</summary>
      <param name="backlog">挂起的连接队列的最大长度。</param>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
      <summary>确定的状态 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="microSeconds">要等待响应，以微秒为单位的时间。</param>
      <param name="mode">
        <see cref="T:System.Net.Sockets.SelectMode" /> 值之一。</param>
      <returns>状态 <see cref="T:System.Net.Sockets.Socket" /> 基于传入的轮询模式值 <paramref name="mode" /> 参数。模式 返回值 <see cref="F:System.Net.Sockets.SelectMode.SelectRead" />true 如果 <see cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" /> 已调用和一个连接处于挂起状态。 - 或 - true 如果数据是可供读取; - 或 - true 如果连接已关闭、 重置，或者终止，则返回， 否则，返回 false。<see cref="F:System.Net.Sockets.SelectMode.SelectWrite" />true, 如果处理 <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" />, ，并已成功连接; - 或 - true 如果可以发送数据; 否则，返回 false。<see cref="F:System.Net.Sockets.SelectMode.SelectError" />true 如果处理 <see cref="M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)" /> 不阻止问题，并已失败连接; - 或 - true 如果 <see cref="F:System.Net.Sockets.SocketOptionName.OutOfBandInline" /> 不是组和带外数据是否可用， 否则，返回 false。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="mode" /> 参数不是一个 <see cref="T:System.Net.Sockets.SelectMode" /> 值。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面的备注。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[])">
      <summary>从绑定接收数据 <see cref="T:System.Net.Sockets.Socket" /> 到接收缓冲区中。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>从绑定接收指定的数目的字节 <see cref="T:System.Net.Sockets.Socket" /> 到接收缓冲区的指定偏移量的位置，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是为收到的数据的存储位置。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 存储接收的数据。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 未设置属性。- 或 - 在访问时出现操作系统错误 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>从绑定接收数据 <see cref="T:System.Net.Sockets.Socket" /> 存入接收缓冲区，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 参数来存储所接收的数据。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - 未设置 <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 属性。- 或 - 在访问时出现操作系统错误 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>从绑定接收指定的数目的数据的字节 <see cref="T:System.Net.Sockets.Socket" /> 存入接收缓冲区，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 超出了大小 <paramref name="buffer" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>从绑定接收数据 <see cref="T:System.Net.Sockets.Socket" /> 存入接收缓冲区，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>从绑定接收数据 <see cref="T:System.Net.Sockets.Socket" /> 的接收缓冲区的列表中。</summary>
      <param name="buffers">一份 <see cref="T:System.ArraySegment`1" />类型 s <see cref="T:System.Byte" /> ，其中包含接收到的数据。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 参数为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>从绑定接收数据 <see cref="T:System.Net.Sockets.Socket" /> 入接收缓冲区列表中，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffers">一份 <see cref="T:System.ArraySegment`1" />类型 s <see cref="T:System.Byte" /> ，其中包含接收到的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。- 或 -<paramref name="buffers" />.计数为零。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>从绑定接收数据 <see cref="T:System.Net.Sockets.Socket" /> 入接收缓冲区列表中，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffers">一份 <see cref="T:System.ArraySegment`1" />类型 s <see cref="T:System.Byte" /> ，其中包含接收到的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。- 或 -<paramref name="buffers" />.计数为零。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>开始一个异步请求，以便接收来自连接的数据 <see cref="T:System.Net.Sockets.Socket" /> 对象。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentException">参数无效。<see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 或 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性 <paramref name="e" /> 参数必须引用有效的缓冲区。 一个或两个属性的另一个可能集，但不要两者都在同一时间。</exception>
      <exception cref="T:System.InvalidOperationException">套接字操作已经在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>接收到指定数据缓冲区，使用指定的位置指定的数据的字节数 <see cref="T:System.Net.Sockets.SocketFlags" />, ，并将存储终结点。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是为收到的数据的存储位置。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 参数来存储所接收的数据。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, ，通过引用传递，表示远程服务器。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 减去偏移量参数的值。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 未设置属性。- 或 - 尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>将指定的数目的字节接收到的数据缓冲区，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />, ，并将存储终结点。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是为收到的数据的存储位置。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, ，通过引用传递，表示远程服务器。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 未设置属性。- 或 - 在访问时出现操作系统错误 <see cref="T:System.Net.Sockets.Socket" />。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
      <summary>到数据缓冲区中接收数据报并存储终结点。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是为收到的数据的存储位置。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, ，通过引用传递，表示远程服务器。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
      <summary>接收到数据缓冲区，使用指定的数据报 <see cref="T:System.Net.Sockets.SocketFlags" />, ，并将存储终结点。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是接收到的数据的存储位置。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, ，通过引用传递，表示远程服务器。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>开始以异步方式从指定的网络设备上接收数据。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</exception>
      <exception cref="T:System.InvalidOperationException">套接字操作已经在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)">
      <summary>接收到指定数据缓冲区，使用指定的位置指定的数据的字节数 <see cref="T:System.Net.Sockets.SocketFlags" />, ，并将终结点和数据包信息存储。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，它是为收到的数据的存储位置。</param>
      <param name="offset">中的位置 <paramref name="buffer" /> 参数来存储所接收的数据。</param>
      <param name="size">要接收的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" />, ，通过引用传递，表示远程服务器。</param>
      <param name="ipPacketInformation">
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> 保存地址和接口的信息。</param>
      <returns>收到的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。-或者- <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 减去偏移量参数的值。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - <see cref="P:System.Net.Sockets.Socket.LocalEndPoint" /> 未设置属性。- 或 - .NET Framework AMD 64 位处理器上运行。- 或 - 尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.NotSupportedException">操作系统是 Windows 2000 或更早版本，并且此方法需要 Windows XP。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>开始异步接收指定的数据的字节数，到使用指定的数据缓冲区中的指定位置 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" />, ，并将终结点和数据包信息存储。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)">
      <summary>确定一个或多个套接字的状态。</summary>
      <param name="checkRead">
        <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Net.Sockets.Socket" /> 要检查可读性的实例。</param>
      <param name="checkWrite">
        <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Net.Sockets.Socket" /> 实例，以检查是否可写性。</param>
      <param name="checkError">
        <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Net.Sockets.Socket" /> 实例，以检查是否有错误。</param>
      <param name="microSeconds">中以微秒为单位的超时值。 为-1 值表示无限期超时。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="checkRead" /> 参数是 null 或为空。－和－ <paramref name="checkWrite" /> 参数是 null 或为空 －和－ <paramref name="checkError" /> 参数是 null 或为空。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[])">
      <summary>将数据发送到连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>发送到已连接的指定的数据的字节数 <see cref="T:System.Net.Sockets.Socket" />, ，按指定偏移量，从开始，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="offset">从此处开始发送数据的数据缓冲区中的位置。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - 在访问时出现操作系统错误 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>发送到已连接的指定的数据的字节数 <see cref="T:System.Net.Sockets.Socket" />, ，按指定偏移量，从开始，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" /></summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="offset">从此处开始发送数据的数据缓冲区中的位置。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - 在访问时出现操作系统错误 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
      <summary>发送到已连接的指定的数据的字节数 <see cref="T:System.Net.Sockets.Socket" />, ，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> 小于 0 或超出缓冲区的大小。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - 在访问套接字时出现操作系统错误。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
      <summary>将数据发送到连接 <see cref="T:System.Net.Sockets.Socket" /> 使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})">
      <summary>列表中的一组缓冲区发送到连接 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="buffers">一份 <see cref="T:System.ArraySegment`1" />类型 s <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 请参阅下面备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)">
      <summary>列表中的一组缓冲区发送到连接 <see cref="T:System.Net.Sockets.Socket" />, ，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffers">一份 <see cref="T:System.ArraySegment`1" />类型 s <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)">
      <summary>列表中的一组缓冲区发送到连接 <see cref="T:System.Net.Sockets.Socket" />, ，使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffers">一份 <see cref="T:System.ArraySegment`1" />类型 s <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="errorCode">一个 <see cref="T:System.Net.Sockets.SocketError" /> 对象，它存储套接字错误。</param>
      <returns>发送到的字节数 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffers" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="buffers" /> 为空。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>将数据异步发送到连接 <see cref="T:System.Net.Sockets.Socket" /> 对象。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 或 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性 <paramref name="e" /> 参数必须引用有效的缓冲区。 一个或两个属性的另一个可能集，但不要两者都在同一时间。</exception>
      <exception cref="T:System.InvalidOperationException">套接字操作已经在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <see cref="T:System.Net.Sockets.Socket" /> 尚未连接或未通过获取 <see cref="M:System.Net.Sockets.Socket.Accept" />, ，<see cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />,，或 <see cref="Overload:System.Net.Sockets.Socket.BeginAccept" />, ，方法。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String)">
      <summary>将文件发送 <paramref name="fileName" /> 到连接 <see cref="T:System.Net.Sockets.Socket" /> 对象 <see cref="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread" /> 传输标志。</summary>
      <param name="fileName">一个 <see cref="T:System.String" /> ，其中包含的路径和要发送的文件的名称。 此参数可以为 null。</param>
      <exception cref="T:System.NotSupportedException">套接字未连接到远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象不在阻止模式下并且不能接受此同步调用。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该文件 <paramref name="fileName" /> 找不到。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendFile(System.String,System.Byte[],System.Byte[],System.Net.Sockets.TransmitFileOptions)">
      <summary>将文件发送 <paramref name="fileName" /> 和到连接的数据缓冲区 <see cref="T:System.Net.Sockets.Socket" /> 对象使用指定 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值。</summary>
      <param name="fileName">一个 <see cref="T:System.String" /> ，其中包含的路径和要发送的文件的名称。 此参数可以为 null。</param>
      <param name="preBuffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送该文件之前，发送的数据。 此参数可以为 null。</param>
      <param name="postBuffer">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送该文件之后发送的数据。 此参数可以为 null。</param>
      <param name="flags">一个或多个 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 值。</param>
      <exception cref="T:System.NotSupportedException">操作系统不是 Windows NT 或更高版本。- 或 - 套接字未连接到远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象不在阻止模式下并且不能接受此同步调用。</exception>
      <exception cref="T:System.IO.FileNotFoundException">该文件 <paramref name="fileName" /> 找不到。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>集合中的文件或在内存中数据缓冲区将异步发送到连接 <see cref="T:System.Net.Sockets.Socket" /> 对象。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.IO.FileNotFoundException">中指定的文件 <see cref="P:System.Net.Sockets.SendPacketsElement.FilePath" /> 找不到属性。</exception>
      <exception cref="T:System.InvalidOperationException">套接字操作已经在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。 如果，也会发生此异常 <see cref="T:System.Net.Sockets.Socket" /> 未连接到远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">是无连接 <see cref="T:System.Net.Sockets.Socket" /> 正在使用，并且该文件正在发送超出基础传输的最大数据包大小。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>将指定的数据的字节数发送到指定的终结点，在缓冲区中的指定位置开始并使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="offset">从此处开始发送数据的数据缓冲区中的位置。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> ，表示数据的目标位置。</param>
      <returns>已发送的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小于 0。- 或 - <paramref name="offset" /> 长度大于 <paramref name="buffer" />。- 或 - <paramref name="size" /> 小于 0。- 或 - <paramref name="size" /> 长度大于 <paramref name="buffer" /> 的值减去 <paramref name="offset" /> 参数。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">
        <paramref name="socketFlags" /> 不是值的有效组合。- 或 - 在访问时出现操作系统错误 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的调用方没有所需的权限。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>将指定的数据的字节数发送到指定的终结点使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="size">要发送的字节数。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> ，表示数据的目标位置。</param>
      <returns>已发送的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">指定 <paramref name="size" /> 超出了大小 <paramref name="buffer" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)">
      <summary>将数据发送到指定的终结点。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> 表示数据的目标。</param>
      <returns>已发送的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
      <summary>将数据发送到特定终结点使用指定 <see cref="T:System.Net.Sockets.SocketFlags" />。</summary>
      <param name="buffer">类型的数组 <see cref="T:System.Byte" /> ，其中包含要发送的数据。</param>
      <param name="socketFlags">
        <see cref="T:System.Net.Sockets.SocketFlags" /> 值的按位组合。</param>
      <param name="remoteEP">
        <see cref="T:System.Net.EndPoint" /> ，表示数据的目标位置。</param>
      <returns>已发送的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> 为 null。- 或 - <paramref name="remoteEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>以异步方式将数据发送到特定的远程主机。</summary>
      <param name="e">
        <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 要用于此异步套接字操作对象。</param>
      <returns>返回 true 如果 I/O 操作处于挂起状态。<see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 操作完成时，将引发参数。返回 false 当 I/O 操作同步完成。 在这种情况下， <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> 上的事件 <paramref name="e" /> 参数将不会引发与 <paramref name="e" /> 检查作为参数可能是方法调用返回以检索该操作的结果后立即传递的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 不能为 null。</exception>
      <exception cref="T:System.InvalidOperationException">套接字操作已经在使用 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 中指定的对象 <paramref name="e" /> 参数。</exception>
      <exception cref="T:System.NotSupportedException">Windows XP 或更高版本才能使用此方法。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">指定的协议是面向连接的但 <see cref="T:System.Net.Sockets.Socket" /> 尚未连接。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)">
      <summary>套接字设置 IP 保护级别。</summary>
      <param name="level">若要在此套接字上设置 IP 保护级别。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="level" /> 参数不能为 <see cref="F:System.Net.Sockets.IPProtectionLevel.Unspecified" />。 IP 保护级别不能设置为未指定。</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Net.Sockets.AddressFamily" /> 的套接字必须是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)">
      <summary>设置指定 <see cref="T:System.Net.Sockets.Socket" /> 到指定的选项 <see cref="T:System.Boolean" /> 值。</summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</param>
      <param name="optionValue">此选项的值表示为 <see cref="T:System.Boolean" />。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 对象已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
      <summary>设置指定 <see cref="T:System.Net.Sockets.Socket" /> 选项指定的值，表示为字节数组。</summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</param>
      <param name="optionValue">类型的数组 <see cref="T:System.Byte" /> 表示选项的值。</param>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
      <summary>设置指定 <see cref="T:System.Net.Sockets.Socket" /> 选项指定的整数值。</summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</param>
      <param name="optionValue">选项的值。</param>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
      <summary>设置指定 <see cref="T:System.Net.Sockets.Socket" /> 选项指定的值，表示为一个对象。</summary>
      <param name="optionLevel">
        <see cref="T:System.Net.Sockets.SocketOptionLevel" /> 值之一。</param>
      <param name="optionName">
        <see cref="T:System.Net.Sockets.SocketOptionName" /> 值之一。</param>
      <param name="optionValue">一个 <see cref="T:System.Net.Sockets.LingerOption" /> 或 <see cref="T:System.Net.Sockets.MulticastOption" /> ，其中包含选项的值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="optionValue" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
      <summary>禁用发送和接收的 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <param name="how">其中一个 <see cref="T:System.Net.Sockets.SocketShutdown" /> 值，该值指定将不再允许的操作。</param>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor">
      <summary>创建一个空的 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 实例。</summary>
      <exception cref="T:System.NotSupportedException">不支持该平台。</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Dispose">
      <summary>释放使用的非托管的资源 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 实例，并可根据需要释放托管资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Finalize">
      <summary>释放 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> 类使用的资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>表示异步操作完成时调用的方法。</summary>
      <param name="e">已发送信号的事件。</param>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>设置要与异步套接字方法一起使用的数据缓冲区。</summary>
      <param name="buffer">要与异步套接字方法一起使用的数据缓冲区。</param>
      <param name="offset">偏移量，以字节为单位的启动操作的数据缓冲区中。</param>
      <param name="count">最大数据，以字节为单位，以发送或接收缓冲区中量。</param>
      <exception cref="T:System.ArgumentException">缓冲区不明确指定。 如果发生此异常 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性也不为 null 和 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性也不为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">参数为超出范围。 如果发生此异常 <paramref name="offset" /> 参数是否小于零或大于该长度的数组中 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性。 如果，也会发生此异常 <paramref name="count" /> 参数是否小于零或大于该长度的数组中 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性减 <paramref name="offset" /> 参数。</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)">
      <summary>设置要与异步套接字方法一起使用的数据缓冲区。</summary>
      <param name="offset">偏移量，以字节为单位的启动操作的数据缓冲区中。</param>
      <param name="count">最大数据，以字节为单位，以发送或接收缓冲区中量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">参数为超出范围。 如果发生此异常 <paramref name="offset" /> 参数是否小于零或大于该长度的数组中 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性。 如果，也会发生此异常 <paramref name="count" /> 参数是否小于零或大于该长度的数组中 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性减 <paramref name="offset" /> 参数。</exception>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor">
      <summary>用最后一个操作系统错误代码初始化 <see cref="T:System.Net.Sockets.SocketException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
      <summary>用指定的错误代码初始化 <see cref="T:System.Net.Sockets.SocketException" /> 类的新实例。</summary>
      <param name="errorCode">指示发生的错误的错误代码。</param>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.Sockets.SocketException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含序列化新的 <see cref="T:System.Net.Sockets.SocketException" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Net.Sockets.SocketException" /> 实例关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor">
      <summary>初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.IPEndPoint)">
      <summary>初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例，并将其绑定到指定的本地终结点。</summary>
      <param name="localEP">要将 TCP <see cref="T:System.Net.Sockets.Socket" /> 绑定到的 <see cref="T:System.Net.IPEndPoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 参数是 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>使用指定的族初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例。</summary>
      <param name="family">IP 协议的 <see cref="P:System.Net.IPAddress.AddressFamily" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> 参数是否不等于 AddressFamily.InterNetwork - 或 - <paramref name="family" /> 参数是否不等于 AddressFamily.InterNetworkV6 </exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.#ctor(System.String,System.Int32)">
      <summary>初始化 <see cref="T:System.Net.Sockets.TcpClient" /> 类的新实例并连接到指定主机上的指定端口。</summary>
      <param name="hostname">要连接到的远程主机的 DNS 名。</param>
      <param name="port">要连接到的远程主机的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个对远程主机连接的异步请求。 远程主机由 <see cref="T:System.Net.IPAddress" /> 和端口号 (<see cref="T:System.Int32" />) 指定。</summary>
      <param name="address">远程主机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">远程主机的端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含连接操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.Net.IPAddress[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个对远程主机连接的异步请求。 远程主机由 <see cref="T:System.Net.IPAddress" /> 数组和端口号 (<see cref="T:System.Int32" />) 指定。</summary>
      <param name="addresses">至少一个指定远程主机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">远程主机的端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含连接操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addresses" /> 参数为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.BeginConnect(System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>开始一个对远程主机连接的异步请求。 远程主机由主机名 (<see cref="T:System.String" />) 和端口号 (<see cref="T:System.Int32" />) 指定。</summary>
      <param name="host">远程主机的名称。</param>
      <param name="port">远程主机的端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义对象，其中包含连接操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>一个 <see cref="T:System.IAsyncResult" /> 对象，它引用异步连接。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 参数为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Close">
      <summary>释放此 <see cref="T:System.Net.Sockets.TcpClient" /> 实例，并请求关闭基础 TCP 连接。</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>使用指定的 IP 地址和端口号将客户端连接到 TCP 主机。</summary>
      <param name="address">你打算连接到的主机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">要连接到的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPAddress[],System.Int32)">
      <summary>使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机。</summary>
      <param name="ipAddresses">要连接到的主机的 <see cref="T:System.Net.IPAddress" /> 数组。</param>
      <param name="port">要连接到的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipAddresses" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
      <exception cref="T:System.NotSupportedException">此方法仅适用于使用的套接字 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.Net.IPEndPoint)">
      <summary>使用指定的远程网络终结点将客户端连接到远程 TCP 主机。</summary>
      <param name="remoteEP">您打算连接到的 <see cref="T:System.Net.IPEndPoint" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="remoteEp" /> 参数为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Connect(System.String,System.Int32)">
      <summary>将客户端连接到指定主机上的指定端口。</summary>
      <param name="hostname">要连接到的远程主机的 DNS 名。</param>
      <param name="port">要连接到的远程主机的端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress,System.Int32)">
      <summary>使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机以作为异步操作。</summary>
      <param name="address">你打算连接到的主机的 <see cref="T:System.Net.IPAddress" />。</param>
      <param name="port">要连接到的端口号。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.Net.IPAddress[],System.Int32)">
      <summary>使用指定的 IP 地址和端口号将客户端连接到远程 TCP 主机以作为异步操作。</summary>
      <param name="addresses">要连接到的主机的 <see cref="T:System.Net.IPAddress" /> 数组。</param>
      <param name="port">要连接到的端口号。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipAddresses" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">端口号无效。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Security.SecurityException">调用堆栈中的较高调用方无权执行所请求的操作。</exception>
      <exception cref="T:System.NotSupportedException">此方法仅适用于使用的套接字 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.ConnectAsync(System.String,System.Int32)">
      <summary>将客户端连接到指定主机上的指定 TCP 端口以作为异步操作。</summary>
      <param name="host">要连接到的远程主机的 DNS 名。</param>
      <param name="port">要连接到的远程主机的端口号。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 参数不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 与 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 之间。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose">
      <summary>释放使用的托管和非托管资源 <see cref="T:System.Net.Sockets.TcpClient" />。</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Sockets.TcpClient" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">设置为 true 可释放托管资源和非托管资源；设置为 false 只能释放非托管资源。</param>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)">
      <summary>结束挂起的异步连接尝试。</summary>
      <param name="asyncResult">调用 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 后返回的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数未返回通过调用 <see cref="Overload:System.Net.Sockets.TcpClient.BeginConnect" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.TcpClient.EndConnect(System.IAsyncResult)" /> 方法之前已调用的异步连接。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问时出错 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.Finalize">
      <summary>释放 <see cref="T:System.Net.Sockets.TcpClient" /> 类使用的资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.TcpClient.GetStream">
      <summary>返回用于发送和接收数据的 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
      <returns>基础 <see cref="T:System.Net.Sockets.NetworkStream" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 未连接到远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.TcpClient" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 在指定端口侦听的类。</summary>
      <param name="port">用于侦听传入的连接尝试的端口。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类用于侦听传入的连接尝试在指定的本地 IP 地址和端口号。</summary>
      <param name="localaddr">
        <see cref="T:System.Net.IPAddress" /> ，表示对本地 IP 地址。</param>
      <param name="port">用于侦听传入的连接尝试的端口。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localaddr" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.TcpListener" /> 类，具有指定的本地终结点。</summary>
      <param name="localEP">
        <see cref="T:System.Net.IPEndPoint" /> ，它表示要将该侦听器的绑定到的本地终结点 <see cref="T:System.Net.Sockets.Socket" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocket">
      <summary>接受挂起的连接请求。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.Socket" /> 用来发送和接收数据。</returns>
      <exception cref="T:System.InvalidOperationException">通过调用尚未启动侦听器 <see cref="M:System.Net.Sockets.TcpListener.Start" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptSocketAsync">
      <summary>异步操作的形式接受挂起的连接请求。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.Sockets.Socket" /> 用来发送和接收数据。</returns>
      <exception cref="T:System.InvalidOperationException">通过调用尚未启动侦听器 <see cref="M:System.Net.Sockets.TcpListener.Start" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClient">
      <summary>接受挂起的连接请求。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.TcpClient" /> 用来发送和接收数据。</returns>
      <exception cref="T:System.InvalidOperationException">通过调用尚未启动侦听器 <see cref="M:System.Net.Sockets.TcpListener.Start" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性来获取特定的错误代码。 当获取此代码后时，您可以引用的 Windows 套接字第 2 版 API 错误代码文档在 MSDN 中有关错误的详细说明。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync">
      <summary>异步操作的形式接受挂起的连接请求。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Net.Sockets.TcpClient" /> 用来发送和接收数据。</returns>
      <exception cref="T:System.InvalidOperationException">通过调用尚未启动侦听器 <see cref="M:System.Net.Sockets.TcpListener.Start" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性来获取特定的错误代码。 当获取此代码后时，您可以引用的 Windows 套接字第 2 版 API 错误代码文档在 MSDN 中有关错误的详细说明。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)">
      <summary>启用或禁用网络地址转换 (NAT) 遍历上 <see cref="T:System.Net.Sockets.TcpListener" /> 实例。</summary>
      <param name="allowed">一个布尔值，该值指定是否要启用或禁用 NAT 遍历。</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 方法在调用之后调用 <see cref="M:System.Net.Sockets.TcpListener.Start" /> 方法</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以接受传入的连接尝试。</summary>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义的对象，包含接收操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="callback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步创建 <see cref="T:System.Net.Sockets.Socket" />。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)">
      <summary>开始一个异步操作以接受传入的连接尝试。</summary>
      <param name="callback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">一个用户定义的对象，包含接收操作的相关信息。 当操作完成时，此对象会被传递给 <paramref name="callback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> ，它引用异步创建 <see cref="T:System.Net.Sockets.TcpClient" />。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Create(System.Int32)">
      <summary>创建一个新 <see cref="T:System.Net.Sockets.TcpListener" /> 实例以侦听指定的端口。</summary>
      <param name="port">用于侦听传入的连接尝试的端口。</param>
      <returns>返回 <see cref="T:System.Net.Sockets.TcpListener" />。一个新 <see cref="T:System.Net.Sockets.TcpListener" /> 实例以侦听指定的端口。</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)">
      <summary>异步接受传入的连接尝试，并创建一个新 <see cref="T:System.Net.Sockets.Socket" /> 来处理远程主机通信。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />  方法。</param>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" />。<see cref="T:System.Net.Sockets.Socket" /> 用来发送和接收数据。</returns>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 参数不通过调用创建 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> 之前已调用方法。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问时出错 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)">
      <summary>异步接受传入的连接尝试，并创建一个新 <see cref="T:System.Net.Sockets.TcpClient" /> 来处理远程主机通信。</summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> 返回通过调用 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> 方法。</param>
      <returns>
        <see cref="T:System.Net.Sockets.TcpClient" />。<see cref="T:System.Net.Sockets.TcpClient" /> 用来发送和接收数据。</returns>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Pending">
      <summary>确定是否存在挂起的连接请求。</summary>
      <returns>true 如果连接处于挂起状态。否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">通过调用尚未启动侦听器 <see cref="M:System.Net.Sockets.TcpListener.Start" />。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start">
      <summary>开始侦听传入的连接请求。</summary>
      <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性来获取特定的错误代码。 当获取此代码后时，您可以引用的 Windows 套接字第 2 版 API 错误代码文档在 MSDN 中有关错误的详细说明。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Start(System.Int32)">
      <summary>开始侦听传入的连接请求与挂起的连接的最大数量。</summary>
      <param name="backlog">挂起的连接队列的最大长度。</param>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name=" backlog" /> 参数小于零或超出最大允许的连接数。</exception>
      <exception cref="T:System.InvalidOperationException">基础 <see cref="T:System.Net.Sockets.Socket" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.TcpListener.Stop">
      <summary>关闭侦听程序。</summary>
      <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性来获取特定的错误代码。 当获取此代码后时，您可以引用的 Windows 套接字第 2 版 API 错误代码文档在 MSDN 中有关错误的详细说明。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例。</summary>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类，并将其绑定到提供的本地端口号。</summary>
      <param name="port">你想要进行通信的本地端口号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 参数是否大于 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 或小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类，并将其绑定到提供的本地端口号。</summary>
      <param name="port">用于侦听传入的连接尝试的端口。</param>
      <param name="family">其中一个 <see cref="T:System.Net.Sockets.AddressFamily" /> 值，该值指定套接字的寻址方案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> 不是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 大于 <see cref="F:System.Net.IPEndPoint.MaxPort" /> 或小于 <see cref="F:System.Net.IPEndPoint.MinPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例，并将其绑定到指定的本地终结点。</summary>
      <param name="localEP">
        <see cref="T:System.Net.IPEndPoint" /> 表示 UDP 连接绑定到的本地终结点。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localEP" /> 为 null。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类的新实例。</summary>
      <param name="family">其中一个 <see cref="T:System.Net.Sockets.AddressFamily" /> 值，该值指定套接字的寻址方案。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="family" /> 不是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.Sockets.UdpClient" /> 类，并建立默认远程主机。</summary>
      <param name="hostname">您想要连接的远程 DNS 主机的名称。</param>
      <param name="port">您想要连接远程端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hostname" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)">
      <summary>启用或禁用网络地址转换 (NAT) 遍历上 <see cref="T:System.Net.Sockets.UdpClient" /> 实例。</summary>
      <param name="allowed">一个布尔值，该值指定是否要启用或禁用 NAT 遍历。</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)">
      <summary>以异步方式从远程主机接收数据报。</summary>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关接收操作的信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，可引用异步接收。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.AsyncCallback,System.Object)">
      <summary>以异步方式将数据报发送到远程主机。 通过调用以前指定目标 <see cref="Overload:System.Net.Sockets.UdpClient.Connect" />。</summary>
      <param name="datagram">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送的数据。</param>
      <param name="bytes">要发送的字节数。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关发送操作的信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，可引用异步发送。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)">
      <summary>以异步方式将数据报发送到目标。 通过指定目标 <see cref="T:System.Net.EndPoint" />。</summary>
      <param name="datagram">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送的数据。</param>
      <param name="bytes">要发送的字节数。</param>
      <param name="endPoint">
        <see cref="T:System.Net.EndPoint" /> 表示数据的目标。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关发送操作的信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，可引用异步发送。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.BeginSend(System.Byte[],System.Int32,System.String,System.Int32,System.AsyncCallback,System.Object)">
      <summary>以异步方式将数据报发送到目标。 目标指定的主机名称和端口号。</summary>
      <param name="datagram">一个 <see cref="T:System.Byte" /> 数组，其中包含要发送的数据。</param>
      <param name="bytes">要发送的字节数。</param>
      <param name="hostname">目标主机中。</param>
      <param name="port">目标端口号。</param>
      <param name="requestCallback">一个 <see cref="T:System.AsyncCallback" /> 委托，它引用操作完成时要调用的方法。</param>
      <param name="state">用户定义的对象，其中包含有关发送操作的信息。 当操作完成时，此对象会被传递给 <paramref name="requestCallback" /> 委托。</param>
      <returns>
        <see cref="T:System.IAsyncResult" /> 对象，可引用异步发送。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Close">
      <summary>关闭 UDP 连接。</summary>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPAddress,System.Int32)">
      <summary>建立默认远程主机使用指定的 IP 地址和端口号。</summary>
      <param name="addr">
        <see cref="T:System.Net.IPAddress" /> 您打算将数据发送到的远程主机。</param>
      <param name="port">端口号想向其发送数据。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addr" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.Net.IPEndPoint)">
      <summary>建立默认远程主机使用指定的网络终结点。</summary>
      <param name="endPoint">
        <see cref="T:System.Net.IPEndPoint" /> ，指定想要将数据发送的网络终结点。</param>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="endPoint" /> 为 null。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)">
      <summary>建立默认远程主机使用指定主机名和端口号。</summary>
      <param name="hostname">想向其发送数据的远程主机的 DNS 名称。</param>
      <param name="port">您打算将数据发送到远程主机上的端口号。</param>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 不介于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 和 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Dispose">
      <summary>释放由 <see cref="T:System.Net.Sockets.UdpClient" /> 占用的托管和非托管资源。</summary>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.Sockets.UdpClient" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)">
      <summary>离开多播的组。</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> 多路广播的组将保留。</param>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentException">IP 地址不是与兼容 <see cref="T:System.Net.Sockets.AddressFamily" /> 值，该值定义的套接字的寻址方案。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>离开多播的组。</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> 多路广播的组将保留。</param>
      <param name="ifindex">要退出的多播组对本地地址。</param>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentException">IP 地址不是与兼容 <see cref="T:System.Net.Sockets.AddressFamily" /> 值，该值定义的套接字的寻址方案。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)">
      <summary>结束挂起的异步接收。</summary>
      <param name="asyncResult">调用 <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 后返回的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <param name="remoteEP">指定的远程终结点。</param>
      <returns>如果成功，则接收的字节数。 如果不成功，此方法将返回 0。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.UdpClient.BeginReceive(System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.UdpClient.EndReceive(System.IAsyncResult,System.Net.IPEndPoint@)" /> 之前已调用为异步读取。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问基础时出错 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.EndSend(System.IAsyncResult)">
      <summary>结束挂起的异步发送。</summary>
      <param name="asyncResult">调用 <see cref="Overload:System.Net.Sockets.UdpClient.BeginSend" /> 后返回的 <see cref="T:System.IAsyncResult" /> 对象。</param>
      <returns>如果成功，字节数已发送到 <see cref="T:System.Net.Sockets.UdpClient" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> 通过调用未返回 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.EndSend(System.IAsyncResult)" /> 之前已调用为异步读取。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问基础套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)">
      <summary>添加 <see cref="T:System.Net.Sockets.UdpClient" /> 到多播组。</summary>
      <param name="ifindex">与对其进行加入多播的组本地 IP 地址关联的接口索引。</param>
      <param name="multicastAddr">多路广播 <see cref="T:System.Net.IPAddress" /> 您想要加入的组。</param>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)">
      <summary>添加 <see cref="T:System.Net.Sockets.UdpClient" /> 到多播组。</summary>
      <param name="multicastAddr">多路广播 <see cref="T:System.Net.IPAddress" /> 您想要加入的组。</param>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentException">IP 地址不是与兼容 <see cref="T:System.Net.Sockets.AddressFamily" /> 值，该值定义的套接字的寻址方案。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)">
      <summary>添加 <see cref="T:System.Net.Sockets.UdpClient" /> 到具有指定的时间 (TTL) 的多播组。</summary>
      <param name="multicastAddr">
        <see cref="T:System.Net.IPAddress" /> 要加入的多播组。</param>
      <param name="timeToLive">生存时间 (TTL)，以的路由器跃点数为单位。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">所提供的 TTL 不是介于 0 和 255 之间 </exception>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="multicastAddr" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">IP 地址不是与兼容 <see cref="T:System.Net.Sockets.AddressFamily" /> 值，该值定义的套接字的寻址方案。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>添加 <see cref="T:System.Net.Sockets.UdpClient" /> 到多播组。</summary>
      <param name="multicastAddr">多路广播 <see cref="T:System.Net.IPAddress" /> 您想要加入的组。</param>
      <param name="localAddress">本地 <see cref="T:System.Net.IPAddress" />。</param>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Receive(System.Net.IPEndPoint@)">
      <summary>返回由一台远程主机发送的 UDP 数据报。</summary>
      <param name="remoteEP">
        <see cref="T:System.Net.IPEndPoint" /> ，表示从其发送数据的远程主机。</param>
      <returns>类型的数组 <see cref="T:System.Byte" /> ，其中包含数据报数据。</returns>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" />  已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.ReceiveAsync">
      <summary>返回的 UDP 数据报以异步方式由一台远程主机发送的。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" />  已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32)">
      <summary>将 UDP 数据报发送到远程主机。</summary>
      <param name="dgram">
        <see cref="T:System.Byte" /> 类型的数组，它指定你打算发送的 UDP 数据报，表示为字节数组。</param>
      <param name="bytes">数据报中的字节数。</param>
      <returns>已发送的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>将 UDP 数据报发送到位于指定远程终结点的主机。</summary>
      <param name="dgram">
        <see cref="T:System.Byte" /> 类型的数组，它指定你打算发送的 UDP 数据报，表示为字节数组。</param>
      <param name="bytes">数据报中的字节数。</param>
      <param name="endPoint">一个 <see cref="T:System.Net.IPEndPoint" />，表示要将数据报发送到的主机和端口。</param>
      <returns>已发送的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>将 UDP 数据报发送到指定远程主机上的指定端口。</summary>
      <param name="dgram">
        <see cref="T:System.Byte" /> 类型的数组，它指定你打算发送的 UDP 数据报，表示为字节数组。</param>
      <param name="bytes">数据报中的字节数。</param>
      <param name="hostname">要向其发送数据报的远程主机的名称。</param>
      <param name="port">要与之通信的远程端口号。</param>
      <returns>已发送的字节数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32)">
      <summary>以异步方式将 UDP 数据报发送到远程主机。</summary>
      <param name="datagram">
        <see cref="T:System.Byte" /> 类型的数组，它指定你打算发送的 UDP 数据报，表示为字节数组。</param>
      <param name="bytes">数据报中的字节数。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)">
      <summary>以异步方式将 UDP 数据报发送到远程主机。</summary>
      <param name="datagram">
        <see cref="T:System.Byte" /> 类型的数组，它指定你打算发送的 UDP 数据报，表示为字节数组。</param>
      <param name="bytes">数据报中的字节数。</param>
      <param name="endPoint">一个 <see cref="T:System.Net.IPEndPoint" />，表示要将数据报发送到的主机和端口。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)">
      <summary>以异步方式将 UDP 数据报发送到远程主机。</summary>
      <param name="datagram">
        <see cref="T:System.Byte" /> 类型的数组，它指定你打算发送的 UDP 数据报，表示为字节数组。</param>
      <param name="bytes">数据报中的字节数。</param>
      <param name="hostname">要向其发送数据报的远程主机的名称。</param>
      <param name="port">要与之通信的远程端口号。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dgram" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已建立默认远程主机。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.UdpClient" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)">
      <summary>初始化 <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 类的新实例。</summary>
      <param name="buffer">要接收 UDP 数据包中数据的缓冲区。</param>
      <param name="remoteEndPoint">UDP 数据包的远程终结点。</param>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="other">与该实例进行比较的对象。</param>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 <paramref name="other" /> 的一个实例 <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 并且等于该实例的值; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.Equals(System.Object)">
      <summary>返回一个值，该值指示此实例是否与指定的对象相等。</summary>
      <param name="obj">与该实例进行比较的对象。</param>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 <paramref name="obj" /> 的一个实例 <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 并且等于该实例的值; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.GetHashCode">
      <summary>返回此实例的哈希代码。</summary>
      <returns>返回 <see cref="T:System.Int32" />。哈希代码。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)">
      <summary>测试两个指定 <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 实例是否相等。</summary>
      <param name="left">
        <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 相等运算符左侧的实例。</param>
      <param name="right">
        <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 相等运算符右侧的实例。</param>
      <returns>返回 <see cref="T:System.Boolean" />。如果 <paramref name="left" /> 和 <paramref name="right" /> 相等，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)">
      <summary>测试两个指定 <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 实例是否不相等。</summary>
      <param name="left">
        <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 不等于运算符左侧的实例。</param>
      <param name="right">
        <see cref="T:System.Net.Sockets.UdpReceiveResult" /> 不等于运算符右侧的实例。</param>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 <paramref name="left" /> 和 <paramref name="right" /> 不相等; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.TransportContext.#ctor">
      <summary>创建 <see cref="T:System.Net.TransportContext" /> 类的新实例</summary>
    </member>
    <member name="M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)">
      <summary>检索请求的通道绑定。</summary>
      <param name="kind">要检索的通道绑定的类型。</param>
      <returns>请求 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />, ，或 null 当前传输或由操作系统，如果不支持通道绑定。</returns>
      <exception cref="T:System.NotSupportedException">
        <paramref name="kind" /> 必须将 <see cref="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint" /> 用于 <see cref="T:System.Net.TransportContext" /> 从检索 <see cref="P:System.Net.HttpListenerRequest.TransportContext" /> 属性。</exception>
    </member>
    <member name="M:System.Net.TransportContext.GetTlsTokenBindings">
      <summary>获取传输安全层令牌绑定。</summary>
      <returns>传输安全层令牌绑定。</returns>
    </member>
    <member name="M:System.Net.WebClient.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebClient" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebClient.CancelAsync">
      <summary>取消一个挂起的异步操作。</summary>
    </member>
    <member name="M:System.Net.WebClient.DownloadData(System.String)">
      <summary>作为资源下载 <see cref="T:System.Byte" /> 数组中指定的 URI。</summary>
      <param name="address">从其下载数据 URI。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含已下载的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载数据时出错。</exception>
      <exception cref="T:System.NotSupportedException">该方法已在多个线程同时调用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadData(System.Uri)">
      <summary>作为资源下载 <see cref="T:System.Byte" /> 数组中指定的 URI。</summary>
      <param name="address">所表示的 URI <see cref="T:System.Uri" />  对象，便于从中下载数据。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含已下载的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataAsync(System.Uri)">
      <summary>作为资源下载 <see cref="T:System.Byte" /> 数组，从异步操作的形式指定的 URI 数组。</summary>
      <param name="address">一个 <see cref="T:System.Uri" /> 包含要下载的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)">
      <summary>作为资源下载 <see cref="T:System.Byte" /> 数组，从异步操作的形式指定的 URI 数组。</summary>
      <param name="address">一个 <see cref="T:System.Uri" /> 包含要下载的 URI。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataTaskAsync(System.String)">
      <summary>作为资源下载 <see cref="T:System.Byte" /> 从 URI 指定为异步操作使用 task 对象的数组。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已下载的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)">
      <summary>作为资源下载 <see cref="T:System.Byte" /> 从 URI 指定为异步操作使用 task 对象的数组。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已下载的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFile(System.String,System.String)">
      <summary>用指定的 URI 的资源下载到本地文件。</summary>
      <param name="address">从其下载数据 URI。</param>
      <param name="fileName">若要接收的数据的本地文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="filename" /> 是 null 或 <see cref="F:System.String.Empty" />。- 或 -文件不存在。-或者-下载数据时出错。</exception>
      <exception cref="T:System.NotSupportedException">该方法已在多个线程同时调用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)">
      <summary>用指定的 URI 的资源下载到本地文件。</summary>
      <param name="address">URI 指定为 <see cref="T:System.String" />, ，便于从中下载数据。</param>
      <param name="fileName">若要接收的数据的本地文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="filename" /> 是 null 或 <see cref="F:System.String.Empty" />。- 或 - 文件不存在。 - 或 - 下载数据时出错。</exception>
      <exception cref="T:System.NotSupportedException">该方法已在多个线程同时调用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)">
      <summary>对本地文件，下载将具有指定的 URI 的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <param name="fileName">要放置在本地计算机上的文件的名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
      <exception cref="T:System.InvalidOperationException">指定的本地文件 <paramref name="fileName" /> 正由另一个线程使用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)">
      <summary>对本地文件，下载将具有指定的 URI 的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <param name="fileName">要放置在本地计算机上的文件的名称。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
      <exception cref="T:System.InvalidOperationException">指定的本地文件 <paramref name="fileName" /> 正由另一个线程使用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)">
      <summary>将指定的资源使用 task 对象的异步操作作为下载到本地文件。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <param name="fileName">要放置在本地计算机上的文件的名称。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
      <exception cref="T:System.InvalidOperationException">指定的本地文件 <paramref name="fileName" /> 正由另一个线程使用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)">
      <summary>将指定的资源使用 task 对象的异步操作作为下载到本地文件。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <param name="fileName">要放置在本地计算机上的文件的名称。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
      <exception cref="T:System.InvalidOperationException">指定的本地文件 <paramref name="fileName" /> 正由另一个线程使用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadString(System.String)">
      <summary>下载请求的资源作为 <see cref="T:System.String" />。 要下载的资源指定为 <see cref="T:System.String" /> 其中包含的 URI。</summary>
      <param name="address">一个 <see cref="T:System.String" /> 包含要下载的 URI。</param>
      <returns>一个 <see cref="T:System.String" /> 包含所请求的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
      <exception cref="T:System.NotSupportedException">该方法已在多个线程同时调用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadString(System.Uri)">
      <summary>下载请求的资源作为 <see cref="T:System.String" />。 要下载的资源指定为 <see cref="T:System.Uri" />。</summary>
      <param name="address">一个 <see cref="T:System.Uri" /> 对象，其中包含要下载的 URI。</param>
      <returns>一个 <see cref="T:System.String" /> 包含所请求的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
      <exception cref="T:System.NotSupportedException">该方法已在多个线程同时调用。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri)">
      <summary>下载形式指定的资源 <see cref="T:System.Uri" />。 此方法不会阻止调用线程。</summary>
      <param name="address">一个 <see cref="T:System.Uri" /> 包含要下载的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)">
      <summary>将指定的字符串下载到指定的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">一个 <see cref="T:System.Uri" /> 包含要下载的 URI。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)">
      <summary>作为资源下载 <see cref="T:System.String" /> 从 URI 指定为使用 task 对象的异步操作。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已下载的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)">
      <summary>作为资源下载 <see cref="T:System.String" /> 从 URI 指定为使用 task 对象的异步操作。</summary>
      <param name="address">要下载的资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已下载的资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 下载资源时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.GetWebRequest(System.Uri)">
      <summary>返回 <see cref="T:System.Net.WebRequest" /> 指定资源的对象。</summary>
      <param name="address">一个 <see cref="T:System.Uri" /> ，它标识要请求的资源。</param>
      <returns>一个新 <see cref="T:System.Net.WebRequest" /> 指定资源的对象。</returns>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)">
      <summary>返回指定 <see cref="T:System.Net.WebResponse" /> 的 <see cref="T:System.Net.WebRequest" />。</summary>
      <param name="request">一个 <see cref="T:System.Net.WebRequest" /> 用于获得响应。</param>
      <returns>一个 <see cref="T:System.Net.WebResponse" /> 包含指定的响应 <see cref="T:System.Net.WebRequest" />。</returns>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
      <summary>返回 <see cref="T:System.Net.WebResponse" /> 指定 <see cref="T:System.Net.WebRequest" /> 使用指定 <see cref="T:System.IAsyncResult" />。</summary>
      <param name="request">一个 <see cref="T:System.Net.WebRequest" /> 用于获得响应。</param>
      <param name="result">
        <see cref="T:System.IAsyncResult" /> 对象获取的以前调用从 <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 。</param>
      <returns>一个 <see cref="T:System.Net.WebResponse" /> 包含指定的响应 <see cref="T:System.Net.WebRequest" />。</returns>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> 对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.DownloadFileCompleted" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> 对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> 对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.OpenReadCompletedEventArgs" />  对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> 对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.UploadDataCompletedEventArgs" />  对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Net.UploadFileCompletedEventArgs" /> 对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Net.UploadProgressChangedEventArgs" /> 对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 事件。</summary>
      <param name="e">
        <see cref="T:System.Net.UploadStringCompletedEventArgs" />  对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.UploadValuesCompletedEventArgs" />  对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)">
      <summary>引发 <see cref="E:System.Net.WebClient.WriteStreamClosed" /> 事件。</summary>
      <param name="e">一个 <see cref="T:System.Net.WriteStreamClosedEventArgs" />  对象，其中包含事件数据。</param>
    </member>
    <member name="M:System.Net.WebClient.OpenRead(System.String)">
      <summary>此时将打开具有指定为 URI 从资源下载数据的可读流 <see cref="T:System.String" />。</summary>
      <param name="address">URI 指定为 <see cref="T:System.String" /> 从中下载数据。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 用于从资源中读取数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，<paramref name="address" /> 是无效的。- 或 - 下载数据时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenRead(System.Uri)">
      <summary>此时将打开具有指定为 URI 从资源下载数据的可读流 <see cref="T:System.Uri" /></summary>
      <param name="address">URI 指定为 <see cref="T:System.Uri" /> 从中下载数据。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 用于从资源中读取数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，<paramref name="address" /> 是无效的。- 或 - 下载数据时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri)">
      <summary>将打开一个包含指定的资源的可读流。 此方法不会阻止调用线程。</summary>
      <param name="address">要检索该资源的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和地址无效。- 或 - 下载资源时出错。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)">
      <summary>将打开一个包含指定的资源的可读流。 此方法不会阻止调用线程。</summary>
      <param name="address">要检索该资源的 URI。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和地址无效。- 或 - 下载资源时出错。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadTaskAsync(System.String)">
      <summary>打开包含指定的资源作为异步操作使用 task 对象的可读流。</summary>
      <param name="address">要检索该资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.IO.Stream" /> 用于从资源中读取数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和地址无效。- 或 - 下载资源时出错。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)">
      <summary>打开包含指定的资源作为异步操作使用 task 对象的可读流。</summary>
      <param name="address">要检索该资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.IO.Stream" /> 用于从资源中读取数据。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和地址无效。- 或 - 下载资源时出错。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String)">
      <summary>打开一个流以便将数据写入到指定的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.String,System.String)">
      <summary>打开一个流以便将数据写入到指定的资源，使用指定的方法。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.Uri)">
      <summary>打开一个流以便将数据写入到指定的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)">
      <summary>打开一个流以便使用指定的方法将数据写入指定的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <returns>一个 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri)">
      <summary>打开一个流以便将数据写入到指定的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)">
      <summary>打开一个流以便将数据写入到指定的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)">
      <summary>打开一个流以便将数据写入到指定的资源，使用指定的方法。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="userToken">用户定义对象，该对象传递给异步操作完成时调用的方法</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.String)">
      <summary>打开一个流以便以异步操作使用 task 对象的形式将数据写入指定的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)">
      <summary>打开一个流以便以异步操作使用 task 对象的形式将数据写入指定的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)">
      <summary>打开一个流以便以异步操作使用 task 对象的形式将数据写入指定的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)">
      <summary>打开一个流以便以异步操作使用 task 对象的形式将数据写入指定的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.IO.Stream" /> 用于将数据写入到资源。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.Byte[])">
      <summary>将数据缓冲区上载到由 URI 标识的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 -发送数据时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])">
      <summary>将数据缓冲区上载到指定的资源，使用指定的方法。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 - 上载数据时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])">
      <summary>将数据缓冲区上载到由 URI 标识的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 -发送数据时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])">
      <summary>将数据缓冲区上载到指定的资源，使用指定的方法。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 - 上载数据时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])">
      <summary>将数据缓冲区上载到通过使用 POST 方法的 URI 标识的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])">
      <summary>将数据缓冲区上载到由一个 URI，使用指定的方法标识的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)">
      <summary>将数据缓冲区上载到由一个 URI，使用指定的方法和标识标记标识的资源。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])">
      <summary>将数据缓冲区，其中包含上载 <see cref="T:System.Byte" /> 数组转换为异步操作使用 task 对象的形式指定的 URI。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的数据缓冲区时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])">
      <summary>将数据缓冲区，其中包含上载 <see cref="T:System.Byte" /> 数组转换为异步操作使用 task 对象的形式指定的 URI。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的数据缓冲区时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])">
      <summary>将数据缓冲区，其中包含上载 <see cref="T:System.Byte" /> 数组转换为异步操作使用 task 对象的形式指定的 URI。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的数据缓冲区时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])">
      <summary>将数据缓冲区，其中包含上载 <see cref="T:System.Byte" /> 数组转换为异步操作使用 task 对象的形式指定的 URI。</summary>
      <param name="address">要接收的数据资源的 URI。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="data">要向资源发送的数据缓冲区。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的数据缓冲区时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String)">
      <summary>将指定的本地文件上载到具有指定的 URI 的资源。</summary>
      <param name="address">要接收的文件资源的 URI。 例如，ftp://localhost/samplefile.txt。</param>
      <param name="fileName">要发送到资源的文件。 例如，"samplefile.txt"。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, 、 包含无效字符或不存在。- 或 - 上载文件时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)">
      <summary>将指定的本地文件上载到指定的资源，使用指定的方法。</summary>
      <param name="address">要接收的文件资源的 URI。</param>
      <param name="method">用于将文件发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="fileName">要发送到资源的文件。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, 、 包含无效字符或不存在。- 或 - 上载文件时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.Uri,System.String)">
      <summary>将指定的本地文件上载到具有指定的 URI 的资源。</summary>
      <param name="address">要接收的文件资源的 URI。 例如，ftp://localhost/samplefile.txt。</param>
      <param name="fileName">要发送到资源的文件。 例如，"samplefile.txt"。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, 、 包含无效字符或不存在。- 或 - 上载文件时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)">
      <summary>将指定的本地文件上载到指定的资源，使用指定的方法。</summary>
      <param name="address">要接收的文件资源的 URI。</param>
      <param name="method">用于将文件发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="fileName">要发送到资源的文件。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, 、 包含无效字符或不存在。- 或 - 上载文件时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)">
      <summary>将指定的本地文件上载到指定的资源使用 POST 方法。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="fileName">要发送到资源的文件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, ，包含无效字符或该文件的指定的路径不存在。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)">
      <summary>将指定的本地文件上载到指定的资源使用 POST 方法。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="fileName">要发送到资源的文件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, ，包含无效字符或该文件的指定的路径不存在。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>将指定的本地文件上载到指定的资源使用 POST 方法。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="fileName">要发送到资源的文件。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, ，包含无效字符或该文件的指定的路径不存在。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)">
      <summary>将指定的本地文件上载到资源，以异步操作使用的任务对象。</summary>
      <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="fileName">要发送到资源的本地文件。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的文件时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, ，包含无效字符或该文件的指定的路径不存在。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)">
      <summary>将指定的本地文件上载到资源，以异步操作使用的任务对象。</summary>
      <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="fileName">要发送到资源的本地文件。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的文件时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, ，包含无效字符或该文件的指定的路径不存在。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)">
      <summary>将指定的本地文件上载到资源，以异步操作使用的任务对象。</summary>
      <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="fileName">要发送到资源的本地文件。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的文件时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, ，包含无效字符或该文件的指定的路径不存在。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)">
      <summary>将指定的本地文件上载到资源，以异步操作使用的任务对象。</summary>
      <param name="address">要接收的文件资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用来将数据发送到该资源的方法。 如果 null, ，默认情况下，开机自检 （http） 和 STOR ftp。</param>
      <param name="fileName">要发送到资源的本地文件。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含已上载的文件时，从资源接收的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="fileName" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - <paramref name="fileName" /> 是 null, ，是 <see cref="F:System.String.Empty" />, ，包含无效字符或该文件的指定的路径不存在。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头开头 multipart。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.String,System.String)">
      <summary>将指定的字符串上载到指定的资源使用 POST 方法。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 Http 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="data">要上载的字符串。</param>
      <returns>一个 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)">
      <summary>将指定的字符串上载到指定的资源，使用指定的方法。</summary>
      <param name="address">要接收字符串资源的 URI。 此 URI 必须标识可以接受与发送的请求的资源 <paramref name="method" /> 方法。</param>
      <param name="method">用来将字符串发送到资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要上载的字符串。</param>
      <returns>一个 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。- 或 -<paramref name="method" /> 不能用于发送内容。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String)">
      <summary>将指定的字符串上载到指定的资源使用 POST 方法。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 Http 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="data">要上载的字符串。</param>
      <returns>一个 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)">
      <summary>将指定的字符串上载到指定的资源，使用指定的方法。</summary>
      <param name="address">要接收字符串资源的 URI。 此 URI 必须标识可以接受与发送的请求的资源 <paramref name="method" /> 方法。</param>
      <param name="method">用来将字符串发送到资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要上载的字符串。</param>
      <returns>一个 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。- 或 -<paramref name="method" /> 不能用于发送内容。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)">
      <summary>将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="data">要上载的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)">
      <summary>将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用于将文件发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要上载的字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 -<paramref name="method" /> 不能用于发送内容。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>将指定的字符串上载到指定的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用于将文件发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要上载的字符串。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 -<paramref name="method" /> 不能用于发送内容。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)">
      <summary>将指定的字符串作为使用 task 对象的异步操作上载到指定的资源。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="data">要上载的字符串。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)">
      <summary>将指定的字符串作为使用 task 对象的异步操作上载到指定的资源。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用于将文件发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要上载的字符串。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 -<paramref name="method" /> 不能用于发送内容。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)">
      <summary>将指定的字符串作为使用 task 对象的异步操作上载到指定的资源。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="data">要上载的字符串。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)">
      <summary>将指定的字符串作为使用 task 对象的异步操作上载到指定的资源。</summary>
      <param name="address">要接收字符串资源的 URI。 有关 HTTP 资源，此 URI 必须标识可以接受使用 POST 方法，如脚本或 ASP 页发送的请求的资源。</param>
      <param name="method">用于将文件发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">要上载的字符串。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.String" /> 包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 为 null。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 -<paramref name="method" /> 不能用于发送内容。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI 标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 - 没有来自主持该资源的服务器响应。- 或 - 打开的流时出错。- 或 - Content-type 标头不 null 或"应用程序/x-响应客户-­ urlencoded"。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI，使用指定的方法标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="method">用于将文件发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头值不是 null 并且不是 application/x-www-form-urlencoded。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI 标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 - 没有来自主持该资源的服务器响应。- 或 - 打开的流时出错。- 或 - Content-type 标头不 null 或"应用程序/x-响应客户-­ urlencoded"。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI，使用指定的方法标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="method">用于将文件发送到该资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含从资源的响应的正文。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - <paramref name="data" /> 为 null。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头值不是 null 并且不是 application/x-www-form-urlencoded。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合中的数据上载到由指定的 URI 标识的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收该集合资源的 URI。 此 URI 必须标识可以接受使用默认方法发送的请求的资源。 请参阅备注。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合中的数据上载到由指定的 URI，使用指定的方法标识的资源。 此方法不会阻止调用线程。</summary>
      <param name="address">要接收该集合资源的 URI。 此 URI 必须标识可以接受与发送的请求的资源 <paramref name="method" /> 方法。</param>
      <param name="method">用来将字符串发送到资源的方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。- 或 -<paramref name="method" /> 不能用于发送内容。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)">
      <summary>将指定的名称/值集合中的数据上载到由指定的 URI，使用指定的方法标识的资源。 此方法不会阻止调用线程，并允许调用方将对象传递给该操作完成时调用的方法。</summary>
      <param name="address">要接收该集合资源的 URI。 此 URI 必须标识可以接受与发送的请求的资源 <paramref name="method" /> 方法。</param>
      <param name="method">用来将字符串发送到资源的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <param name="userToken">用户定义的对象传递给异步操作完成时调用的方法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" /> 和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。- 或 -<paramref name="method" /> 不能用于发送内容。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI 作为异步操作使用 task 对象标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - 没有来自主持该资源的服务器响应。- 或 - 打开的流时出错。- 或 - Content-type 标头不 null 或"应用程序/x-响应客户-­ urlencoded"。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI 作为异步操作使用 task 对象标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="method">用来发送到资源的集合的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 -<paramref name="method" /> 不能用于发送内容。- 或 - 没有来自主持该资源的服务器响应。- 或 - 打开的流时出错。- 或 - Content-type 标头不 null 或"应用程序/x-响应客户-­ urlencoded"。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI 作为异步操作使用 task 对象标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 - 打开的流时出错。- 或 - 没有来自主持该资源的服务器响应。- 或 - Content-type 标头值不是 null 并且不是 application/x-www-form-urlencoded。</exception>
    </member>
    <member name="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>将指定的名称/值集合上载到由指定的 URI 作为异步操作使用 task 对象标识的资源。</summary>
      <param name="address">要接收该集合资源的 URI。</param>
      <param name="method">用来发送到资源的集合的 HTTP 方法。 如果为 null，默认值为 POST （http） 和 STOR ftp。</param>
      <param name="data">
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 将发送到资源。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。<see cref="P:System.Threading.Tasks.Task`1.Result" /> 任务对象上的属性将返回 <see cref="T:System.Byte" /> 数组，其中包含由服务器发送的响应。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="address" /> 参数为 null。- 或 -<paramref name="data" /> 参数为 null。</exception>
      <exception cref="T:System.Net.WebException">通过组合构成的 URI <see cref="P:System.Net.WebClient.BaseAddress" />, ，和 <paramref name="address" /> 无效。- 或 -<paramref name="method" /> 不能用于发送内容。- 或 - 没有来自主持该资源的服务器响应。- 或 - 打开的流时出错。- 或 - Content-type 标头不 null 或"应用程序/x-响应客户-­ urlencoded"。</exception>
    </member>
    <member name="M:System.Net.WebException.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.WebException" /> 所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.WebException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String)">
      <summary>使用指定的错误消息初始化 <see cref="T:System.Net.WebException" /> 类的新实例。</summary>
      <param name="message">错误消息的文本。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Net.WebException" /> 用指定的错误消息和嵌套的异常类。</summary>
      <param name="message">错误消息的文本。</param>
      <param name="innerException">嵌套的异常。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
      <summary>新实例初始化 <see cref="T:System.Net.WebException" /> 类，具有指定的错误消息、 嵌套的异常、 状态和响应。</summary>
      <param name="message">错误消息的文本。</param>
      <param name="innerException">嵌套的异常。</param>
      <param name="status">
        <see cref="T:System.Net.WebExceptionStatus" /> 值之一。</param>
      <param name="response">一个 <see cref="T:System.Net.WebResponse" /> 实例，它包含来自远程主机的响应。</param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
      <summary>新实例初始化 <see cref="T:System.Net.WebException" /> 类，具有指定的错误消息和状态。</summary>
      <param name="message">错误消息的文本。</param>
      <param name="status">
        <see cref="T:System.Net.WebExceptionStatus" /> 值之一。</param>
    </member>
    <member name="M:System.Net.WebException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.Net.WebException" />。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 要使用。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 要使用。</param>
    </member>
    <member name="M:System.Net.WebException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。</summary>
      <param name="serializationInfo">此 <see cref="T:System.Net.WebException" /> 要序列化到的对象。</param>
      <param name="streamingContext">序列化的目标。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebHeaderCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.WebHeaderCollection" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 包含序列化所需的信息 <see cref="T:System.Net.WebHeaderCollection" />。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 包含与新关联的序列化流的源 <see cref="T:System.Net.WebHeaderCollection" />。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="headerName" /> 为空引用或 <see cref="F:System.String.Empty" />。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpRequestHeader,System.String)">
      <summary>将包含指定值的指定标头插入到集合中。</summary>
      <param name="header">要添加到集合中的标头。</param>
      <param name="value">标头的内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.Net.HttpResponseHeader,System.String)">
      <summary>将包含指定值的指定标头插入到集合中。</summary>
      <param name="header">要添加到集合中的标头。</param>
      <param name="value">标头的内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许的实例 <see cref="T:System.Net.HttpResponseHeader" />。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String)">
      <summary>将指定的标头插入集合中。</summary>
      <param name="header">要添加的标头，其名称和值用冒号分隔。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="header" /> 是 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="header" /> 不包含冒号 （:） 字符。长度 <paramref name="value" /> 大于 65535。- 或 - 名称部分 <paramref name="header" /> 是 <see cref="F:System.String.Empty" /> 或包含无效字符。- 或 - <paramref name="header" /> 是受限制的标头应设置的属性。- 或 - 值部分 <paramref name="header" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度大于 65535 是冒号 （:） 后的字符串。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Add(System.String,System.String)">
      <summary>将具有指定名称和值的标头插入到集合中。</summary>
      <param name="name">要添加到集合中的标头。</param>
      <param name="value">标头的内容。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是 null, ，<see cref="F:System.String.Empty" />, ，或包含无效字符。- 或 - <paramref name="name" /> 受限制的标头必须进行设置的属性将设置。- 或 - <paramref name="value" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
      <summary>将标头插入到集合中，不检查此标头是否在受限制的标头列表上。</summary>
      <param name="headerName">要添加到集合中的标头。</param>
      <param name="headerValue">标头的内容。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 是 null, ，<see cref="F:System.String.Empty" />, ，或包含无效字符。- 或 - <paramref name="headerValue" /> 包含无效字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="headerName" /> 不是 null 和长度 <paramref name="headerValue" /> 太长 （大于 65535 个字符）。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Clear">
      <summary>从集合中移除所有标头。</summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Get(System.Int32)">
      <summary>获取集合中特定标头的值，该值由索引指定到集合中。</summary>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <returns>一个 <see cref="T:System.String" /> 包含指定标头的值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负。 - 或 -<paramref name="index" /> 超出了集合的大小。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Get(System.String)">
      <summary>获取集合中特定标头的值，该值由标头名指定。</summary>
      <param name="name">Web 标头的名称。</param>
      <returns>一个 <see cref="T:System.String" /> 包含指定标头的值。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Net.WebHeaderCollection" /> 实例的枚举器。</summary>
      <returns>用于 <see cref="T:System.Collections.IEnumerator" /> 的 <see cref="T:System.Net.WebHeaderCollection" />。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetKey(System.Int32)">
      <summary>获取集合中位于指定位置的标头名。</summary>
      <param name="index">要从集合中获取的从零开始的键索引。</param>
      <returns>一个 <see cref="T:System.String" /> 保存标头名。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 为负。 - 或 -<paramref name="index" /> 超出了集合的大小。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetValues(System.Int32)">
      <summary>获取标头中存储的值的数组 <paramref name="index" /> 标头集合的位置。</summary>
      <param name="index">要返回的标头索引。</param>
      <returns>标头字符串数组。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.GetValues(System.String)">
      <summary>获取标头中存储的标头值数组。</summary>
      <param name="header">要返回的标头。</param>
      <returns>标头字符串数组。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String)">
      <summary>测试是否能够为请求设置指定的 HTTP 标头。</summary>
      <param name="headerName">要测试的标头。</param>
      <returns>true 如果标头是受限制;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="headerName" /> 是 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)">
      <summary>测试是否能够为请求或响应设置指定的 HTTP 标头。</summary>
      <param name="headerName">要测试的标头。</param>
      <param name="response">Framework 是否测试响应或请求？</param>
      <returns>true 如果标头是受限制;否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="headerName" /> 是 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="headerName" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.OnDeserialization(System.Object)">
      <summary>实现 <see cref="T:System.Runtime.Serialization.ISerializable" /> 接口，并在完成反序列化之后引发反序列化事件。</summary>
      <param name="sender">反序列化事件源。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpRequestHeader)">
      <summary>从集合中移除指定的标头。</summary>
      <param name="header">
        <see cref="T:System.Net.HttpRequestHeader" /> 要从集合中移除实例。</param>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.Net.HttpResponseHeader)">
      <summary>从集合中移除指定的标头。</summary>
      <param name="header">
        <see cref="T:System.Net.HttpResponseHeader" /> 要从集合中移除实例。</param>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许的实例 <see cref="T:System.Net.HttpResponseHeader" />。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Remove(System.String)">
      <summary>从集合中移除指定的标头。</summary>
      <param name="name">要从集合中移除的标头名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null<see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是受限制的标头。- 或 - <paramref name="name" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.Net.HttpRequestHeader,System.String)">
      <summary>将指定的标头设置为指定的值。</summary>
      <param name="header">要设置的 <see cref="T:System.Net.HttpRequestHeader" /> 值。</param>
      <param name="value">要设置的标头内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.Net.HttpResponseHeader,System.String)">
      <summary>将指定的标头设置为指定的值。</summary>
      <param name="header">要设置的 <see cref="T:System.Net.HttpResponseHeader" /> 值。</param>
      <param name="value">要设置的标头内容。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许的实例 <see cref="T:System.Net.HttpResponseHeader" />。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.Set(System.String,System.String)">
      <summary>将指定的标头设置为指定的值。</summary>
      <param name="name">要设置的标头。</param>
      <param name="value">要设置的标头内容。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 是 null 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是受限制的标头。- 或 - <paramref name="name" /> 或 <paramref name="value" /> 包含无效字符。</exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>将此实例序列化到指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象中。</summary>
      <param name="serializationInfo">此 <see cref="T:System.Net.WebHeaderCollection" /> 要序列化到的对象。</param>
      <param name="streamingContext">序列化的目标。</param>
    </member>
    <member name="M:System.Net.WebHeaderCollection.ToByteArray">
      <summary>将转换 <see cref="T:System.Net.WebHeaderCollection" /> 到字节数组...</summary>
      <returns>一个 <see cref="T:System.Byte" /> 保存标头集合的数组。</returns>
    </member>
    <member name="M:System.Net.WebHeaderCollection.ToString">
      <summary>此方法已过时。</summary>
      <returns>该集合的 <see cref="T:System.String" /> 表示形式。</returns>
    </member>
    <member name="M:System.Net.WebPermission.#ctor">
      <summary>创建 <see cref="T:System.Net.WebPermission" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.String)">
      <summary>新实例初始化 <see cref="T:System.Net.WebPermission" /> 类，具有指定的访问权限为指定的 URI。</summary>
      <param name="access">NetworkAccess 值，该值指示哪类访问权限授予指定的 URI。<see cref="F:System.Net.NetworkAccess.Accept" /> 表示允许此应用程序以接受来自 Internet 的本地资源上的连接。<see cref="F:System.Net.NetworkAccess.Connect" /> 表示允许此应用程序连接到特定的 Internet 资源。</param>
      <param name="uriString">哪些访问权限被授予一个 URI 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>新实例初始化 <see cref="T:System.Net.WebPermission" /> 类具有指定的 URI 正则表达式所指定的访问权限。</summary>
      <param name="access">一个 <see cref="T:System.Net.NetworkAccess" /> 值，该值指示哪类访问权限授予指定的 URI。<see cref="F:System.Net.NetworkAccess.Accept" /> 表示允许此应用程序以接受来自 Internet 的本地资源上的连接。<see cref="F:System.Net.NetworkAccess.Connect" /> 表示允许此应用程序连接到特定的 Internet 资源。</param>
      <param name="uriRegex">正则表达式，描述访问是要向其授予的 URI。</param>
    </member>
    <member name="M:System.Net.WebPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>创建的新实例 <see cref="T:System.Net.WebPermission" /> 类将所有传递的命令或禁止所有请求。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</param>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.String)">
      <summary>将添加到当前指定的访问权限的指定的 URI 字符串 <see cref="T:System.Net.WebPermission" />。</summary>
      <param name="access">一个 <see cref="T:System.Net.NetworkAccess" /> ，它指定到的 URI 授予的访问权限。</param>
      <param name="uriString">一个字符串，描述的访问权限被授予的 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.WebPermission.AddPermission(System.Net.NetworkAccess,System.Text.RegularExpressions.Regex)">
      <summary>添加指定的 URI 与当前指定的访问权限 <see cref="T:System.Net.WebPermission" />。</summary>
      <param name="access">指定到的 URI 授予的访问权限 NetworkAccess。</param>
      <param name="uriRegex">正则表达式，用于描述的 Uri 的访问权限被授予集。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriRegex" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.WebPermission.Copy">
      <summary>会创建一份 <see cref="T:System.Net.WebPermission" />。</summary>
      <returns>新实例 <see cref="T:System.Net.WebPermission" /> 类，该类具有与原始相同的值。</returns>
    </member>
    <member name="M:System.Net.WebPermission.FromXml(System.Security.SecurityElement)">
      <summary>重新构造 <see cref="T:System.Net.WebPermission" /> 从 XML 编码。</summary>
      <param name="securityElement">从中重新构造 XML 编码 <see cref="T:System.Net.WebPermission" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 参数是 null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是这种类型的权限元素。</exception>
    </member>
    <member name="M:System.Net.WebPermission.Intersect(System.Security.IPermission)">
      <summary>返回的两个逻辑交集 <see cref="T:System.Net.WebPermission" /> 实例。</summary>
      <param name="target">与当前实例进行比较的 <see cref="T:System.Net.WebPermission" />。</param>
      <returns>一个新 <see cref="T:System.Net.WebPermission" /> ，它表示当前实例的交集和 <paramref name="target" /> 参数。 如果该交集为空，该方法返回 null。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 null 或类型 <see cref="T:System.Net.WebPermission" /></exception>
    </member>
    <member name="M:System.Net.WebPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定是否当前 <see cref="T:System.Net.WebPermission" /> 是指定的对象的一个子集。</summary>
      <param name="target">
        <see cref="T:System.Net.WebPermission" /> 要与当前 <see cref="T:System.Net.WebPermission" />。</param>
      <returns>true 如果当前实例的一个子集 <paramref name="target" /> 参数; 否则为 false。 如果目标是 null, ，该方法返回 true 的是不受限制的空当前权限和 false 否则为。</returns>
      <exception cref="T:System.ArgumentException">目标参数不是实例的 <see cref="T:System.Net.WebPermission" />。</exception>
      <exception cref="T:System.NotSupportedException">当前实例包含正则表达式编码的权限并不是正好有相同的权限在目标实例中找到。</exception>
    </member>
    <member name="M:System.Net.WebPermission.IsUnrestricted">
      <summary>检查的总体权限状态 <see cref="T:System.Net.WebPermission" />。</summary>
      <returns>true 如果 <see cref="T:System.Net.WebPermission" /> 通过创建 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /><see cref="T:System.Security.Permissions.PermissionState" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.WebPermission.ToXml">
      <summary>创建的 XML 编码 <see cref="T:System.Net.WebPermission" /> 及其当前状态。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> ，其中包含的 XML 编码表示形式 <see cref="T:System.Net.WebPermission" />, ，包括状态信息。</returns>
    </member>
    <member name="M:System.Net.WebPermission.Union(System.Security.IPermission)">
      <summary>返回两个实例之间的逻辑联合 <see cref="T:System.Net.WebPermission" /> 类。</summary>
      <param name="target">
        <see cref="T:System.Net.WebPermission" /> 要与当前组合 <see cref="T:System.Net.WebPermission" />。</param>
      <returns>一个 <see cref="T:System.Net.WebPermission" /> ，它表示当前实例的并集和 <paramref name="target" /> 参数。 如果任一 WebPermission 是 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />, ，该方法返回 <see cref="T:System.Net.WebPermission" /> 即 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />。 如果目标是 null, ，该方法返回的当前副本 <see cref="T:System.Net.WebPermission" />。</returns>
      <exception cref="T:System.ArgumentException">目标不是 null 或类型 <see cref="T:System.Net.WebPermission" />。</exception>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>新实例初始化 <see cref="T:System.Net.WebPermissionAttribute" /> 类，具有一个值，指定可以对此类执行的安全操作。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="action" /> 不是有效 <see cref="T:System.Security.Permissions.SecurityAction" /> 值。</exception>
    </member>
    <member name="M:System.Net.WebPermissionAttribute.CreatePermission">
      <summary>创建并返回的新实例 <see cref="T:System.Net.WebPermission" /> 类。</summary>
      <returns>一个 <see cref="T:System.Net.WebPermission" /> 对应于安全声明。</returns>
    </member>
    <member name="M:System.Net.WebProxy.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebProxy" /> 类的空实例。</summary>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化的实例 <see cref="T:System.Net.WebProxy" /> 类使用以前经过序列化的内容。</summary>
      <param name="serializationInfo">序列化数据。</param>
      <param name="streamingContext">序列化数据上下文。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Net.WebProxy" /> 类的新实例。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.WebProxy" /> 类用指定的 URI，并绕过设置。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <param name="BypassOnLocal">true 若要绕过本地地址的代理否则为 false。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[])">
      <summary>新实例初始化 <see cref="T:System.Net.WebProxy" /> 使用指定的 URI、 跳过设置，以及要跳过 Uri 的列表。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <param name="BypassOnLocal">true 若要绕过本地地址的代理否则为 false。</param>
      <param name="BypassList">包含要跳过的服务器 Uri 的正则表达式字符串的数组。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>新实例初始化 <see cref="T:System.Net.WebProxy" /> 类用指定的 URI，则跳过设置的列表要跳过，Uri 和凭据。</summary>
      <param name="Address">代理服务器的 URI。</param>
      <param name="BypassOnLocal">true 若要绕过本地地址的代理否则为 false。</param>
      <param name="BypassList">正则表达式字符串数组，其中包含要跳过服务器的 Uri。</param>
      <param name="Credentials">
        <see cref="T:System.Net.ICredentials" /> 实例要提交到代理服务器进行身份验证。</param>
      <exception cref="T:System.UriFormatException">
        <paramref name="Address" /> 是无效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Net.WebProxy" /> 类具有指定的主机和端口号。</summary>
      <param name="Host">代理主机的名称。</param>
      <param name="Port">上的端口号 <paramref name="Host" /> 使用。</param>
      <exception cref="T:System.UriFormatException">通过组合构成的 URI <paramref name="Host" /> 和 <paramref name="Port" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri)">
      <summary>从指定的 <see cref="T:System.Net.WebProxy" /> 实例中初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="Address">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Net.WebProxy" /> 类 <see cref="T:System.Uri" /> 实例，并绕过设置。</summary>
      <param name="Address">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</param>
      <param name="BypassOnLocal">true 若要绕过本地地址的代理否则为 false。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[])">
      <summary>新实例初始化 <see cref="T:System.Net.WebProxy" /> 类与指定 <see cref="T:System.Uri" /> 实例、 跳过设置，以及要跳过 Uri 列表。</summary>
      <param name="Address">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</param>
      <param name="BypassOnLocal">true 若要绕过本地地址的代理否则为 false。</param>
      <param name="BypassList">正则表达式字符串数组，其中包含要跳过服务器的 Uri。</param>
    </member>
    <member name="M:System.Net.WebProxy.#ctor(System.Uri,System.Boolean,System.String[],System.Net.ICredentials)">
      <summary>新实例初始化 <see cref="T:System.Net.WebProxy" /> 类与指定 <see cref="T:System.Uri" /> 实例时，跳过设置的列表要跳过，Uri 和凭据。</summary>
      <param name="Address">一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</param>
      <param name="BypassOnLocal">true 若要绕过本地地址的代理否则为 false。</param>
      <param name="BypassList">正则表达式字符串数组，其中包含要跳过服务器的 Uri。</param>
      <param name="Credentials">
        <see cref="T:System.Net.ICredentials" /> 实例要提交到代理服务器进行身份验证。</param>
    </member>
    <member name="M:System.Net.WebProxy.GetDefaultProxy">
      <summary>读取 Internet Explorer 非动态代理设置。</summary>
      <returns>一个 <see cref="T:System.Net.WebProxy" /> 实例，它包含非动态代理设置从 Internet Explorer 5.5 和更高版本。</returns>
    </member>
    <member name="M:System.Net.WebProxy.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebProxy.GetProxy(System.Uri)">
      <summary>返回请求的代理 URI。</summary>
      <param name="destination">
        <see cref="T:System.Uri" /> 请求的 Internet 资源的实例。</param>
      <returns>
        <see cref="T:System.Uri" /> 实例的 Internet 资源，如果该资源位于跳过列表中; 否则为 <see cref="T:System.Uri" /> 代理的实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.WebProxy.IsBypassed(System.Uri)">
      <summary>指示是否使用代理服务器进行指定的主机。</summary>
      <param name="host">
        <see cref="T:System.Uri" /> 要检查代理使用的主机的实例。</param>
      <returns>true 如果代理服务器不应该用于 <paramref name="host" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="host" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Net.WebProxy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>创建序列化数据和系统用于序列化的上下文 <see cref="T:System.Net.WebProxy" /> 对象。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 结构，指示此序列化的目标。</param>
    </member>
    <member name="M:System.Net.WebRequest.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebRequest" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.WebRequest" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含序列化新的 <see cref="T:System.Net.WebRequest" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，指示与新的 <see cref="T:System.Net.WebRequest" /> 实例关联的序列化流的源。</param>
      <exception cref="T:System.NotImplementedException">任何尝试进行访问的构造函数，不在子代类中重写该构造函数时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.Abort">
      <summary>中止请求 </summary>
      <exception cref="T:System.NotImplementedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>当在子类中重写时，提供 <see cref="M:System.Net.WebRequest.GetRequestStream" /> 方法的异步版本。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此异步请求的状态信息的对象。</param>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>当在子类中被重写时，开始对 Internet 资源的异步请求。</summary>
      <param name="callback">
        <see cref="T:System.AsyncCallback" /> 委托。</param>
      <param name="state">包含此异步请求的状态信息的对象。</param>
      <returns>引用该异步请求的 <see cref="T:System.IAsyncResult" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.String)">
      <summary>为指定的 URI 方案初始化新的 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <param name="requestUriString">标识 Internet 资源的 URI。</param>
      <returns>特定 URI 方案的 <see cref="T:System.Net.WebRequest" /> 子代。</returns>
      <exception cref="T:System.NotSupportedException">中指定的请求方案 <paramref name="requestUriString" /> 尚未注册。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUriString" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有权限来连接到请求的 URI 或请求重定向到的 URI。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。在指定的 URI <paramref name="requestUriString" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.Uri)">
      <summary>为指定的 URI 方案初始化新的 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <param name="requestUri">包含请求的资源的 URI 的 <see cref="T:System.Uri" />。</param>
      <returns>指定的 URI 方案的 <see cref="T:System.Net.WebRequest" /> 子代。</returns>
      <exception cref="T:System.NotSupportedException">中指定的请求方案 <paramref name="requestUri" /> 未注册。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有权限来连接到请求的 URI 或请求重定向到的 URI。</exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateDefault(System.Uri)">
      <summary>为指定的 URI 方案初始化新的 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
      <param name="requestUri">包含请求的资源的 URI 的 <see cref="T:System.Uri" />。</param>
      <returns>指定的 URI 方案的 <see cref="T:System.Net.WebRequest" /> 子代。</returns>
      <exception cref="T:System.NotSupportedException">中指定的请求方案 <paramref name="requestUri" /> 未注册。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有权限来连接到请求的 URI 或请求重定向到的 URI。</exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.String)">
      <summary>为指定的 URI 字符串初始化新的 <see cref="T:System.Net.HttpWebRequest" /> 实例。</summary>
      <param name="requestUriString">标识 Internet 资源的 URI 字符串。</param>
      <returns>返回 <see cref="T:System.Net.HttpWebRequest" />。特定 URI 字符串的 <see cref="T:System.Net.HttpWebRequest" /> 实例。</returns>
      <exception cref="T:System.NotSupportedException">中指定的请求方案 <paramref name="requestUriString" /> 是 http 或 https 方案。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUriString" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有权限来连接到请求的 URI 或请求重定向到的 URI。</exception>
      <exception cref="T:System.UriFormatException">在指定的 URI <paramref name="requestUriString" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebRequest.CreateHttp(System.Uri)">
      <summary>为指定的 URI 初始化新的 <see cref="T:System.Net.HttpWebRequest" /> 实例。</summary>
      <param name="requestUri">标识 Internet 资源的 URI。</param>
      <returns>返回 <see cref="T:System.Net.HttpWebRequest" />。特定 URI 字符串的 <see cref="T:System.Net.HttpWebRequest" /> 实例。</returns>
      <exception cref="T:System.NotSupportedException">中指定的请求方案 <paramref name="requestUri" /> 是 http 或 https 方案。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有权限来连接到请求的 URI 或请求重定向到的 URI。</exception>
      <exception cref="T:System.UriFormatException">在指定的 URI <paramref name="requestUri" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>当在子类中重写时，返回用于将数据写入 Internet 资源的 <see cref="T:System.IO.Stream" />。</summary>
      <param name="asyncResult">引用对流的挂起请求的 <see cref="T:System.IAsyncResult" />。</param>
      <returns>将数据写入的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>当在子类中重写时，返回 <see cref="T:System.Net.WebResponse" />。</summary>
      <param name="asyncResult">引用对响应的挂起请求的 <see cref="T:System.IAsyncResult" />。</param>
      <returns>包含对 Internet 请求的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用将目标对象序列化所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStream">
      <summary>当在子类中重写时，返回用于将数据写入 Internet 资源的 <see cref="T:System.IO.Stream" />。</summary>
      <returns>用于将数据写入 Internet 资源的 <see cref="T:System.IO.Stream" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.GetRequestStreamAsync">
      <summary>当在子类中被重写时，将用于写入数据的 <see cref="T:System.IO.Stream" /> 作为异步操作返回到 Internet 资源。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebRequest.GetResponse">
      <summary>当在子类中被重写时，返回对 Internet 请求的响应。</summary>
      <returns>包含对 Internet 请求的响应的 <see cref="T:System.Net.WebResponse" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebRequest.GetResponseAsync">
      <summary>当在子代类中被重写时，将作为异步操作返回对 Internet 请求的响应。</summary>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebRequest.GetSystemWebProxy">
      <summary>返回当前模拟用户的 Internet Explorer 设置中配置的代理。</summary>
      <returns>对 <see cref="T:System.Net.WebRequest" /> 实例的每一次调用所使用的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPortableWebRequestCreator(System.Net.IWebRequestCreate)">
      <summary>注册 <see cref="T:System.Net.IWebRequestCreate" /> 对象。</summary>
      <param name="creator">要注册的 <see cref="T:System.Net.IWebRequestCreate" /> 对象。</param>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)">
      <summary>为指定的 URI 注册 <see cref="T:System.Net.WebRequest" /> 子代。</summary>
      <param name="prefix">
        <see cref="T:System.Net.WebRequest" /> 子代为其提供服务的完整 URI 或 URI 前缀。</param>
      <param name="creator">创建方法，<see cref="T:System.Net.WebRequest" /> 调用它以创建 <see cref="T:System.Net.WebRequest" /> 子代。</param>
      <returns>如果注册成功，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> 为 null- 或 - <paramref name="creator" /> 为 null。</exception>
    </member>
    <member name="M:System.Net.WebRequest.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>当在子代类中重写时，使用序列化 <see cref="T:System.Net.WebRequest" /> 所需要的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，包含 <see cref="T:System.Net.WebRequest" /> 的序列化数据。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.WebRequest" /> 关联的序列化流的目标。</param>
      <exception cref="T:System.NotImplementedException">尝试序列化对象，不在子代类中重写该接口时。</exception>
    </member>
    <member name="M:System.Net.WebResponse.#ctor">
      <summary>初始化 <see cref="T:System.Net.WebResponse" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Net.WebResponse" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的实例，包含序列化新 <see cref="T:System.Net.WebRequest" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的实例，指示与新的 <see cref="T:System.Net.WebRequest" /> 实例关联的序列化流的源。</param>
      <exception cref="T:System.NotSupportedException">任何尝试进行访问的构造函数，不在子代类中重写该构造函数时。</exception>
    </member>
    <member name="M:System.Net.WebResponse.Close">
      <summary>当由子类重写时，将关闭响应流。</summary>
      <exception cref="T:System.NotSupportedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebResponse.Dispose">
      <summary>释放 <see cref="T:System.Net.WebResponse" /> 对象使用的非托管资源。</summary>
    </member>
    <member name="M:System.Net.WebResponse.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Net.WebResponse" /> 对象使用的非托管资源，并可根据需要释放托管资源。</summary>
      <param name="disposing">如果释放托管资源和非托管资源，则为 true；如果仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Net.WebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
      <param name="serializationInfo">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="streamingContext">用于指定该序列化的目标的 <see cref="T:System.Runtime.Serialization.StreamingContext" />。</param>
    </member>
    <member name="M:System.Net.WebResponse.GetResponseStream">
      <summary>当在子类中重写时，从 Internet 资源返回数据流。</summary>
      <returns>用于从 Internet 资源中读取数据的 <see cref="T:System.IO.Stream" /> 类的实例。</returns>
      <exception cref="T:System.NotSupportedException">任何尝试访问该方法时，不在子代类中重写该方法时。</exception>
    </member>
    <member name="M:System.Net.WebResponse.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化 <see cref="T:System.Net.WebResponse" /> 所需的数据来填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，将存放 <see cref="T:System.Net.WebResponse" /> 的序列化数据。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Net.WebResponse" /> 关联的序列化流的目标。</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.#ctor">
      <summary>创建 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 类的实例。</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.Abort">
      <summary>中止连接并取消任何挂起的 IO 操作。</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>关闭作为异步操作的 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例。</summary>
      <param name="closeStatus">WebSocket 关闭状态。</param>
      <param name="statusDescription">关闭状态的说明。</param>
      <param name="cancellationToken">一个取消标记，用于传播应取消此操作的通知。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>关闭作为异步操作的 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例的输出。</summary>
      <param name="closeStatus">WebSocket 关闭状态。</param>
      <param name="statusDescription">关闭状态的说明。</param>
      <param name="cancellationToken">一个取消标记，用于传播应取消此操作的通知。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>连接到 WebSocket 服务器以作为异步操作。</summary>
      <param name="uri">要连接到的 WebSocket 服务器的 URI。</param>
      <param name="cancellationToken">用于传播应取消操作的通知的取消标记。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.Dispose">
      <summary>释放 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例使用的非托管资源。</summary>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
      <summary>将 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 上的数据作为异步操作进行接收。</summary>
      <param name="buffer">要接收响应的缓冲区。</param>
      <param name="cancellationToken">一个取消标记，用于传播应取消此操作的通知。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>将 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 上的数据作为异步操作发送。</summary>
      <param name="buffer">包含要发送的消息的缓冲区。</param>
      <param name="messageType">指定缓冲区是明文格式还是二进制格式。</param>
      <param name="endOfMessage">指定这是否为最后一个异步发送。 如果这是最后一个发送，则设置为 true ；否则为 false。</param>
      <param name="cancellationToken">一个取消标记，用于传播应取消此操作的通知。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.AddSubProtocol(System.String)">
      <summary>添加 WebSocket 连接握手期间协商的子协议。</summary>
      <param name="subProtocol">要添加的 WebSocket 子协议。</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.SetBuffer(System.Int32,System.Int32)">
      <summary>设置客户端缓冲区参数。</summary>
      <param name="receiveBufferSize">接收的大小，以字节为单位，客户端缓冲区。</param>
      <param name="sendBufferSize">以字节为单位，客户端发送缓冲区的大小。</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.SetBuffer(System.Int32,System.Int32,System.ArraySegment{System.Byte})">
      <summary>设置客户端缓冲区参数。</summary>
      <param name="receiveBufferSize">接收的大小，以字节为单位，客户端缓冲区。</param>
      <param name="sendBufferSize">以字节为单位，客户端发送缓冲区的大小。</param>
      <param name="buffer">要使用的接收缓冲区。</param>
    </member>
    <member name="M:System.Net.WebSockets.ClientWebSocketOptions.SetRequestHeader(System.String,System.String)">
      <summary>创建 HTTP 请求头及其值。</summary>
      <param name="headerName">HTTP 头的名称。</param>
      <param name="headerValue">HTTP 头的值。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.#ctor">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocket" /> 类的实例。</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Abort">
      <summary>中止 WebSocket 连接并取消任何挂起的 IO 操作。</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>结束 WebSocket 连接作为异步操作使用在中定义的关闭握手 WebSocket protocol specification 部分 7。</summary>
      <param name="closeStatus">指示关闭 WebSocket 连接的原因。</param>
      <param name="statusDescription">指定人类可读的说明，解释关闭连接的原因。</param>
      <param name="cancellationToken">可用于传播有关应取消操作的通知的令牌。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)">
      <summary>启动或完成中定义的关闭握手 WebSocket protocol specification section 7。</summary>
      <param name="closeStatus">指示关闭 WebSocket 连接的原因。</param>
      <param name="statusDescription">允许应用程序指定一个用户易懂的解释作为连接关闭的原因。</param>
      <param name="cancellationToken">可用于传播有关应取消操作的通知的令牌。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)">
      <summary>创建客户端的缓冲区，用于与此 <see cref="T:System.Net.WebSockets.WebSocket" /> 实例。</summary>
      <param name="receiveBufferSize">接收的大小，以字节为单位，客户端缓冲区。</param>
      <param name="sendBufferSize">发送缓冲区的大小（以字节为单位）。</param>
      <returns>返回 <see cref="T:System.ArraySegment`1" />。包含客户端缓冲区的数组。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})">
      <summary>此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。允许调用方来创建客户端一侧 WebSocket 类，该类将使用 WSPC 组帧目的。</summary>
      <param name="innerStream">要用于 IO 操作的连接。</param>
      <param name="subProtocol">客户端接受子协议。</param>
      <param name="receiveBufferSize">接收缓冲区的大小 （字节） 的客户端 WebSocket。</param>
      <param name="sendBufferSize">大小 （字节） 的客户端 WebSocket 发送缓冲区。</param>
      <param name="keepAliveInterval">确定如何定期帧发送通过作为保持活动连接。 仅在连接处于空闲状态时只会应用。</param>
      <param name="useZeroMaskingKey">指示是否应为 WebSocket 使用随机密钥或静态密钥 （只是零） 屏蔽。</param>
      <param name="internalBuffer">将用作 WPC 中的内部缓冲区。 大小必须至少是 2 * ReceiveBufferSize + SendBufferSize + 256 + 20 (16 on 32-bit)。</param>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocket" />。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)">
      <summary>创建 WebSocket 服务器缓冲区。</summary>
      <param name="receiveBufferSize">以字节为单位的所需的缓冲区的大小。</param>
      <returns>返回 <see cref="T:System.ArraySegment`1" />。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.Dispose">
      <summary>用于清理 ASP.NET 和自承载实现的非托管资源。</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsApplicationTargeting45">
      <summary>返回一个值，该值指示是否面向 WebSocket 实例 .NET Framework 4.5。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 <see cref="T:System.Net.WebSockets.WebSocket" /> 设定为目标 .NET Framework 4.5; 否则为 false。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)">
      <summary>返回一个值，该值指示是否 WebSocket 实例的状态，将关闭或中止。</summary>
      <param name="state">WebSocket 当前状态。</param>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 <see cref="T:System.Net.WebSockets.WebSocket" /> 已关闭或中止，否则为 false。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)">
      <summary>从 WebSocket 连接异步接收数据。</summary>
      <param name="buffer">引用应用程序缓冲区，其为已接收数据的存储位置。</param>
      <param name="cancellationToken">传播有关应取消操作的通知。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task`1" />。表示异步操作的任务对象。 任务对象上的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回包含已接收数据的 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.RegisterPrefixes">
      <summary>此 API 支持 .NET Framework 基础结构，但不应在代码中直接使用。 允许调用方以注册 WebSocket 请求 （ws 和 wss） 的前缀。</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)">
      <summary>通过 WebSocket 连接异步发送数据。</summary>
      <param name="buffer">要通过连接发送的缓冲区。</param>
      <param name="messageType">指示应用程序是发送二进制消息还是发送文本消息。</param>
      <param name="endOfMessage">指示“缓冲区”中的数据是否是消息的最后一部分。</param>
      <param name="cancellationToken">传播有关应取消操作的通知的标记。</param>
      <returns>返回 <see cref="T:System.Threading.Tasks.Task" />。表示异步操作的任务对象。</returns>
    </member>
    <member name="M:System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])">
      <summary>验证连接处于预期的状态。</summary>
      <param name="state">WebSocket 的有效状态列表对其进行测试的当前状态。</param>
      <param name="validStates">有效的连接状态的列表。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketContext.#ctor">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketContext" /> 类的实例。</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="nativeError">异常的本机错误代码。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.Exception)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="nativeError">异常的本机错误代码。</param>
      <param name="innerException">指示引发当前异常的上一个异常。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Int32,System.String)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="nativeError">异常的本机错误代码。</param>
      <param name="message">错误说明。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Exception)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
      <param name="innerException">指示引发当前异常的上一个异常。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
      <param name="nativeError">异常的本机错误代码。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.Exception)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
      <param name="nativeError">异常的本机错误代码。</param>
      <param name="innerException">指示引发当前异常的上一个异常。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
      <param name="nativeError">异常的本机错误代码。</param>
      <param name="message">错误说明。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.Int32,System.String,System.Exception)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
      <param name="nativeError">异常的本机错误代码。</param>
      <param name="message">错误说明。</param>
      <param name="innerException">指示引发当前异常的上一个异常。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
      <param name="message">错误说明。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.Net.WebSockets.WebSocketError,System.String,System.Exception)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="error">WebSocketError 枚举中的错误。</param>
      <param name="message">错误说明。</param>
      <param name="innerException">指示引发当前异常的上一个异常。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="message">错误说明。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.#ctor(System.String,System.Exception)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketException" /> 类的实例。</summary>
      <param name="message">错误说明。</param>
      <param name="innerException">指示引发当前异常的上一个异常。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>设置带有文件名和行号的 SerializationInfo 对象发生了异常。</summary>
      <param name="info">一个 SerializationInfo 对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" /> 类的实例。</summary>
      <param name="count">收到的字节数。</param>
      <param name="messageType">收到的消息的类型。</param>
      <param name="endOfMessage">指示是否是最后一条消息。</param>
    </member>
    <member name="M:System.Net.WebSockets.WebSocketReceiveResult.#ctor(System.Int32,System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Nullable{System.Net.WebSockets.WebSocketCloseStatus},System.String)">
      <summary>创建 <see cref="T:System.Net.WebSockets.WebSocketReceiveResult" /> 类的实例。</summary>
      <param name="count">收到的字节数。</param>
      <param name="messageType">收到的消息的类型。</param>
      <param name="endOfMessage">指示是否是最后一条消息。</param>
      <param name="closeStatus">指示连接的 <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />。</param>
      <param name="closeStatusDescription">对 <paramref name="closeStatus" /> 的描述。</param>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String)">
      <summary>将已经为 HTTP 传输进行过 HTML 编码的字符串转换为已解码的字符串。</summary>
      <param name="value">要解码的字符串。</param>
      <returns>已解码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlDecode(System.String,System.IO.TextWriter)">
      <summary>将已经过 HTML 编码的字符串转换为已解码的字符串并将其发送给 <see cref="T:System.IO.TextWriter" /> 输出流。</summary>
      <param name="value">要解码的字符串。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 输出流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 参数不能为 null 如果 <paramref name="value" /> 参数不是 null。</exception>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String)">
      <summary>将字符串转换为 HTML 编码字符串。</summary>
      <param name="value">要编码的字符串。</param>
      <returns>已编码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.HtmlEncode(System.String,System.IO.TextWriter)">
      <summary>将字符串转换为 HTML 编码的字符串，并以 <see cref="T:System.IO.TextWriter" /> 输出流的形式返回输出。</summary>
      <param name="value">要编码的字符串。</param>
      <param name="output">
        <see cref="T:System.IO.TextWriter" /> 输出流。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="output" /> 参数不能为 null 如果 <paramref name="value" /> 参数不是 null。</exception>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecode(System.String)">
      <summary>将已编码用于 URL 传输的字符串转换为解码的字符串。</summary>
      <param name="encodedValue">要解码的 URL 编码的字符串。</param>
      <returns>返回 <see cref="T:System.String" />。已解码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>将已编码以便在 URL 中传输到已解码的字节数组编码的字节数组转换。</summary>
      <param name="encodedValue">URL 编码 <see cref="T:System.Byte" /> 数组进行解码。</param>
      <param name="offset">以字节为单位，从开始处的偏移量 <see cref="T:System.Byte" /> 数组进行解码。</param>
      <param name="count">计数，以字节为单位，从解码 <see cref="T:System.Byte" /> 数组。</param>
      <returns>返回 <see cref="T:System.Byte" />。已解码 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncode(System.String)">
      <summary>将文本字符串转换为 URL 编码的字符串。</summary>
      <param name="value">要进行 URL 编码的文本。</param>
      <returns>返回 <see cref="T:System.String" />。URL 编码的字符串。</returns>
    </member>
    <member name="M:System.Net.WebUtility.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>将一个字节数组转换为 URL 编码的字节数组。</summary>
      <param name="value">
        <see cref="T:System.Byte" /> 要进行 URL 编码的数组。</param>
      <param name="offset">以字节为单位，从开始处的偏移量 <see cref="T:System.Byte" /> 数组进行编码。</param>
      <param name="count">以字节为单位，从其进行编码的计数 <see cref="T:System.Byte" /> 数组。</param>
      <returns>返回 <see cref="T:System.Byte" />。经过编码 <see cref="T:System.Byte" /> 数组。</returns>
    </member>
    <member name="M:System.Net.WriteStreamClosedEventArgs.#ctor">
      <summary>初始化 <see cref="T:System.Net.WriteStreamClosedEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.NetPipeStyleUriParser.#ctor">
      <summary>创建基于"Indigo"系统的 NetPipe 方案的分析器。</summary>
    </member>
    <member name="M:System.NetTcpStyleUriParser.#ctor">
      <summary>创建基于"Indigo"系统的 NetTcp 方案的分析器。</summary>
    </member>
    <member name="M:System.NewsStyleUriParser.#ctor">
      <summary>创建一个基于使用网络新闻传输协议 (NNTP) 新闻方案的可自定义分析器。</summary>
    </member>
    <member name="M:System.Reflection.ICustomTypeProvider.GetCustomType">
      <summary>获取此对象由提供的自定义类型。</summary>
      <returns>自定义的类型。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>通知所有已注册的对象已从正在运行状态更改为加载状态的通知接收器。  由服务器调用此方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>通知所有数据对象当前已都注册通知接收器对象中的数据已更改。</summary>
      <param name="format">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, ，按引用传递，其中介绍了格式，目标设备、 呈现和存储的调用的数据对象的信息。</param>
      <param name="stgmedium">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, ，按引用传递，其中定义的存储介质 （磁盘文件、 存储对象、 流对象、 图形设备接口 (GDI) 对象，或未定义的全局内存） 和该介质为调用的数据对象的所有权。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>通知所有已注册通知接收器重命名的对象。 由服务器调用此方法。</summary>
      <param name="moniker">一个指向 IMoniker 上对象的新的完整名字对象的接口。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>通知所有已注册的保存对象的通知接收器。 由服务器调用此方法。</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>向对象的已注册其视图已更改的通知接收器。 由服务器调用此方法。</summary>
      <param name="aspect">方面或对象视图。 包含值取自 <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> 枚举。</param>
      <param name="index">该视图已更改的部分。 目前，仅为-1 是有效的。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>在数据对象和通知接收器之间创建连接。 此方法由对象进行调用，该对象支持通知接收器并使通知接收器能收到有关对象数据中的更改的通知。</summary>
      <param name="pFormatetc"> 一个 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，它定义的格式、 目标设备、 方面和将用于以后的通知的媒体。</param>
      <param name="advf">其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> 指定一组来控制通知连接的标志的值。</param>
      <param name="adviseSink">一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> 将接收更改通知的通知接收器上的接口。</param>
      <param name="connection">此方法返回时，包含指向标识此连接的 DWORD 标记的指针。 您可以使用此令牌更高版本来删除通知连接，将其传递给 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />。 如果此值为零，则未建立连接。 此参数未经初始化即被传递。</param>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 值描述S_OK已创建通知连接。E_NOTIMPL此方法未在数据对象上实现。DV_E_LINDEX还有一个无效值 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; 目前，支持仅为-1。DV_E_FORMATETC还有一个无效值 <paramref name="pFormatetc" /> 参数。OLE_E_ADVISENOTSUPPORTED该数据对象不支持更改通知。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>销毁以前建立的通知连接。</summary>
      <param name="connection">指定要移除的连接的 DWORD 标记。 使用返回的值 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 最初建立连接。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>创建可用于对当前的通知连接进行枚举的对象。</summary>
      <param name="enumAdvise">此方法返回时，包含 <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> 接收新枚举数对象的接口指针。 如果该实现将设置 <paramref name="enumAdvise" /> 到 null, ，此时没有任何连接到通知接收器。 此参数未经初始化即被传递。</param>
      <returns>此方法支持标准返回值 E_OUTOFMEMORY 以及下面的值：值描述S_OK枚举数对象已成功实例化或没有连接。OLE_E_ADVISENOTSUPPORTED此对象不支持通知。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>创建一个对象，用于枚举 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构的数据对象。 在调用中使用这些结构 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />。</summary>
      <param name="direction">其中一个 <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> 值，该值指定数据的方向。</param>
      <returns>此方法支持 E_INVALIDARG 和 E_OUTOFMEMORY 等标准返回值，以及下面的值：值描述S_OK已成功创建枚举数对象。E_NOTIMPL指定的方向 <paramref name="direction" /> 不支持参数。OLE_S_USEREGOLE 枚举注册表中的格式的请求。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>提供了一个标准 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，它是逻辑上等同于更复杂的结构。 使用此方法以确定是否有两个不同 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构将返回相同的数据，从而无需重复呈现。</summary>
      <param name="formatIn">一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义格式、 medium 和调用方想要使用如检索数据的后续调用中的目标设备 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员在这种情况下并不重要，应忽略。</param>
      <param name="formatOut">此方法返回时，包含一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，其中包含用于特定呈现，使其规范地等效于可能的最常规信息 <paramref name="formatetIn" />。 调用方必须分配此结构与 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> 方法必须填充数据中。 若要检索的后续调用中的数据，如 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, ，调用方将使用所提供的值的 <paramref name="formatOut" />, ，除非提供的值为 null。 此值是 null 如果该方法返回 DATA_S_SAMEFORMATETC。<see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 成员在这种情况下并不重要，应忽略。 此参数未经初始化即被传递。</param>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 值描述S_OK返回 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构是不同于传递。DATA_S_SAMEFORMATETC<see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 是相同的结构和 null 中返回 <paramref name="formatOut" /> 参数。DV_E_LINDEX还有一个无效值 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; 目前，支持仅为-1。DV_E_FORMATETC还有一个无效值 <paramref name="pFormatetc" /> 参数。OLE_E_NOTRUNNING应用程序未运行。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>从源数据对象中获取数据。<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法，它由数据使用者调用，会将数据中指定所述呈现 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，然后将其传输通过指定 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构。 调用方则会假定负责释放 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构。</summary>
      <param name="format">一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义格式、 medium 和目标设备，以传递数据时使用。 使用布尔型 OR 运算符可以指定多个介质，从而允许方法在指定的介质中做出最佳选择。</param>
      <param name="medium">此方法返回时，包含一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 结构，指示包含通过返回的数据的存储介质其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" /> 成员，并负责释放介质的值通过其 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员。 如果 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 是 null, ，介质的接收方负责释放; 否则为 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 指向 IUnknown 因此接口对相应对象其 Release 可以调用方法。 介质必须分配并由填写 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>从源数据对象中获取数据。 此方法，它由数据使用者调用，不同于 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 方法中，调用方必须分配并释放指定的存储介质。</summary>
      <param name="format">一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义格式、 medium 和目标设备，以传递数据时使用。 可以在中指定一个介质 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, ，并且只有下列 <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> 值是有效的 ︰ <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, ，<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, ，<see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" />, ，或 <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />。</param>
      <param name="medium">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, ，按引用传递，用于定义包含正在传输的数据的存储介质。 介质必须由调用方分配并由填写 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。 调用方还必须释放介质。 此方法的实现必须始终提供的值 null 为 <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 的成员 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 此参数指向的结构。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>确定数据对象是否能够呈现的数据中所述的 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构。 对象在尝试执行粘贴或拖放操作可调用此方法之前调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 以了解是否该操作可能会成功。</summary>
      <param name="format">一个指向 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 通过定义的格式、 介质和目标设备，以用于查询的引用传递的结构。</param>
      <returns>此方法支持 E_INVALIDARG、E_UNEXPECTED 和 E_OUTOFMEMORY 等标准返回值，以及下面的值： 值描述S_OK后续调用 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> 可能会成功。DV_E_LINDEX值无效 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" />; 目前，支持仅为-1。DV_E_FORMATETC值无效 <paramref name="pFormatetc" /> 参数。DV_E_TYMED一个无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> 值。DV_E_DVASPECT一个无效的 <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> 值。OLE_E_NOTRUNNING应用程序未运行。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>将数据传输至实现此方法的对象。 此方法由包含数据源的对象调用。</summary>
      <param name="formatIn">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 结构，按引用传递，用于定义数据对象在解释存储介质中包含的数据时所使用的格式。</param>
      <param name="medium">一个 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> 通过定义传递数据的存储介质的引用传递的结构。</param>
      <param name="release">true 若要指定数据对象调用，该类实现 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, ，在调用返回后拥有存储介质。 这意味着通过调用用完之后，数据对象必须释放介质 ReleaseStgMedium 函数。false 若要指定调用方保留存储介质的所有权和调用的数据对象只能在调用期间使用的存储介质。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>创建新的枚举器，其中包含与当前的枚举数相同的枚举状态。</summary>
      <param name="newEnum">此方法返回时，包含对新创建的枚举器的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>检索指定的数目的枚举序列中的项。</summary>
      <param name="celt">数 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用中返回 <paramref name="rgelt" />。</param>
      <param name="rgelt">此方法返回时，包含对枚举引用 <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> 引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此方法返回时，包含枚举中的引用的实际数目的引用 <paramref name="rgelt" />。 此参数未经初始化即被传递。</param>
      <returns>S_OK 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 S_FALSE。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>将枚举序列重置到开头。</summary>
      <returns>HRESULT 值 S_OK。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>跳过指定的数目的枚举序列中的项。</summary>
      <param name="celt">要跳过枚举中的元素数。</param>
      <returns>S_OK 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 S_FALSE。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>创建新的枚举器，其中包含与当前的枚举数相同的枚举状态。</summary>
      <param name="newEnum">此方法返回时，包含对新创建的枚举器的引用。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>检索指定的数目的枚举序列中的项。</summary>
      <param name="celt">数 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用中返回 <paramref name="rgelt" />。</param>
      <param name="rgelt">此方法返回时，包含对枚举引用 <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> 引用。 此参数未经初始化即被传递。</param>
      <param name="pceltFetched">此参数返回时，包含枚举中的引用的实际数目的引用 <paramref name="rgelt" />。 此参数未经初始化即被传递。</param>
      <returns>S_OK 如果 <paramref name="pceltFetched" /> 参数等于 <paramref name="celt" /> 参数; 否则为 S_FALSE。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>将枚举序列重置到开头。</summary>
      <returns>HRESULT 值 S_OK。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>跳过指定的数目的枚举序列中的项。</summary>
      <param name="celt">要跳过枚举中的元素数。</param>
      <returns>S_OK 如果跳过的元素数等于 <paramref name="celt" /> 参数; 否则为 S_FALSE。</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>新实例初始化 <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> 类具有默认值的参数。</summary>
      <param name="value">一个表示参数的默认值的对象。</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类使用的名称和从此处开始句柄回收的阈值。</summary>
      <param name="name">收集器名称。 此参数允许您跟踪的名称收集器分别处理类型。</param>
      <param name="initialThreshold">一个值，指定应开始执行回收的点。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 类使用的名称，从此处开始阈值处理集合，并且必须在该句柄进行回收的阈值。</summary>
      <param name="name">收集器名称。  此参数允许您跟踪的名称收集器分别处理类型。</param>
      <param name="initialThreshold">一个值，指定应开始执行回收的点。</param>
      <param name="maximumThreshold">一个值，指定必须进行回收的点。 这应设置为可用的句柄的最大数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="initialThreshold" /> 参数小于 0。- 或 -<paramref name="maximumThreshold" /> 参数小于 0。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="maximumThreshold" /> 参数是小于 <paramref name="initialThreshold" /> 参数。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>递增当前句柄计数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>递减当前句柄计数。</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> 属性小于 0。</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 从一个字符串，包含有关.NET Framework 的版本信息的类。</summary>
      <param name="frameworkName">一个字符串，包含.NET Framework 的版本信息。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="frameworkName" /> 为 <see cref="F:System.String.Empty" />。- 或 -<paramref name="frameworkName" /> 具有少于两个部分或三个以上的组件。- 或 -<paramref name="frameworkName" /> 不包括主版本号和次版本号。- 或 -<paramref name="frameworkName " />不包括有效的版本号。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frameworkName" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 从字符串的类和一个 <see cref="T:System.Version" /> 标识的.NET Framework 版本的对象。</summary>
      <param name="identifier">一个字符串，标识的.NET Framework 版本。</param>
      <param name="version">一个包含.NET Framework 的版本信息的对象。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 为 null。- 或 -<paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 类，从字符串 <see cref="T:System.Version" /> 标识的.NET Framework 版本，以及配置文件名称的对象。</summary>
      <param name="identifier">一个字符串，标识的.NET Framework 版本。</param>
      <param name="version">一个包含.NET Framework 的版本信息的对象。</param>
      <param name="profile">配置文件名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="identifier" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> 为 null。- 或 -<paramref name="version" /> 为 null。</exception>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例表示相同的.NET Framework 版本与指定的对象。</summary>
      <param name="obj">要与当前类型进行比较的对象。</param>
      <returns>true 如果当前的每个组件 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的相应部分匹配 <paramref name="obj" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)">
      <summary>返回一个值，该值指示是否此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例表示与指定相同的.NET Framework 版本 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 实例。</summary>
      <param name="other">要与当前类型进行比较的对象。</param>
      <returns>true 如果当前的每个组件 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的相应部分匹配 <paramref name="other" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.GetHashCode">
      <summary>返回的哈希代码 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</summary>
      <returns>32 位有符号的整数，表示此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象是否表示相同的 .NET Framework 版本。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 参数表示相同的 .NET Framework 版本，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)">
      <summary>返回一个值，该值指示两个 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象是否表示不同的 .NET Framework 版本。</summary>
      <param name="left">要比较的第一个对象。</param>
      <param name="right">要比较的第二个对象。</param>
      <returns>如果 <paramref name="left" /> 和 <paramref name="right" /> 参数表示不同的 .NET Framework 版本，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Versioning.FrameworkName.ToString">
      <summary>返回的字符串表示形式 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</summary>
      <returns>表示此 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象的字符串。</returns>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)">
      <summary>新实例初始化 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 类，同时指定的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。</summary>
      <param name="identity">用户或组规则适用于。 类型必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 或类型，如 <see cref="T:System.Security.Principal.NTAccount" /> 可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
      <param name="eventRights">按位组合 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值指定的权限允许或拒绝。</param>
      <param name="type">其中一个 <see cref="T:System.Security.AccessControl.AccessControlType" /> 指定是否允许或拒绝权限的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="eventRights" /> 指定了无效的值。- 或 -<paramref name="type" /> 指定了无效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。- 或 -<paramref name="eventRights" /> 为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 也不的类型，如 <see cref="T:System.Security.Principal.NTAccount" /> 可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)">
      <summary>新实例初始化 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 类，同时指定名称的用户或组，此规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。</summary>
      <param name="identity">此规则适用于用户或组的名称。</param>
      <param name="eventRights">按位组合 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值指定的权限允许或拒绝。</param>
      <param name="type">其中一个 <see cref="T:System.Security.AccessControl.AccessControlType" /> 指定是否允许或拒绝权限的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="eventRights" /> 指定了无效的值。- 或 -<paramref name="type" /> 指定了无效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventRights" /> 为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 为 null。- 或 -<paramref name="identity" /> 是一个长度为零的字符串。- 或 -<paramref name="identity" /> 长度超过 512 个字符。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AuditFlags)">
      <summary>新实例初始化 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 类中，指定要审核，审核的权限的用户或组，以及是否要审核成功或失败，或同时。</summary>
      <param name="identity">用户或组规则适用于。 类型必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 或类型，如 <see cref="T:System.Security.Principal.NTAccount" /> 可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
      <param name="eventRights">按位组合 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 指定要审核的访问类型的值。</param>
      <param name="flags">按位组合 <see cref="T:System.Security.AccessControl.AuditFlags" /> 是否审核成功或失败，或同时指定的值。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="eventRights" /> 指定了无效的值。- 或 -<paramref name="flags" /> 指定了无效的值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identity" /> 为 null。- 或 -<paramref name="eventRights" /> 为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 也不的类型，如 <see cref="T:System.Security.Principal.NTAccount" /> 可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类的新实例。</summary>
      <exception cref="T:System.NotSupportedException">此类不支持在 Windows 98 或 Windows Millennium Edition 上。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)">
      <summary>新实例初始化 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 从具有指定名称的系统信号量的访问控制安全规则的类的指定部分。</summary>
      <param name="name">要从中检索其访问控制安全规则的系统信号量的名称。</param>
      <param name="includeSections">组成 <see cref="T:System.Security.AccessControl.AccessControlSections" /> 标志指定要检索的部分。</param>
      <exception cref="T:System.NotSupportedException">此类不支持在 Windows 98 或 Windows Millennium Edition 上。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>创建具有指定的访问权限、 访问控制和标志指定的用户，新的访问控制规则。</summary>
      <param name="identityReference">
        <see cref="T:System.Security.Principal.IdentityReference" /> 标识的用户或组规则适用于。</param>
      <param name="accessMask">按位组合 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 指定要允许或拒绝的访问权限的值强制转换为整数。</param>
      <param name="isInherited">对于没有意义命名信号量，因为它们没有层次结构。</param>
      <param name="inheritanceFlags">对于没有意义命名信号量，因为它们没有层次结构。</param>
      <param name="propagationFlags">对于没有意义命名信号量，因为它们没有层次结构。</param>
      <param name="type">其中一个 <see cref="T:System.Security.AccessControl.AccessControlType" /> 指定是否允许或拒绝权限的值。</param>
      <returns>一个 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 表示指定的用户的指定的权限的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, ，<paramref name="propagationFlags" />, ，或 <paramref name="type" /> 指定了无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 为 null。- 或 -<paramref name="accessMask" /> 为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />, ，也不的类型，如 <see cref="T:System.Security.Principal.NTAccount" /> 可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AddAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索匹配规则，并且新的规则可以合并。 如果未找到，则添加新规则。</summary>
      <param name="rule">要添加的访问控制规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AddAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>审核搜索与新的规则可以合并规则。 如果未找到，则添加新规则。</summary>
      <param name="rule">要添加的审核规则。 此规则指定的用户决定搜索。</param>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>创建一个新的审核规则，此规则适用于要审核的访问权限以及审核规则将触发的结果将用户指定。</summary>
      <param name="identityReference">
        <see cref="T:System.Security.Principal.IdentityReference" /> 标识的用户或组规则适用于。</param>
      <param name="accessMask">按位组合 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 指定要审核的访问权限的值强制转换为整数。</param>
      <param name="isInherited">对于没有意义命名的等待句柄，因为它们没有层次结构。</param>
      <param name="inheritanceFlags">对于没有意义命名的等待句柄，因为它们没有层次结构。</param>
      <param name="propagationFlags">对于没有意义命名的等待句柄，因为它们没有层次结构。</param>
      <param name="flags">按位组合 <see cref="T:System.Security.AccessControl.AuditFlags" /> 指定是否要审核成功的访问、 失败的访问，或两者的值。</param>
      <returns>一个 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 对象，表示指定的用户指定的审核规则。 该方法的返回类型是基类， <see cref="T:System.Security.AccessControl.AuditRule" />, ，但返回的值可以安全地强制转换为派生的类。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, ，<paramref name="propagationFlags" />, ，或 <paramref name="flags" /> 指定了无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> 为 null。- 或 -<paramref name="accessMask" /> 为零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />, ，也不的类型，如 <see cref="T:System.Security.Principal.NTAccount" /> 可转换为类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索与同一用户的访问控制规则和 <see cref="T:System.Security.AccessControl.AccessControlType" /> （允许或拒绝） 与指定的规则，并具有兼容的继承和传播标志; 如果找到此类规则，则指定的访问规则中包含的权限都将从中删除。</summary>
      <param name="rule">一个 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 指定的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 搜索，以及一组继承和传播标志，用于匹配规则，如果找到，则必须可与兼容。 指定的权限，以去除了兼容的规则，如果找到。</param>
      <returns>true 如果找到一个兼容的规则，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleAll(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索所有访问控制规则具有相同的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> （允许或拒绝） 与指定规则并且，如果找到，则删除它们。</summary>
      <param name="rule">一个 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 指定的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 搜索。 指定此规则的任何权限将被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>搜索完全匹配指定的访问控制规则的规则并且，如果找到，则删除它。</summary>
      <param name="rule">要移除的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>搜索与同一用户与指定的规则，并具有兼容的继承和传播标志; 的审核控制规则如果找到一个兼容的规则，都将从中删除指定的规则中包含的权限。</summary>
      <param name="rule">一个 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> ，它指定用户来进行搜索，以及一组匹配规则的继承和传播标志如果找到，则必须可与兼容。 指定的权限，以去除了兼容的规则，如果找到。</param>
      <returns>true 如果找到一个兼容的规则，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleAll(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>搜索有关的所有审核与同一用户与指定的规则的规则以及是否找到，将其删除。</summary>
      <param name="rule">一个 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> ，指定要搜索的用户。 指定此规则的任何权限将被忽略。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>搜索完全匹配指定的审核规则并且，如果找到，则删除它。</summary>
      <param name="rule">要移除的 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.ResetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>移除所有访问控制规则具有相同用户作为指定的规则，而不考虑 <see cref="T:System.Security.AccessControl.AccessControlType" />, ，然后添加指定的规则。</summary>
      <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。 此规则指定的用户确定要删除之前添加此规则的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.SetAccessRule(System.Security.AccessControl.SemaphoreAccessRule)">
      <summary>移除所有访问控制规则具有相同的用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> （允许或拒绝） 与指定的规则，然后添加指定的规则。</summary>
      <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" />。 用户和 <see cref="T:System.Security.AccessControl.AccessControlType" /> 此规则确定要移除之前添加此规则的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.AccessControl.SemaphoreSecurity.SetAuditRule(System.Security.AccessControl.SemaphoreAuditRule)">
      <summary>移除所有审核规则具有相同的用户与指定的规则，而不考虑 <see cref="T:System.Security.AccessControl.AuditFlags" /> 值，然后再添加指定的规则。</summary>
      <param name="rule">要添加的 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" />。 此规则指定的用户确定要删除之前添加此规则的规则。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rule" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor">
      <summary>新实例初始化 <see cref="T:System.Security.Authentication.AuthenticationException" /> 与任何消息的类。</summary>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Security.Authentication.AuthenticationException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，它包含要反序列化新所需的信息 <see cref="T:System.Security.Authentication.AuthenticationException" /> 实例。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例。</param>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Security.Authentication.AuthenticationException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> 介绍身份验证失败。</param>
    </member>
    <member name="M:System.Security.Authentication.AuthenticationException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Security.Authentication.AuthenticationException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> 介绍身份验证失败。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 导致当前异常。</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ChannelBinding.#ctor">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ChannelBinding.#ctor(System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 类的新实例。</summary>
      <param name="ownsHandle">一个布尔值，该值指示应用程序是否拥有包含将要传递给本机调用中提供的集成的 windows 身份验证扩展的保护的字节数据的本机内存区域的安全句柄。</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement.#ctor">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement.BuildPolicy">
      <summary>
        <see cref="M:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement.BuildPolicy" /> 方法会构建一个新 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 实例基于上设置的属性 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 类。</summary>
      <returns>一个新 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 实例，它表示创建的扩展的保护策略。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement.#ctor">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Add(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)">
      <summary>
        <see cref="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Add(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)" /> 方法将添加 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 实例与这 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</summary>
      <param name="element">
        <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 实例要添加到此 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Clear">
      <summary>
        <see cref="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Clear" /> 方法从这中移除所有配置元素对象 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.IndexOf(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)">
      <summary>
        <see cref="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.IndexOf(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)" /> 方法检索在此指定的配置元素的索引 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</summary>
      <param name="element">
        <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 要检索的索引，在此实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</param>
      <returns>指定的索引 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 在此 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Remove(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)">
      <summary>
        <see cref="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Remove(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)" /> 方法移除 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 从此实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</summary>
      <param name="element">
        <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 要删除与该实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element " />是 null。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Remove(System.String)">
      <summary>
        <see cref="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Remove(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)" /> 方法移除 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 从此实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" /> 基于 <see cref="T:System.String" /> 指定。</summary>
      <param name="name">一个 <see cref="T:System.String" /> 表示 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 要删除与该实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" /></param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.RemoveAt(System.Int32)">
      <summary>
        <see cref="M:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Remove(System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement)" /> 方法移除 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 从此实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" /> 基于指定的索引。</summary>
      <param name="index">索引 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 要删除与该实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 类 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含所需的数据并填充 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，包含序列化新的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 实例所需的信息。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，包含与新的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 实例关联的序列化流的源。</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement)">
      <summary>新实例初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 类，该类指定应何时强制实施扩展的保护策略。</summary>
      <param name="policyEnforcement">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement" /> 值，该值指示应何时强制实施扩展的保护策略。</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement,System.Security.Authentication.ExtendedProtection.ChannelBinding)">
      <summary>新实例初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 指定应何时强制实施扩展的保护策略的类和通道绑定令牌 (CBT) 使用。</summary>
      <param name="policyEnforcement">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement" /> 值，该值指示应何时强制实施扩展的保护策略。</param>
      <param name="customChannelBinding">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> ，其中包含要用于验证的自定义通道绑定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="policyEnforcement" /> 指定为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customChannelBinding " />是 null。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement,System.Security.Authentication.ExtendedProtection.ProtectionScenario,System.Collections.ICollection)">
      <summary>初始化的新实例 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 类，该类指定应何时强制实施扩展的保护策略，强制实施该策略，以及用于与客户端的 spn 相匹配的自定义服务提供程序名称 (SPN) 列表的保护类型。</summary>
      <param name="policyEnforcement">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement" /> 值，该值指示应何时强制实施扩展的保护策略。</param>
      <param name="protectionScenario">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario" /> 值，该值指示此策略强制实施的保护类型。</param>
      <param name="customServiceNames">一个 <see cref="T:System.Collections.ICollection" /> ，其中包含用于与客户端的 spn 相匹配的自定义 SPN 列表。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="policyEnforcement" /> 指定为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customServiceNames " />是 null 或者为空列表。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.#ctor(System.Security.Authentication.ExtendedProtection.PolicyEnforcement,System.Security.Authentication.ExtendedProtection.ProtectionScenario,System.Security.Authentication.ExtendedProtection.ServiceNameCollection)">
      <summary>初始化的新实例 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 类，该类指定应何时强制实施扩展的保护策略，强制实施该策略，以及用于与客户端的 spn 相匹配的自定义服务提供程序名称 (SPN) 列表的保护类型。</summary>
      <param name="policyEnforcement">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement" /> 值，该值指示应何时强制实施扩展的保护策略。</param>
      <param name="protectionScenario">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario" /> 值，该值指示此策略强制实施的保护类型。</param>
      <param name="customServiceNames">一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> ，其中包含用于与客户端的 spn 相匹配的自定义 SPN 列表。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="policyEnforcement" /> 指定为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="customServiceNames " />是 null 或者为空列表。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 具有所需的数据进行序列化对象 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 对象。</summary>
      <param name="info">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象，其中包含序列化的数据 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 对象。</param>
      <param name="context">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 关联的序列化流的目标。</param>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.ToString">
      <summary>获取扩展的保护策略实例的字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含的表示形式 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 实例。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可以将对象转换为指定的类型。</summary>
      <param name="context">要转换的对象。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> ，它表示您想要将转换为的类型。</param>
      <returns>true 如果该转换器能够执行转换，则否则为 false。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将对象转换为指定的类型</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 提供格式上下文。</param>
      <param name="culture">一个 <see cref="T:System.Globalization.CultureInfo" /> 对象。 如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。 这应该是 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 对象。</param>
      <param name="destinationType">值参数所要转换成的 <see cref="T:System.Type" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，它表示转换后 <paramref name="value" /> 参数。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">无法执行转换。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.#ctor(System.Collections.ICollection)">
      <summary>基于现有的 <see cref="T:System.Collections.ICollection" />，初始化 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 类新的只读实例。</summary>
      <param name="items">
        <see cref="T:System.Collections.ICollection" /> 类的实例，其中包含要用于初始化类的服务名称的指定值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item " /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" /> 为空。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Contains(System.String)">
      <summary>返回一个值，该值表示指定的字符串是否出现在此 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 实例中。</summary>
      <param name="searchServiceName">要搜寻的字符串。</param>
      <returns>返回 <see cref="T:System.Boolean" />。如果参数 <paramref name="searchServiceName" /> 出现在此 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 实例中，则为 true； 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.Collections.IEnumerable)">
      <summary>合并当前的 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 和指定的值，以创建包含此联合的新 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</summary>
      <param name="serviceNames">
        <see cref="T:System.Collections.IEnumerable" /> 类的实例，其中包含要进行合并的服务名称的指定值。</param>
      <returns>包含与指定值合并的现有 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 实例的联合的新 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceNames " /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceNames" /> 为空。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ServiceNameCollection.Merge(System.String)">
      <summary>合并当前的 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 和指定的值，以创建包含此联合的新 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</summary>
      <param name="serviceName">包含要用于初始化类的服务名称指定值的字符串。</param>
      <returns>包含与指定值合并的现有 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 实例的联合的新 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceNames " /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="serviceNames" /> 为空。</exception>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.TokenBinding.GetRawTokenBindingId">
      <summary>获取原始令牌绑定 id。</summary>
      <returns>原始令牌绑定 id。 将删除原始 ID 的第一个字节，该字节表示绑定类型。</returns>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor">
      <summary>新实例初始化 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 与任何消息的类。</summary>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例，它包含要反序列化新所需的信息 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 实例。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例。</param>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> 介绍身份验证失败。</param>
    </member>
    <member name="M:System.Security.Authentication.InvalidCredentialException.#ctor(System.String,System.Exception)">
      <summary>使用指定的消息和内部异常初始化 <see cref="T:System.Security.Authentication.InvalidCredentialException" /> 类的新实例。</summary>
      <param name="message">一个 <see cref="T:System.String" /> 介绍身份验证失败。</param>
      <param name="innerException">
        <see cref="T:System.Exception" /> 导致当前异常。</param>
    </member>
    <member name="M:System.Security.Claims.DynamicRoleClaimProvider.AddDynamicRoleClaims(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})">
      <summary>您可以使用 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 要添加对象声明与 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象。</summary>
      <param name="claimsIdentity">要向其中添加声明声明的标识。</param>
      <param name="claims">要添加的声明。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类使用的字节数组。</summary>
      <param name="rawData">包含抽象语法标记一个 ASN.1 编码数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类使用的实例 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类。</summary>
      <param name="asnEncodedData">
        <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.Security.Cryptography.Oid,System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类使用 <see cref="T:System.Security.Cryptography.Oid" /> 对象和一个字节数组。</summary>
      <param name="oid">一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</param>
      <param name="rawData">包含抽象语法标记一个 ASN.1 编码数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.#ctor(System.String,System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 类使用的字节数组。</summary>
      <param name="oid">一个字符串，表示 <see cref="T:System.Security.Cryptography.Oid" /> 信息。</param>
      <param name="rawData">包含抽象语法标记一个 ASN.1 编码数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>将信息从复制 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <param name="asnEncodedData">
        <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 新对象所基于的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData " />是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedData.Format(System.Boolean)">
      <summary>以字符串形式返回的抽象语法标记一个 ASN.1 编码数据的格式的版本。</summary>
      <param name="multiLine">true 如果返回的字符串应包含回车;否则为 false。</param>
      <returns>表示的抽象语法标记一个 ASN.1 编码数据的格式化的字符串。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 类，并添加 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 到集合的对象。</summary>
      <param name="asnEncodedData">要添加到集合的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.Add(System.Security.Cryptography.AsnEncodedData)">
      <summary>添加 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象传递给 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <param name="asnEncodedData">要添加到集合的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
      <returns>添加的索引 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">这两个 Oid 都 null 和 Oid 不匹配。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">有了 Oid null 和 Oid 不匹配。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.CopyTo(System.Security.Cryptography.AsnEncodedData[],System.Int32)">
      <summary>副本 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象转换为数组。</summary>
      <param name="array">该数组的 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象将被复制到。</param>
      <param name="index">复制操作开始的位置。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.GetEnumerator">
      <summary>返回 <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 对象，它可用于导航 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.Remove(System.Security.Cryptography.AsnEncodedData)">
      <summary>删除 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象从 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <param name="asnEncodedData">要移除的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>副本 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象转换为数组。</summary>
      <param name="array">该数组的 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象将被复制到。</param>
      <param name="index">复制操作开始的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 为此方法不支持多维数组。</exception>
      <exception cref="T:System.ArgumentException">长度为 <paramref name="index" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">长度为 <paramref name="index" /> 超出范围。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回 <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 对象，它可用于导航 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.AsnEncodedDataEnumerator" /> 可用于导航集合的对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataEnumerator.MoveNext">
      <summary>前进到下一个 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象在 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <returns>true, 如果枚举数成功地推进到下一个元素; false, ，如果枚举器已通过集合的末尾。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AsnEncodedDataEnumerator.Reset">
      <summary>将枚举数设置为其初始位置。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.Security.Cryptography.Oid)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Oid" /> 对象初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类的新实例。</summary>
      <param name="oid">要用于创建新的对象标识符的对象标识符信息。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid " />是 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类使用的字符串值 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</summary>
      <param name="oid">对象标识符。</param>
    </member>
    <member name="M:System.Security.Cryptography.Oid.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.Oid" /> 类使用指定的值和友好名称。</summary>
      <param name="value">标识符以点分隔的数字。</param>
      <param name="friendlyName">标识符的友好名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.Oid.FromFriendlyName(System.String,System.Security.Cryptography.OidGroup)">
      <summary>创建 <see cref="T:System.Security.Cryptography.Oid" /> 对象从一个 OID 通过搜索指定的组的友好名称。</summary>
      <param name="friendlyName">标识符的友好名称。</param>
      <param name="group">要搜索中的组。</param>
      <returns>一个对象，表示指定的 OID。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="friendlyName " /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">找不到 OID。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Oid.FromOidValue(System.String,System.Security.Cryptography.OidGroup)">
      <summary>创建 <see cref="T:System.Security.Cryptography.Oid" /> 通过使用指定的 OID 值和组的对象。</summary>
      <param name="oidValue">OID 值。</param>
      <param name="group">要搜索中的组。</param>
      <returns>新实例 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">找不到 OID 值的友好名称。</exception>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.OidCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.Add(System.Security.Cryptography.Oid)">
      <summary>将 <see cref="T:System.Security.Cryptography.Oid" /> 对象添加到 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</summary>
      <param name="oid">要添加到集合的 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</param>
      <returns>已添加的 <see cref="T:System.Security.Cryptography.Oid" /> 对象的索引。</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.CopyTo(System.Security.Cryptography.Oid[],System.Int32)">
      <summary>将 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象复制到一个数组中。</summary>
      <param name="array">要将 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象复制到的数组。</param>
      <param name="index">复制操作开始的位置。</param>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.GetEnumerator">
      <summary>返回可用于导航 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象复制到数组。</summary>
      <param name="array">要将 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象复制到的数组。</param>
      <param name="index">复制操作开始的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 不能为多维数组。- 或 -
              长度 <paramref name="array" /> 是无效的偏移量的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 的值超出范围。</exception>
    </member>
    <member name="M:System.Security.Cryptography.OidCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回可用于导航 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象。</summary>
      <returns>返回可用于导航集合的 <see cref="T:System.Security.Cryptography.OidEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.OidEnumerator.MoveNext">
      <summary>前进到下一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象在 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</summary>
      <returns>true, 如果枚举数成功地推进到下一个元素; false, ，如果枚举器已通过集合的末尾。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.OidEnumerator.Reset">
      <summary>将枚举数设置为其初始位置。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.PublicKey.#ctor(System.Security.Cryptography.Oid,System.Security.Cryptography.AsnEncodedData,System.Security.Cryptography.AsnEncodedData)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey" /> 类使用的公钥、 的 ASN.1 编码表示形式公钥参数和的 ASN.1 编码表示形式的公钥值的对象标识符 (OID) 对象。</summary>
      <param name="oid">表示的公钥的对象标识符 (OID) 对象。</param>
      <param name="parameters">公钥参数 ASN.1 编码表示。</param>
      <param name="keyValue">ASN.1 编码形式显示的公钥值。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类使用指定的字节数组中的信息。</summary>
      <param name="encodedDistinguishedName">字节数组，其中包含可分辨的名称信息。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Security.Cryptography.AsnEncodedData)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类的新实例。</summary>
      <param name="encodedDistinguishedName">
        <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象，表示的可分辨的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.Security.Cryptography.X509Certificates.X500DistinguishedName)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类的新实例。</summary>
      <param name="distinguishedName">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类使用的指定字符串中的信息。</summary>
      <param name="distinguishedName">表示可分辨的名称的字符串。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.#ctor(System.String,System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 类使用指定的字符串和 <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags" /> 标志。</summary>
      <param name="distinguishedName">表示可分辨的名称的字符串。</param>
      <param name="flag">指定的可分辨名称的特性的枚举值的按位组合。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Decode(System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags)">
      <summary>对使用的特征由指定的可分辨的名称进行解码 <paramref name="flag" /> 参数。</summary>
      <param name="flag">指定的可分辨名称的特性的枚举值的按位组合。</param>
      <returns>已解码的可分辨的名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书具有无效的名称。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Format(System.Boolean)">
      <summary>返回的格式化的版本的 X500 可分辨名称为打印或输出到文本窗口或到控制台。</summary>
      <param name="multiLine">true 如果返回的字符串应包含回车;否则为 false。</param>
      <returns>一个带格式的字符串，表示 X500 可分辨名称。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Boolean,System.Boolean,System.Int32,System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类的新实例。 参数指定一个值，该值指示证书是否为证书颁发机构 (CA) 证书，一个值，该值指示是否将证书的路径级别数有限制它允许，允许在证书路径和一个值，该值指示扩展是否是关键的级别数。</summary>
      <param name="certificateAuthority">true 如果该证书的证书颁发机构 (CA) 证书。否则为 false。</param>
      <param name="hasPathLengthConstraint">true 如果该证书的路径级别数有限制，它允许;否则为 false。</param>
      <param name="pathLengthConstraint">允许的证书路径中的级别数。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象和一个值，标识是否扩展是必不可少的。</summary>
      <param name="encodedBasicConstraints">要用于创建扩展的编码的数据。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension" /> 类使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <param name="asnEncodedData">要用于创建扩展的编码的数据。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用字节数组中的信息。</summary>
      <param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的字节数组和一个密码。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的字节数组、 密码和密钥存储标记。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的字节数组和一个密码。</summary>
      <param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的字节数组、 密码和密钥存储标记。</summary>
      <param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的非托管的句柄。</summary>
      <param name="handle">指向非托管代码中的证书上下文的指针。 C 结构称为 PCCERT_CONTEXT。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用指定的序列化和流上下文信息。</summary>
      <param name="info">所需进行反序列化新的序列化信息 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />。</param>
      <param name="context">有关要反序列化流的源上下文信息。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象。</summary>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用证书文件名。</summary>
      <param name="fileName">证书文件的名称。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的证书文件名称和密码。</summary>
      <param name="fileName">证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的证书文件名称、 密码和密钥存储标记。</summary>
      <param name="fileName">证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的证书文件名称以及用来访问该证书的密码。</summary>
      <param name="fileName">证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类使用的证书文件名称，用来访问该证书和密钥存储标记的密码。</summary>
      <param name="fileName">证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">发生错误，该证书。 例如：证书文件不存在。证书无效。证书的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])">
      <summary>指示字节数组中所包含的证书的类型。</summary>
      <param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="rawData" /> 其长度为零或 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)">
      <summary>指示在文件中所包含的证书的类型。</summary>
      <param name="fileName">证书文件的名称。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)">
      <summary>从证书获取使用者和颁发者名称。</summary>
      <param name="nameType">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509NameType" /> 该主题。</param>
      <param name="forIssuer">true 若要包括的颁发者名称;否则为 false。</param>
      <returns>证书的名称。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])">
      <summary>填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 字节数组中的数据的对象。</summary>
      <param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象使用的字节数组、 密码和密钥存储标记中的数据。</summary>
      <param name="rawData">包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象使用的字节数组、 密码和标志中的数据用于确定如何导入的私钥。</summary>
      <param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)">
      <summary>填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书文件中的信息。</summary>
      <param name="fileName">证书的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书文件、 一个密码和密钥存储标记中的信息。</summary>
      <param name="fileName">证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>填充 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书文件、 一个密码中的信息和一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 值。</summary>
      <param name="fileName">证书文件的名称。</param>
      <param name="password">访问 X.509 证书数据所需的密码。</param>
      <param name="keyStorageFlags">一个枚举值的按位组合，这些值控制在何处以及如何导入证书。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Reset">
      <summary>重置 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString">
      <summary>以文本格式显示 X.509 证书。</summary>
      <returns>证书信息。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)">
      <summary>以文本格式显示 X.509 证书。</summary>
      <param name="verbose">true 若要显示公钥、 私钥、 扩展和等等; false 来展示类似于 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 类，包括指纹、 序列号、 主题和颁发者名称，依次类推。</param>
      <returns>证书信息。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Verify">
      <summary>执行使用基本验证策略 X.509 链验证。</summary>
      <returns>true 如果验证成功，则 false 如果验证失败。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类没有任何 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 信息。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="certificate">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 要开始将集合从对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类使用的数组 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 类使用指定的证书集合。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>将对象添加到 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 的结尾处。</summary>
      <param name="certificate">X.509 证书表示为 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 开始的索引， <paramref name="certificate" /> 增添了。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>添加多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 到数组中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>添加多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象传递给另一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>确定是否 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象包含特定的证书。</summary>
      <param name="certificate">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 要在集合中定位对象。</param>
      <returns>true 如果 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 包含指定 <paramref name="certificate" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Export(System.Security.Cryptography.X509Certificates.X509ContentType)">
      <summary>X.509 证书将信息导出到字节数组。</summary>
      <param name="contentType">支持 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。</param>
      <returns>字节数组中的 X.509 证书信息。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)">
      <summary>将导出到字节数组，使用密码的 X.509 证书信息。</summary>
      <param name="contentType">支持 <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> 对象。</param>
      <param name="password">用于保护的字节数组的字符串。</param>
      <returns>字节数组中的 X.509 证书信息。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读、 内容无效，或在证书需要提供密码的情况下使用私有密钥无法导出由于提供的密码不正确。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)">
      <summary>搜索 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象使用指定的搜索条件 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" /> 枚举和 <paramref name="findValue" /> 对象。</summary>
      <param name="findType">其中一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509FindType" />  值。</param>
      <param name="findValue">一个对象作为搜索条件。</param>
      <param name="validOnly">true 若要允许仅有效证书从搜索; 返回否则为 false。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="findType" /> 无效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.GetEnumerator">
      <summary>返回一个枚举器可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator" /> 可循环访问的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.Byte[])">
      <summary>证书导入到字节数组的形式 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="rawData">一个包含 X.509 证书数据的字节数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>导入证书，需要提供密码来访问该证书，为一个字节数组形式 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="rawData">包含数据的字节数组 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</param>
      <param name="password">若要访问的证书信息所需的密码。</param>
      <param name="keyStorageFlags">用于控制如何以及在何处导入证书的枚举值的按位组合。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.String)">
      <summary>导入到证书文件 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="fileName">包含证书信息的文件的名称。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)">
      <summary>需要到密码将证书文件导入 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="fileName">包含证书信息的文件的名称。</param>
      <param name="password">若要访问的证书信息所需的密码。</param>
      <param name="keyStorageFlags">用于控制如何以及在何处导入证书的枚举值的按位组合。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>将对象插入 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 中指定索引处的对象。</summary>
      <param name="index">从零开始的索引，在其中插入 <paramref name="certificate" />。</param>
      <param name="certificate">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 要插入对象。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 大于 <see cref="P:System.Collections.CollectionBase.Count" /> 属性。</exception>
      <exception cref="T:System.NotSupportedException">该集合是只读的。- 或 - 该集合具有固定的大小。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>移除从证书的第一个匹配项 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="certificate">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 从移除对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2[])">
      <summary>删除多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 从数组中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象数组。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>删除多个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 从另一个对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <param name="certificates">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.MoveNext">
      <summary>将枚举数推进到下一个元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Reset">
      <summary>将枚举数设置为其初始位置，在第一个元素之前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#MoveNext">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerator.MoveNext" />。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#Reset">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerator.Reset" />。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>从 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象的数组初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 类的新实例。</summary>
      <param name="value">用来初始化新对象的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象数组。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>从另一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的新实例。</summary>
      <param name="value">用于初始化新对象的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>向当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 添加具有指定值的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</summary>
      <param name="value">要添加到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</param>
      <returns>当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 内的索引，于此处插入了新的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])">
      <summary>将 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 类型数组的元素复制到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的末尾。</summary>
      <param name="value">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 类型数组，包含要添加到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>将所指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的元素复制到当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的末尾。</summary>
      <param name="value">包含要添加到集合的对象的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>获取一个值，该值指示当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 是否包含指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</summary>
      <param name="value">要查找的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</param>
      <returns>如果此集合中包含 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)">
      <summary>将当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 值复制到指定索引处的一维 <see cref="T:System.Array" /> 实例中。</summary>
      <param name="array">一维 <see cref="T:System.Array" />，它是从 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 复制的值的目标。</param>
      <param name="index">
        <paramref name="array" /> 内的索引，从此处开始复制。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 参数多维。- 或 - <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的元素个数大于 <paramref name="arrayIndex" /> 和 <paramref name="array" /> 末尾之间的可用空间。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 参数小于 <paramref name="array" /> 参数的下限。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator">
      <summary>返回可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的枚举器。</summary>
      <returns>可用于循环访问集合的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的子元素枚举器。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode">
      <summary>生成基于当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中包含的所有值的哈希值。</summary>
      <returns>基于当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中包含的所有值的哈希值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>返回当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 的索引。</summary>
      <param name="value">要查找的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</param>
      <returns>若找到，则为 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中 <paramref name="value" /> 参数指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 的索引；否则为 -1。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>将 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 插入到指定索引处的当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</summary>
      <param name="index">从零开始的索引，应在该位置插入 <paramref name="value" />。</param>
      <param name="value">要插入的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>从当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中移除特定 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</summary>
      <param name="value">要从当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中移除的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</param>
      <exception cref="T:System.ArgumentException">未在当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中找到由 <paramref name="value" /> 参数指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)">
      <summary>为指定的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator" /> 类的新实例。</summary>
      <param name="mappings">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 枚举。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.MoveNext">
      <summary>将枚举数推进到集合的下一个元素。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">枚举器已实例化后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
      <exception cref="T:System.InvalidOperationException">枚举器实例化后修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#MoveNext">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerator.MoveNext" />。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">枚举器已实例化后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#Reset">
      <summary>有关此成员的说明，请参阅 <see cref="M:System.Collections.IEnumerator.Reset" />。</summary>
      <exception cref="T:System.InvalidOperationException">枚举器已实例化后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor(System.Boolean)">
      <summary>通过指定一个值指示是否应使用计算机上下文，初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 类的新实例。</summary>
      <param name="useMachineContext">如果为 true，则使用计算机上下文；如果为 false，则使用当前用户上下文。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.#ctor(System.IntPtr)">
      <summary>使用 X.509 链的 <see cref="T:System.IntPtr" /> 句柄初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 类的新实例。</summary>
      <param name="chainContext">X.509 链的 <see cref="T:System.IntPtr" /> 句柄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chainContext" /> 参数为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="chainContext" /> 参数指向无效的上下文。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Build(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>使用 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 所指定的策略生成 X.509 链。</summary>
      <param name="certificate">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</param>
      <returns>如果 X.509 证书有效，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="certificate" /> 不是有效的证书或者是 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="certificate" /> 不可读。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Create">
      <summary>查询 CryptoConfig 文件中定义的映射后，创建一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象，并将链映射到该映射。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Dispose">
      <summary>释放此 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Dispose(System.Boolean)">
      <summary>释放此 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 使用的非托管资源，并且可选择释放托管资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Chain.Reset">
      <summary>清除当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509ChainElement[],System.Int32)">
      <summary>副本 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 到数组中，指定索引处开始的对象。</summary>
      <param name="array">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象数组。</param>
      <param name="index">表示索引值的整数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定 <paramref name="index" /> 小于零，或者大于或等于该数组的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上的当前计数大于数组的长度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.GetEnumerator">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator" /> 可用于导航的链元素的集合的对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>副本 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 到数组中，指定索引处开始的对象。</summary>
      <param name="array">一个数组复制 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象传递给。</param>
      <param name="index">索引 <paramref name="array" /> 从其开始复制。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">指定 <paramref name="index" /> 小于零，或者大于或等于该数组的长度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 加上的当前计数大于数组的长度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>获取 <see cref="T:System.Collections.IEnumerator" /> 可用于导航的链元素的集合的对象。</summary>
      <returns>一个 <see cref="T:System.Collections.IEnumerator" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.MoveNext">
      <summary>将枚举数推进到下一个元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" />。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，在第一个元素之前 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" />。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainPolicy.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ChainPolicy.Reset">
      <summary>重置 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 为其默认值的成员。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象和一个值，标识是否扩展是必不可少的。</summary>
      <param name="encodedEnhancedKeyUsages">要用于创建扩展的编码的数据。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.#ctor(System.Security.Cryptography.OidCollection,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类使用 <see cref="T:System.Security.Cryptography.OidCollection" /> 和标识是否扩展是必不可少的一个值。</summary>
      <param name="enhancedKeyUsages">
        <see cref="T:System.Security.Cryptography.OidCollection" /> 集合。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">指定 <see cref="T:System.Security.Cryptography.OidCollection" />  包含一个或多个损坏的值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension" /> 类使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <param name="asnEncodedData">要用于创建扩展的编码的数据。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
      <param name="encodedExtension">要用于创建扩展的编码的数据。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.Oid,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
      <param name="oid">用来标识扩展的对象标识符。</param>
      <param name="rawData">用于创建扩展的编码的数据。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="oid" /> 为空字符串 ("")。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.String,System.Byte[],System.Boolean)">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 类的新实例。</summary>
      <param name="oid">表示的对象标识符的字符串。</param>
      <param name="rawData">用于创建扩展的编码的数据。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>将指定的扩展属性复制 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <param name="asnEncodedData">要复制的 <see cref="T:System.Security.Cryptography.AsnEncodedData" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asnEncodedData" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asnEncodedData" /> 没有有效的 X.509 扩展。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Add(System.Security.Cryptography.X509Certificates.X509Extension)">
      <summary>添加 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象传递给 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</summary>
      <param name="extension">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" />  要添加到对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</param>
      <returns>在该索引处 <paramref name="extension" /> 参数已添加。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="extension" /> 参数的值为 null。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Extension[],System.Int32)">
      <summary>将集合复制到数组的指定索引处开始。</summary>
      <param name="array">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象数组。</param>
      <param name="index">开始复制处的数组中的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 是一个零长度字符串或包含无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 指定不在该数组的范围内的值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.GetEnumerator">
      <summary>返回一个枚举器可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator" /> 要用来循环访问对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>将集合复制到数组的指定索引处开始。</summary>
      <param name="array">一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象数组。</param>
      <param name="index">开始复制处的数组中的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> 是一个零长度字符串或包含无效值。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 指定不在该数组的范围内的值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>返回一个枚举器可循环访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 要用来循环访问对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.MoveNext">
      <summary>将枚举数推进到下一个元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />。</summary>
      <returns>如果枚举数已成功地推进到下一个元素，则为 true；如果枚举数传递到集合的末尾，则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.Reset">
      <summary>将枚举数设置为其初始位置，在第一个元素之前 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />。</summary>
      <exception cref="T:System.InvalidOperationException">创建枚举器后，已修改该集合。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象和一个值，标识是否扩展是必不可少的。</summary>
      <param name="encodedKeyUsage">要用于创建扩展的编码的数据。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.#ctor(System.Security.Cryptography.X509Certificates.X509KeyUsageFlags,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类使用指定 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" /> 值和标识是否扩展是必不可少的一个值。</summary>
      <param name="keyUsages">其中一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" /> 介绍了如何使用该密钥的值。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension" /> 类使用 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <param name="asnEncodedData">要用于创建扩展的编码的数据。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor">
      <summary>使用当前用户存储的个人证书来初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.IntPtr)">
      <summary>使用 HCERTSTORE 存储的 Intptr 句柄来初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeHandle">HCERTSTORE 存储的句柄。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="storeHandle" /> 参数为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="storeHandle" /> 参数指向无效的上下文。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeLocation">指定 X.509 证书存储位置的枚举值之一。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 值初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeName">指定 X.509 证书存储的名称的枚举值之一。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 和 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 值来初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeName">指定 X.509 证书存储的名称的枚举值之一。</param>
      <param name="storeLocation">指定 X.509 证书存储位置的枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="storeLocation" /> 不是有效位置或者 <paramref name="storeName" /> 不是有效名称。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String)">
      <summary>使用指定的存储名称来初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeName">一个表示存储名称的字符串值。 有关详细信息，请参见 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" />。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)">
      <summary>使用表示 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 枚举的值和 <see cref="T:System.Security.Cryptography.X509Certificates.StoreLocation" /> 枚举的值的字符串来初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 类的新实例。</summary>
      <param name="storeName">一个字符串，它表示 <see cref="T:System.Security.Cryptography.X509Certificates.StoreName" /> 枚举的值。</param>
      <param name="storeLocation">指定 X.509 证书存储位置的枚举值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="storeLocation" /> 包含无效值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>将证书添加到 X.509 证书存储。</summary>
      <param name="certificate">要添加的证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">无法将证书添加到存储区。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>将证书集合添加到 X.509 证书存储。</summary>
      <param name="certificates">要添加的证书集合。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Close">
      <summary>关闭 X.509 证书存储。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Dispose">
      <summary>释放由此 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)">
      <summary>根据 <see cref="T:System.Security.Cryptography.X509Certificates.OpenFlags" /> 标志设置，打开 X.509 证书存储或创建一个新存储。</summary>
      <param name="flags">一个枚举值的按位组合，它指定 X.509 证书存储的打开方式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">此存储不可读。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
      <exception cref="T:System.ArgumentException">此存储包含无效值。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)">
      <summary>从 X.509 证书存储移除证书。</summary>
      <param name="certificate">要移除的证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509Store.RemoveRange(System.Security.Cryptography.X509Certificates.X509Certificate2Collection)">
      <summary>从 X.509 证书存储移除一系列证书。</summary>
      <param name="certificates">要移除的一系列证书。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificates" /> 为 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Byte[],System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类使用字节数组和一个值，标识是否扩展是必不可少的。</summary>
      <param name="subjectKeyIdentifier">字节数组，表示要用于创建扩展的数据。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类使用编码的数据和标识是否扩展是必不可少的一个值。</summary>
      <param name="encodedSubjectKeyIdentifier">
        <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 要用来创建扩展对象。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类使用的公共密钥和值，该值指示扩展必不可少的。</summary>
      <param name="key">一个 <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey" />  对象从创建主题密钥标识符 (SKI)。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.Security.Cryptography.X509Certificates.PublicKey,System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类使用的公共密钥、 哈希算法标识符和值，该值指示扩展必不可少的。</summary>
      <param name="key">一个 <see cref="T:System.Security.Cryptography.X509Certificates.PublicKey" /> 对象从创建主题密钥标识符 (SKI)。</param>
      <param name="algorithm">其中一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm" /> 标识要使用的哈希算法的值。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.#ctor(System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类使用字符串和一个值，标识是否扩展是必不可少的。</summary>
      <param name="subjectKeyIdentifier">一个字符串，以十六进制格式表示证书的主题密钥标识符 (SKI) 编码。</param>
      <param name="critical">true 如果该扩展是关键代码;否则为 false。</param>
    </member>
    <member name="M:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)">
      <summary>创建的新实例 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 通过从编码的数据将复制的信息的类。</summary>
      <param name="asnEncodedData">
        <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 要用来创建扩展对象。</param>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBase" /> 类指定在创建资源的访问权限级别。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 参数不是 <see cref="T:System.Security.Permissions.PermissionState" /> 的有效值。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.AddPermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>将一个权限条目添加到该权限。</summary>
      <param name="entry">要添加的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">指定 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">中的元素数 <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性不等于中的元素数 <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames" /> 属性。- 或 - <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 已包含在权限。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Clear">
      <summary>清除添加的权限条目权限。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Copy">
      <summary>创建并返回当前的权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.FromXml(System.Security.SecurityElement)">
      <summary>通过 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 参数不是有效的权限元素。- 或 - 版本号 <paramref name="securityElement" /> 不支持参数。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 参数为 null。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.GetPermissionEntries">
      <summary>返回的数组 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 对象添加到此权限。</summary>
      <returns>一个数组 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 已添加到此权限的对象。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Intersect(System.Security.IPermission)">
      <summary>创建并返回是当前的权限对象的交集的权限对象和目标权限对象。</summary>
      <param name="target">权限与当前权限对象具有相同类型的对象。</param>
      <returns>新权限对象，表示当前对象和指定的目标的交集。 如果交集为空，则此对象为 null。</returns>
      <exception cref="T:System.ArgumentException">目标权限对象不是类型的与当前权限对象相同。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前的权限对象是否为指定权限的子集。</summary>
      <param name="target">测试子集关系权限对象。</param>
      <returns>true 如果当前的权限对象是指定的权限对象中; 的一个子集否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.IsUnrestricted">
      <summary>获取一个值，该值指示是否不受限制的权限。</summary>
      <returns>true 如果权限不受限制;否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.RemovePermissionAccess(System.Security.Permissions.ResourcePermissionBaseEntry)">
      <summary>从权限中删除一个权限项。</summary>
      <param name="entry">要移除的 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" />。</param>
      <exception cref="T:System.ArgumentNullException">指定 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 是 null。</exception>
      <exception cref="T:System.InvalidOperationException">中的元素数 <see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性不等于中的元素数 <see cref="P:System.Security.Permissions.ResourcePermissionBase.TagNames" /> 属性。- 或 - <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 不是在权限。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.ToXml">
      <summary>创建并返回安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBase.Union(System.Security.IPermission)">
      <summary>创建一个权限对象，它将当前的权限对象和目标权限对象。</summary>
      <param name="target">要与当前权限对象组合在一个权限对象。 它必须是类型的与当前权限对象相同。</param>
      <returns>新权限对象，表示当前的权限对象和指定的权限对象的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 权限对象不是与当前权限对象相同的类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor">
      <summary>初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.Permissions.ResourcePermissionBaseEntry.#ctor(System.Int32,System.String[])">
      <summary>新实例初始化 <see cref="T:System.Security.Permissions.ResourcePermissionBaseEntry" /> 带有指定的权限访问和权限的访问路径的类。</summary>
      <param name="permissionAccess">整数表示形式的权限访问级别的枚举值。<see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess" /> 属性设置为此值。</param>
      <param name="permissionAccessPath">标识要保护的资源的字符串数组。<see cref="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath" /> 属性设置为此值。</param>
      <exception cref="T:System.ArgumentNullException">指定 <paramref name="permissionAccessPath" /> 是 null。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Security.Permissions.StorePermission" /> 使用任一完全受限制或不受限制的权限状态的类。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 值之一。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的 <see cref="T:System.Security.Permissions.PermissionState" /> 值。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.#ctor(System.Security.Permissions.StorePermissionFlags)">
      <summary>使用指定的访问权限初始化 <see cref="T:System.Security.Permissions.StorePermission" /> 类的新实例。</summary>
      <param name="flag">
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="flag" /> 不是有效的 <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值组合。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Copy">
      <summary>创建并返回当前权限的相同副本。</summary>
      <returns>当前权限的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.FromXml(System.Security.SecurityElement)">
      <summary>从 XML 编码重新构造具有指定状态的权限。</summary>
      <param name="securityElement">包含用于重新构造权限的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="securityElement" /> 不是有效的权限元素。- 或 - <paramref name="securityElement" /> 中的版本号无效。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Intersect(System.Security.IPermission)">
      <summary>创建并返回一个权限，该权限是当前权限与指定权限的交集。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 null。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 null，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsSubsetOf(System.Security.IPermission)">
      <summary>确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 null，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.IsUnrestricted">
      <summary>返回一个值，该值指示当前权限是否不受限制。</summary>
      <returns>如果当前权限不受限制，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.ToXml">
      <summary>创建权限及其当前状态的 XML 编码。</summary>
      <returns>包含权限及其任何状态信息的 XML 编码的 <see cref="T:System.Security.SecurityElement" />。</returns>
    </member>
    <member name="M:System.Security.Permissions.StorePermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不为 null，并且与当前权限不属于同一类型。</exception>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>新实例初始化 <see cref="T:System.Security.Permissions.StorePermissionAttribute" /> 类，具有指定的安全操作。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.StorePermissionAttribute.CreatePermission">
      <summary>创建并返回一个新的 <see cref="T:System.Security.Permissions.StorePermission" />。</summary>
      <returns>一个 <see cref="T:System.Security.Permissions.StorePermission" /> 此特性对应。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>初始化 <see cref="T:System.Security.Permissions.TypeDescriptorPermission" /> 类的新实例。</summary>
      <param name="state">
        <see cref="T:System.Security.Permissions.PermissionState" /> 到请求。 仅 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />  和 <see cref="F:System.Security.Permissions.PermissionState.None" /> 都有效。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 不是有效的权限状态。 仅 <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />  和 <see cref="F:System.Security.Permissions.PermissionState.None" /> 都有效。</exception>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.#ctor(System.Security.Permissions.TypeDescriptorPermissionFlags)">
      <summary>新实例初始化 <see cref="T:System.Security.Permissions.TypeDescriptorPermission" /> 类，具有指定的权限标志。</summary>
      <param name="flag">要请求的权限标志。</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Copy">
      <summary>由派生类实现时，创建并返回当前权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.FromXml(System.Security.SecurityElement)">
      <summary>当在派生类中替代时，用 XML 编码重新构造具有指定状态的安全对象。</summary>
      <param name="securityElement">用于重新构造安全对象的 XML 编码。</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Intersect(System.Security.IPermission)">
      <summary>由派生类实现时，创建并返回属于当前权限和指定权限的交集的权限。</summary>
      <param name="target">要与当前权限相交的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示当前权限和指定权限的交集的一个新权限。 如果交集为空，则此新权限为 null。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>由派生类实现时，确定当前权限是否为指定权限的子集。</summary>
      <param name="target">将要测试子集关系的权限。 此权限必须与当前权限属于同一类型。</param>
      <returns>如果当前权限是指定权限的子集，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.IsUnrestricted">
      <summary>获取一个值，该值指示是否可以从部分受信任代码调用类型描述符。</summary>
      <returns>true 如果 <see cref="P:System.Security.Permissions.TypeDescriptorPermission.Flags" /> 属性设置为 <see cref="F:System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess" />; 否则为 false。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.ToXml">
      <summary>当在派生类中重写时，创建安全对象及其当前状态的 XML 编码。</summary>
      <returns>安全对象的 XML 编码，包括任何状态信息。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermission.Union(System.Security.IPermission)">
      <summary>当在派生类中重写时，则创建属于当前权限与指定权限的并集的权限。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>表示同时兼具当前权限和指定权限的新权限。</returns>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>使用指定的 <see cref="T:System.Security.Permissions.TypeDescriptorPermissionAttribute" /> 初始化 <see cref="T:System.Security.Permissions.SecurityAction" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 值之一。</param>
    </member>
    <member name="M:System.Security.Permissions.TypeDescriptorPermissionAttribute.CreatePermission">
      <summary>当在派生类中重写时，创建一个权限对象，随后可将其序列化为二进制形式并连同 <see cref="T:System.Security.Permissions.SecurityAction" /> 长久存储在程序集的元数据中。</summary>
      <returns>可序列化的权限对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Capture.ToString">
      <summary>通过调用从输入字符串中检索捕获的子字符串 <see cref="P:System.Text.RegularExpressions.Capture.Value" /> 属性。</summary>
      <returns>通过匹配捕获子字符串。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary>
      <param name="array">要将集合复制到其中的数组。</param>
      <param name="arrayIndex">目标数组中的位置将开始复制的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array " />是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> 超出界限 <paramref name="array" />。- 或 -<paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" /> 超出界限 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.CaptureCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举器。</summary>
      <returns>一个对象，包含所有 <see cref="T:System.Text.RegularExpressions.Capture" /> 中的对象 <see cref="T:System.Text.RegularExpressions.CaptureCollection" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Group.Synchronized(System.Text.RegularExpressions.Group)">
      <summary>返回 Group 等效于提供的一个对象，该对象，则可以安全多个线程间共享。</summary>
      <param name="inner">输入 <see cref="T:System.Text.RegularExpressions.Group" /> 对象。</param>
      <returns>正则表达式 Group 对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.CopyTo(System.Array,System.Int32)">
      <summary>将集合的所有元素复制到给定数组中（从给定索引处开始）。</summary>
      <param name="array">要将集合复制到其中的数组。</param>
      <param name="arrayIndex">目标数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> 为 null。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 超出界限 <paramref name="array" />。- 或 -<paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.GroupCollection.Count" /> 超出界限 <paramref name="array" />。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.GroupCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举器。</summary>
      <returns>一个枚举器，其中包含 <see cref="T:System.Text.RegularExpressions.Group" /> 中的所有 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 对象。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.NextMatch">
      <summary>从上一个匹配结束的位置（即在上一个匹配字符之后的字符）开始返回一个包含下一个匹配结果的新 <see cref="T:System.Text.RegularExpressions.Match" /> 对象。</summary>
      <returns>下一个正则表达式匹配。</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Result(System.String)">
      <summary>返回对指定替换模式的扩展。</summary>
      <param name="replacement">要使用的替换模式。</param>
      <returns>
        <paramref name="replacement" /> 参数的扩展版本。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.NotSupportedException">此模式不允许使用扩展。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Match.Synchronized(System.Text.RegularExpressions.Match)">
      <summary>返回一个与提供的实例等效的 <see cref="T:System.Text.RegularExpressions.Match" /> 实例，该实例适合在多个线程间共享。</summary>
      <param name="inner">与预期匹配等效的正则表达式匹配。</param>
      <returns>适合在多个线程间共享的正则表达式匹配。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inner" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.CopyTo(System.Array,System.Int32)">
      <summary>从给定索引处开始将集合的所有元素复制到给定数组。</summary>
      <param name="array">要将集合复制到其中的数组。</param>
      <param name="arrayIndex">数组中开始复制的位置。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> 是多维数组。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="arrayIndex" /> 超出界限 <paramref name="array" />。- 或 -<paramref name="arrayIndex" /> 加上 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" /> 超出界限 <paramref name="array" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.MatchCollection.GetEnumerator">
      <summary>提供一个循环访问集合的枚举器。</summary>
      <returns>一个对象，包含所有 <see cref="T:System.Text.RegularExpressions.Match" /> 中的对象 <see cref="T:System.Text.RegularExpressions.MatchCollection" />。</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用序列化数据初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 类的新实例。</summary>
      <param name="info">对象，其中包含序列化的模式和 <see cref="T:System.Text.RegularExpressions.RegexOptions" />  信息。</param>
      <param name="context">此序列化的目标。 （未使用此参数；指定 null。）</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">该模式， <paramref name="info" /> 包含是 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="info" /> 包含一个无效的 <see cref="T:System.Text.RegularExpressions.RegexOptions" />  标志。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 为指定的正则表达式类。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 为指定的正则表达式，用修改模式的选项。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">修改正则表达式的枚举值的按位组合。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 包含无效的标志。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.Regex" /> 为指定的正则表达式，修改模式和一个值，指定多长时间的模式匹配方法的选项的类应进行匹配尝试超时之前。</summary>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">修改正则表达式的枚举值的按位组合。</param>
      <param name="matchTimeout">超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以指示该方法应不会超时。</param>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。- 或 -<paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)">
      <summary>将一个或多个指定编译 <see cref="T:System.Text.RegularExpressions.Regex" /> 命名的程序集的对象。</summary>
      <param name="regexinfos">一个数组，描述要编译的正则表达式。</param>
      <param name="assemblyname">程序集的文件名。</param>
      <exception cref="T:System.ArgumentException">值 <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性为空或 null 字符串。- 或 -中的一个或多个对象的正则表达式模式 <paramref name="regexinfos" /> 包含无效的语法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[])">
      <summary>将一个或多个指定编译 <see cref="T:System.Text.RegularExpressions.Regex" /> 与具有指定特性名称的程序集的对象。</summary>
      <param name="regexinfos">一个数组，描述要编译的正则表达式。</param>
      <param name="assemblyname">程序集的文件名。</param>
      <param name="attributes">定义要应用于程序集的特性数组。</param>
      <exception cref="T:System.ArgumentException">值 <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性为空或 null 字符串。- 或 -中的一个或多个对象的正则表达式模式 <paramref name="regexinfos" /> 包含无效的语法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName,System.Reflection.Emit.CustomAttributeBuilder[],System.String)">
      <summary>将一个或多个指定编译 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象和指定的资源文件与具有指定特性名称的程序集。</summary>
      <param name="regexinfos">一个数组，描述要编译的正则表达式。</param>
      <param name="assemblyname">程序集的文件名。</param>
      <param name="attributes">定义要应用于程序集的特性数组。</param>
      <param name="resourceFile">要包含在程序集中的 Win32 资源文件的名称。</param>
      <exception cref="T:System.ArgumentException">值 <paramref name="assemblyname" /> 参数的 <see cref="P:System.Reflection.AssemblyName.Name" /> 属性为空或 null 字符串。- 或 -中的一个或多个对象的正则表达式模式 <paramref name="regexinfos" /> 包含无效的语法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyname" /> 或 <paramref name="regexinfos" /> 为 null。</exception>
      <exception cref="T:System.Runtime.InteropServices.COMException">
        <paramref name="resourceFile" /> 参数指定了无效的 Win32 资源文件。</exception>
      <exception cref="T:System.IO.FileNotFoundException">通过指定的文件 <paramref name="resourceFile" /> 找不到参数。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Escape(System.String)">
      <summary>通过替换为转义码来转义最小的字符集（\、*、+、?、|、{、[、(、)、^、$、.、# 和空白）。 这将指示正则表达式引擎按原义解释这些字符而不是解释为元字符。</summary>
      <param name="str">包含要转换的文本的输入字符串。</param>
      <returns>由转换为转义形式的元字符组成的字符串。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNames">
      <summary>返回正则表达式的捕获组名数组。</summary>
      <returns>组名的字符串数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GetGroupNumbers">
      <summary>返回与数组中的组名相对应的捕获组号的数组。</summary>
      <returns>组号的整数数组。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)">
      <summary>获取与指定组号相对应的组名。</summary>
      <param name="i">要转换为相应组名的组号。</param>
      <returns>包含与指定组号关联的组名的字符串。 如果没有对应的组名称 <paramref name="i" />, ，该方法返回 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)">
      <summary>返回与指定组名相对应的组号。</summary>
      <param name="name">要将转换为相应的组号的组名称。</param>
      <returns>如果对应于指定的组名，则为-1 的组号 <paramref name="name" /> 不是有效的组名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.InitializeReferences">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <exception cref="T:System.NotSupportedException">已初始化的引用。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String)">
      <summary>该值指示是否在指定的正则表达式 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数指定的输入字符串中找到的匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <returns>true 如果正则表达式找到匹配项，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)">
      <summary>该值指示是否在指定的正则表达式 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数从字符串中的指定起始位置开始对指定输入字符串中找到的匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">若要开始搜索字符位置。</param>
      <returns>true 如果正则表达式找到匹配项，则否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)">
      <summary>指示所指定的正则表达式在指定的输入字符串中是否找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <returns>true 如果正则表达式找到匹配项，则否则为 false。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>指示所指定的正则表达式是否使用指定的匹配选项在指定的输入字符串中找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <returns>true 如果正则表达式找到匹配项，则否则为 false。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效 <see cref="T:System.Text.RegularExpressions.RegexOptions" />  值。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>指示所指定的正则表达式是否使用指定的匹配选项和超时间隔在指定的输入字符串中找到了匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以指示该方法应不会超时。</param>
      <returns>true 如果正则表达式找到匹配项，则否则为 false。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是有效 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值。- 或 -<paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String)">
      <summary>搜索指定的输入的字符串中指定的正则表达式的第一个匹配项 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)">
      <summary>从输入字符串中的指定起始位置开始，在该字符串中搜索正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">开始搜索的字符位置（从零开始）。</param>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)">
      <summary>从指定的起始位置开始，在输入字符串中搜索正则表达式的第一个匹配项，并且仅搜索指定数量的字符。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="beginning">用于定义要在其中搜索最左边的位置的输入字符串中的从零开始的字符位置。</param>
      <param name="length">子字符串中包含在搜索中的字符数。</param>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="beginning" /> 小于零或大于该长度的 <paramref name="input" />。- 或 -<paramref name="length" /> 小于零或大于该长度的 <paramref name="input" />。- 或 -<paramref name="beginning" />+<paramref name="length" />–1 标识的位置，则范围之外的 <paramref name="input" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)">
      <summary>在指定的输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的匹配选项在输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的匹配选项和超时间隔在输入字符串中搜索指定的正则表达式的第一个匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 以指示该方法应不会超时。</param>
      <returns>一个包含有关匹配的信息的对象。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。- 或 -<paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String)">
      <summary>在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <returns>一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)">
      <summary>从字符串中的指定起始位置开始，在指定的输入字符串中搜索正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="startat">在输入字符串中开始搜索的字符位置。</param>
      <returns>一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)">
      <summary>在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <returns>一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>使用指定的匹配选项在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的按位组合，这些枚举值指定用于匹配的选项。</param>
      <returns>一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>使用指定的匹配选项和超时间隔在指定的输入字符串中搜索指定的正则表达式的所有匹配项。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的按位组合，这些枚举值指定用于匹配的选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <returns>一套 <see cref="T:System.Text.RegularExpressions.Match" /> 搜索操作找到的对象。 如果未找到匹配项，则此方法将返回一个空集合对象。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。- 或 -<paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与某个正则表达式模式匹配的所有的字符串。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)">
      <summary>在指定输入字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <param name="count">可进行替换的最大次数。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)">
      <summary>在指定输入子字符串内，使用指定替换字符串替换与某个正则表达式模式匹配的字符串（其数目为指定的最大数目）。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="replacement">替换字符串。</param>
      <param name="count">可进行替换的最大次数。</param>
      <param name="startat">输入字符串中开始执行搜索的字符位置。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。 指定的选项将修改匹配操作。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的输入字符串内，使用指定的替换字符串替换与指定正则表达式匹配的所有字符串。 如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="replacement">替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="replacement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。- 或 -<paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)">
      <summary>在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有字符串。 指定的选项将修改匹配操作。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在指定的输入字符串中，使用由 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托返回的字符串替换与指定的正则表达式匹配的所有子字符串。 如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被替换字符串代替。 如果 <paramref name="pattern" /> 与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />、<paramref name="pattern" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。- 或 -<paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)">
      <summary>在指定的输入字符串替换与指定的正则表达式返回的字符串匹配的所有字符串 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)">
      <summary>在指定的输入字符串替换与正则表达式模式匹配与返回的字符串的字符串指定的最大 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="count">进行替换的最大次数。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)">
      <summary>在指定的输入子字符串替换与正则表达式模式匹配与返回的字符串的字符串指定的最大 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托。</summary>
      <param name="input">要搜索匹配项的字符串。</param>
      <param name="evaluator">一个自定义方法，该方法检查每个匹配项，然后返回原始的匹配字符串或替换字符串。</param>
      <param name="count">进行替换的最大次数。</param>
      <param name="startat">输入字符串中开始执行搜索的字符位置。</param>
      <returns>一个与输入字符串基本相同的新字符串，唯一的差别在于，其中的每个匹配字符串已被一个替换字符串代替。 如果正则表达式模式与当前实例不匹配，则此方法返回未更改的当前实例。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="evaluator" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String)">
      <summary>将输入的字符串拆分为一个定义在由正则表达式模式中指定的位置的子字符串数组 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。</summary>
      <param name="input">要拆分的字符串。</param>
      <returns>字符串数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)">
      <summary>输入字符串拆分为指定的最大次数的子字符串，定义正则表达式中指定的位置的数组 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="count">可拆分的最大次数。</param>
      <returns>字符串数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)">
      <summary>输入字符串拆分为指定的最大次数的子字符串，定义正则表达式中指定的位置的数组 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。 从输入字符串的指定字符位置开始搜索正则表达式模式。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="count">可拆分的最大次数。</param>
      <param name="startat">输入字符串中将开始搜索的字符位置。</param>
      <returns>字符串数组。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startat" /> 小于零或大于 <paramref name="input" /> 的长度。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)">
      <summary>在由正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <returns>字符串数组。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。 指定的选项将修改匹配操作。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <returns>字符串数组。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)">
      <summary>在由指定正则表达式模式定义的位置将输入字符串拆分为一个子字符串数组。 如果未找到匹配项，则其他参数指定修改匹配操作的选项和超时间隔。</summary>
      <param name="input">要拆分的字符串。</param>
      <param name="pattern">要匹配的正则表达式模式。</param>
      <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项。</param>
      <param name="matchTimeout">超时间隔；若要指示该方法不应超时，则为 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />。</param>
      <returns>字符串数组。</returns>
      <exception cref="T:System.ArgumentException">出现正则表达式分析错误。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> 或 <paramref name="pattern" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="options" /> 不是 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 值的有效按位组合。- 或 -<paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。 有关超时的详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>使用所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象来反序列化当前 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象。</summary>
      <param name="si">要用序列化信息填充的对象。</param>
      <param name="context">存储和检索序列化数据的位置。 此参数保留以供将来使用。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ToString">
      <summary>返回传入的正则表达式模式 Regex 构造函数。</summary>
      <returns>
        <paramref name="pattern" /> 参数传递到 Regex 构造函数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.Unescape(System.String)">
      <summary>转换输入字符串中的任何转义字符。</summary>
      <param name="str">包含要转换的文本的输入字符串。</param>
      <returns>包含任何转换为非转义形式的转义字符的字符串。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="str" /> 包括一个无法识别的转义序列。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionC">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <returns>true 如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 选项; 否则为 false。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.UseOptionR">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <returns>true 如果 <see cref="P:System.Text.RegularExpressions.Regex.Options" /> 属性包含 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项; 否则为 false。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)">
      <summary>检查超时间隔是否在可接受的范围内。</summary>
      <param name="matchTimeout">要检查的超时间隔。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类，其中包含有关包含在程序集中的正则表达式的信息。</summary>
      <param name="pattern">要编译的正则表达式。</param>
      <param name="options">要编译的正则表达式时使用的正则表达式选项。</param>
      <param name="name">表示已编译的正则表达式的类型的名称。</param>
      <param name="fullnamespace">新类型所属的命名空间。</param>
      <param name="ispublic">true 若要使已编译的正则表达式公开可见;否则为 false。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。- 或 -<paramref name="name" /> 为 null。- 或 -<paramref name="fullnamespace" /> 为 null。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" /> 类，其中包含有关与要包含在程序集中指定的超时值的正则表达式的信息。</summary>
      <param name="pattern">要编译的正则表达式。</param>
      <param name="options">要编译的正则表达式时使用的正则表达式选项。</param>
      <param name="name">表示已编译的正则表达式的类型的名称。</param>
      <param name="fullnamespace">新类型所属的命名空间。</param>
      <param name="ispublic">true 若要使已编译的正则表达式公开可见;否则为 false。</param>
      <param name="matchTimeout">默认的超时间隔为正则表达式的。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 为 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pattern" /> 为 null。- 或 -<paramref name="name" /> 为 null。- 或 -<paramref name="fullnamespace" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="matchTimeout" /> 为负、零或大于 24 天左右。</exception>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 使用系统提供的消息的类。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。</summary>
      <param name="info">包含序列化数据的对象。</param>
      <param name="context">包含序列化数据的流。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类，具有指定的消息字符串。</summary>
      <param name="message">描述异常的字符串。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类的新实例。</summary>
      <param name="message">描述异常的字符串。</param>
      <param name="inner">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.#ctor(System.String,System.String,System.TimeSpan)">
      <summary>新实例初始化 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 类包含有关正则表达式模式、 输入的文本和超时间隔的信息。</summary>
      <param name="regexInput">超时发生时由正则表达式引擎处理该输入的文本。</param>
      <param name="regexPattern">超时发生时，正则表达式引擎使用的模式。</param>
      <param name="matchTimeout">超时间隔。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexMatchTimeoutException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象序列化所需的数据 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 对象。</summary>
      <param name="si">要填充数据的对象。</param>
      <param name="context">此序列化的目标。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Capture(System.Int32,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="capnum">一个捕获的数字。</param>
      <param name="start">捕获起始位置。</param>
      <param name="end">捕获结束位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInClass(System.Char,System.String)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。 确定字符是否在字符类中。</summary>
      <param name="ch">要测试的字符。</param>
      <param name="charClass">字符类的内部名称。</param>
      <returns>true 如果 <paramref name="ch" /> 参数是由指定的字符类中 <paramref name="charClass" /> 参数。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CharInSet(System.Char,System.String,System.String)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="ch">一个字符。</param>
      <param name="set">字符集。</param>
      <param name="category">字符类别中。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.CheckTimeout">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawl(System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="i">若要保存一个数字。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Crawlpos">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleCrawl">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleStack">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.DoubleTrack">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.EnsureStorage">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.FindFirstChar">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Go">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.InitTrackCount">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsBoundary(System.Int32,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="index">可能的边界位置中。</param>
      <param name="startpos">起始位置。</param>
      <param name="endpos">结束位置。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsECMABoundary(System.Int32,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="index">可能的 ECMA 边界位置。</param>
      <param name="startpos">起始位置。</param>
      <param name="endpos">结束位置。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.IsMatched(System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="cap">捕获数。</param>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchIndex(System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="cap">捕获数。</param>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.MatchLength(System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="cap">捕获数。</param>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Popcrawl">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="regex">正则表达式引擎的实例。</param>
      <param name="text">要扫描的模式匹配的文本。</param>
      <param name="textbeg">中的从零开始的起始位置 <paramref name="text" /> 在该正则表达式引擎将扫描的匹配项。</param>
      <param name="textend">中的从零开始的结束位置 <paramref name="text" /> 在该正则表达式引擎将扫描的匹配项。</param>
      <param name="textstart">要扫描的匹配项的从零开始起始位置。</param>
      <param name="prevlen">上一个匹配项中的字符数。</param>
      <param name="quick">true 若要搜索其匹配项，以快速模式;否则为 false。</param>
      <returns>匹配项。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Scan(System.Text.RegularExpressions.Regex,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.TimeSpan)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="regex">正则表达式引擎的实例。</param>
      <param name="text">要扫描的模式匹配的文本。</param>
      <param name="textbeg">中的从零开始的起始位置 <paramref name="text" /> 在该正则表达式引擎将扫描的匹配项。</param>
      <param name="textend">中的从零开始的结束位置 <paramref name="text" /> 在该正则表达式引擎将扫描的匹配项。</param>
      <param name="textstart">要扫描的匹配项的从零开始起始位置。</param>
      <param name="prevlen">上一个匹配项中的字符数。</param>
      <param name="quick">true 若要搜索其匹配项，以快速模式;否则为 false。</param>
      <param name="timeout">超时时间间隔。</param>
      <returns>匹配项。</returns>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.TransferCapture(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
      <param name="capnum">一个捕获的数字。</param>
      <param name="uncapnum">一个已保存的捕获的数字。</param>
      <param name="start">起始位置。</param>
      <param name="end">结束位置。</param>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunner.Uncapture">
      <summary>使用 <see cref="T:System.Text.RegularExpressions.Regex" /> 对象生成的 <see cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" /> 方法。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor">
      <summary>初始化 <see cref="T:System.Text.RegularExpressions.RegexRunnerFactory" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance">
      <summary>当在派生类中重写创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象以特定的编译正则表达式。</summary>
      <returns>一个 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 对象用于执行特定于编译的正则表达式。</returns>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</summary>
      <param name="participantCount">参与线程的数量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 为小于 0 或大于 32767。</exception>
    </member>
    <member name="M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})">
      <summary>初始化 <see cref="T:System.Threading.Barrier" /> 类的新实例。</summary>
      <param name="participantCount">参与线程的数量。</param>
      <param name="postPhaseAction">
        <see cref="T:System.Action`1" /> 每个阶段完成之后执行。 可传递 null (在 Visual Basic 中为 Nothing)，以指示不执行任何操作。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 为小于 0 或大于 32767。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipant">
      <summary>通知 <see cref="T:System.Threading.Barrier" /> 就会有其他参与者。</summary>
      <returns>新的参与者将第一次参与的屏障阶段的数量。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">添加参与者将导致屏障的参与者计数超过 32767。- 或 -从阶段后操作中调用该方法。</exception>
    </member>
    <member name="M:System.Threading.Barrier.AddParticipants(System.Int32)">
      <summary>通知 <see cref="T:System.Threading.Barrier" /> 就会有其他参与者。</summary>
      <param name="participantCount">若要添加到屏障的其他参与者的数。</param>
      <returns>新的参与者将第一次参与的屏障阶段的数量。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小于 0。- 或 -添加 <paramref name="participantCount" /> 参与者将导致屏障的参与者计数超过 32767。</exception>
      <exception cref="T:System.InvalidOperationException">从阶段后操作中调用该方法。</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose">
      <summary>释放 <see cref="T:System.Threading.Barrier" /> 类的当前实例所使用的所有资源。</summary>
      <exception cref="T:System.InvalidOperationException">从阶段后操作中调用该方法。</exception>
    </member>
    <member name="M:System.Threading.Barrier.Dispose(System.Boolean)">
      <summary>释放由 <see cref="T:System.Threading.Barrier" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing">为 true 则释放托管资源和非托管资源；为 false 则仅释放非托管资源。</param>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipant">
      <summary>通知 <see cref="T:System.Threading.Barrier" /> 将会减少一个参与者。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">屏障已经有 0 个参与者。- 或 -从阶段后操作中调用该方法。</exception>
    </member>
    <member name="M:System.Threading.Barrier.RemoveParticipants(System.Int32)">
      <summary>通知 <see cref="T:System.Threading.Barrier" /> 将会更少的参与者。</summary>
      <param name="participantCount">若要删除屏障的其他参与者的数。</param>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="participantCount" /> 小于 0。</exception>
      <exception cref="T:System.InvalidOperationException">屏障已经有 0 个参与者。- 或 -从阶段后操作中调用该方法。 - 或 -当前的参与者计数小于指定 participantCount</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">参与者总数小于指定<paramref name=" participantCount" /></exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait">
      <summary>用信号通知的参与者已达到屏障和所有其他参与者到达屏障也会等待。</summary>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">从内部阶段后操作调用该方法、 当前屏障具有 0 个参与者，或屏障后将被终止的更多被注册为参与者线程。</exception>
      <exception cref="T:System.Threading.BarrierPostPhaseException">如果引发了异常从后阶段操作的屏障毕竟参与线程调用了 SignalAndWait，该异常将包装在 BarrierPostPhaseException 且在所有的参与线程上引发。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32)">
      <summary>用信号通知参与者已达到屏障，并等待所有其他参与者到达屏障，同时使用 32 位有符号的整数测量超时。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns>如果所有参与者都到达屏障后将被内指定的时间;否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">从内部阶段后操作调用该方法、 当前屏障具有 0 个参与者，或屏障后将被终止的更多被注册为参与者线程。</exception>
      <exception cref="T:System.Threading.BarrierPostPhaseException">如果引发了异常从后阶段操作的屏障毕竟参与线程调用了 SignalAndWait，该异常将包装在 BarrierPostPhaseException 且在所有的参与线程上引发。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)">
      <summary>用信号通知参与者已达到屏障，并等待所有其他参与者到达屏障，同时使用 32 位带符号的整数测量超时，同时观察的取消标记。</summary>
      <param name="millisecondsTimeout">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>如果所有参与者都到达屏障后将被内指定的时间;否则为 false</returns>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="millisecondsTimeout" /> 是一个非 -1 的负数，而 -1 表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">从内部阶段后操作调用该方法、 当前屏障具有 0 个参与者，或屏障后将被终止的更多被注册为参与者线程。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)">
      <summary>用信号通知参与者，已达到屏障，并等待所有其他参与者到达屏障，同时观察的取消标记。</summary>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.InvalidOperationException">从内部阶段后操作调用该方法、 当前屏障具有 0 个参与者，或屏障后将被终止的更多被注册为参与者线程。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)">
      <summary>表示一个参与者已达到屏障，并等待所有其他参与者到达屏障，同时使用 <see cref="T:System.TimeSpan" /> 对象来测量时间间隔。</summary>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <returns>如果所有其他参与者到达屏障后将被; 则为 true否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />为负数之外为-1 毫秒，表示无限期超时，或大于 32767。</exception>
      <exception cref="T:System.InvalidOperationException">从内部阶段后操作调用该方法、 当前屏障具有 0 个参与者，或屏障后将被终止的更多被注册为参与者线程。</exception>
    </member>
    <member name="M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>表示一个参与者已达到屏障，并等待所有其他参与者到达屏障，同时使用 <see cref="T:System.TimeSpan" /> 测量时间间隔，同时观察的取消标记的对象。</summary>
      <param name="timeout">表示等待毫秒数的 <see cref="T:System.TimeSpan" />，或表示 -1 毫秒（无限期等待）的 <see cref="T:System.TimeSpan" />。</param>
      <param name="cancellationToken">要观察的 <see cref="T:System.Threading.CancellationToken" />。</param>
      <returns>如果所有其他参与者到达屏障后将被; 则为 true否则为 false。</returns>
      <exception cref="T:System.OperationCanceledException">
        <paramref name="cancellationToken" /> 已取消。</exception>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" />为负数之外为-1 毫秒，表示无限期超时。</exception>
      <exception cref="T:System.InvalidOperationException">从内部阶段后操作调用该方法、 当前屏障具有 0 个参与者，或屏障后将被终止的更多被注册为参与者线程。</exception>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor">
      <summary>使用由系统提供的用来描述错误的消息初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Exception)">
      <summary>新实例初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类，具有指定的内部异常。</summary>
      <param name="innerException">导致当前异常的异常。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>用序列化数据初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
      <param name="info">承载序列化对象数据的对象。</param>
      <param name="context">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String)">
      <summary>使用指定的描述错误的消息初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
    </member>
    <member name="M:System.Threading.BarrierPostPhaseException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.Threading.BarrierPostPhaseException" /> 类的新实例。</summary>
      <param name="message">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="innerException">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 为小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，可以选择指定系统信号量对象的名称。</summary>
      <param name="initialCount">可以同时授予的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时授予的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。- 或 -<paramref name="name" /> 超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 为小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">名称为信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">不能创建名称为信号量，可能是因为不同类型的等待句柄具有相同的名称。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，还可以选择指定系统信号量对象的名称，以及指定一个变量来接收指示是否创建了新系统信号量的值。</summary>
      <param name="initialCount">可以同时满足的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时满足的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <param name="createdNew">在此方法返回时，如果创建了本地信号量（即，如果 <paramref name="name" /> 为 null 或空字符串）或指定的命名系统信号量，则包含 true；如果指定的命名系统信号量已存在，则为 false。 此参数未经初始化即被传递。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。- 或 -<paramref name="name" /> 超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 为小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">名称为信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">不能创建名称为信号量，可能是因为不同类型的等待句柄具有相同的名称。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@,System.Security.AccessControl.SemaphoreSecurity)">
      <summary>初始化 <see cref="T:System.Threading.Semaphore" /> 类的新实例，并指定初始入口数和最大并发入口数，可以选择指定系统信号量对象的名称，指定一个变量来接收指示是否创建了新系统信号量的值，以及指定系统信号量的安全访问控制。</summary>
      <param name="initialCount">可以同时满足的信号量的初始请求数。</param>
      <param name="maximumCount">可以同时满足的信号量的最大请求数。</param>
      <param name="name">命名系统信号量对象的名称。</param>
      <param name="createdNew">在此方法返回时，如果创建了本地信号量（即，如果 <paramref name="name" /> 为 null 或空字符串）或指定的命名系统信号量，则包含 true；如果指定的命名系统信号量已存在，则为 false。 此参数未经初始化即被传递。</param>
      <param name="semaphoreSecurity">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="initialCount" /> 大于 <paramref name="maximumCount" />。- 或 -<paramref name="name" /> 超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumCount" /> 为小于 1。- 或 -<paramref name="initialCount" /> 小于 0。</exception>
      <exception cref="T:System.UnauthorizedAccessException">名称为信号量存在并具有访问控制安全性，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.FullControl" />。</exception>
      <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">不能创建名称为信号量，可能是因为不同类型的等待句柄具有相同的名称。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.GetAccessControl">
      <summary>获取已命名的系统信号量的访问控制安全性。</summary>
      <returns>一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示已命名系统信号量的访问控制安全性。</returns>
      <exception cref="T:System.UnauthorizedAccessException">当前 <see cref="T:System.Threading.Semaphore" /> 对象都表示一个已命名的系统信号量，并且该用户没有 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限。- 或 -当前 <see cref="T:System.Threading.Semaphore" /> 对象表示已命名的系统信号量，并不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions" /> 权限。</exception>
      <exception cref="T:System.NotSupportedException">不支持 Windows 98 或 Windows Millennium Edition。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String)">
      <summary>打开指定名称为信号量（如果已经存在）。</summary>
      <param name="name">要打开的系统信号量的名称。</param>
      <returns>一个对象，表示已命名的系统信号量。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。- 或 -<paramref name="name" /> 超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">不存在名称为信号量。</exception>
      <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存在名称为信号量，但用户没有使用它所需的安全访问权限。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.OpenExisting(System.String,System.Security.AccessControl.SemaphoreRights)">
      <summary>用安全访问权限打开指定名称为信号量（如果已经存在）。</summary>
      <param name="name">要打开的系统信号量的名称。</param>
      <param name="rights">表示所需的安全访问权限的枚举值的按位组合。</param>
      <returns>一个对象，表示已命名的系统信号量。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。- 或 -<paramref name="name" /> 超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.Threading.WaitHandleCannotBeOpenedException">不存在名称为信号量。</exception>
      <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存在名称为信号量，但用户不具有所需的安全访问权限。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release">
      <summary>退出信号量并返回前一个计数。</summary>
      <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
      <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
      <exception cref="T:System.IO.IOException">名称为信号量出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当前的信号量表示已命名的系统信号量，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。- 或 -当前的信号量表示已命名的系统信号量，但它不以打开 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" />。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.Release(System.Int32)">
      <summary>以指定的次数退出信号量并返回前一个计数。</summary>
      <param name="releaseCount">退出信号量的次数。</param>
      <returns>调用 <see cref="Overload:System.Threading.Semaphore.Release" /> 方法前信号量的计数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="releaseCount" /> 为小于 1。</exception>
      <exception cref="T:System.Threading.SemaphoreFullException">信号量计数已是最大值。</exception>
      <exception cref="T:System.IO.IOException">名称为信号量出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">当前的信号量表示已命名的系统信号量，但用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限。- 或 -当前的信号量表示已命名的系统信号量，但它不以打开 <see cref="F:System.Security.AccessControl.SemaphoreRights.Modify" /> 权限。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.SetAccessControl(System.Security.AccessControl.SemaphoreSecurity)">
      <summary>设置已命名的系统信号量的访问控制安全性。</summary>
      <param name="semaphoreSecurity">一个 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 对象，表示应用于已命名的系统信号量的访问控制安全性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="semaphoreSecurity" /> 为 null。</exception>
      <exception cref="T:System.UnauthorizedAccessException">用户不具有 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限。- 或 -信号量不是以 <see cref="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions" /> 权限。</exception>
      <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.Threading.Semaphore" /> 对象不表示已命名的系统信号量。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Security.AccessControl.SemaphoreRights,System.Threading.Semaphore@)">
      <summary>用安全访问权限打开指定名称为信号量（如果已经存在），并返回指示操作是否成功的值。</summary>
      <param name="name">要打开的系统信号量的名称。</param>
      <param name="rights">表示所需的安全访问权限的枚举值的按位组合。</param>
      <param name="result">当此方法返回时，如果调用成功，则包含表示命名信号的 <see cref="T:System.Threading.Semaphore" /> 对象；否则为 null。 该参数未经初始化即被处理。</param>
      <returns>如果命名信号量成功打开，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。- 或 -<paramref name="name" /> 超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存在名称为信号量，但用户没有使用它所需的安全访问权限。</exception>
    </member>
    <member name="M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)">
      <summary>打开指定名称为信号量（如果已经存在），并返回指示操作是否成功的值。</summary>
      <param name="name">要打开的系统信号量的名称。</param>
      <param name="result">当此方法返回时，如果调用成功，则包含表示命名信号的 <see cref="T:System.Threading.Semaphore" /> 对象；否则为 null。 该参数未经初始化即被处理。</param>
      <returns>如果命名信号量成功打开，则为 true；否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 是一个空字符串。- 或 -<paramref name="name" /> 超过 260 个字符。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
      <exception cref="T:System.IO.IOException">出现 Win32 错误。</exception>
      <exception cref="T:System.UnauthorizedAccessException">存在名称为信号量，但用户没有使用它所需的安全访问权限。</exception>
    </member>
    <member name="M:System.Threading.ThreadExceptionEventArgs.#ctor(System.Exception)">
      <summary>初始化 <see cref="T:System.Threading.ThreadExceptionEventArgs" /> 类的新实例。</summary>
      <param name="t">已发生的 <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将所有属性设置为初始值。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary>初始化 <see cref="T:System.Timers.Timer" /> 类的新实例，并将 <see cref="P:System.Timers.Timer.Interval" /> 属性设置为指定的毫秒数。</summary>
      <param name="interval">事件之间经过的时间（以毫秒为单位）。 该值必须大于零且小于或等于 <see cref="F:System.Int32.MaxValue" />。</param>
      <exception cref="T:System.ArgumentException">值 <paramref name="interval" /> 参数是否小于或等于零，或者大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary>开始用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary>释放由 <see cref="T:System.Timers.Timer" /> 占用的资源。</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary>释放由当前 <see cref="T:System.Timers.Timer" /> 使用的所有资源。</summary>
      <param name="disposing">若要释放托管资源和非托管资源，则为 true；若仅释放非托管资源，则为 false。</param>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary>结束用于窗体或由其他组件使用的 <see cref="T:System.Timers.Timer" /> 的运行时初始化。</summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 true 开始引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">创建 <see cref="T:System.Timers.Timer" />，使其时间间隔等于或大于 <see cref="F:System.Int32.MaxValue" /> + 1，或将其时间间隔设置为小于零。</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary>通过将 <see cref="P:System.Timers.Timer.Enabled" /> 设置为 false 停止引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary>初始化 <see cref="T:System.Timers.TimersDescriptionAttribute" /> 类的新实例。</summary>
      <param name="description">要使用的说明。</param>
    </member>
    <member name="M:System.Uri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>从 <see cref="T:System.Uri" /> 和 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的指定实例初始化 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的新实例。</summary>
      <param name="serializationInfo">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 类的实例，包含序列化新的 <see cref="T:System.Uri" /> 实例所需的信息。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 类的实例，包含与新的 <see cref="T:System.Uri" /> 实例关联的序列化流的源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationInfo" /> 参数包含 null URI。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="serializationInfo" /> 参数包含一个为空的 URI。- 或 - 指定的方案形式不正确。 请参阅<see cref="M:System.Uri.CheckSchemeName(System.String)" />。- 或 - 该 URI 包含过多斜杠。- 或 - URI 中指定的密码无效。- 或 - URI 中指定的主机名无效。- 或 - URI 中指定的文件名无效。- 或 - URI 中指定的用户名无效。- 或 - URI 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。- 或 - URI 中指定的端口号无效或无法分析。- 或 - URI 的长度超过 65519 个字符。- 或 - URI 中指定的方案的长度超过 1023 个字符。- 或 - URI 中存在无效的字符序列。- 或 - URI 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="uriString">一个 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。<paramref name="uriString" /> 为空。- 或 - <paramref name="uriString" /> 中指定的方案格式不正确。 请参阅<see cref="M:System.Uri.CheckSchemeName(System.String)" />。- 或 - <paramref name="uriString" /> 包含过多斜杠。- 或 - <paramref name="uriString" /> 中指定的密码无效。- 或 - <paramref name="uriString" /> 中指定的主机名无效。- 或 - <paramref name="uriString" /> 中指定的文件名无效。- 或 - <paramref name="uriString" /> 中指定的用户名无效。- 或 - <paramref name="uriString" /> 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。- 或 - <paramref name="uriString" /> 中指定的端口号无效或无法分析。- 或 - <paramref name="uriString" /> 的长度超过 65519 个字符。- 或 - <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。- 或 - <paramref name="uriString" /> 中存在无效的字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.Boolean)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例，并对字符转义进行显式控制。</summary>
      <param name="uriString">URI。</param>
      <param name="dontEscape">如果 true 已完全转义，则为 <paramref name="uriString" />；否则为 false。 请参阅“备注”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">
        <paramref name="uriString" /> 为空或只包含空格。- 或 - 中指定的方案 <paramref name="uriString" /> 无效。- 或 - <paramref name="uriString" /> 包含过多斜杠。- 或 - <paramref name="uriString" /> 中指定的密码无效。- 或 - <paramref name="uriString" /> 中指定的主机名无效。- 或 - <paramref name="uriString" /> 中指定的文件名无效。- 或 - <paramref name="uriString" /> 中指定的用户名无效。- 或 - <paramref name="uriString" /> 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。- 或 - <paramref name="uriString" /> 中指定的端口号无效或无法分析。- 或 - <paramref name="uriString" /> 的长度超过 65519 个字符。- 或 - <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。- 或 - <paramref name="uriString" /> 中存在无效的字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.String,System.UriKind)">
      <summary>用指定的 URI 初始化 <see cref="T:System.Uri" /> 类的新实例。 此构造函数允许指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</summary>
      <param name="uriString">标识将由 <see cref="T:System.Uri" /> 实例表示的资源的字符串。</param>
      <param name="uriKind">指定 URI 字符串是相对 URI、绝对 URI 还是不确定。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="uriKind" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriString" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。<paramref name="uriString" /> 包含相对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Absolute" />。或<paramref name="uriString" /> 包含绝对 URI，而 <paramref name="uriKind" /> 为 <see cref="F:System.UriKind.Relative" />。或<paramref name="uriString" /> 为空。- 或 - <paramref name="uriString" /> 中指定的方案格式不正确。 请参阅<see cref="M:System.Uri.CheckSchemeName(System.String)" />。- 或 - <paramref name="uriString" /> 包含过多斜杠。- 或 - <paramref name="uriString" /> 中指定的密码无效。- 或 - <paramref name="uriString" /> 中指定的主机名无效。- 或 - <paramref name="uriString" /> 中指定的文件名无效。- 或 - <paramref name="uriString" /> 中指定的用户名无效。- 或 - <paramref name="uriString" /> 中指定的主机名或证书颁发机构名称不能以反斜杠结尾。- 或 - <paramref name="uriString" /> 中指定的端口号无效或无法分析。- 或 - <paramref name="uriString" /> 的长度超过 65519 个字符。- 或 - <paramref name="uriString" /> 中指定的方案的长度超过 1023 个字符。- 或 - <paramref name="uriString" /> 中存在无效的字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String)">
      <summary>根据指定的基 URI 和相对 URI 字符串，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要添加到基 URI 的相对 URI。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 为空或仅包含空格。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 包含过多的斜杠。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的密码无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的文件名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的用户名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的端口号无效或无法分析。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 的长度超过 65519 个字符。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案长度超过 1023 个字符。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中存在无效字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.String,System.Boolean)">
      <summary>根据指定的基 URI 和相对 URI，初始化 <see cref="T:System.Uri" /> 类的新实例，并对字符转义进行显式控制。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要添加到基 URI 的相对 URI。</param>
      <param name="dontEscape">如果 true 已完全转义，则为 <paramref name="uriString" />；否则为 false。 请参阅“备注”。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 为空或仅包含空格。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 包含过多的斜杠。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的密码无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的文件名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的用户名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的端口号无效或无法分析。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 的长度超过 65519 个字符。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案长度超过 1023 个字符。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中存在无效字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.#ctor(System.Uri,System.Uri)">
      <summary>根据指定的基 <see cref="T:System.Uri" /> 实例和相对 <see cref="T:System.Uri" /> 实例的组合，初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="baseUri">作为新 <see cref="T:System.Uri" /> 实例的基的绝对 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">与 <see cref="T:System.Uri" /> 组合的相对 <paramref name="baseUri" /> 实例。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="baseUri" /> 不是绝对的 <see cref="T:System.Uri" /> 实例。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 为空或仅包含空格。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 包含过多的斜杠。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的密码无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的文件名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的用户名无效。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的主机名或证书颁发机构名称不能以反斜杠终止。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的端口号无效或无法分析。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 的长度超过 65519 个字符。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中指定的方案长度超过 1023 个字符。- 或 - 通过组合 <paramref name="baseUri" /> 和 <paramref name="relativeUri" /> 而构成的 URI 中存在无效字符序列。- 或 - <paramref name="uriString" /> 中指定的 MS-DOS 路径必须以 c:\\ 开头。</exception>
    </member>
    <member name="M:System.Uri.Canonicalize">
      <summary>将内部存储的 URI 转换为规范化格式。</summary>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此方法有效仅对绝对 Uri。</exception>
      <exception cref="T:System.UriFormatException">URI 的格式不正确。</exception>
    </member>
    <member name="M:System.Uri.CheckHostName(System.String)">
      <summary>确定指定的主机名是否为有效的 DNS 名称。</summary>
      <param name="name">要验证的主机名。 可以是 IPv4 或 IPv6 地址或 Internet 主机名。</param>
      <returns>指示主机名类型的 <see cref="T:System.UriHostNameType" />。 如果无法确定主机名的类型，或者主机名为 null 或零长度字符串，则此方法返回 <see cref="F:System.UriHostNameType.Unknown" />。</returns>
    </member>
    <member name="M:System.Uri.CheckSchemeName(System.String)">
      <summary>确定指定的方案名是否有效。</summary>
      <param name="schemeName">要验证的方案名。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果方案名有效，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.CheckSecurity">
      <summary>调用此方法不起任何作用。</summary>
    </member>
    <member name="M:System.Uri.Compare(System.Uri,System.Uri,System.UriComponents,System.UriFormat,System.StringComparison)">
      <summary>使用指定的比较规则比较两个 URI 的指定部分。</summary>
      <param name="uri1">第一个 <see cref="T:System.Uri" />。</param>
      <param name="uri2">第二个 <see cref="T:System.Uri" />。</param>
      <param name="partsToCompare">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定要比较的 <paramref name="uri1" /> 和 <paramref name="uri2" /> 的部分。</param>
      <param name="compareFormat">
        <see cref="T:System.UriFormat" /> 值中的一个，它指定在比较 URI 部分时使用的字符转义。</param>
      <param name="comparisonType">
        <see cref="T:System.StringComparison" /> 值之一。</param>
      <returns>一个 <see cref="T:System.Int32" /> 值，指示进行比较的 <see cref="T:System.Uri" /> 部分之间的词法关系。值含义小于零<paramref name="uri1" /> 小于 <paramref name="uri2" />。零<paramref name="uri1" /> 等于 <paramref name="uri2" />。大于零<paramref name="uri1" /> 大于 <paramref name="uri2" />。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="comparisonType" /> 不是有效 <see cref="T:System.StringComparison" /> 值。</exception>
    </member>
    <member name="M:System.Uri.Equals(System.Object)">
      <summary>比较两个 <see cref="T:System.Uri" /> 实例是否相等。</summary>
      <param name="comparand">与当前实例相比较的 <see cref="T:System.Uri" /> 实例或 URI 标识符。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个实例表示相同的 URI，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.Escape">
      <summary>将路径部分中的任何不安全字符或保留字符转换为对应的十六进制字符表示形式。</summary>
      <exception cref="T:System.UriFormatException">从构造函数传递的 URI 无效。 如果 URI 包含字符过多，或者是相对的 URI，则可能出现此异常。</exception>
    </member>
    <member name="M:System.Uri.EscapeDataString(System.String)">
      <summary>将字符串转换为它的转义表示形式。</summary>
      <param name="stringToEscape">要转义的字符串。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。<paramref name="stringToEscape" /> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Uri.EscapeString(System.String)">
      <summary>将字符串转换为它的转义表示形式。</summary>
      <param name="str">要转换为它的转义表示形式的字符串。</param>
      <returns>字符串的转义表示形式。</returns>
    </member>
    <member name="M:System.Uri.EscapeUriString(System.String)">
      <summary>将 URI 字符串转换为它的转义表示形式。</summary>
      <param name="stringToEscape">要转义的字符串。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToEscape" /> 的转义表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToEscape" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。<paramref name="stringToEscape" /> 的长度超过 32766 个字符。</exception>
    </member>
    <member name="M:System.Uri.FromHex(System.Char)">
      <summary>获取十六进制数字的十进制值。</summary>
      <param name="digit">要转换的十六进制数字（0-9、a-f、A-F）。</param>
      <returns>一个 <see cref="T:System.Int32" /> 值，包含与指定的十六进制数字对应的介于 0 到 15 之间的数字。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="digit" /> 不是有效的十六进制数字 (0-9、 a-f、 A-F)。</exception>
    </member>
    <member name="M:System.Uri.GetComponents(System.UriComponents,System.UriFormat)">
      <summary>使用特殊字符的指定转义，获取当前实例的指定部分。</summary>
      <param name="components">
        <see cref="T:System.UriComponents" /> 值的按位组合，它指定当前实例中要返回到调用方的部分。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。</param>
      <returns>一个包含这些部分的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriComponents" /> 不是有效的组合 <see cref="T:System.UriComponents" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Uri" /> 不是绝对 URI。 不能与此方法使用相对 Uri。</exception>
    </member>
    <member name="M:System.Uri.GetHashCode">
      <summary>获取 URI 的哈希代码。</summary>
      <returns>一个 <see cref="T:System.Int32" />，其中包含为此 URI 生成的哈希值。</returns>
    </member>
    <member name="M:System.Uri.GetLeftPart(System.UriPartial)">
      <summary>获取 <see cref="T:System.Uri" /> 实例的指定部分。</summary>
      <param name="part">
        <see cref="T:System.UriPartial" /> 值之一，指定要返回的 URI 部分的结尾。</param>
      <returns>一个 <see cref="T:System.String" />，其中包含 <see cref="T:System.Uri" /> 实例的指定部分。</returns>
      <exception cref="T:System.InvalidOperationException">当前 <see cref="T:System.Uri" /> 实例不是绝对的实例。</exception>
      <exception cref="T:System.ArgumentException">指定 <paramref name="part" /> 无效。</exception>
    </member>
    <member name="M:System.Uri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>返回序列化当前实例所需的数据。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Uri" /> 所需的信息。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Uri" /> 关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Uri.HexEscape(System.Char)">
      <summary>将指定的字符转换为它的等效十六进制字符。</summary>
      <param name="character">要转换为十六进制表示形式的字符。</param>
      <returns>指定字符的十六进制表示形式。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="character" /> 将大于 255。</exception>
    </member>
    <member name="M:System.Uri.HexUnescape(System.String,System.Int32@)">
      <summary>将字符的指定十六进制表示形式转换为字符。</summary>
      <param name="pattern">字符的十六进制表示形式。</param>
      <param name="index">
        <paramref name="pattern" /> 中字符的十六进制表示形式开始的位置。</param>
      <returns>用十六进制编码表示的位于 <paramref name="index" /> 的字符。 如果位于 <paramref name="index" /> 的字符不是用十六进制编码的，则返回位于 <paramref name="index" /> 的字符。<paramref name="index" /> 的值递增以指向跟在返回的字符后面的字符。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或大于或等于的中的字符数 <paramref name="pattern" />。</exception>
    </member>
    <member name="M:System.Uri.IsBadFileSystemCharacter(System.Char)">
      <summary>获取一个值，该值指示字符是否在文件系统名称中无效。</summary>
      <param name="character">要测试的 <see cref="T:System.Char" />。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果指定的字符无效，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsBaseOf(System.Uri)">
      <summary>确定当前的 <see cref="T:System.Uri" /> 实例是否为指定 <see cref="T:System.Uri" /> 实例的基。</summary>
      <param name="uri">要测试的指定 <see cref="T:System.Uri" /> 实例。</param>
      <returns>如果当前 true 实例是 <see cref="T:System.Uri" /> 的基，则为 <paramref name="uri" />；否则，为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
    </member>
    <member name="M:System.Uri.IsExcludedCharacter(System.Char)">
      <summary>获取一个值，该值指示是否应该转义指定的字符。</summary>
      <param name="character">要测试的 <see cref="T:System.Char" />。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果应该转义指定的字符，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsHexDigit(System.Char)">
      <summary>确定指定的字符是否为有效的十六进制数字。</summary>
      <param name="character">要验证的字符。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果字符是有效的十六进制数字，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsHexEncoding(System.String,System.Int32)">
      <summary>确定字符串中的一个字符是否为十六进制编码。</summary>
      <param name="pattern">要检查的字符串。</param>
      <param name="index">检查十六进制编码的 <paramref name="pattern" /> 中的位置。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 在指定位置进行了十六进制编码，则该值为 <paramref name="pattern" />；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsReservedCharacter(System.Char)">
      <summary>获取一个值，该值指示指定的字符是否为保留字符。</summary>
      <param name="character">要测试的 <see cref="T:System.Char" />。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果指定的字符是保留字符，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedOriginalString">
      <summary>指示用于构造此 <see cref="T:System.Uri" /> 的字符串是否格式良好，以及它是否不需要进一步转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果该字符串格式正确，则该值为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)">
      <summary>通过尝试用字符串构造一个 URI 来指示字符串是否为格式良好的，并确保字符串不需要进一步转义。</summary>
      <param name="uriString">用于尝试构造 <see cref="T:System.Uri" /> 的字符串。</param>
      <param name="uriKind">
        <see cref="T:System.Uri" /> 中的 <paramref name="uriString" /> 的类型。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果该字符串格式正确，则该值为 true ；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.MakeRelative(System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例之间的差异。</summary>
      <param name="toUri">与当前 URI 进行比较的 URI。</param>
      <returns>如果此 URI 实例与 <paramref name="toUri" /> 的主机名和方案相同，则此方法返回一个表示相对 URI 的 <see cref="T:System.String" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="toUri" /> 参数。如果主机名或方案不同，则此方法返回一个表示 <see cref="T:System.String" /> 参数的 <paramref name="toUri" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="toUri" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此方法有效仅对绝对 Uri。</exception>
    </member>
    <member name="M:System.Uri.MakeRelativeUri(System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例之间的差异。</summary>
      <param name="uri">与当前 URI 进行比较的 URI。</param>
      <returns>如果此 URI 实例与 <paramref name="uri" /> 的主机名和方案相同，则此方法返回一个相对 <see cref="T:System.Uri" />。若将此相对 URI 追加到当前 URI 实例，就可以得到 <paramref name="uri" />。如果主机名或方案不同，则此方法返回一个表示 <see cref="T:System.Uri" /> 参数的 <paramref name="uri" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="M:System.Uri.op_Equality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有相同的值。</summary>
      <param name="uri1">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri2" /> 实例。</param>
      <param name="uri2">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri1" /> 实例。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果这两个 true 实例是等效的，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.op_Inequality(System.Uri,System.Uri)">
      <summary>确定两个 <see cref="T:System.Uri" /> 实例是否具有不同的值。</summary>
      <param name="uri1">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri2" /> 实例。</param>
      <param name="uri2">要与 <see cref="T:System.Uri" /> 比较的 <paramref name="uri1" /> 实例。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果两个 true 实例不相等，则该值为 <see cref="T:System.Uri" />；否则为 false。 如果两者中任意一个参数为 null，则此方法返回 true。</returns>
    </member>
    <member name="M:System.Uri.Parse">
      <summary>分析当前实例的 URI 以确保它包含有效 URI 所需的所有部分。</summary>
      <exception cref="T:System.UriFormatException">从构造函数传递的 Uri 无效。</exception>
    </member>
    <member name="M:System.Uri.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>返回序列化当前实例所需的数据。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象包含序列化 <see cref="T:System.Uri" /> 所需的信息。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象包含与<see cref="T:System.Uri" /> 关联的序列化流的源和目标。</param>
    </member>
    <member name="M:System.Uri.ToString">
      <summary>获取指定的 <see cref="T:System.Uri" /> 实例的规范化字符串表示形式。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含 <see cref="T:System.Uri" /> 实例的非转义规范化表示形式。 除了 #、? 和 %，所有字符均为非转义字符。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.String,System.UriKind,System.Uri@)">
      <summary>使用指定的 <see cref="T:System.Uri" /> 实例和 <see cref="T:System.String" /> 创建一个新的 <see cref="T:System.UriKind" />。</summary>
      <param name="uriString">表示 <see cref="T:System.String" /> 的 <see cref="T:System.Uri" />。</param>
      <param name="uriKind">URI 的类型。</param>
      <param name="result">此方法返回时，包含构造的 <see cref="T:System.Uri" />。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.String,System.Uri@)">
      <summary>使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.String" />。</summary>
      <param name="baseUri">基 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.String" />（表示为 <see cref="T:System.Uri" />）。</param>
      <param name="result">此方法返回时，包含从 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 构造的 <paramref name="relativeUri" />。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
    </member>
    <member name="M:System.Uri.TryCreate(System.Uri,System.Uri,System.Uri@)">
      <summary>使用指定基和相对 <see cref="T:System.Uri" /> 实例创建一个新的 <see cref="T:System.Uri" />。</summary>
      <param name="baseUri">基 <see cref="T:System.Uri" />。</param>
      <param name="relativeUri">要添加到基 <see cref="T:System.Uri" /> 的相对 <see cref="T:System.Uri" />。</param>
      <param name="result">此方法返回时，包含从 <see cref="T:System.Uri" /> 和 <paramref name="baseUri" /> 构造的 <paramref name="relativeUri" />。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果成功创建了 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="baseUri" /> 为 null。</exception>
    </member>
    <member name="M:System.Uri.Unescape(System.String)">
      <summary>转换指定的字符串，方法是将任何转义序列替换为相应的未转义表示形式。</summary>
      <param name="path">要转换的 <see cref="T:System.String" />。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="path" /> 参数的非转义值。</returns>
    </member>
    <member name="M:System.Uri.UnescapeDataString(System.String)">
      <summary>将字符串转换为它的非转义表示形式。</summary>
      <param name="stringToUnescape">要恢复原义的字符串。</param>
      <returns>一个 <see cref="T:System.String" />，包含 <paramref name="stringToUnescape" /> 的非转义表示形式。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringToUnescape" /> 为 null。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor">
      <summary>初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String)">
      <summary>用指定的 URI 初始化 <see cref="T:System.UriBuilder" /> 类的新实例。</summary>
      <param name="uri">一个 URI 字符串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。<paramref name="uri" /> 是零长度字符串，或只包含空格。- 或 - 分析例程检测到无效的窗体中的一种方案。- 或 - 分析器不使用"文件"方案的 URI 中检测到两个以上连续的斜线。- 或 - <paramref name="uri" /> 不是有效的 URI。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.UriBuilder" /> 与指定的方案和宿主的类。</summary>
      <param name="schemeName">Internet 访问协议。</param>
      <param name="hostName">DNS 样式的域名或 IP 地址。</param>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.UriBuilder" /> 类，具有指定的方案、 主机和端口。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="portNumber">服务的 IP 端口号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="portNumber" /> 小于-1 或大于 65535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String)">
      <summary>新实例初始化 <see cref="T:System.UriBuilder" /> 类，具有指定的方案、 主机、 端口号和路径。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="port">服务的 IP 端口号。</param>
      <param name="pathValue">Internet 资源的路径。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于-1 或大于 65535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.String,System.String,System.Int32,System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.UriBuilder" /> 类使用指定的方案、 主机、 端口号、 路径和查询字符串或段标识符。</summary>
      <param name="scheme">Internet 访问协议。</param>
      <param name="host">DNS 样式的域名或 IP 地址。</param>
      <param name="port">服务的 IP 端口号。</param>
      <param name="path">Internet 资源的路径。</param>
      <param name="extraValue">查询字符串或段标识符。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="extraValue" /> 既不是 null ，也不 <see cref="F:System.String.Empty" />, ，也不会有效段标识符开头数字符号 （#），也有效的查询字符串开头问号 （？）。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> 小于-1 或大于 65535。</exception>
    </member>
    <member name="M:System.UriBuilder.#ctor(System.Uri)">
      <summary>使用指定的 <see cref="T:System.UriBuilder" /> 实例初始化 <see cref="T:System.Uri" /> 类的新实例。</summary>
      <param name="uri">
        <see cref="T:System.Uri" /> 类的实例。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> 为 null。</exception>
    </member>
    <member name="M:System.UriBuilder.Equals(System.Object)">
      <summary>比较现有 <see cref="T:System.Uri" /> 实例的内容与 <see cref="T:System.UriBuilder" /> 是否相等。</summary>
      <param name="rparam">要与当前实例进行比较的对象。</param>
      <returns>true 如果 <paramref name="rparam" /> 表示相同 <see cref="T:System.Uri" /> 作为 <see cref="T:System.Uri" /> 由此构造 <see cref="T:System.UriBuilder" /> 实例; 否则为 false。</returns>
    </member>
    <member name="M:System.UriBuilder.GetHashCode">
      <summary>对于 URI 返回的哈希代码。</summary>
      <returns>对于 URI 生成的哈希代码。</returns>
    </member>
    <member name="M:System.UriBuilder.ToString">
      <summary>返回指定 <see cref="T:System.UriBuilder" /> 实例的显示字符串。</summary>
      <returns>包含 <see cref="T:System.UriBuilder" /> 非转义显示字符串的字符串。</returns>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。<see cref="T:System.UriBuilder" /> 实例包含错误密码。</exception>
    </member>
    <member name="M:System.UriFormatException.#ctor">
      <summary>初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>根据指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 和 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 实例初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ，包含序列化新所需的信息 <see cref="T:System.UriFormatException" />。</param>
      <param name="streamingContext">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.UriFormatException" /> 关联的序列化流的源。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String)">
      <summary>使用指定的消息初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="textString">错误消息字符串。</param>
    </member>
    <member name="M:System.UriFormatException.#ctor(System.String,System.Exception)">
      <summary>使用指定的错误消息和对作为此异常原因的内部异常的引用来初始化 <see cref="T:System.UriFormatException" /> 类的新实例。</summary>
      <param name="textString">描述该异常的消息。 此构造函数的调用方需要确保此字符串已针对当前系统区域性进行了本地化。</param>
      <param name="e">导致当前异常的异常。 如果 <paramref name="innerException" /> 参数不为 null，则当前异常将在处理内部异常的 catch 块中引发。</param>
    </member>
    <member name="M:System.UriFormatException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例序列化所需的数据与 <see cref="T:System.UriFormatException" />。</summary>
      <param name="serializationInfo">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，将存放 <see cref="T:System.UriFormatException" /> 的序列化数据。</param>
      <param name="streamingContext">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与新的 <see cref="T:System.UriFormatException" /> 关联的序列化流的目标。</param>
    </member>
    <member name="M:System.UriParser.#ctor">
      <summary>构造一个默认的 URI 分析器。</summary>
    </member>
    <member name="M:System.UriParser.GetComponents(System.Uri,System.UriComponents,System.UriFormat)">
      <summary>获取的 URI 中的组件。</summary>
      <param name="uri">要分析的 URI。</param>
      <param name="components">
        <see cref="T:System.UriComponents" /> 从检索 <paramref name="uri" />。</param>
      <param name="format">
        <see cref="T:System.UriFormat" /> 值中的一个，它控制如何转义特殊字符。</param>
      <returns>一个字符串，包含的组件。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="uriFormat" /> 无效。- 或 -<paramref name="uriComponents" /> 不是有效的组合 <see cref="T:System.UriComponents" /> 值。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="uri" /> 要求用户驱动的分析- 或 -<paramref name="uri" /> 不是一个绝对 URI。 不能与此方法使用相对 Uri。</exception>
    </member>
    <member name="M:System.UriParser.InitializeAndValidate(System.Uri,System.UriFormatException@)">
      <summary>初始化分析器的状态，并验证 URI。</summary>
      <param name="uri">一个值，该值进行验证。</param>
      <param name="parsingError">验证错误，如果有的话。</param>
    </member>
    <member name="M:System.UriParser.IsBaseOf(System.Uri,System.Uri)">
      <summary>确定是否 <paramref name="baseUri" /> 基 uri <paramref name="relativeUri" />。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">要测试的 URI。</param>
      <returns>true 如果 <paramref name="baseUri" /> 基 uri <paramref name="relativeUri" />; 否则为 false。</returns>
    </member>
    <member name="M:System.UriParser.IsKnownScheme(System.String)">
      <summary>指示是否注册了一种方案的分析器。</summary>
      <param name="schemeName">要检查的方案名称。</param>
      <returns>true 如果 <paramref name="schemeName" /> 已注册; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemeName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 参数无效。</exception>
    </member>
    <member name="M:System.UriParser.IsWellFormedOriginalString(System.Uri)">
      <summary>指示 URI 的格式是否正确。</summary>
      <param name="uri">要检查的 URI。</param>
      <returns>true 如果 <paramref name="uri" /> 格式正确的; 否则为 false。</returns>
    </member>
    <member name="M:System.UriParser.OnNewUri">
      <summary>通过调用 <see cref="T:System.Uri" /> 构造函数来获得 <see cref="T:System.UriParser" /> 实例</summary>
      <returns>一个 <see cref="T:System.UriParser" /> 用于构建 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="M:System.UriParser.OnRegister(System.String,System.Int32)">
      <summary>由框架调用时 <see cref="T:System.UriParser" /> 注册方法。</summary>
      <param name="schemeName">与此关联的方案 <see cref="T:System.UriParser" />。</param>
      <param name="defaultPort">使用方案的端口号。</param>
    </member>
    <member name="M:System.UriParser.Register(System.UriParser,System.String,System.Int32)">
      <summary>将方案和端口号与相关联 <see cref="T:System.UriParser" />。</summary>
      <param name="uriParser">若要注册的 URI 分析器。</param>
      <param name="schemeName">与此分析器相关联的方案的名称。</param>
      <param name="defaultPort">指定方案的默认端口号。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uriParser" /> 参数为 null- 或 -<paramref name="schemeName" /> 参数为 null。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="schemeName" /> 参数无效- 或 -<paramref name="defaultPort" /> 参数不是有效的。<paramref name="defaultPort" /> 参数是否小于-1 或大于 65534。</exception>
    </member>
    <member name="M:System.UriParser.Resolve(System.Uri,System.Uri,System.UriFormatException@)">
      <summary>由调用 <see cref="T:System.Uri" /> 构造函数和 <see cref="Overload:System.Uri.TryCreate" /> 以解析相对 URI。</summary>
      <param name="baseUri">基 URI。</param>
      <param name="relativeUri">一个相对的 URI。</param>
      <param name="parsingError">在解析过程中，如果有错误。</param>
      <returns>解析相对的字符串 <see cref="T:System.Uri" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="baseUri" /> 参数不是绝对 <see cref="T:System.Uri" />- 或 -<paramref name="baseUri" /> 参数要求用户驱动的分析。</exception>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary>初始化 <see cref="T:System.UriTypeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器是否可以将给定类型的对象转换为此转换器的类型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="sourceType">一个 <see cref="T:System.Type" /> ，表示要从转换的类型。</param>
      <returns>true 如果 <paramref name="sourceType" /> 是 <see cref="T:System.String" /> 类型或 <see cref="T:System.Uri" /> 可从指定类型 <paramref name="sourceType" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceType" /> 参数为 null。</exception>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>返回此转换器能否使用指定上下文将对象转换为指定类型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="destinationType">一个 <see cref="T:System.Type" /> 表示想要转换为的类型。</param>
      <returns>true 如果 <paramref name="destinationType" /> 属于类型 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />, ，<see cref="T:System.String" />, ，或 <see cref="T:System.Uri" />; 否则为 false。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>使用指定的上下文和区域性信息将给定对象转换为此转换器的类型。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> 要用作当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>将给定的值对象转换为指定的类型，使用指定的上下文和区域性信息。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" />。 如果传递 null，则采用当前区域性。</param>
      <param name="value">要转换的 <see cref="T:System.Object" />。</param>
      <param name="destinationType">
        <see cref="T:System.Type" /> 转换 <paramref name="value" /> 参数。</param>
      <returns>
        <see cref="T:System.Object" /> ，表示转换后的值。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">不能执行转换。</exception>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary>返回给定的值的对象是否是 <see cref="T:System.Uri" /> 或 <see cref="T:System.Uri" /> 可以从其创建。</summary>
      <param name="context">
        <see cref="T:System.ComponentModel.ITypeDescriptorContext" />  提供格式上下文。</param>
      <param name="value">要测试其有效性的 <see cref="T:System.Object" />。</param>
      <returns>true 如果 <paramref name="value" /> 是 <see cref="T:System.Uri" /> 或 <see cref="T:System.String" /> 从中 <see cref="T:System.Uri" /> 可创建; 否则为 false。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>新实例初始化 <see cref="T:System.Web.AspNetHostingPermission" /> 类与指定 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</summary>
      <param name="state">一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="state" /> 未设置为其中一个 <see cref="T:System.Security.Permissions.PermissionState" /> 枚举值。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.#ctor(System.Web.AspNetHostingPermissionLevel)">
      <summary>新实例初始化 <see cref="T:System.Web.AspNetHostingPermission" /> 类，具有指定的权限级别。</summary>
      <param name="level">一个 <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值。</param>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Copy">
      <summary>由派生类实现时，创建并返回当前权限对象的相同副本。</summary>
      <returns>当前权限对象的副本。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.FromXml(System.Security.SecurityElement)">
      <summary>重新构造具有指定状态的 XML 编码的权限对象。</summary>
      <param name="securityElement">
        <see cref="T:System.Security.SecurityElement" /> 包含的 XML 编码用于重新构造权限对象。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="securityElement" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Security.SecurityElement.Tag" /> 属性 <paramref name="securityElement" /> 是否不等于"IPermission"。- 或- 此类 <see cref="M:System.Security.SecurityElement.Attribute(System.String)" /> 的 <paramref name="securityElement" /> 是 null 或空字符串 ("")。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Intersect(System.Security.IPermission)">
      <summary>由派生类实现时，创建并返回属于当前权限和指定权限的交集的权限。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>
        <see cref="T:System.Security.IPermission" /> ，它表示当前权限的交集指定的权限; 否则为 null 如果交集为空。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>返回一个值，该值指示当前的权限是否为指定权限的子集。</summary>
      <param name="target">
        <see cref="T:System.Security.IPermission" /> 要与当前权限组合。 它必须是同一类型与当前的 <see cref="T:System.Security.IPermission" />。</param>
      <returns>true 如果当前 <see cref="T:System.Security.IPermission" /> 是指定的一个子集 <see cref="T:System.Security.IPermission" />; 否则为 false。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.IsUnrestricted">
      <summary>返回一个值，该值指示是否允许不受限制的访问由当前的权限保护的资源。</summary>
      <returns>如果允许不受限制的使用权限所保护的资源，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.ToXml">
      <summary>创建权限对象及其当前状态的 XML 编码。</summary>
      <returns>一个 <see cref="T:System.Security.SecurityElement" /> 包含权限对象，包括任何状态信息的 XML 编码。</returns>
    </member>
    <member name="M:System.Web.AspNetHostingPermission.Union(System.Security.IPermission)">
      <summary>创建一个权限，该权限是当前权限与指定权限的并集。</summary>
      <param name="target">与当前权限合并的权限。 它必须与当前权限属于同一类型。</param>
      <returns>
        <see cref="T:System.Security.IPermission" /> ，它表示当前的权限和指定的权限的并集。</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> 不是 <see cref="T:System.Web.AspNetHostingPermission" />。</exception>
    </member>
    <member name="M:System.Web.AspNetHostingPermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>初始化 <see cref="T:System.Web.AspNetHostingPermissionAttribute" /> 类的新实例。</summary>
      <param name="action">
        <see cref="T:System.Security.Permissions.SecurityAction" /> 枚举值之一。</param>
    </member>
    <member name="M:System.Web.AspNetHostingPermissionAttribute.CreatePermission">
      <summary>创建一个新 <see cref="T:System.Web.AspNetHostingPermission" /> 具有权限级别以前由设置 <see cref="P:System.Web.AspNetHostingPermissionAttribute.Level" /> 属性。</summary>
      <returns>
        <see cref="T:System.Security.IPermission" /> ，它是新 <see cref="T:System.Web.AspNetHostingPermission" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ICommand.CanExecute(System.Object)">
      <summary>定义确定此命令是否可在其当前状态下执行的方法。</summary>
      <param name="parameter">此命令使用的数据。  如果此命令不需要传递数据，则该对象可以设置为 null。</param>
      <returns>如果可执行此命令，则为 true；否则为 false。</returns>
    </member>
    <member name="M:System.Windows.Input.ICommand.Execute(System.Object)">
      <summary>定义在调用此命令时要调用的方法。</summary>
      <param name="parameter">此命令使用的数据。  如果此命令不需要传递数据，则该对象可以设置为 null。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>使用程序集限定类型名称字符串初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 类的新实例。</summary>
      <param name="valueSerializerTypeName">供 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类使用的程序集限定类型名称字符串。</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>使用指定的类型初始化 <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> 类的新实例。</summary>
      <param name="valueSerializerType">一种类型，表示 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的类型。</param>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary>获取要在创建源代码文件时使用的文件扩展名。</summary>
      <returns>用于生成的源代码文件的文件扩展名。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary>获取要在创建源代码文件时使用的文件扩展名。</summary>
      <returns>用于生成的源代码文件的文件扩展名。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary>获取语言功能标识符。</summary>
      <returns>指示语言的特殊功能的 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="P:Microsoft.Win32.PowerModeChangedEventArgs.Mode">
      <summary>获取指示已发生的电源模式事件的类型的标识符。</summary>
      <returns>
        <see cref="T:Microsoft.Win32.PowerModes" /> 值之一。</returns>
    </member>
    <member name="P:Microsoft.Win32.SessionEndedEventArgs.Reason">
      <summary>获取指示如何结束会话的标识符。</summary>
      <returns>其中一个 <see cref="T:Microsoft.Win32.SessionEndReasons" /> 值，该值指示会话结束方式。</returns>
    </member>
    <member name="P:Microsoft.Win32.SessionEndingEventArgs.Cancel">
      <summary>获取或设置一个值，该值指示是否取消用户请求来结束该会话。</summary>
      <returns>true 若要取消用户请求来结束该会话;否则为 false。</returns>
    </member>
    <member name="P:Microsoft.Win32.SessionEndingEventArgs.Reason">
      <summary>获取结束该会话的原因。</summary>
      <returns>其中一个 <see cref="T:Microsoft.Win32.SessionEndReasons" /> 值，该值指定如何结束会话。</returns>
    </member>
    <member name="P:Microsoft.Win32.SessionSwitchEventArgs.Reason">
      <summary>获取一个指示会话的类型的标识符更改事件。</summary>
      <returns>一个 <see cref="T:Microsoft.Win32.SessionSwitchReason" /> ，该值指示该会话的类型更改事件。</returns>
    </member>
    <member name="P:Microsoft.Win32.TimerElapsedEventArgs.TimerId">
      <summary>获取计时器的 ID 号。</summary>
      <returns>计时器 ID 号。</returns>
    </member>
    <member name="P:Microsoft.Win32.UserPreferenceChangedEventArgs.Category">
      <summary>获取已更改的用户首选项的类别。</summary>
      <returns>其中一个 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 值，该值指示已更改的用户首选项的类别。</returns>
    </member>
    <member name="P:Microsoft.Win32.UserPreferenceChangingEventArgs.Category">
      <summary>获取正在更改的用户首选项的类别。</summary>
      <returns>其中一个 <see cref="T:Microsoft.Win32.UserPreferenceCategory" /> 表示正在更改的类别的用户首选项的值。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary>获取或设置此表达式引用的参数的名称。</summary>
      <returns>要引用的参数的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary>获取或设置要创建数组的类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示数组的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary>获取用来初始化该数组的初始值设定项。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> ，该值指示初始化值。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary>获取或设置数组中的索引的数目。</summary>
      <returns>数组中的索引的数目。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary>获取或设置表达式，它指示数组的大小。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示数组的大小。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary>获取或设置或多个索引的索引器表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> ，该值指示索引或索引的索引器表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary>获取或设置目标对象的数组索引器。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，它表示要编制索引的数组。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary>获取或设置表示要将分配给引用的对象的表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要将分配给引用的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary>获取或设置表示的对象或引用将分配的表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示引用要分配的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary>获取或设置要对其附加到一个事件处理程序委托。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> ，该值指示要对其附加到一个事件处理程序。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary>获取或设置新的事件处理程序委托，以将附加到该事件。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要附加新事件处理程序。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary>获取或设置属性的名称。</summary>
      <returns>此参数是用于将 attribute 属性的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary>获取或设置属性参数的值。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示属性参数的值。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary>获取该属性的参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> ，其中包含该属性的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary>获取代码特性声明代码类型引用。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，它标识 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary>获取或设置要声明的属性的名称。</summary>
      <returns>属性名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary>获取或设置运算符左侧的代码表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示左的操作数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary>获取或设置中的二元运算符表达式的运算符。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeBinaryOperatorType" /> ，该值指示在表达式中运算符的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary>获取或设置运算符右侧的代码表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示右操作数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary>获取或设置要强制转换的表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要转换的代码。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary>获取或设置转换的目标类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要强制转换为的目标类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary>获取或设置要使用的 catch 块处理的异常的类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要处理的异常的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary>获取或设置异常的变量名 catch 子句句柄。</summary>
      <returns>异常变量的名称， catch 子句句柄。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary>获取在 catch 块内的语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 包含 catch 块内的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeCatchClause" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeCatchClause" /> 每个有效的索引处的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary>获取或设置一个 GUID，标识要使用的校验和算法。</summary>
      <returns>一个 <see cref="T:System.Guid" /> ，它标识要使用的校验和算法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary>获取或设置校验和计算数据的值。</summary>
      <returns>字节数组，包含数据的校验和计算。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary>获取或设置校验和文件的路径。</summary>
      <returns>校验和文件的路径。</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary>获取或设置一个值，该值指示批注是否的文档注释。</summary>
      <returns>true 当注释位于文档注释。否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary>获取或设置批注的文本。</summary>
      <returns>包含注释文本的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary>获取或设置注释的内容。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeComment" /> ，指示注释。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeCommentStatement" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeCommentStatement" /> 每个有效的索引处的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary>获取生成的程序集的自定义特性的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 指示生成的程序集的自定义特性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary>获取 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 包含结束指令的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 包含结束指令的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary>获取命名空间的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> ，该值指示编译单元使用的命名空间。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary>获取引用的程序集。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.StringCollection" /> ，其中包含引用的程序集的文件名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary>获取 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，其中包含启动指令。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，其中包含启动指令。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary>获取或设置要计算的表达式 true 或 false。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> 评估 true 或 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary>获取的集合时的条件表达式的计算结果为要执行语句 false。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 其中包含的语句时的条件表达式的计算结果为要执行 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary>获取的集合时的条件表达式的计算结果为要执行语句 true。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> 其中包含的语句时的条件表达式的计算结果为要执行 true。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary>获取基构造函数参数的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> ，其中包含基构造函数参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary>获取链接的构造函数参数的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> ，其中包含链接的构造函数参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary>获取或设置默认值的数据类型引用。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象，表示具有默认值的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary>获取或设置该委托的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该委托的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary>获取或设置事件处理程序方法的名称。</summary>
      <returns>事件处理程序方法的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary>获取或设置包含的事件处理程序方法的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含的事件处理程序方法的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary>获取或设置要传递到事件处理附加到事件的方法的参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要传递到事件处理附加到事件的方法的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary>获取或设置要调用的事件。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要调用的事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary>获取或设置此方向表达式的字段方向。</summary>
      <returns>一个 <see cref="T:System.CodeDom.FieldDirection" /> ，该值指示此方向表达式的字段方向。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary>获取或设置要表示的代码表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要表示的表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeDirective" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的索引位置。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeDirective" /> 索引位置处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 找不到索引位置的有效范围之外。</exception>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary>获取或设置事件的名称。</summary>
      <returns>事件的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary>获取或设置包含该事件的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含该事件的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeExpression" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的从零开始的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> 每个有效的索引处的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary>获取或设置语句表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，指示该语句的表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary>获取或设置要引用的字段的名称。</summary>
      <returns>包含字段名称的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary>获取或设置包含要引用的字段的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含要引用的字段的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary>获取或设置处继续执行程序的标签的名称。</summary>
      <returns>一个字符串，指示处继续执行程序的标签的名称。</returns>
      <exception cref="T:System.ArgumentNullException">无法设置标签，因为<paramref name=" value" /> 是 null 或空字符串。</exception>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary>获取索引器表达式的索引的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> ，该值指示索引或索引的索引器表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary>获取或设置可编制索引的目标对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示索引器对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary>获取或设置在每个循环周期之后调用的语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatement" /> ，该值指示每个周期增量语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary>获取或设置循环初始化语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatement" /> ，该值指示循环初始化语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary>获取要在循环内执行的语句的集合。</summary>
      <returns>类型的数组 <see cref="T:System.CodeDom.CodeStatement" /> ，该值指示在循环内的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary>获取或设置要作为就会继续循环的条件测试的表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要测试的表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary>获取或设置标签的名称。</summary>
      <returns>标签的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary>获取或设置可选的关联的语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatement" /> ，该值指示与标签关联的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary>获取或设置关联的文件的名称。</summary>
      <returns>关联的文件的文件名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary>获取或设置关联的引用的行号。</summary>
      <returns>行号。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary>获取或设置成员事件实现的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> ，该值指示数据类型或成员事件实现的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary>获取或设置私下实现的数据类型，如果有的话。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示事件专用于实现的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary>获取或设置处理事件的委托类型的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示处理事件的委托类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary>获取或设置该字段的初始化表达式。</summary>
      <returns>字段的初始化表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary>获取或设置字段的类型。</summary>
      <returns>字段的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary>获取由该方法实现的接口的数据类型，除非它是一个私有方法实现，这将由 <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> 属性。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> ，该值指示此方法实现的接口。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary>获取该方法的参数声明。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 指示方法的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary>获取或设置该接口的数据类型这种方法，如果、 私有实现的方法，如果有的话。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> 指示用方法的接口的数据类型，由此表示其声明的私有方法 <see cref="T:System.CodeDom.CodeMemberMethod" /> 实现。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary>获取或设置该方法的返回值的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该方法返回的值的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary>获取该方法的返回类型的自定义特性。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ，该值指示自定义属性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary>获取在方法内的语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> ，该值指示方法内的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary>获取当前泛型方法的类型参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> ，其中包含泛型方法的类型参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary>获取的集合 get 属性的语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> ，其中包含 get 成员属性的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary>获取或设置一个值，指示属性是否具有 get 方法访问器。</summary>
      <returns>true 如果 Count 属性 <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> 集合为非零，或者如果此属性的值已设置为 true; 否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary>获取或设置一个值，指示属性是否具有 set 方法访问器。</summary>
      <returns>true 如果 <see cref="P:System.Collections.CollectionBase.Count" /> 属性 <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> 集合为非零值; 否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary>获取该属性实现任何接口的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> ，该值指示数据类型属性实现。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary>获取声明的属性的表达式的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> ，该值指示该属性的声明表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary>获取或设置该接口的数据类型，如果任何，此属性，如果是私有的实现。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该接口的数据类型，如果任何属性，如果是私有的实现。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary>获取的集合 set 属性的语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> ，其中包含 set 成员属性的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary>获取或设置该属性的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该属性的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary>获取或设置要调用的方法。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> ，该值指示要调用的方法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary>获取要使用调用该方法的参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> ，该值指示要使用调用该方法的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary>获取或设置要引用的方法的名称。</summary>
      <returns>要引用的方法的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary>获取或设置表达式，它指示要引用的方法。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，它表示要引用的方法。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary>获取当前泛型方法引用表达式的类型参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 包含当前代码的类型参数 <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary>获取或设置返回值。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要为 return 语句返回的值或 null 如果语句是子例程的一部分。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary>获取为命名空间的注释。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> ，指示命名空间的注释。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary>获取命名空间的集合使用的命名空间导入指令。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> ，该值指示使用由命名空间的命名空间导入指令。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary>获取或设置命名空间的名称。</summary>
      <returns>命名空间的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary>获取该命名空间包含的类型的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> ，该值指示包含命名空间中的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeNamespaceCollection" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeNamespace" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary>获取或设置行和出现该语句的文件。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> ，该值指示该语句的上下文。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary>获取或设置要导入的命名空间。</summary>
      <returns>要导入的命名空间名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary>获取集合中的命名空间的数量。</summary>
      <returns>集合中的命名空间的数量。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 每个有效的索引处的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。 此属性始终返回 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  此属性始终返回 null。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IList" />；否则为 false。  此属性始终返回 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IList" /> 是否为只读。</summary>
      <returns>如果 <see cref="T:System.Collections.IList" /> 是只读的，则为 true；否则为 false。  此属性始终返回 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary>获取当前对象的可由用户定义的数据。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 包含用户数据的当前对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary>获取或设置要创建的对象的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> 为要创建的对象的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary>获取或设置要在创建对象时使用的参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpressionCollection" /> 指示创建对象时要使用的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary>获取或设置参数声明的自定义属性。</summary>
      <returns>一个对象，该值指示自定义属性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary>获取或设置字段的方向。</summary>
      <returns>一个对象，指示该字段的方向。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary>获取或设置参数的名称。</summary>
      <returns>参数的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary>获取或设置参数的类型。</summary>
      <returns>参数的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 集合中的指定索引处。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary>获取或设置用于表示的基元数据类型。</summary>
      <returns>基元数据类型实例表示的值。</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary>获取或设置要引用的属性的名称。</summary>
      <returns>要引用的属性的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary>获取或设置包含要引用的属性的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示包含要引用的属性的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary>获取或设置 region 指令的模式。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeRegionMode" /> 值之一。 默认值为 <see cref="F:System.CodeDom.CodeRegionMode.None" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary>获取或设置区域的名称。</summary>
      <returns>区域的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary>获取或设置要从中移除侦听器的事件。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> ，该值指示要从中移除侦听器的事件。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary>获取或设置要删除的事件处理程序。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示要删除的事件处理程序。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary>获取或设置有关的代码位于源代码文档中的行和文件名信息。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> ，用于指示代码片段的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary>获取或设置要表示的原义代码片段。</summary>
      <returns>原义代码片段中。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary>获取或设置代码的文本字符串。</summary>
      <returns>文字字符串。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary>获取或设置文本的代码片段语句。</summary>
      <returns>原义代码片段语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary>获取或设置类型成员的代码片段。</summary>
      <returns>类型成员的代码片段。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary>获取 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 包含结束指令的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 包含结束指令的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary>获取或设置代码语句出现的行。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> 对象，它指示代码语句的上下文。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary>获取 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 包含开始指令的对象。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，其中包含启动指令。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeStatement" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatement" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary>获取或设置要引发的异常。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> 表示要引发的异常的实例。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary>获取要使用的 catch 子句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> ，该值指示要使用的 catch 子句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary>获取 finally 语句的使用。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> ，该值指示 finally 语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary>获取要尝试的语句。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeStatementCollection" /> ，该值指示要尝试的语句。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary>获取该类型的基类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象，它指示该类型的基类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary>获取或设置一个值，该值指示类型是否为类或引用类型。</summary>
      <returns>true 如果该类型是类或引用类型;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary>获取或设置一个值，该值指示类型是否一个枚举。</summary>
      <returns>true 如果类型为枚举，则否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary>获取或设置一个值，该值指示类型是否一个接口。</summary>
      <returns>true 如果类型是一个接口;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary>获取或设置一个值，该值指示该类型声明为完整或部分。</summary>
      <returns>true 如果类或结构声明的部分表示形式的新实现。 false 如果声明为类或结构的一个完整实现。 默认值为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary>获取或设置一个值，该值指示类型是否值类型 （结构）。</summary>
      <returns>true 如果类型为值类型，则否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary>获取表示的类型的类成员的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 对象，它指示类成员。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary>获取或设置类型的属性。</summary>
      <returns>一个 <see cref="T:System.Reflection.TypeAttributes" /> 对象，它指示类型的属性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary>获取类型声明的类型参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> ，其中包含的类型声明的类型参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary>获取委托的参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> ，该值指示该委托的参数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary>获取或设置该委托的返回类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该委托的返回类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary>获取或设置成员的特性。</summary>
      <returns>按位组合 <see cref="T:System.CodeDom.MemberAttributes" /> 用于指示该成员的特性的值。 默认值是 <see cref="F:System.CodeDom.MemberAttributes.Private" /> | <see cref="F:System.CodeDom.MemberAttributes.Final" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary>获取类型成员批注的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> ，指示该成员的注释。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary>获取或设置成员的自定义特性。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ，该值指示该成员的自定义特性。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary>获取结束指令成员的指针。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 包含结束指令的对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary>获取或设置类型 member 语句出现的行。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeLinePragma" /> 对象，它指示类型成员声明的位置。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary>获取或设置成员的名称。</summary>
      <returns>成员名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary>获取开始指令成员的指针。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeDirectiveCollection" /> 对象，其中包含启动指令。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeTypeMember" /> 集合中的指定索引处。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeMember" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary>获取或设置所引用的数据类型 typeof 表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示所引用的数据类型 typeof 表达式。 此属性将永远不会返回 null, ，默认值为 <see cref="T:System.Void" /> 类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary>获取类型参数的约束。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 对象，其中包含类型参数的约束。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary>获取类型参数的自定义特性。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> ，该值指示类型参数的自定义特性。 默认值为 null。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary>获取或设置一个值，该值指示类型参数是否具有构造函数约束。</summary>
      <returns>true 如果类型参数的构造函数约束;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary>获取或设置类型参数的名称。</summary>
      <returns>类型参数的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeTypeParameter" /> 集合中的指定索引处的对象。</summary>
      <param name="index">要访问的集合对象的从零开始的索引。</param>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeParameter" /> 中指定索引处的对象。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary>获取或设置数组中元素的类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示数组元素的类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary>获取或设置数组的数组秩。</summary>
      <returns>数组维度数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary>获取或设置所引用的类型的名称。</summary>
      <returns>所引用的类型的名称。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary>获取或设置代码类型引用选项。</summary>
      <returns>
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary>获取当前泛型类型引用的类型参数。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 包含当前的类型参数 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.CodeDom.CodeTypeReference" /> 集合中的指定索引处。</summary>
      <param name="index">要访问的集合的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary>获取或设置要引用的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示要引用的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary>获取或设置该变量的初始化表达式。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeExpression" /> ，该值指示该变量的初始化表达式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary>获取或设置变量的名称。</summary>
      <returns>变量名。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary>获取或设置该变量的数据类型。</summary>
      <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" /> ，该值指示该变量的数据类型。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary>获取或设置要引用的本地变量的名称。</summary>
      <returns>要引用的本地变量的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary>获取可执行文件的编译器的名称。</summary>
      <returns>编译器可执行文件的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary>获取要使用源文件的文件扩展名。</summary>
      <returns>要使用源文件的文件扩展名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary>获取默认文件扩展名用于中的当前语言的源代码文件。</summary>
      <returns>文件扩展名对应的当前语言的源文件的扩展名。 基实现始终返回 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary>获取语言功能标识符。</summary>
      <returns>指示语言的特殊功能的 <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary>获取当前类的代码类型声明。</summary>
      <returns>当前类的代码类型声明。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary>获取该类的当前成员。</summary>
      <returns>类的当前成员。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary>获取当前成员名称。</summary>
      <returns>当前成员的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary>获取当前的类名称。</summary>
      <returns>当前的类名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary>获取或设置要每个缩进级别的缩进的空格量。</summary>
      <returns>要为每个缩进级别的缩进的空格数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary>获取一个值，该值指示当前正在生成的对象是否一个类。</summary>
      <returns>true 如果当前对象是类;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary>获取一个值，该值指示当前正在生成的对象是否一个委托。</summary>
      <returns>true 如果当前对象是一个委托;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary>获取一个值，该值指示当前正在生成的对象是否为枚举。</summary>
      <returns>true 如果当前对象是枚举;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary>获取一个值，该值指示当前正在生成的对象是否为接口。</summary>
      <returns>true 如果当前对象是一个接口;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary>获取一个值，该值指示当前正在生成的对象值类型或结构。</summary>
      <returns>true 如果当前对象是值类型或结构，则否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary>获取表示的令牌 null。</summary>
      <returns>表示的令牌 null。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary>获取由代码生成器使用的选项。</summary>
      <returns>一个对象，指示要使用的代码生成器的选项。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary>获取要用于输出的文本编写器。</summary>
      <returns>要用于输出的文本编写器。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary>获取或设置一个值，该值指示是否插入成员之间的空行。</summary>
      <returns>true 如果应插入空白行;否则为 false。 默认情况下，此属性的值是 true。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary>获取或设置用于大括号的样式。</summary>
      <returns>包含要使用的大括号样式的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary>获取或设置一个值，该值指示是否要追加 else, ，catch, ，或 finally 块，包括方括号内，每个以前的结束行处 if 或 try 块。</summary>
      <returns>true 如果应追加其他;否则为 false。 此属性的默认值为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary>获取或设置用于缩进的字符串。</summary>
      <returns>包含用于缩进的字符的字符串。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary>获取或设置指定索引处的对象。</summary>
      <param name="index">与要检索的对象关联的名称。</param>
      <returns>具有指定名称关联的对象。 如果没有与指定名称关联的对象在集合中，存在 null。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary>获取或设置一个值，该值指示是否在成员集合中发生的顺序生成成员。</summary>
      <returns>true 若要在集合中的成员发生的顺序中生成成员否则为 false。 此属性的默认值为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary>获取或设置错误的源所在的列号。</summary>
      <returns>编译器遇到错误时所在的源文件的列号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary>获取或设置错误号。</summary>
      <returns>一个字符串形式的错误号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary>获取或设置错误消息的文本。</summary>
      <returns>错误消息的文本。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary>获取或设置包含导致错误的代码的源文件的文件名。</summary>
      <returns>包含导致错误的代码的源文件的文件名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary>获取或设置一个值，该值指示错误是否为警告。</summary>
      <returns>true 如果此错误是警告;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary>获取或设置错误的源所在的行号。</summary>
      <returns>编译器遇到错误时所在的源文件行号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary>获取一个值，该值指示集合是否包含错误。</summary>
      <returns>true 如果集合包含错误;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary>获取一个值，该值指示集合是否包含警告。</summary>
      <returns>true 如果集合包含警告产生;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.CodeDom.Compiler.CompilerError" />。</summary>
      <param name="index">要在集合中定位的项的从零开始的索引。</param>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 每个有效的索引处。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">由索引值指示 <paramref name="index" /> 参数是找不到索引的有效范围之外。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary>获取已配置的类型 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。</summary>
      <returns>一个只读的 <see cref="T:System.Type" /> 表示已配置的语言提供程序类型的实例。</returns>
      <exception cref="T:System.Configuration.ConfigurationException">在此计算机上未配置语言提供程序。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到类型，因为它是 null 或空字符串。- 或 -由于找不到该类型的名称 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 找不到配置文件中。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary>返回一个值，该值指示是否在计算机上配置语言提供程序实现。</summary>
      <returns>true 如果计算机上配置语言提供程序实现类型否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary>获取或设置要在调用编译器时使用的可选命令行参数。</summary>
      <returns>编译器用于任何其他命令行参数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary>获取或设置核心或标准程序集，如包含基本类型的名称 <see cref="T:System.Object" />, ，<see cref="T:System.String" />, ，或 <see cref="T:System.Int32" />。</summary>
      <returns>包含基本类型的核心程序集的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary>获取要包括在编译的程序集输出时的.NET Framework 资源文件。</summary>
      <returns>一个包含.NET Framework 资源，以生成的程序集中包括的文件路径的集合。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Evidence">
      <summary>指定表示要为已编译的程序集授予的安全策略权限的证据对象。</summary>
      <returns>一个对象，表示要为已编译的程序集授予的安全策略权限。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary>获取或设置一个值，该值指示是否生成可执行文件。</summary>
      <returns>true 如果应生成一个可执行文件;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary>获取或设置一个值，该值指示是否在内存中生成的输出。</summary>
      <returns>true 如果编译器应在内存中; 生成输出否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary>获取或设置一个值，该值指示是否在已编译可执行文件中包含调试信息。</summary>
      <returns>true 如果应生成调试信息;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary>在当前源中获取所引用的.NET Framework 资源文件。</summary>
      <returns>一个包含由源引用的.NET Framework 资源的文件路径的集合。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary>获取或设置的主类的名称。</summary>
      <returns>主类的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary>获取或设置输出程序集的名称。</summary>
      <returns>在输出程序集名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary>获取由当前的项目引用的程序集。</summary>
      <returns>一个包含由要编译的源引用的程序集名称的集合。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary>获取或设置包含临时文件的集合。</summary>
      <returns>一个包含临时文件的集合。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary>获取或设置一个值，该值指示是否将警告视为错误。</summary>
      <returns>true 如果应将警告视为错误;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary>获取或设置创建编译器进程时要使用的用户标记。</summary>
      <returns>要使用的用户标记。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary>获取或设置编译器中止编译的警告级别。</summary>
      <returns>编译器将中止编译警告级别。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary>获取或设置要链接到已编译的程序集中的 Win32 资源文件的文件名。</summary>
      <returns>将链接到已编译的程序集一个 Win32 资源文件。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary>获取或设置编译的程序集。</summary>
      <returns>
        <see cref="T:System.Reflection.Assembly" /> ，该值指示编译的程序集。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary>获取编译器错误和警告的集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> ，该值指示的错误和警告导致编译时，如果有的话。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Evidence">
      <summary>指示表示已编译的程序集的安全策略权限的证据对象。</summary>
      <returns>
        <see cref="T:System.Security.Policy.Evidence" /> 对象，表示已编译的程序集的安全策略权限。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary>获取或设置编译器的返回值。</summary>
      <returns>编译器的返回值。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary>获取编译器输出消息。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.StringCollection" /> ，其中包含输出消息。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary>获取或设置已编译的程序集的路径。</summary>
      <returns>该程序集的路径或 null 如果在内存中生成程序集。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary>获取或设置要使用的临时文件集合。</summary>
      <returns>一个 <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 用来管理和存储对在编译期间生成的中间文件的引用。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Tool">
      <summary>获取生成代码的工具的名称。</summary>
      <returns>对代码生成工具的名称。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.GeneratedCodeAttribute.Version">
      <summary>获取生成代码的工具的版本。</summary>
      <returns>生成的代码的工具版本。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Encoding">
      <summary>获取文本编写器使用的编码。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 指示文本编写器使用的编码。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.Indent">
      <summary>获取或设置要缩进的空格数。</summary>
      <returns>要缩进的空格数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.InnerWriter">
      <summary>获取 <see cref="T:System.IO.TextWriter" /> 使用。</summary>
      <returns>要使用的 <see cref="T:System.IO.TextWriter" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.IndentedTextWriter.NewLine">
      <summary>获取或设置要使用的新行字符。</summary>
      <returns>要使用的新行字符。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary>获取基文件名，不带文件扩展名的完整路径上的临时目录路径，用于生成临时文件名的集合。</summary>
      <returns>为基的文件名，不带文件扩展名，在临时目录路径，用于生成临时文件名的集合上的完整路径。</returns>
      <exception cref="T:System.Security.SecurityException">如果 <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> 属性未设置或设置为 null, ，和 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> 未授予所指示的临时目录 <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> 属性。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary>获取集合中的文件数。</summary>
      <returns>集合中的文件的数量。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary>获取或设置一个值，该值指示是否保留这些文件中，默认情况下，当 <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> 调用方法或释放集合。</summary>
      <returns>true 如果应保留这些文件;否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary>获取要存储在临时文件的临时目录。</summary>
      <returns>要存储在临时文件的临时目录。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
      <summary>获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 实例的限定容量。</summary>
      <returns>此集合的限定容量；如果未提供限制，则为 int.MaxValue。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
      <summary>获取 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项的数量。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 中包含的项的数量。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
      <summary>获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为完成添加。</summary>
      <returns>此集合是否已标记为完成添加。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
      <summary>获取此 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> 是否已标记为完成添加并且为空。</summary>
      <returns>此集合是否已标记为完成添加并且为空。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步。</summary>
      <returns>始终返回 false。</returns>
      <exception cref="T:System.ObjectDisposedException">已释放了 <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <returns>返回 null。</returns>
      <exception cref="T:System.NotSupportedException">不支持 SyncRoot 属性。</exception>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
      <summary>获取 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 是否为空。</summary>
      <returns>如果 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> 为空，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否与 SyncRoot 同步的值。</summary>
      <returns>如果对 <see cref="T:System.Collections.ICollection" /> 的访问与 SyncRoot 同步，则为 true；否则为 false。 对于 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 不支持此属性。</summary>
      <returns>返回 null（在 Visual Basic 中为 Nothing）。</returns>
      <exception cref="T:System.NotSupportedException">不支持 SyncRoot 属性。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary>获取中实际包含的节点数 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>中实际包含的节点数 <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary>获取的第一个节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>第一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary>获取的最后一个节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>最后一个 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。  在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。  在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary>获取 <see cref="T:System.Collections.Generic.LinkedList`1" /> ， <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 属于。</summary>
      <returns>对引用 <see cref="T:System.Collections.Generic.LinkedList`1" /> ， <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 属于，或 null 如果 <see cref="T:System.Collections.Generic.LinkedListNode`1" /> 未链接。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary>获取下一个节点中 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>中的下一个节点的引用 <see cref="T:System.Collections.Generic.LinkedList`1" />, ，或 null 如果当前节点是最后一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.Last" />) 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary>获取上一个节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。</summary>
      <returns>中的上一个节点的引用 <see cref="T:System.Collections.Generic.LinkedList`1" />, ，或 null ，如果当前节点是第一个元素 (<see cref="P:System.Collections.Generic.LinkedList`1.First" />) 的 <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary>获取包含在节点中的值。</summary>
      <returns>在节点中包含的值。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Queue`1" /> 中位于该枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。  在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.Generic.Queue`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary>获取用于对 <see cref="T:System.Collections.Generic.IComparer`1" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</summary>
      <returns>用于对 <see cref="T:System.Collections.Generic.IComparer`1" /> 的元素进行排序的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary>获取作为枚举数当前位置的元素 <see cref="T:System.Collections.DictionaryEntry" /> 结构。</summary>
      <returns>位于当前位置的字典的集合中的元素作为 <see cref="T:System.Collections.DictionaryEntry" /> 结构。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary>获取枚举数当前位置的元素键。</summary>
      <returns>集合中位于枚举数当前位置的元素的键。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary>获取枚举数当前位置的元素的值。</summary>
      <returns>集合中位于枚举数当前位置的元素的值。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="key">要获取或设置的值的键。</param>
      <returns>与指定的键相关联的值。 如果指定键未找到，则 Get 操作引发 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 Set 操作创建一个带指定键的新元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性和 <paramref name="key" /> 集合中不存在。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary>获得一个包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。 在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合</summary>
      <returns>包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的键的集合</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>获取包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合</summary>
      <returns>包含在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要获取的元素的键。</param>
      <returns>如果 null 不在字典中或 <paramref name="key" /> 的类型属于不能分配给 <paramref name="key" /> 的键类型 <paramref name="TKey" />，则为具有指定键的元素或 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">正在分配一个值，并 <paramref name="key" /> 是不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。- 或 -正在分配一个值，并 <paramref name="value" /> 是不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 中位于该枚举数当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary>获得一个包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />，包含 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary>获取或设置 <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedList`2" /> 可包含的元素数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> 设置为一个值，该值小于 <see cref="P:System.Collections.Generic.SortedList`2.Count" />。</exception>
      <exception cref="T:System.OutOfMemoryException">系统上没有足够的可用内存。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary>获取该排序列表的 <see cref="T:System.Collections.Generic.IComparer`1" />。</summary>
      <returns>当前 <see cref="T:System.IComparable`1" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="key">要获取或设置其值的键。</param>
      <returns>与指定的键相关联的值。 如果找不到指定的键，则 get 操作会引发一个 <see cref="T:System.Collections.Generic.KeyNotFoundException" />，而 set 操作会创建一个使用指定键的新元素。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">已检索该属性和 <paramref name="key" /> 集合中不存在。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary>获取一个按排序顺序包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的键。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Generic.ICollection`1" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.Generic.ICollection`1" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>获取包含 <see cref="T:System.Collections.Generic.ICollection`1" /> 的键的 <see cref="T:System.Collections.Generic.IDictionary`2" />。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 的键。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>获取一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.ICollection`1" />，它包含 <see cref="T:System.Collections.Generic.IDictionary`2" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary>获取包含只读字典中的键的可枚举集合。</summary>
      <returns>包含只读字典中的键的可枚举集合。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary>获取包含只读字典中的值的可枚举集合。</summary>
      <returns>包含只读字典中的值的可枚举集合。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。  在 <see cref="T:System.Collections.Generic.SortedList`2" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要获取或设置的元素的键。</param>
      <returns>如果 null 不在字典中或 <paramref name="key" /> 的类型属于不能分配给 <paramref name="key" /> 的键类型 <paramref name="TKey" />，则为具有指定键的元素或 <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">正在分配一个值，并 <paramref name="key" /> 是不能分配给键的类型的类型 <paramref name="TKey" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。- 或 -正在分配一个值，并 <paramref name="value" /> 是不能分配给值类型的类型 <paramref name="TValue" /> 的 <see cref="T:System.Collections.Generic.SortedList`2" />。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary>获得一个包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Generic.IList`1" />，包含 <see cref="T:System.Collections.Generic.SortedList`2" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary>获取用于为 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值排序的 <see cref="T:System.Collections.Generic.IComparer`1" /> 对象。</summary>
      <returns>用于为 <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的值排序的比较器。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary>获取中的元素数 <see cref="T:System.Collections.Generic.SortedSet`1" />。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 中的元素的数量。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary>获取最大值 <see cref="T:System.Collections.Generic.SortedSet`1" />, ，如比较器的定义。</summary>
      <returns>集内的最大值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary>获取最小值 <see cref="T:System.Collections.Generic.SortedSet`1" />, ，如比较器的定义。</summary>
      <returns>集内的最小值。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Collections.ICollection" /> 是只读的。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.ICollection" /> 的访问是否同步（线程安全）。</summary>
      <returns>true 如果访问 <see cref="T:System.Collections.ICollection" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。 在 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary>获取 <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>
        <see cref="T:System.Collections.Generic.Stack`1" /> 中位于该枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>获取枚举数当前位置的元素。</summary>
      <returns>集合中位于枚举数当前位置的元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。  在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.ICollection" /> 的访问的对象。  在 <see cref="T:System.Collections.Generic.Stack`1" /> 的默认实现中，此属性始终返回当前实例。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Data">
      <summary>获取的值 <see cref="T:System.Collections.Specialized.BitVector32" /> 为整数。</summary>
      <returns>值 <see cref="T:System.Collections.Specialized.BitVector32" /> 为整数。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Collections.Specialized.BitVector32.Section)">
      <summary>获取或设置存储在指定的值 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</summary>
      <param name="section">一个 <see cref="T:System.Collections.Specialized.BitVector32.Section" /> ，其中包含要获取或设置的值。</param>
      <returns>存储在指定的值 <see cref="T:System.Collections.Specialized.BitVector32.Section" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Item(System.Int32)">
      <summary>获取或设置由指定屏蔽指示的位标志的状态。</summary>
      <param name="bit">指示要获取或设置的位掩码。</param>
      <returns>true 如果指定的位标志为 on (1);否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Section.Mask">
      <summary>获取一个屏蔽，它中隔离此节 <see cref="T:System.Collections.Specialized.BitVector32" />。</summary>
      <returns>一个屏蔽，它中隔离此节 <see cref="T:System.Collections.Specialized.BitVector32" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.BitVector32.Section.Offset">
      <summary>从开始处获取本部分的偏移量 <see cref="T:System.Collections.Specialized.BitVector32" />。</summary>
      <returns>本部分从开始处的偏移量 <see cref="T:System.Collections.Specialized.BitVector32" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的键/值对的数目。检索此属性的值的运算复杂度为 O(1)。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否具有固定大小。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是否为只读。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.IsSynchronized">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 是同步 （线程安全）。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Item(System.Object)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="key">要获取或设置其值的键。</param>
      <returns>与指定的键相关联的值。 如果未找到指定的键，尝试让其返回 null, ，并尝试将其设置创建新的条目使用指定的键。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 包含中的键 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 包含中的键 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Specialized.HybridDictionary.Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.HybridDictionary" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.ICollection.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否具有固定大小。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是否为只读。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.IsSynchronized">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Collections.Specialized.ListDictionary" /> 是同步 （线程安全）。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Item(System.Object)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="key">要获取或设置其值的键。</param>
      <returns>与指定的键相关联的值。 如果未找到指定的键，尝试让其返回 null, ，并尝试将其设置创建新的条目使用指定的键。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 包含中的键 <see cref="T:System.Collections.Specialized.ListDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 包含中的键 <see cref="T:System.Collections.Specialized.ListDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.ListDictionary" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Specialized.ListDictionary.Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.Specialized.ListDictionary" /> 中的值。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Count">
      <summary>获取包含在 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的键/值对的数目。</summary>
      <returns>包含在 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的键/值对的数目。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly">
      <summary>获取或设置一个值，通过该值指示 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例是否为只读的。</summary>
      <returns>如果 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.Keys">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 实例，该实例包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</summary>
      <returns>
        <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 实例，该实例包含 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 实例中的所有键。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Count">
      <summary>获取中的键数 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />。</summary>
      <returns>中的键数 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Item(System.Int32)">
      <summary>获取集合的指定索引处的项。</summary>
      <param name="index">要在集合中定位的项的从零开始的索引。</param>
      <returns>
        <see cref="T:System.String" /> 键集合的指定索引处的项。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" />；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问是否同步（线程安全）。</summary>
      <returns>如果对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问是同步的（线程安全），则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问。</summary>
      <returns>一个对象，该对象可用于同步对 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase" /> 对象的访问。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.AllKeys">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，包含 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中的所有键。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中指定索引处的项。</summary>
      <param name="index">要在集合中定位的项的从零开始的索引。</param>
      <returns>
        <see cref="T:System.String" /> 包含集合中指定索引处的值的列表（此列表以逗号分隔）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 超出了集合的有效索引范围。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NameValueCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 中具有指定键的项。</summary>
      <param name="name">要定位的项的 <see cref="T:System.String" /> 键。 键可以是 null。</param>
      <returns>如果找到了，则为一个 <see cref="T:System.String" />，它包含与指定键关联的值的列表（用逗号分隔）；否则为 null。</returns>
      <exception cref="T:System.NotSupportedException">集合是只读的并且该操作尝试修改该集合。</exception>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action">
      <summary>获取引起该事件的操作。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction" /> 值，描述引起该事件的操作。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems">
      <summary>获取此更改中涉及的新项的列表。</summary>
      <returns>此更改中涉及的新项的列表。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex">
      <summary>获取发生更改处的索引。</summary>
      <returns>发生更改处的从零开始的索引。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems">
      <summary>获取受 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />、Remove 或 Move 操作影响的各项的列表。</summary>
      <returns>受 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace" />、Remove 或 Move 操作影响的各项的列表。</returns>
    </member>
    <member name="P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex">
      <summary>获取在其处发生 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />、删除或替换操作的索引。</summary>
      <returns>在其处发生 <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move" />、删除或替换操作的从零开始的索引。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Count">
      <summary>获取的键/值对中包含 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <returns>中包含的键/值对的数目 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.IsReadOnly">
      <summary>获取指示 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是否为只读的值。</summary>
      <returns>true 如果 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Item(System.Int32)">
      <summary>获取或设置指定索引处的值。</summary>
      <param name="index">要获取或设置的值的从零开始索引。</param>
      <returns>在指定索引处的项的值。</returns>
      <exception cref="T:System.NotSupportedException">此属性设置与 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.OrderedDictionary.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Item(System.Object)">
      <summary>获取或设置具有指定键的值。</summary>
      <param name="key">要获取或设置的值的键。</param>
      <returns>与指定的键相关联的值。 如果未找到指定的键，尝试让其返回 null, ，并尝试设置它创建一个使用指定的键的新元素。</returns>
      <exception cref="T:System.NotSupportedException">此属性设置与 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合是只读的。</exception>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的键 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的键 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否访问 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 对象已同步 （线程安全）。</summary>
      <returns>此方法始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#ICollection#SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 对象的访问。</summary>
      <returns>一个对象，该对象可用于同步对 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 对象的访问。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.Specialized.OrderedDictionary" />；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.OrderedDictionary.Values">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的值 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 对象，其中包含中的值 <see cref="T:System.Collections.Specialized.OrderedDictionary" /> 集合。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Count">
      <summary>获取字符串中包含的数量 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
      <returns>字符串中包含的数量 <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.Specialized.StringCollection" /> 是否为只读。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Specialized.StringCollection" /> 的访问（线程安全）。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的项的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.Specialized.StringCollection" /> 的访问的对象。</summary>
      <returns>可用于同步对 <see cref="T:System.Collections.Specialized.StringCollection" /> 的访问的对象。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象具有固定的大小。</summary>
      <returns>true 如果 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象具有固定大小; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象是只读的。</summary>
      <returns>true 如果 <see cref="T:System.Collections.Specialized.StringCollection" /> 对象是只读的; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.Specialized.StringCollection.Count" />。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Count">
      <summary>获取中的键/值对的数目 <see cref="T:System.Collections.Specialized.StringDictionary" />。</summary>
      <returns>在对键/值数 <see cref="T:System.Collections.Specialized.StringDictionary" />。检索此属性的值的运算复杂度为 O(1)。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.Specialized.StringDictionary" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.Specialized.StringDictionary" />；否则为 false。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Item(System.String)">
      <summary>获取或设置与指定的键关联的值。</summary>
      <param name="key">要获取或设置其值的键。</param>
      <returns>与指定的键相关联的值。 如果找不到指定的键，则 Get 返回 null, ，并设置具有指定键创建一个新条目。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 为 null。</exception>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Keys">
      <summary>获取集合中的键 <see cref="T:System.Collections.Specialized.StringDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 提供中的键 <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Collections.Specialized.StringDictionary" /> 的访问的对象。</summary>
      <returns>一个可用于同步对 <see cref="T:System.Object" /> 的访问的 <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringDictionary.Values">
      <summary>获取集合中的值 <see cref="T:System.Collections.Specialized.StringDictionary" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 提供数值 <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Specialized.StringEnumerator.Current">
      <summary>获取集合中的当前元素。</summary>
      <returns>集合中的当前元素。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary>获取或设置要添加到绑定列表的对象。</summary>
      <returns>
        <see cref="T:System.Object" /> 要作为新项添加到关联的集合。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary>获取此值的对象 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</summary>
      <returns>此值的对象 <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled">
      <summary>获取一个值，该值指示是否已取消一个异步操作。</summary>
      <returns>true 如果在后台操作已取消;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.Error">
      <summary>获取一个值，该值指示异步操作期间发生的错误。</summary>
      <returns>
        <see cref="T:System.Exception" /> 实例，如果异步操作; 期间发生了错误否则为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncCompletedEventArgs.UserState">
      <summary>获取异步任务的唯一标识符。</summary>
      <returns>唯一标识异步任务; 对象引用否则为 null 如果不设置任何值。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.SynchronizationContext">
      <summary>获取传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</summary>
      <returns>传递给构造函数的 <see cref="T:System.Threading.SynchronizationContext" /> 对象。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperation.UserSuppliedState">
      <summary>获取或设置用于唯一标识异步操作的对象。</summary>
      <returns>传递给异步方法调用的状态对象。</returns>
    </member>
    <member name="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext">
      <summary>获取或设置用于异步操作的同步上下文。</summary>
      <returns>异步操作的同步上下文。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary>获取属性集合。</summary>
      <returns>特性集合。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary>获取属性的数目。</summary>
      <returns>属性数目。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary>获取具有指定的索引号的特性。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <returns>
        <see cref="T:System.Attribute" /> 具有指定的索引号。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary>获取具有指定类型的属性。</summary>
      <param name="attributeType">
        <see cref="T:System.Type" /> 的 <see cref="T:System.Attribute" /> 若要从集合中获取。</param>
      <returns>
        <see cref="T:System.Attribute" /> 使用指定的类型; 如果该属性不存在，该属性类型的默认值。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否已同步（线程安全）。</summary>
      <returns>如果对集合的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary>获取将为其检索特性的属性的名称。</summary>
      <returns>将为其检索特性的属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary>获取程序集限定的类型名称传递到构造函数。</summary>
      <returns>构造函数中指定的类型的程序集限定的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.CancellationPending">
      <summary>获取一个值，该值指示应用程序是否已请求取消后台操作。</summary>
      <returns>true 如果应用程序已请求取消的后台操作;，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.IsBusy">
      <summary>获取一个值，该值指示是否 <see cref="T:System.ComponentModel.BackgroundWorker" /> 正在运行的异步操作。</summary>
      <returns>true, 如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 正在运行的异步操作; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress">
      <summary>获取或设置一个值，该值指示是否 <see cref="T:System.ComponentModel.BackgroundWorker" /> 可以报告进度更新。</summary>
      <returns>true 如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持进度更新; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation">
      <summary>获取或设置一个值，该值指示是否 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持异步取消操作。</summary>
      <returns>true 如果 <see cref="T:System.ComponentModel.BackgroundWorker" /> 支持取消操作; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary>获取一个值，该值指示属性通常用于绑定。</summary>
      <returns>true 如果该属性通常用于绑定;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary>获取一个值，该值指示的方向或此属性的数据绑定的方向。</summary>
      <returns>此属性的数据绑定的方向。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary>获取或设置一个值，该值指示是否可以编辑列表中的项。</summary>
      <returns>true 如果可以编辑列表项，则否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary>获取或设置一个值，该值指示是否可以将项添加到列表使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法。</summary>
      <returns>true 如果可以将项添加到列表中用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法; 否则为 false。 默认值取决于列表中包含的基础类型。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary>获取或设置一个值，该值指示是否可以从集合中移除项。</summary>
      <returns>true 如果可以使用从列表中移除项 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary>获取一个值，该值指示是否对列表进行排序。</summary>
      <returns>true 如果对列表进行排序;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary>获取或设置一个值，该值指示是否添加或删除内的项列表将引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件。</summary>
      <returns>true 如果添加或删除项时引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary>获取对列表进行排序的方向。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。 默认值为 <see cref="F:System.ComponentModel.ListSortDirection.Ascending" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary>获取用于对列表进行排序，如果在派生类中; 实现了排序的属性说明符否则，返回 null。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 用于对列表进行排序。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary>获取一个值，该值指示是否 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 启用了事件。</summary>
      <returns>true 如果 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 事件是受支持; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary>获取一个值，该值指示列表是否支持搜索。</summary>
      <returns>true 如果列表支持搜索，则，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary>获取一个值，该值指示列表是否支持排序。</summary>
      <returns>true 如果列表支持排序，则，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary>获取一个值，该值指示是否可以编辑列表中的项。</summary>
      <returns>true 如果可以编辑列表项，则否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary>获取一个值，该值指示是否可以将新项添加到列表使用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法。</summary>
      <returns>true 如果可以将项添加到列表中用 <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> 方法; 否则为 false。 默认值取决于列表中包含的基础类型。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary>获取一个值，该值指示是否可以从列表中移除项。</summary>
      <returns>true 如果可以使用从列表中移除项 <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> 方法; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />。</summary>
      <returns>true 如果 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> 已调用和 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> 时尚未被调用; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 正在用于排序。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />。</summary>
      <returns>true 如果 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件引发列表发生变化时或者当某项更改; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />。</summary>
      <returns>true 如果列表支持搜索，使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />。</summary>
      <returns>true 如果列表支持排序，则，否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary>获取一个值，该值指示项属性值更改是否会引发 <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> 类型的事件 <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" />。 此成员不能在派生类中重写。</summary>
      <returns>true 如果该列表类型实现 <see cref="T:System.ComponentModel.INotifyPropertyChanged" />, ，否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>获取一个值，该值指示对象是否可浏览。</summary>
      <returns>true 如果对象是可浏览;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.CancelEventArgs.Cancel">
      <summary>获取或设置一个值，该值指示是否应取消事件。</summary>
      <returns>true 如果应取消事件;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示的操作类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 操作类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示外观类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 外观类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示异步类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 异步类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示行为类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 的行为类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>获取的属性或此特性应用于事件的类别的名称。</summary>
      <returns>此特性应用于事件的属性类别的的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示数据类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 数据类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示默认类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 为默认类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示设计类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 设计类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示拖放类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 拖放类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示焦点类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 焦点类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示格式类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 格式类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示键类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 键类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示布局类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 布局类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示鼠标类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 鼠标类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>获取 <see cref="T:System.ComponentModel.CategoryAttribute" /> 表示 WindowStyle 类别。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.CategoryAttribute" /> 窗口样式类别。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary>获取指定集合的更改方式的操作。</summary>
      <returns>
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary>获取与更改集合的实例。</summary>
      <returns>
        <see cref="T:System.Object" /> ，表示进行更改后，该集合的实例或 null 如果刷新集合。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary>获取向其组件的数据成员属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定。</summary>
      <returns>组件的数据成员属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary>获取向其组件的数据源属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定。</summary>
      <returns>组件的数据源属性的名称 <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> 绑定。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.CanRaiseEvents">
      <summary>获取一个值，该值指示组件是否可以引发一个事件。</summary>
      <returns>true 如果组件可以引发事件;否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Container">
      <summary>获取 <see cref="T:System.ComponentModel.IContainer" /> ，其中包含 <see cref="T:System.ComponentModel.Component" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> ，其中包含 <see cref="T:System.ComponentModel.Component" />, (如果有） 或 null 如果 <see cref="T:System.ComponentModel.Component" /> 不封装在 <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.DesignMode">
      <summary>获取一个值，该值指示是否 <see cref="T:System.ComponentModel.Component" /> 当前处于设计模式。</summary>
      <returns>true 如果 <see cref="T:System.ComponentModel.Component" /> 处于设计模式; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Events">
      <summary>获取的事件处理程序附加到此列表 <see cref="T:System.ComponentModel.Component" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventHandlerList" /> ，可将委托提供有关此组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Site">
      <summary>获取或设置 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.ComponentModel.Component" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 与关联 <see cref="T:System.ComponentModel.Component" />, ，或 null 如果 <see cref="T:System.ComponentModel.Component" /> 不封装在 <see cref="T:System.ComponentModel.IContainer" />, 、 <see cref="T:System.ComponentModel.Component" /> 没有 <see cref="T:System.ComponentModel.ISite" /> 与之关联，或 <see cref="T:System.ComponentModel.Component" /> 也会从其 <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.ComponentModel.Component" /> 中指定的集合索引处的集合。</summary>
      <param name="index">集合索引 <see cref="T:System.ComponentModel.Component" /> 来获取。</param>
      <returns>位于指定索引处的 <see cref="T:System.ComponentModel.IComponent" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">如果指定的索引不在集合的索引范围内。</exception>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.String)">
      <summary>获取与指定的名称匹配集合中的任何组件。</summary>
      <param name="name">名称 <see cref="T:System.ComponentModel.IComponent" /> 来获取。</param>
      <returns>具有名称由指定的名称相匹配的组件 <paramref name="name" /> 参数，或 null 如果集合中找不到命名的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary>获取所有组件中 <see cref="T:System.ComponentModel.Container" />。</summary>
      <returns>一个包含中的组件集合 <see cref="T:System.ComponentModel.Container" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataErrorsChangedEventArgs.PropertyName">
      <summary>获取出现错误的属性的名称。</summary>
      <returns>出现错误的属性的名称。null；如果错误为对象级别，则为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary>获取一个值，该值指示是否应将对象视为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 在设计时对象。</summary>
      <returns>true 如果应将该对象视为适合绑定到 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary>获取一个值，该值指示属性是否表示基础数据中的标识字段。</summary>
      <returns>true 如果该属性表示基础数据; 中的标识字段否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary>获取一个值，该值指示属性是否表示可以在基础数据存储区中为空的字段。</summary>
      <returns>true 如果该属性表示基础数据存储区; 可以为 null 的字段否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary>获取属性的长度以字节为单位。</summary>
      <returns>个字节，或者为-1 中的属性的长度不设置。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary>获取一个值，该值指示属性是否在基础数据中的主键。</summary>
      <returns>true 如果该属性是中的 primary key 的数据存储区;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary>获取一个值，该值指示是否该方法的 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 应用于是由特定的方法类型的数据对象公开的默认数据方法。</summary>
      <returns>true 如果该方法是通过某种方法; 该对象公开的默认方法否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary>获取 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 值，该值指示该方法所执行的数据操作的类型。</summary>
      <returns>其中一个 <see cref="T:System.ComponentModel.DataObjectMethodType" /> 标识数据执行的操作的方法的类型的值 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 应用。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary>获取向其组件的默认绑定属性的名称 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 绑定。</summary>
      <returns>组件的默认绑定属性的名称 <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> 绑定。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary>获取此属性绑定到的组件的默认事件的名称。</summary>
      <returns>此属性绑定到该组件的默认事件的名称。 默认值为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary>获取此属性绑定到的组件的默认属性的名称。</summary>
      <returns>此属性绑定到组件的默认属性的名称。 默认值为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultValueAttribute.Value">
      <summary>获取此属性绑定到的属性的默认值。</summary>
      <returns>
        <see cref="T:System.Object" /> ，表示此属性绑定到的属性的默认值。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>获取存储在此属性的说明。</summary>
      <returns>此属性中存储的说明。</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>获取或设置作为说明存储的字符串。</summary>
      <returns>描述作为存储的字符串。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary>获取正在激活的文档。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> ，表示正在激活的文档。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary>获取正在失去激活的文档。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 用于表示失活文档。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary>获取此标识的菜单命令的菜单组的 GUID <see cref="T:System.ComponentModel.Design.CommandID" /> 属于。</summary>
      <returns>此命令的命令组的 GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary>获取命令数字 id。</summary>
      <returns>命令 ID 号。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary>获取已修改的组件。</summary>
      <returns>
        <see cref="T:System.Object" /> ，表示已修改的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary>获取已更改的成员。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> 指示已更改的成员。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary>获取已更改成员的新值。</summary>
      <returns>已更改成员的新值。 此属性可以为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary>获取已更改成员的旧值。</summary>
      <returns>已更改成员的旧值。 此属性可以为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary>获取将要更改的组件或组件，它将被更改的成员的父容器。</summary>
      <returns>将要更改成员的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary>获取将要更改的成员。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.MemberDescriptor" /> ，该值指示是将被更改，如果已知的该成员或 null 否则为。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary>获取与事件关联的组件。</summary>
      <returns>与事件相关联的组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary>获取正在重命名的组件。</summary>
      <returns>正在重命名该组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary>重命名事件之后获取组件的名称。</summary>
      <returns>重命名事件后组件的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary>获取重命名事件之前的组件的名称。</summary>
      <returns>以前的组件名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary>获取集合中的设计器数。</summary>
      <returns>集合中的设计器的数量。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary>获取指定索引处的设计器。</summary>
      <param name="index">要返回的设计器的索引。</param>
      <returns>设计器中的指定索引处。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Collections.ICollection" /> 的访问（线程安全）。</summary>
      <returns>如果对 true 的访问是同步的（线程安全），则为 <see cref="T:System.Collections.ICollection" />；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary>获取文档的宿主。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesignerHost" /> 的文档。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary>获取子选项集的数目此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含。</summary>
      <returns>数量的子选项集合这 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 包含。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary>获取给定索引处的子集合。</summary>
      <param name="index">要获取的子集合的从零开始的索引。</param>
      <returns>指定索引处的子集合。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary>获取具有给定名称的子集合。</summary>
      <param name="name">子集合的名称。</param>
      <returns>具有指定的名称的子集合 <paramref name="name" /> 参数，或 null 如果未找到的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary>获取此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</summary>
      <returns>此 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary>获取父集合对象。</summary>
      <returns>父集合对象，或 null 如果没有父对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary>获取此提供的属性的集合 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, ，以及所有子域。</summary>
      <returns>此属性的集合提供 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />, ，以及所有子域。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对集合的访问，因此，线程安全。</summary>
      <returns>true 如果同步对集合的访问权限;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>true 如果集合具有固定的大小，则否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary>获取此服务的选项集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> 填入可用设计器的选项。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary>获取一个值，该值指示是否已取消事务。</summary>
      <returns>如果事务已取消，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary>获取一个值，该值指示是否已提交事务。</summary>
      <returns>如果事务已提交，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary>获取事务的说明。</summary>
      <returns>事务的说明。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary>获取一个值，该值指示是否要关闭的最后一个事务。</summary>
      <returns>true, 如果这是最后一个事务以关闭;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary>该值指示是否在设计器调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对该事务。</summary>
      <returns>true 如果设计器调用 <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> 对该事务中; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary>获取或设置谓词的菜单项的说明。</summary>
      <returns>描述菜单项的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary>在菜单上获取谓词命令的文本说明。</summary>
      <returns>对谓词命令的说明。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</summary>
      <param name="index">用于获取或设置索引 <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns>一个 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 在集合中每个有效索引。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary>获取许可证使用情况模式。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.LicenseUsageMode" /> ，该值指示上下文的授权模式。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary>获取此属性提供的帮助关键字。</summary>
      <returns>此属性提供的帮助关键字。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary>获取此设计器设计的基本组件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> ，该值指示此设计器设计的基础组件。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary>获取设计器支持设计时谓词的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> 包含设计器中，所支持的谓词或 null 如果该组件没有谓词。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary>获取当前活动文档的根设计器。</summary>
      <returns>当前处于活动状态的文档，或 null 如果没有活动文档。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary>获取当前在开发环境中处于活动状态的设计文档的根设计器的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.Design.DesignerCollection" /> 包含已创建且尚未释放的根设计器。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary>获取此设计器宿主的容器。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> 为此主机。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary>获取一个值，该值指示设计器宿主当前是否在事务中。</summary>
      <returns>true 如果事务正在进行中;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary>获取一个值，该值指示设计器宿主是否正在加载文档。</summary>
      <returns>true 如果设计器宿主是否正在加载文档;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary>获取用作当前设计的根组件的基类的实例。</summary>
      <returns>根组件类的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary>获取所设计的类的完全限定的名称。</summary>
      <returns>基本组件类的完全限定的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary>获取当前事务的说明。</summary>
      <returns>在当前事务的说明。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary>获取一个值，该值指示设计器宿主是否正在关闭事务。</summary>
      <returns>true 如果设计器是否关闭个事务。否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary>获取当前可用的设计器谓词的集合。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> ，其中包含当前可用的设计器谓词。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary>获取此设计器可为其显示提供支持的技术集。</summary>
      <returns>数组支持 <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary>获取当前是主要的所选的对象的对象。</summary>
      <returns>当前对象的主选定的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary>获取所选对象的计数。</summary>
      <returns>所选对象的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary>获取子设计器的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />, ，其中包含的集合 <see cref="T:System.ComponentModel.Design.IDesigner" /> 子对象的当前设计器。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary>获取父设计器。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.IDesigner" /> 表示父设计器中，或 null 如果没有父对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary>获取或设置一个值，该值指示是否选中此菜单项。</summary>
      <returns>true 如果选中该项，则否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary>获取 <see cref="T:System.ComponentModel.Design.CommandID" /> 与此菜单命令相关联。</summary>
      <returns>
        <see cref="T:System.ComponentModel.Design.CommandID" /> 与菜单命令相关联。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary>获取一个值，该值指示此菜单项是否可用。</summary>
      <returns>true 如果启用项;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary>获取此菜单项的 OLE 命令状态代码。</summary>
      <returns>包含反映此菜单项的状态的状态标志的组合的整数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary>获取与相关联的公共属性 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> 包含的公共属性的 <see cref="T:System.ComponentModel.Design.MenuCommand" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary>获取或设置一个值，该值指示是否支持此菜单项。</summary>
      <returns>true 如果支持此项，这是默认设置;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary>获取或设置一个值，该值指示此菜单项是否可见。</summary>
      <returns>true 如果该项是可见的则否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary>获取当前对象在堆栈上。</summary>
      <returns>在堆栈上的当前对象或 null 如果不会推送任何对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary>获取位于指定级别的堆栈上的对象。</summary>
      <param name="level">要检索在堆栈上的对象的级别。 级别 0 是堆栈的顶部，级别 1 表示下一步，向下，依次类推。 此级别必须是大于或等于 0。 如果级别高于在堆栈上的级别数，它将返回 null。</param>
      <returns>在指定级别的堆栈上的对象或 null 如果不存在的对象在该级别。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="level" /> 小于 0。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary>继承自或实现指定的类型的堆栈上获取的第一个对象。</summary>
      <param name="type">要从上下文堆栈中检索的类型。</param>
      <returns>继承自或实现指定的类型的堆栈上的第一个对象或 null 如果堆栈上的没有任何对象实现的类型。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary>获取序列化提供程序的类型名称。</summary>
      <returns>包含提供程序的名称的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary>获取一个值，该值指示加载程序是否正在加载文档。</summary>
      <returns>true 如果加载程序当前是否正在加载文档;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>获取序列化程序的基类型的完全限定的类型名称。</summary>
      <returns>序列化程序的基类型的完全限定的类型名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>获取序列化程序的完全限定的类型名称。</summary>
      <returns>序列化程序完全限定的类型名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>指示此属性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary>获取或设置一个值，该值指示是否可以重新加载错误。</summary>
      <returns>true 如果设计器加载程序可以检测到错误后，重新加载设计文档否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary>获取或设置一个值，该值指示是否应将错误忽略时 <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> 调用。</summary>
      <returns>true 如果重新加载; 时，设计器加载程序将忽略错误否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary>获取基于堆栈的、用户定义的存储区域，该区域对于序列化程序之间的通信十分有用。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> 存储数据。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary>指示可通过可用序列化程序可序列化的自定义属性。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 包含要进行序列化的属性。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary>获取可用于重新构造此实例说明符所表示的对象的实例的参数的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 的可用来创建对象的参数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary>获取一个值，该值指示是否此内容 <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 完全标识该实例。</summary>
      <returns>true 如果完全描述该实例;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary>获取描述此说明符程序与该实例的成员信息。</summary>
      <returns>一个 <see cref="T:System.Reflection.MemberInfo" /> 描述此对象与之关联的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary>获取一个值，该值指示此关系是否等于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系。</summary>
      <returns>true 如果这种关系是等于 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 关系; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary>获取相关的成员。</summary>
      <returns>在传递到该成员 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary>获取拥有的对象。</summary>
      <returns>在传递到所属对象 <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary>建立源和目标对象之间的关系。</summary>
      <param name="source">源关系。 这是关系赋值的左侧。</param>
      <returns>与相关联的当前关系 <paramref name="source" />, ，或 <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> 如果没有任何关系。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> 为空，或者服务不支持关系。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary>建立源和目标对象之间的关系。</summary>
      <param name="sourceOwner">源关系的所有者。</param>
      <param name="sourceMember">源关系的成员。</param>
      <returns>一个 <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 封装源和目标对象之间的关系的结构或 null 如果没有任何关系。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceOwner" /> 或 <paramref name="sourceMember" /> 为空，或者服务不支持关系。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary>获取要解析的对象的名称。</summary>
      <returns>要解析的对象的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary>获取或设置与名称匹配的对象。</summary>
      <returns>对象，该对象具有关联的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary>获取一个值，该值指示根序列化程序是否支持重新加载设计文档而无需首先释放设计器宿主。</summary>
      <returns>true 如果根序列化程序支持重新加载;，否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>获取序列化程序的基类型的完全限定的类型名称。</summary>
      <returns>序列化程序的基类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary>获取序列化程序的完全限定的类型名称。</summary>
      <returns>序列化程序类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary>获取此特性类型的唯一 ID。</summary>
      <returns>包含此特性类型的唯一 ID 的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary>获取序列化或反序列化期间发生的错误的集合。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> ，它包含序列化或反序列化过程中发生的错误。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary>获取默认服务直接通过实现 <see cref="T:System.ComponentModel.Design.ServiceContainer" />。</summary>
      <returns>默认服务。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>获取此设计器的基类型的名称。</summary>
      <returns>此设计器的基类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>获取与此设计器的属性关联的设计器类型的名称。</summary>
      <returns>与此设计器的属性关联的设计器类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>获取此特性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.Category">
      <summary>获取类别的名称。</summary>
      <returns>类别的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.TypeId">
      <summary>获取此特性的唯一标识符。</summary>
      <returns>
        <see cref="T:System.Object" /> 该属性的唯一标识符。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visibility">
      <summary>获取一个值，该值时，应使用一个序列化程序的基本序列化模式确定是否以及如何保持的属性值。</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值之一。 默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly">
      <summary>获取一个值，该值指示是否可以仅在设计时设置一个属性。</summary>
      <returns>true 如果某属性可以设置只能在设计时;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary>获取或设置是否应在设计时显示该组件。</summary>
      <returns>true 如果该组件应显示在设计时或 false 如果不应。</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayName">
      <summary>获取属性、 事件或不将此属性中存储的任何参数的 public void 方法的显示名称。</summary>
      <returns>显示名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayNameValue">
      <summary>获取或设置显示名称。</summary>
      <returns>显示名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Argument">
      <summary>获取一个值，表示异步操作的参数。</summary>
      <returns>
        <see cref="T:System.Object" /> 表示异步操作的参数。</returns>
    </member>
    <member name="P:System.ComponentModel.DoWorkEventArgs.Result">
      <summary>获取或设置一个值，表示异步操作的结果。</summary>
      <returns>
        <see cref="T:System.Object" /> 表示异步操作的结果。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>获取作为此编辑器的查找键的接口的基类的名称。</summary>
      <returns>基类或接口作为此编辑器的查找键的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>获取名称中的编辑器类 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式。</summary>
      <returns>中的编辑器类的名称 <see cref="P:System.Type.AssemblyQualifiedName" /> 格式。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>获取此特性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="P:System.ComponentModel.EditorBrowsableAttribute.State">
      <summary>获取属性或方法的可浏览状态。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EditorBrowsableState" /> ，它是属性或方法的可浏览状态。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary>获取 <see cref="T:System.Collections.IComparer" /> 可用来对该枚举的值进行排序。</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" /> 进行排序的枚举值。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary>指定此转换器是与相关联的枚举器的类型。</summary>
      <returns>此转换器与之关联的枚举器类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary>获取或设置 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> ，它指定枚举的可能值。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> ，它指定枚举的可能值。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary>当在派生类中重写，获取此事件绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 表示事件绑定到的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary>当在派生类中重写时获取事件的委托的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 表示的事件委托的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary>当在派生类中重写时获取一个值，该值事件委托是否多路广播的委托。</summary>
      <returns>true 如果事件委托是多路广播;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary>获取集合中的事件说明符的数目。</summary>
      <returns>集合中的事件说明符的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary>获取或设置具有指定的索引号的事件。</summary>
      <param name="index">从零开始的索引号 <see cref="T:System.ComponentModel.EventDescriptor" /> 要获取或设置。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定的索引号。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 不是有效索引 <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" />。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary>获取或设置具有指定名称的事件。</summary>
      <param name="name">名称 <see cref="T:System.ComponentModel.EventDescriptor" /> 要获取或设置。</param>
      <returns>
        <see cref="T:System.ComponentModel.EventDescriptor" /> 具有指定名称或 null 如果事件不存在。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，它指示对集合的访问是否同步。</summary>
      <returns>true 如果同步对集合的访问;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>true 如果集合具有固定的大小，则否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="P:System.ComponentModel.EventHandlerList.Item(System.Object)">
      <summary>获取或设置一个委托，为指定的对象。</summary>
      <param name="key">要在列表中查找的对象。</param>
      <returns>指定的键的委托或 null 如果委托不存在。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary>获取所提供的属性。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 封装所提供的属性。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary>获取正在提供属性的扩展程序提供。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IExtenderProvider" /> 正在提供该属性。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary>获取可接收属性的对象的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> 描述可接收属性的对象的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary>获取或设置一个值，指示事件处理程序是否已完全处理该事件或系统是否应继续它自己的处理。</summary>
      <returns>true 如果事件已完全处理;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary>获取是否可以更新列表中的项。</summary>
      <returns>true 如果更新列表; 中的项，否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary>获取是否可以将项添加到列表使用 <see cref="M:System.ComponentModel.IBindingList.AddNew" />。</summary>
      <returns>true 如果将项添加到列表 <see cref="M:System.ComponentModel.IBindingList.AddNew" />; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary>获取是否可从列表中，删除项使用 <see cref="M:System.Collections.IList.Remove(System.Object)" /> 或 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />。</summary>
      <returns>true 如果可以从列表中; 删除项否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary>获取指示列表中的项进行排序。</summary>
      <returns>true 如果 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> 已调用和 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> 时尚未被调用; 否则为 false。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary>获取排序的方向。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary>获取 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 正在用于排序。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 正在用于排序。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> 为 false。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary>获取是否 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 列表更改或列表中的项目发生更改时引发事件。</summary>
      <returns>true 如果 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件引发列表发生变化时或者当某项更改; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary>获取列表是否支持使用搜索 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法。</summary>
      <returns>true 如果列表支持搜索，使用 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> 方法; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary>获取指示列表支持排序。</summary>
      <returns>true 如果列表支持排序，则，否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary>获取或设置要用于从数据源返回的项的集合中排除项的筛选器</summary>
      <returns>用来筛选出数据源返回的项集合中的项的字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary>获取当前应用于数据源的说明的排序的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 当前应用于数据源。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary>获取一个值，该值指示数据源是否支持高级排序。</summary>
      <returns>true 如果数据源支持高级排序，则否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary>获取一个值，该值指示数据源是否支持筛选。</summary>
      <returns>true 如果数据源支持筛选，则，否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IChangeTracking.IsChanged">
      <summary>获取对象更改后的状态。</summary>
      <returns>true 如果自上次调用以来已更改对象的内容 <see cref="M:System.ComponentModel.IChangeTracking.AcceptChanges" />; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>获取或设置与 <see cref="T:System.ComponentModel.ISite" /> 关联的 <see cref="T:System.ComponentModel.IComponent" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 与组件; 关联的对象或 null, ，如果组件不具有一个站点。</returns>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>获取所有组件中 <see cref="T:System.ComponentModel.IContainer" />。</summary>
      <returns>一套 <see cref="T:System.ComponentModel.IComponent" /> 代表中的所有组件的对象， <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary>获取指示与此对象的问题到底出的错误消息。</summary>
      <returns>指示与此对象的问题到底出的错误消息。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary>获取具有给定名称的属性的错误消息。</summary>
      <param name="columnName">若要获取其错误信息的属性的名称。</param>
      <returns>错误消息中的属性。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary>获取本地化的名称。</summary>
      <returns>本地化的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary>获取一个值，该值指示集合是否一套 <see cref="T:System.Collections.IList" /> 对象。</summary>
      <returns>true 如果集合是一套 <see cref="T:System.Collections.IList" /> 对象; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ImmutableObjectAttribute.Immutable">
      <summary>获取指示对象是不可变。</summary>
      <returns>true 如果对象是不可变;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary>获取嵌套容器所属的组件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> 拥有嵌套的容器。</returns>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary>在此站点中获取该组件的完整名称。</summary>
      <returns>此站点中的组件的完整名称。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary>获取或设置此属性中存储的当前继承级别。</summary>
      <returns>
        <see cref="T:System.ComponentModel.InheritanceLevel" /> 存储在此属性。</returns>
    </member>
    <member name="P:System.ComponentModel.InitializationEventAttribute.EventName">
      <summary>获取初始化事件的名称。</summary>
      <returns>初始化事件的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.INotifyDataErrorInfo.HasErrors">
      <summary>获取一个值，该值指示实体是否包含验证错误。</summary>
      <returns>如果实体当前具有验证错误，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary>获取与此属性关联的安装程序的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，表示与此属性关联的安装程序的类型或 null 如果安装程序不存在。</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary>获取指定的文本。</summary>
      <returns>指定的文本。</returns>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary>获取一个值，该值指示是否 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
      <returns>true 如果 <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> 对象引发 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件时对它的一个属性值发生了更改; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>获取与关联的组件 <see cref="T:System.ComponentModel.ISite" /> 时由类实现。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> 与关联实例 <see cref="T:System.ComponentModel.ISite" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>获取 <see cref="T:System.ComponentModel.IContainer" /> 与关联 <see cref="T:System.ComponentModel.ISite" /> 时由类实现。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> 与关联实例 <see cref="T:System.ComponentModel.ISite" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>确定组件是否在设计模式下时由类实现。</summary>
      <returns>true 如果该组件是在设计模式下;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>获取或设置与关联的组件的名称 <see cref="T:System.ComponentModel.ISite" /> 时由类实现。</summary>
      <returns>与关联的组件的名称 <see cref="T:System.ComponentModel.ISite" />; 或 null, ，如果没有名称分配给该组件。</returns>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary>获取一个值，该值指示组件是否已初始化。</summary>
      <returns>如果为 true，说明组件已完成初始化；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
      <summary>获取一个值，该值指示调用方是否必须调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" /> 时调用一个对象，该实现此接口。</summary>
      <returns>true 如果调用方必须调用 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary>获取表示此容器 <see cref="T:System.ComponentModel.TypeDescriptor" /> 请求。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" /> 使用此对象集合 <see cref="T:System.ComponentModel.TypeDescriptor" />; 否则为 null 如果任何容器或者 <see cref="T:System.ComponentModel.TypeDescriptor" /> 不使用外部对象。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary>获取与此类型说明符请求相关联的对象。</summary>
      <returns>在调用该方法的对象 <see cref="T:System.ComponentModel.TypeDescriptor" />; 否则为 null 如果没有任何对象执行了调用。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary>获取 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 给定的上下文项与该键相关联。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 项; 否则为描述给定的上下文 null 是否存在任何 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 执行了调用。</returns>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary>当在派生类中重写时获取授予该组件的许可证密钥。</summary>
      <returns>授予该组件许可证密钥。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary>当在派生类中重写时获取一个值，指定何时可以使用许可证。</summary>
      <returns>其中一个 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值，该值指定何时可以使用许可证。 默认值为 <see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary>获取未被授予许可证的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，表示未被授予许可证的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary>获取或设置当前 <see cref="T:System.ComponentModel.LicenseContext" />, ，它指定何时可以使用已授权的对象。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.LicenseContext" /> ，指定何时可以使用已授权的对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性当前被锁定，不能更改。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary>获取 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 该选项指定何时可以使用的许可的对象 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" />。</summary>
      <returns>其中一个 <see cref="T:System.ComponentModel.LicenseUsageMode" /> 值中指定 <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 属性。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary>获取必须与关联的类一起使用的许可证提供。</summary>
      <returns>一个 <see cref="T:System.Type" /> 表示许可证提供程序的类型。 默认值为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary>指示此属性类型的唯一 ID。</summary>
      <returns>此属性类型的唯一 ID。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary>获取指示列表可绑定。</summary>
      <returns>true 如果该列表是可绑定;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary>获取更改的类型。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.ListChangedType" /> 值，该值指示的更改的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary>获取受此更改影响的项的索引。</summary>
      <returns>此更改受影响的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary>获取已被移动的项的旧索引。</summary>
      <returns>旧的已移动的项的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary>获取 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 添加、 更改或删除。</summary>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 受此更改影响。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary>获取或设置与此相关的类属性的抽象说明 <see cref="T:System.ComponentModel.ListSortDescription" /></summary>
      <returns>与此 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 关联的 <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary>获取或设置与此关联的排序操作的方向 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDirection" /> 值之一。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary>获取集合中的项数。</summary>
      <returns>集合中项的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary>获取或设置指定 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  要获取或设置集合中。</param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> 具有指定的索引。</returns>
      <exception cref="T:System.InvalidOperationException">设置项 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />, ，这是只读的。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为线程安全。</summary>
      <returns>true 在所有情况下。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的当前实例。</summary>
      <returns>当前实例 <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>true 在所有情况下。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取指定的 <see cref="T:System.ComponentModel.ListSortDescription" />。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.ComponentModel.ListSortDescription" />  以获取集合中 </param>
      <returns>
        <see cref="T:System.ComponentModel.ListSortDescription" /> 具有指定的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.LocalizableAttribute.IsLocalizable">
      <summary>获取一个值，该值指示是否应本地化属性。</summary>
      <returns>true 如果应本地化属性;，否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary>获取向其组件的数据源属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。</summary>
      <returns>数据源的组件的属性 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary>获取向其组件的显示成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。</summary>
      <returns>组件的显示成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary>获取此属性绑定到该组件的查找成员的名称。</summary>
      <returns>向其组件的名称查找成员 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary>获取向其组件的值成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。</summary>
      <returns>组件的值成员属性的名称 <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> 绑定。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary>获取组件的容器。</summary>
      <returns>一个对象，实现 <see cref="T:System.ComponentModel.IContainer" /> 表示组件的容器接口或 null 如果组件不具有一个站点。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary>获取一个值，该值指示组件当前是否处于设计模式。</summary>
      <returns>true 如果该组件是在设计模式下;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary>获取附加到此组件的事件处理程序的列表。</summary>
      <returns>
        <see cref="T:System.ComponentModel.EventHandlerList" /> ，可将委托提供有关此组件。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary>获取或设置组件的站点。</summary>
      <returns>一个对象，实现 <see cref="T:System.ComponentModel.ISite" /> 表示组件的站点的接口。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary>获取一个值，该值指示是否提示字符是否应视为有效的输入字符。</summary>
      <returns>true 如果用户可以输入 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> 到控件; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary>获取一个值，该值指示掩码是否接受 ASCII 字符集以外的字符。</summary>
      <returns>true 如果仅接受 ASCII; false 如果 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 可以接受任意 Unicode 字符。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary>获取已成功地分配输入的值的可编辑字符位置数。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含的输入掩码中已经分配了格式的字符串中的字符值的可编辑的字符位置数。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary>获取输入掩码中尚未分配输入的值的可编辑字符位置数。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含的可编辑的字符数的位置尚未被分配了字符值。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary>获取确定可本地化的分隔符和输入掩码中的占位符的值的区域性。</summary>
      <returns>一个 <see cref="T:System.Globalization.CultureInfo" /> 包含输入掩码与关联的区域性信息。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary>获取默认的密码使用字符遮盖用户输入。</summary>
      <returns>一个 <see cref="T:System.Char" /> ，表示默认的密码字符。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary>获取格式化字符串中的可编辑位置数。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含带格式的字符串中的可编辑位置数。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary>在格式化字符串的可编辑位置获取新创建的枚举数。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 带格式的字符串中的可编辑位置支持枚举。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary>获取或设置一个值，该值指示是否应在格式化字符串中包括输入掩码中的原义字符。</summary>
      <returns>true 如果文本包含;否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary>获取或设置一个值，该值指示是否 <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> 用来表示缺少的用户输入时显示带格式的字符串。</summary>
      <returns>true 如果提示字符用于表示，不需要用户输入; 如果提供了的位置否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary>获取无效索引范围的上限。</summary>
      <returns>表示由提供程序实现的最大的无效索引的值。 例如，如果最小的有效索引为 0，则此属性将返回-1。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary>获取或设置一个值，确定是否应将密码保护应用于格式化的字符串。</summary>
      <returns>true 如果输入的字符串视为密码字符串;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary>在格式化字符串中指定位置获取的元素。</summary>
      <param name="index">要检索的元素的从零开始索引。</param>
      <returns>
        <see cref="T:System.Char" /> 带格式的字符串中指定的位置。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于零或大于或等于 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> 蒙板。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary>获取在掩码中的最右侧的输入字符的已分配给该掩码的索引。</summary>
      <returns>如果已经为 mask，分配至少一个输入的字符 <see cref="T:System.Int32" /> 包含索引的最右侧分配位置; 否则为如果尚未分配任何位置， <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary>获取掩码，不包括任何掩码的长度修饰符字符。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含在掩码中，不包括修改掩码输入的字符位置数。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary>获取输入的掩码。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含完整掩码。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary>获取一个值，该值指示是否已在格式化字符串中输入所有必需的输入。</summary>
      <returns>true 如果所有的必需输入已输入到掩码;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary>获取一个值，该值指示是否已在格式化字符串中输入所有必需和可选的输入。</summary>
      <returns>true 如果所有的必选和可选输入均已输入;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary>获取或设置要将替换为实际的输入字符的字符。</summary>
      <returns>
        <see cref="T:System.Char" /> 用作密码字符值。</returns>
      <exception cref="T:System.InvalidOperationException">当设置此属性等同于当前提示字符，则指定的密码字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />。 这两个都需要不同。</exception>
      <exception cref="T:System.ArgumentException">当设置此属性不是有效的密码字符，根据所指定的字符 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary>获取或设置用来表示缺少的所有可用的编辑位置的用户输入的字符。</summary>
      <returns>用于提示用户进行输入的字符。 默认为下划线 (_)。</returns>
      <exception cref="T:System.InvalidOperationException">指定的提示字符时设置此属性等同于当前的密码字符 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />。 这两个都需要不同。</exception>
      <exception cref="T:System.ArgumentException">当设置此属性不是有效的密码字符，根据所指定的字符 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> 方法。</exception>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary>获取或设置一个值，该值确定应如何处理与提示字符匹配的输入字符。</summary>
      <returns>true 如果作为输入的提示字符输入都可能导致在掩码中要重置; 的当前可编辑位置否则为 false 指示要作为正常输入字符进行处理的提示字符。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary>获取或设置一个值，该值确定应如何处理空白输入字符。</summary>
      <returns>true 如果空白输入的字符会导致掩码要重置; 中的当前可编辑位置否则为 false 以指示它是要作为正常输入字符进行处理。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary>获取或设置一个值，该值指示是否可以通过其相同的值覆盖掩码中的原义字符位置。</summary>
      <returns>true 若要允许文本，添加回去;否则为 false 为不允许用户覆盖原义字符。 默认值为 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary>获取或设置包含特性的数组。</summary>
      <returns>类型的数组 <see cref="T:System.Attribute" /> ，它包含此成员的属性。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary>获取此成员的特性的集合。</summary>
      <returns>
        <see cref="T:System.ComponentModel.AttributeCollection" /> ，有关此成员或为空集合提供了各种属性，如果在没有特性 <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary>获取该成员所属的类别的名称中指定 <see cref="T:System.ComponentModel.CategoryAttribute" />。</summary>
      <returns>该成员所属的类别的名称。 如果没有任何 <see cref="T:System.ComponentModel.CategoryAttribute" />, ，类别名称设置为默认类别 Misc。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary>获取在指定将成员的说明 <see cref="T:System.ComponentModel.DescriptionAttribute" />。</summary>
      <returns>成员的说明。 如果没有任何 <see cref="T:System.ComponentModel.DescriptionAttribute" />, ，属性值设置为默认情况下，将为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary>获取是否应仅在设计时，指定在设置此成员 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />。</summary>
      <returns>true 如果此成员应设置只能在设计时; false 如果成员可以在运行时设置。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary>获取可以在一个窗口，如属性窗口中显示的名称。</summary>
      <returns>要显示的成员的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary>获取一个值，该值指示该成员是否可浏览中指定 <see cref="T:System.ComponentModel.BrowsableAttribute" />。</summary>
      <returns>true 如果该成员是可浏览;否则为 false。 如果没有任何 <see cref="T:System.ComponentModel.BrowsableAttribute" />, ，属性值设置为默认值，即 true。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary>获取该成员的名称。</summary>
      <returns>成员名。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary>获取该成员中指定的名称哈希代码 <see cref="M:System.String.GetHashCode" />。</summary>
      <returns>成员名称哈希代码。</returns>
    </member>
    <member name="P:System.ComponentModel.MergablePropertyAttribute.AllowMerge">
      <summary>获取一个值，该值指示该属性是否可以与属于属性窗口中的其他对象的属性组合。</summary>
      <returns>true 如果此属性可以与属于属性窗口; 中的其他对象的属性组合否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary>获取此嵌套容器所属的组件。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" /> 拥有此嵌套的容器。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary>获取所属组件的名称。</summary>
      <returns>所属组件的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.NotifyParentPropertyAttribute.NotifyParent">
      <summary>获取或设置一个值，该值指示是否应该对属性的值的更改通知父属性。</summary>
      <returns>true 如果父属性应通知的更改;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary>获取可以为 null 的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，表示可以为 null 的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary>获取基础类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，它表示的基础类型。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary>获取基础类型转换器。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" /> ，它表示基础类型转换器。</returns>
    </member>
    <member name="P:System.ComponentModel.ParenthesizePropertyNameAttribute.NeedParenthesis">
      <summary>获取一个值，该值指示是否属性窗口在属性窗口中括号中显示的属性名称。</summary>
      <returns>true 如果该属性显示时带有括号;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary>获取一个值，该值指示如果属性为其 <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> 定义应作为密码文本显示。</summary>
      <returns>true 如果该属性应显示为密码文本;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.ProgressPercentage">
      <summary>获取异步任务进度百分比。</summary>
      <returns>指示异步任务进度的百分比值。</returns>
    </member>
    <member name="P:System.ComponentModel.ProgressChangedEventArgs.UserState">
      <summary>获取唯一的用户状态。</summary>
      <returns>一个唯一 <see cref="T:System.Object" /> ，该值指示用户状态。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyChangedEventArgs.PropertyName">
      <summary>获取已更改属性的名称。</summary>
      <returns>已更改属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyChangingEventArgs.PropertyName">
      <summary>获取其值已更改的属性名称。</summary>
      <returns>其值已更改的属性名称。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary>当在派生类中重写，获取此属性绑定到的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，它表示此属性绑定到的组件的类型。 当 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> 方法调用中，指定的对象可能是这种类型的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary>获取此属性的类型转换器。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.TypeConverter" /> 用于将转换 <see cref="T:System.Type" /> 此属性。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary>获取一个值，该值指示是否应本地化该属性，根据中的指定 <see cref="T:System.ComponentModel.LocalizableAttribute" />。</summary>
      <returns>true 如果该成员标记有 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 设置为 true; 否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary>当在派生类中重写，获取一个值，指示此属性只读的。</summary>
      <returns>true 如果该属性是只读的;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary>当在派生类中重写时获取的属性的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，表示该属性的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary>获取一个值，该值指示是否应序列化此属性，根据中的指定 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" />。</summary>
      <returns>其中一个 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举值，该值指定是否应序列化此属性。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary>获取一个值，该值指示是否为此属性的值更改通知可能源自外部属性描述符。</summary>
      <returns>true 如果值更改通知可能源自外部属性描述符;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary>获取集合中的属性说明符的数目。</summary>
      <returns>集合中的属性说明符的数目。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 在指定的索引号。</summary>
      <param name="index">要获取或设置的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的从零开始的索引。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定的索引号。</returns>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 参数不是有效索引 <see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" />。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary>获取或设置 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称。</summary>
      <param name="name">名称 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 若要从集合中获取。</param>
      <returns>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 具有指定名称或 null 如果属性不存在。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary>获取集合中包含的元素数。</summary>
      <returns>集合中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否为同步的（线程安全）。</summary>
      <returns>如果对集合的访问是同步的（线程安全），则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否具有固定大小。</summary>
      <returns>如果 true 具有固定大小，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary>获取一个值，该值指示 <see cref="T:System.Collections.IDictionary" /> 是否为只读。</summary>
      <returns>如果 true 是只读的，则为 <see cref="T:System.Collections.IDictionary" />；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="key">要获取或设置的元素的键。</param>
      <returns>带有指定键的元素。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary>获取包含 <see cref="T:System.Collections.ICollection" /> 的键的 <see cref="T:System.Collections.IDictionary" />。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，包含 <see cref="T:System.Collections.IDictionary" /> 的键。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary>获取一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" />，它包含 <see cref="T:System.Collections.IDictionary" /> 中的值。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示集合是否具有固定大小。</summary>
      <returns>true 如果集合具有固定的大小，则否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示集合是否为只读。</summary>
      <returns>如果该集合为只读，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置指定索引处的集合中的项。</summary>
      <param name="index">要获取或设置项的从零开始索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.NotSupportedException">该集合是只读的。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 不是 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 等于或大于 <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" />。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary>获取此属性使用的选项卡的类型。</summary>
      <returns>一个类型，该值指示此属性使用的选项卡的类型数组。</returns>
      <exception cref="T:System.TypeLoadException">指定的类型 <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> 找不到属性。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary>获取此属性使用的选项卡类的名称。</summary>
      <returns>此属性使用的选项卡上类的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary>获取数组的每个选项卡的此选项卡范围 <see cref="T:System.ComponentModel.PropertyTabAttribute" />。</summary>
      <returns>一个数组 <see cref="T:System.ComponentModel.PropertyTabScope" /> 对象，以指示选项卡的作用域。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary>获取此类提供了一个属性的名称。</summary>
      <returns>此类提供了一个属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary>获取此属性可以扩展的数据类型的名称。</summary>
      <returns>此属性可以扩展数据类型的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary>获取此特性的唯一标识符。</summary>
      <returns>
        <see cref="T:System.Object" /> 该属性的唯一标识符。</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>获取一个值，该值指示此属性绑定到的属性只读的。</summary>
      <returns>true 如果此属性绑定到的属性是只读的; false 如果属性为读/写。</returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary>获取一个值，该值指示是否此属性是绑定到的属性可以用作应用程序设置。</summary>
      <returns>true 如果此属性绑定到的属性可以用作应用程序设置;否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary>获取已更改其属性、 事件或扩展程序的组件。</summary>
      <returns>已更改其属性、 事件或扩展器的组件或 null 如果更改了相同类型的所有组件。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary>获取 <see cref="T:System.Type" /> 后更改其属性或事件。</summary>
      <returns>
        <see cref="T:System.Type" /> 后更改其属性或事件。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshPropertiesAttribute.RefreshProperties">
      <summary>获取该成员的刷新属性。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.RefreshProperties" /> 指示成员的当前刷新属性。</returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary>获取一个值，该值指示是否应在一个程序集的安装过程中调用安装程序。</summary>
      <returns>true 如果程序集; 安装过程中应调用安装程序否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.Result">
      <summary>获取一个值，表示异步操作的结果。</summary>
      <returns>
        <see cref="T:System.Object" /> 表示异步操作的结果。</returns>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" /> 不是 null。<see cref="P:System.Exception.InnerException" /> 属性保存对 <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Error" />。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.AsyncCompletedEventArgs.Cancelled" /> 为 true。</exception>
    </member>
    <member name="P:System.ComponentModel.RunWorkerCompletedEventArgs.UserState">
      <summary>获取一个值，该值表示用户状态。</summary>
      <returns>
        <see cref="T:System.Object" /> 表示的用户状态。</returns>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary>获取一个值，该值指示属性是否适合绑定到设置。</summary>
      <returns>true 如果该属性是适合绑定设置，则受到保护。否则为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary>获取或设置工具箱项的类型。</summary>
      <returns>工具箱项的类型。</returns>
      <exception cref="T:System.ArgumentException">无法找到的类型。</exception>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary>获取或设置当前的类型名称 <see cref="T:System.Drawing.Design.ToolboxItem" />。</summary>
      <returns>当前的工具箱项的完全限定的类型名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary>获取此工具箱项的筛选器字符串。</summary>
      <returns>工具箱项的筛选器字符串。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary>获取筛选器的类型。</summary>
      <returns>一个 <see cref="T:System.ComponentModel.ToolboxItemFilterType" /> ，该值指示筛选器类型。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary>获取属性的类型 ID。</summary>
      <returns>此属性的类型 ID。 所有 <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 对象具有相同的筛选器字符串返回相同的类型 id。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary>获取此属性描述绑定的组件的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，它表示此属性绑定的组件的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary>获取一个值，该值指示此属性只读的。</summary>
      <returns>true 如果该属性是只读的; false 如果属性为读/写。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary>获取属性的类型。</summary>
      <returns>一个 <see cref="T:System.Type" /> ，表示该属性的类型。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary>获取集合中的对象数。</summary>
      <returns>集合中的对象数。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary>在指定的索引号获取的对象。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Object" /> 若要从集合中获取。</param>
      <returns>
        <see cref="T:System.Object" /> 具有指定的索引。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#Count">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.Count" />。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 中包含的元素数。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.IsSynchronized" />。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.ICollection.SyncRoot" />。</summary>
      <returns>在所有情况下均为 null。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverterAttribute.ConverterTypeName">
      <summary>获取的完全限定的类型名称 <see cref="T:System.Type" /> 要用作此属性绑定到的对象的转换器。</summary>
      <returns>完全限定的类型名称 <see cref="T:System.Type" /> 以作为转换器用于此属性绑定到的对象或空字符串 ("") 如果不存在。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptionProviderAttribute.TypeName">
      <summary>获取类型说明提供程序的类型名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含限定的类型名称的 <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary>获取或设置用于目标组件的组件对象模型 (COM) 类型信息的提供程序。</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> 实例，表示 COM 类型的信息提供程序实例。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary>获取由目标组件表示的组件对象模型 (COM) 对象的类型。</summary>
      <returns>由此组件表示的 COM 对象的 <see cref="T:System.Type" />，或非 COM 对象的 null。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary>获取一个类型，它表示所有接口类型的类型说明提供程序。</summary>
      <returns>一个 <see cref="T:System.Type" />，它表示所有接口类型的自定义类型说明提供程序。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary>获取与警告关联的帮助主题。</summary>
      <returns>与警告关联的帮助主题。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary>获取与该警告关联的帮助文件。</summary>
      <returns>与警告关联的帮助文件。</returns>
    </member>
    <member name="P:System.ComponentModel.Win32Exception.NativeErrorCode">
      <summary>获取与此异常关联的 Win32 错误代码。</summary>
      <returns>与此异常关联的 Win32 错误代码。</returns>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Context">
      <summary>获取设置的组关联的应用程序设置上下文。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsContext" /> 设置的组关联。</returns>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Item(System.String)">
      <summary>获取或设置指定的应用程序设置属性的值。</summary>
      <param name="propertyName">一个 <see cref="T:System.String" /> 包含用于访问的属性的名称。</param>
      <returns>如果找到，命名的设置属性中; 的值否则为 null。</returns>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">没有与当前包装相关联的属性或找不到指定的属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">尝试设置只读属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">提供的值与设置属性不兼容的类型是设置操作期间。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">无法分析配置文件。</exception>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Properties">
      <summary>获取包装中设置属性的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 包含所有 <see cref="T:System.Configuration.SettingsProperty" /> 当前包装中使用的对象。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">找不到关联的设置提供程序或其实例化失败。</exception>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.PropertyValues">
      <summary>获取属性值的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 的属性值。</returns>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.Providers">
      <summary>获取包装所使用的应用程序设置提供程序的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsProviderCollection" /> 包含所有 <see cref="T:System.Configuration.SettingsProvider" /> 所使用的当前设置包装的设置属性对象。</returns>
    </member>
    <member name="P:System.Configuration.ApplicationSettingsBase.SettingsKey">
      <summary>获取或设置应用程序设置组的设置键。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含当前的设置组的设置键。</returns>
    </member>
    <member name="P:System.Configuration.ClientSettingsSection.Settings">
      <summary>获取部分中的客户端设置的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingElementCollection" /> 包含所有客户端设置在配置部分中找到。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.BareMessage">
      <summary>获取引发此配置异常的原因的说明。</summary>
      <returns>原因说明这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Filename">
      <summary>获取导致引发此配置异常的配置文件的路径。</summary>
      <returns>导致以下情况的配置文件的路径 <see cref="T:System.Configuration.ConfigurationException" /> 将引发异常。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Line">
      <summary>获取此配置异常遇到配置文件中的行号。</summary>
      <returns>此配置文件中的行号 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationException.Message">
      <summary>获取引发此配置异常的原因的补充的的说明。</summary>
      <returns>扩展的原因的说明这 <see cref="T:System.Configuration.ConfigurationException" /> 引发了异常。</returns>
    </member>
    <member name="P:System.Configuration.ConfigurationSettings.AppSettings">
      <summary>获取一个只读的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 的配置文件的应用程序设置部分。</summary>
      <returns>一个只读的 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 的配置文件中应用程序设置部分。</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.Filename">
      <summary>获取配置文件名称。</summary>
      <returns>配置文件名称。</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.LineNumber">
      <summary>获取当前节点的行号。</summary>
      <returns>当前节点的行号。</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.System#Configuration#Internal#IConfigErrorInfo#Filename">
      <summary>获取配置文件名称。</summary>
      <returns>文件名。</returns>
    </member>
    <member name="P:System.Configuration.ConfigXmlDocument.System#Configuration#Internal#IConfigErrorInfo#LineNumber">
      <summary>获取配置行号。</summary>
      <returns>行号。</returns>
    </member>
    <member name="P:System.Configuration.DefaultSettingValueAttribute.Value">
      <summary>获取应用程序设置属性的默认值。</summary>
      <returns>一个 <see cref="T:System.String" /> 表示该属性的默认值。</returns>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.KeyAttributeName">
      <summary>获取要用作键/值对中键的 XML 属性名称。</summary>
      <returns>一个包含键属性的名称的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.DictionarySectionHandler.ValueAttributeName">
      <summary>获取要用作键/值对中的值的 XML 属性名称。</summary>
      <returns>一个包含值属性的名称的字符串值。</returns>
    </member>
    <member name="P:System.Configuration.IdnElement.Enabled">
      <summary>获取或设置的值 <see cref="T:System.Configuration.IdnElement" /> 配置设置。</summary>
      <returns>一个 <see cref="T:System.UriIdnScope" /> ，其中包含 IDN 处理的当前配置设置。</returns>
    </member>
    <member name="P:System.Configuration.IPersistComponentSettings.SaveSettings">
      <summary>获取或设置一个值，该值指示控件是否应自动保持其应用程序设置属性。</summary>
      <returns>true 如果控件应自动保持其状态，则否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.IPersistComponentSettings.SettingsKey">
      <summary>获取或设置控件的当前实例的应用程序设置键的值。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含该控件的当前实例的设置键。</returns>
    </member>
    <member name="P:System.Configuration.IriParsingElement.Enabled">
      <summary>获取或设置的值 <see cref="T:System.Configuration.IriParsingElement" /> 配置设置。</summary>
      <returns>一个布尔值，指示是否启用国际资源标识符 (IRI) 处理。</returns>
    </member>
    <member name="P:System.Configuration.LocalFileSettingsProvider.ApplicationName">
      <summary>获取或设置当前正在运行的应用程序的名称。</summary>
      <returns>一个字符串，包含应用程序的显示名称。</returns>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.KeyAttributeName">
      <summary>获取要用作键/值对中键的 XML 属性名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值包含键属性的名称。</returns>
    </member>
    <member name="P:System.Configuration.NameValueSectionHandler.ValueAttributeName">
      <summary>获取要用作键/值对中的值的 XML 属性名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值包含值属性的名称。</returns>
    </member>
    <member name="P:System.Configuration.SchemeSettingElement.GenericUriParserOptions">
      <summary>获取从 GenericUriParserOptions 条目的值 <see cref="T:System.Configuration.SchemeSettingElement" /> 实例。</summary>
      <returns>GenericUriParserOptions 条目的值。</returns>
    </member>
    <member name="P:System.Configuration.SchemeSettingElement.Name">
      <summary>获取的值从名项 <see cref="T:System.Configuration.SchemeSettingElement" /> 实例。</summary>
      <returns>使用此架构设置的协议。</returns>
    </member>
    <member name="P:System.Configuration.SchemeSettingElementCollection.CollectionType">
      <summary>获取默认集合类型的 <see cref="T:System.Configuration.SchemeSettingElementCollection" />。</summary>
      <returns>默认集合类型 <see cref="T:System.Configuration.SchemeSettingElementCollection" />。</returns>
    </member>
    <member name="P:System.Configuration.SchemeSettingElementCollection.Item(System.Int32)">
      <summary>中的指定索引处获取的项 <see cref="T:System.Configuration.SchemeSettingElementCollection" /> 集合。</summary>
      <param name="index">索引 <see cref="T:System.Configuration.SchemeSettingElement" /> 返回。</param>
      <returns>指定的 <see cref="T:System.Configuration.SchemeSettingElement" />。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">
        <paramref name="index" /> 参数小于零。- 或 - 由参数指定的项是 null 或已被删除。</exception>
    </member>
    <member name="P:System.Configuration.SchemeSettingElementCollection.Item(System.String)">
      <summary>获取项从 <see cref="T:System.Configuration.SchemeSettingElementCollection" /> 集合。</summary>
      <param name="name">对的字符串引用 <see cref="T:System.Configuration.SchemeSettingElement" /> 在集合中的对象。</param>
      <returns>一个 <see cref="T:System.Configuration.SchemeSettingElement" /> 集合中包含的对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.NewValue">
      <summary>获取分配给应用程序设置属性的新值。</summary>
      <returns>
        <see cref="T:System.Object" /> ，其中包含要分配给应用程序设置属性的新值。</returns>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingClass">
      <summary>获取应用程序设置属性的类别。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含设置的类别说明。 通常情况下，此参数设置为应用程序设置组的名称。</returns>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingKey">
      <summary>获取与属性关联的应用程序设置键。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含应用程序设置键。</returns>
    </member>
    <member name="P:System.Configuration.SettingChangingEventArgs.SettingName">
      <summary>获取与应用程序设置属性关联的应用程序设置的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含应用程序设置的名称。</returns>
    </member>
    <member name="P:System.Configuration.SettingElement.Name">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingElement" /> 对象的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingElement" /> 对象的名称。</returns>
    </member>
    <member name="P:System.Configuration.SettingElement.SerializeAs">
      <summary>获取或设置用来持久化保存的值的序列化机制 <see cref="T:System.Configuration.SettingElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingElement.Value">
      <summary>获取或设置的值 <see cref="T:System.Configuration.SettingElement" /> 对象使用 <see cref="T:System.Configuration.SettingValueElement" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingValueElement" /> 包含值的对象 <see cref="T:System.Configuration.SettingElement" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingElementCollection.CollectionType">
      <summary>获取配置集合的类型。</summary>
      <returns>
        <see cref="T:System.Configuration.ConfigurationElementCollectionType" /> 集合对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.Context">
      <summary>获取关联的设置上下文。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsContext" /> 与设置实例相关联。</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对对象的访问 （线程安全）。</summary>
      <returns>true 如果访问 <see cref="T:System.Configuration.SettingsBase" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.Item(System.String)">
      <summary>获取或设置指定的设置属性的值。</summary>
      <param name="propertyName">一个 <see cref="T:System.String" /> 包含用于访问的属性的名称。</param>
      <returns>如果找到，命名的设置属性的值。</returns>
      <exception cref="T:System.Configuration.SettingsPropertyNotFoundException">没有与当前对象相关联的属性或找不到指定的属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyIsReadOnlyException">尝试设置只读属性。</exception>
      <exception cref="T:System.Configuration.SettingsPropertyWrongTypeException">提供的值与设置属性不兼容的类型是设置操作期间。</exception>
    </member>
    <member name="P:System.Configuration.SettingsBase.Properties">
      <summary>获取设置属性的集合。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 集合，其中包含所有 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.PropertyValues">
      <summary>获取属性值设置的集合。</summary>
      <returns>一套 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象表示所管理的属性的实际数据值 <see cref="T:System.Configuration.SettingsBase" /> 实例。</returns>
    </member>
    <member name="P:System.Configuration.SettingsBase.Providers">
      <summary>获取设置提供程序的集合。</summary>
      <returns>一个包含 <see cref="T:System.Configuration.SettingsProviderCollection" /> 对象的 <see cref="T:System.Configuration.SettingsProvider" />。</returns>
    </member>
    <member name="P:System.Configuration.SettingsDescriptionAttribute.Description">
      <summary>获取关联的配置属性的说明性文本。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含关联的配置属性的说明性文本。</returns>
    </member>
    <member name="P:System.Configuration.SettingsGroupDescriptionAttribute.Description">
      <summary>应用程序设置属性组的描述性文本。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含应用程序设置组的描述性文本。</returns>
    </member>
    <member name="P:System.Configuration.SettingsGroupNameAttribute.GroupName">
      <summary>获取应用程序设置属性组的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含应用程序设置属性组的名称。</returns>
    </member>
    <member name="P:System.Configuration.SettingsLoadedEventArgs.Provider">
      <summary>获取用于存储配置设置的设置提供程序。</summary>
      <returns>设置提供程序。</returns>
    </member>
    <member name="P:System.Configuration.SettingsManageabilityAttribute.Manageability">
      <summary>获取所请求的特殊服务集。</summary>
      <returns>一个值，通过使用逻辑得到 OR 运算符，将合并所有 <see cref="T:System.Configuration.SettingsManageability" /> 与请求的服务相对应的枚举值。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Attributes">
      <summary>获取 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 对象包含的属性的 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsAttributeDictionary" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.DefaultValue">
      <summary>获取或设置的默认值 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <returns>一个对象，包含的默认值 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.IsReadOnly">
      <summary>获取或设置一个值，指定是否 <see cref="T:System.Configuration.SettingsProperty" /> 对象是只读的。</summary>
      <returns>如果 <see cref="T:System.Configuration.SettingsProperty" /> 是只读的，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Name">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 的名称。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 的名称。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.PropertyType">
      <summary>获取或设置为类型 <see cref="T:System.Configuration.SettingsProperty" />。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 的类型。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.Provider">
      <summary>获取或设置提供程序 <see cref="T:System.Configuration.SettingsProperty" />。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsProvider" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.SerializeAs">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象 <see cref="T:System.Configuration.SettingsProperty" />。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.ThrowOnErrorDeserializing">
      <summary>获取或设置一个值，指定是否在未成功反序列化属性时，将会引发错误。</summary>
      <returns>true 如果该属性未成功反序列化; 时，将引发错误否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProperty.ThrowOnErrorSerializing">
      <summary>获取或设置一个值，指定是否在未成功序列化属性时，将会引发错误。</summary>
      <returns>true 如果该属性未成功进行序列化; 时，将引发错误否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.Count">
      <summary>获取一个值，指定的数 <see cref="T:System.Configuration.SettingsProperty" /> 集合中的对象。</summary>
      <returns>数 <see cref="T:System.Configuration.SettingsProperty" /> 集合中的对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>true 如果访问 <see cref="T:System.Configuration.SettingsPropertyCollection" /> 同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.Item(System.String)">
      <summary>获取具有指定名称的集合项。</summary>
      <param name="name">
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</param>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 对象具有指定 <paramref name="name" />。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyCollection.SyncRoot">
      <summary>获取用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Deserialized">
      <summary>获取或设置是否的值 <see cref="T:System.Configuration.SettingsProperty" /> 对象被反序列化。</summary>
      <returns>true 如果值 <see cref="T:System.Configuration.SettingsProperty" /> 对象已反序列化; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.IsDirty">
      <summary>获取或设置是否的值 <see cref="T:System.Configuration.SettingsProperty" /> 对象已更改。</summary>
      <returns>true 如果值 <see cref="T:System.Configuration.SettingsProperty" /> 对象已更改; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Name">
      <summary>获取从关联的属性名称 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 对象的名称。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.Property">
      <summary>获取 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <returns>
        <see cref="T:System.Configuration.SettingsProperty" /> 对象，它描述 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.PropertyValue">
      <summary>获取或设置 <see cref="T:System.Configuration.SettingsProperty" /> 对象的值。</summary>
      <returns>值 <see cref="T:System.Configuration.SettingsProperty" /> 对象。 当设置此值时， <see cref="P:System.Configuration.SettingsPropertyValue.IsDirty" /> 属性设置为 true 和 <see cref="P:System.Configuration.SettingsPropertyValue.UsingDefaultValue" /> 设置为 false。当一个值从第一次访问时 <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" /> 属性，并且如果该值最初是存储在 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象作为序列化表示形式使用 <see cref="P:System.Configuration.SettingsPropertyValue.SerializedValue" /> 属性， <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" /> 属性将触发反序列化的基础值。  产生了负面影响， <see cref="P:System.Configuration.SettingsPropertyValue.Deserialized" /> 属性将设置为 true。如果在 ASP.NET 中，发生此事件链，如果在反序列化过程中出错，错误将记录使用 ASP.NET 的运行状况监视功能。 默认情况下，这意味着，反序列化错误将显示在应用程序事件日志中在 ASP.NET 下运行时。 如果此过程发生在 ASP.NET 外部，并在反序列化期间出错时，将取消错误，并反序列化期间的逻辑的其余部分时发生。 要反序列化不序列化的值是否在反序列化尝试时，然后 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象而是尝试将返回默认值，如果其中一个已配置为在关联上定义 <see cref="T:System.Configuration.SettingsProperty" /> 实例。 在这种情况下，如果 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性被设置为 null, ，或字符串"[null]"，则 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象将初始化 <see cref="P:System.Configuration.SettingsPropertyValue.PropertyValue" /> 属性设置为任何一个 null 对于引用类型，或相关联的值类型的默认值。  另一方面，如果 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性保存一个有效的对象引用或字符串值 （而不是"[null]")，则 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性改为返回。如果没有任何序列化的值进行反序列化时尝试反序列化，且未指定任何默认值，然后将为字符串类型返回一个空字符串。 对于所有其他类型的默认实例将返回通过调用 <see cref="M:System.Activator.CreateInstance(System.Type)" /> — 对于引用类型，这意味着有人试图将可用于创建对象实例使用默认构造函数。  如果此尝试失败，然后 null 返回。</returns>
      <exception cref="T:System.ArgumentException">尝试使用的默认值时 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性时，出现错误。  尝试将转换 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 属性设置为有效的类型失败，或者所得到的值不符合定义的类型 <see cref="P:System.Configuration.SettingsProperty.PropertyType" />。</exception>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.SerializedValue">
      <summary>获取或设置序列化的值 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <returns>序列化的值 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">该属性的序列化选项表明要使用的字符串类型转换器，但不可用的类型转换器。</exception>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValue.UsingDefaultValue">
      <summary>获取布尔值，该值指定是否的值 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象是根据定义的默认值 <see cref="P:System.Configuration.SettingsProperty.DefaultValue" /> 关联的属性值 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
      <returns>true 如果值 <see cref="T:System.Configuration.SettingsProperty" /> 对象是默认值; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.Count">
      <summary>获取一个值，指定的数 <see cref="T:System.Configuration.SettingsPropertyValue" /> 集合中的对象。</summary>
      <returns>数 <see cref="T:System.Configuration.SettingsPropertyValue" /> 集合中的对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>true 如果访问 <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> 集合是同步; 否则为 false。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.Item(System.String)">
      <summary>从集合中获取的项。</summary>
      <param name="name">一个 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</param>
      <returns>
        <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象具有指定 <paramref name="name" />。</returns>
    </member>
    <member name="P:System.Configuration.SettingsPropertyValueCollection.SyncRoot">
      <summary>获取用于同步对集合的访问的对象。</summary>
      <returns>用于同步对集合的访问的对象。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProvider.ApplicationName">
      <summary>获取或设置当前正在运行的应用程序的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含应用程序的缩写的名称，不包含它的完整路径或扩展，例如， SimpleAppSettings。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProviderAttribute.ProviderTypeName">
      <summary>获取设置提供程序的类型名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含设置提供程序的名称。</returns>
    </member>
    <member name="P:System.Configuration.SettingsProviderCollection.Item(System.String)">
      <summary>获取与指定的名称的集合中的设置提供程序。</summary>
      <param name="name">一个 <see cref="T:System.String" /> 包含设置提供程序的友好名称。</param>
      <returns>如果找到， <see cref="T:System.Configuration.SettingsProvider" /> 其名称与指定的 name 参数; 否则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 参数为 null。</exception>
      <exception cref="T:System.NotSupportedException">设置此值时，该集合是只读的。</exception>
    </member>
    <member name="P:System.Configuration.SettingsSerializeAsAttribute.SerializeAs">
      <summary>获取 <see cref="T:System.Configuration.SettingsSerializeAs" /> 枚举值，该值指定序列化方案。</summary>
      <returns>一个 <see cref="T:System.Configuration.SettingsSerializeAs" /> 枚举值，该值指定序列化方案。</returns>
    </member>
    <member name="P:System.Configuration.SettingValueElement.ValueXml">
      <summary>获取或设置的值 <see cref="T:System.Configuration.SettingValueElement" /> 对象使用 <see cref="T:System.Xml.XmlNode" /> 对象。</summary>
      <returns>
        <see cref="T:System.Xml.XmlNode" /> 包含值的对象 <see cref="T:System.Configuration.SettingElement" />。</returns>
    </member>
    <member name="P:System.Configuration.SpecialSettingAttribute.SpecialSetting">
      <summary>获取描述应用程序设置属性的特殊设置类别的值。</summary>
      <returns>一个 <see cref="T:System.Configuration.SpecialSetting" /> 定义应用程序设置属性的类别的枚举值。</returns>
    </member>
    <member name="P:System.Configuration.UriSection.Idn">
      <summary>获取 <see cref="T:System.Configuration.IdnElement" /> 对象，其中包含的配置设置的国际域名 (IDN) 中的处理 <see cref="T:System.Uri" /> 类。</summary>
      <returns>配置设置的国际域名 (IDN) 中的处理 <see cref="T:System.Uri" /> 类。</returns>
    </member>
    <member name="P:System.Configuration.UriSection.IriParsing">
      <summary>获取 <see cref="T:System.Configuration.IriParsingElement" /> 对象，其中包含用于国际资源标识符 (IRI) 分析中的配置设置 <see cref="T:System.Uri" /> 类。</summary>
      <returns>国际化资源标识符 (IRI) 分析中的配置设置 <see cref="T:System.Uri" /> 类。</returns>
    </member>
    <member name="P:System.Configuration.UriSection.SchemeSettings">
      <summary>获取 <see cref="T:System.Configuration.SchemeSettingElementCollection" /> 对象，其中包含用于分析中的方案的配置设置 <see cref="T:System.Uri" /> 类。</summary>
      <returns>分析中的方案的配置设置 <see cref="T:System.Uri" /> 类</returns>
    </member>
    <member name="P:System.Diagnostics.BooleanSwitch.Enabled">
      <summary>获取或设置一个指示开关已启用还是已禁用的值。</summary>
      <returns>如果开关已启用，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Security.SecurityException">调用方没有正确的权限。</exception>
    </member>
    <member name="P:System.Diagnostics.CorrelationManager.ActivityId">
      <summary>获取或设置全局活动的标识。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 标识全局活动的结构。</returns>
    </member>
    <member name="P:System.Diagnostics.CorrelationManager.LogicalOperationStack">
      <summary>从调用上下文中获取的逻辑操作堆栈。</summary>
      <returns>一个 <see cref="T:System.Collections.Stack" /> 对象，表示调用上下文的逻辑操作堆栈。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterHelp">
      <summary>获取或设置自定义计数器的说明。</summary>
      <returns>描述该计数器的行为的文本。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值是 null。</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterName">
      <summary>获取或设置自定义计数器的名称。</summary>
      <returns>该计数器，在其类别中是唯一的名称。</returns>
      <exception cref="T:System.ArgumentNullException">指定的值是 null。</exception>
      <exception cref="T:System.ArgumentException">指定的值不是介于 1 到 80 个字符之间，或包含双引号引起来，控制字符或前导或尾随空格。</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationData.CounterType">
      <summary>获取或设置自定义计数器的性能计数器类型。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 定义性能计数器的行为。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定不是成员的一种 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 枚举。</exception>
    </member>
    <member name="P:System.Diagnostics.CounterCreationDataCollection.Item(System.Int32)">
      <summary>索引 <see cref="T:System.Diagnostics.CounterCreationData" /> 集合。</summary>
      <param name="index">中的索引 <see cref="T:System.Diagnostics.CounterCreationDataCollection" />。</param>
      <returns>集合索引，用于访问集合的单个元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0。- 或 -<paramref name="index" /> 集合中是等于或大于项的数目。</exception>
    </member>
    <member name="P:System.Diagnostics.CounterSample.BaseValue">
      <summary>计数器中获取一个可选的基的原始值。</summary>
      <returns>基原始值，该示例基于多个计数器的情况下，才使用。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterFrequency">
      <summary>获取原始计数器频率。</summary>
      <returns>与其读取计数器的频率。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterTimeStamp">
      <summary>获取计数器的时间戳。</summary>
      <returns>该示例时所用的时间。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.CounterType">
      <summary>获取性能计数器类型。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 对象，它指示此示例是一个快照的计数器的类型。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.RawValue">
      <summary>获取计数器的原始值。</summary>
      <returns>性能计数器样本与关联的数字值。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.SystemFrequency">
      <summary>获取原始系统的频率。</summary>
      <returns>与系统读取计数器的频率。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp">
      <summary>获取原始时间戳。</summary>
      <returns>系统时间戳。</returns>
    </member>
    <member name="P:System.Diagnostics.CounterSample.TimeStamp100nSec">
      <summary>获取原始的、 带来高保真时间戳。</summary>
      <returns>系统时间戳，表示在 0.1 毫秒内。</returns>
    </member>
    <member name="P:System.Diagnostics.DataReceivedEventArgs.Data">
      <summary>获取已写入的行的字符到重定向 <see cref="T:System.Diagnostics.Process" /> 输出流。</summary>
      <returns>已写入的行关联的 <see cref="T:System.Diagnostics.Process" /> 向其重定向 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 或 <see cref="P:System.Diagnostics.Process.StandardError" /> 流。</returns>
    </member>
    <member name="P:System.Diagnostics.Debug.AutoFlush">
      <summary>获取或设置一个值，该值指示是否 <see cref="M:System.Diagnostics.Debug.Flush" /> 应该对调用 <see cref="P:System.Diagnostics.Debug.Listeners" /> 每次写入后。</summary>
      <returns>true 如果 <see cref="M:System.Diagnostics.Debug.Flush" /> 上调用 <see cref="P:System.Diagnostics.Debug.Listeners" /> 后每次进行写; 否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentLevel">
      <summary>获取或设置缩进级别。</summary>
      <returns>缩进级别。 默认值为 0。</returns>
    </member>
    <member name="P:System.Diagnostics.Debug.IndentSize">
      <summary>获取或设置缩进的空格数。</summary>
      <returns>缩进的空格数。 默认值为四。</returns>
    </member>
    <member name="P:System.Diagnostics.Debug.Listeners">
      <summary>获取正在监视调试输出的侦听器集合。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 表示集合的类型 <see cref="T:System.Diagnostics.TraceListener" /> 监视调试输出。</returns>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.AssertUiEnabled">
      <summary>获取或设置一个值，该值指示在用户界面模式中运行该应用程序。</summary>
      <returns>true 如果启用了用户界面模式;否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.DefaultTraceListener.LogFileName">
      <summary>获取或设置要写入跟踪或调试消息的日志文件的名称。</summary>
      <returns>要写入跟踪或调试消息的日志文件的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.DelimitedListTraceListener.Delimiter">
      <summary>获取或设置分隔列表的分隔符。</summary>
      <returns>有关带分隔符的列表分隔符。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> 设置为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.DelimitedListTraceListener.Delimiter" /> 设置为空字符串 ("")。</exception>
    </member>
    <member name="P:System.Diagnostics.EntryWrittenEventArgs.Entry">
      <summary>获取写入到日志的事件日志项。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogEntry" /> 表示事件日志中写入的条目。</returns>
    </member>
    <member name="P:System.Diagnostics.EventInstance.CategoryId">
      <summary>获取或设置指定事件项的应用程序定义类别的资源标识符。</summary>
      <returns>数值类别值或资源标识符对应于事件源的类别资源文件中定义的字符串。 默认值为零，这意味着，无类别将显示为事件项。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负数值或为一个值大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="P:System.Diagnostics.EventInstance.EntryType">
      <summary>获取或设置事件日志条目的事件类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogEntryType" /> 值，该值指示事件条目类型。 默认值为 <see cref="F:System.Diagnostics.EventLogEntryType.Information" />。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">该属性未设置为有效 <see cref="T:System.Diagnostics.EventLogEntryType" /> 值。</exception>
    </member>
    <member name="P:System.Diagnostics.EventInstance.InstanceId">
      <summary>获取或设置指定事件项的消息文本的资源标识符。</summary>
      <returns>资源标识符对应于事件源的消息资源文件中定义的字符串。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负数值或为一个值大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLog.EnableRaisingEvents">
      <summary>获取或设置一个值，用以指示 <see cref="T:System.Diagnostics.EventLog" /> 是否接收 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件通知。</summary>
      <returns>如果 <see cref="T:System.Diagnostics.EventLog" /> 在有项写入日志时接收通知，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">事件日志是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLog.Entries">
      <summary>获取事件日志的内容。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogEntryCollection" />，保留事件日志中的项。 每个项均与 <see cref="T:System.Diagnostics.EventLogEntry" /> 类的一个实例关联。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLog.Log">
      <summary>获取或设置读取或写入的日志名称。</summary>
      <returns>日志的名称。 这可以是“应用程序”、“系统”、“安全性”或一个自定义的日志名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLog.LogDisplayName">
      <summary>获取事件日志的友好名称。</summary>
      <returns>一个表示系统的事件查看器中事件日志的名称。</returns>
      <exception cref="T:System.InvalidOperationException">指定 <see cref="P:System.Diagnostics.EventLog.Log" /> 此计算机的注册表中不存在。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLog.MachineName">
      <summary>获取或设置在其上读取或写入事件的计算机的名称。</summary>
      <returns>事件日志驻留的服务器的名称。 默认为本地计算机 (".")。</returns>
      <exception cref="T:System.ArgumentException">计算机名是无效的。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLog.MaximumKilobytes">
      <summary>获取或设置最大事件日志大小（以 KB 为单位）。</summary>
      <returns>最大事件日志大小（以 KB 为单位）。 默认值为 512，表示最大文件大小为 512 KB。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值小于 64，或大于 4194240 或不 64 的偶数倍。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.EventLog.Log" /> 值不是有效的日志名称。- 或 -无法在目标计算机上打开事件日志的注册表项。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLog.MinimumRetentionDays">
      <summary>获取要在事件日志中保留项的天数。</summary>
      <returns>事件日志中的项被保留的天数。 默认值为 7。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLog.OverflowAction">
      <summary>获取已配置的行为，以便在事件日志达到其最大文件大小时存储新项。</summary>
      <returns>
        <see cref="T:System.Diagnostics.OverflowAction" /> 值，指定在事件日志达到其最大日志大小时存储新项的已配置行为。 默认值为 <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" />。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLog.Source">
      <summary>获取或设置在写入事件日志时要注册和使用的源名称。</summary>
      <returns>在事件日志中注册为项源的名称。 默认值为空字符串("")。</returns>
      <exception cref="T:System.ArgumentException">源名称会导致注册表项路径的长度超过 254 个字符。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLog.SynchronizingObject">
      <summary>获取或设置用于封送事件处理程序调用的对象，该调用在有 <see cref="T:System.Diagnostics.EventLog" /> 项写入事件时发出。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，用于封送由事件日志上的 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件引发的事件处理程序调用。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Category">
      <summary>获取与该项的 <see cref="P:System.Diagnostics.EventLogEntry.CategoryNumber" /> 属性关联的文本。</summary>
      <returns>应用程序特定的类别文本。</returns>
      <exception cref="T:System.Exception">不能与类别关联的插入字符串之一分配空间。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.CategoryNumber">
      <summary>获取事件日志项的类别号。</summary>
      <returns>该项的应用程序特定类别号。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Data">
      <summary>获取与该项关联的二进制数据。</summary>
      <returns>包含与此项关联的二进制数据的字节数组。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.EntryType">
      <summary>获取该项的事件类型。</summary>
      <returns>与事件日志中的项相关联的事件类型。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.EventID">
      <summary>获取当前事件项的应用程序特定事件标识符。</summary>
      <returns>事件消息的应用程序特定标识符。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Index">
      <summary>获取该项在事件日志中的索引。</summary>
      <returns>该项在事件日志中的索引。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.InstanceId">
      <summary>获取指定事件项的消息文本的资源标识符。</summary>
      <returns>资源标识符，与事件源的消息资源文件中的字符串定义对应。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.MachineName">
      <summary>获取在其上生成该项的计算机的名称。</summary>
      <returns>包含事件日志的计算机的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Message">
      <summary>获取与该事件项关联的本地化消息。</summary>
      <returns>消息的格式化、本地化文本。 其中包含关联的替换字符串。</returns>
      <exception cref="T:System.Exception">与消息关联的插入字符串之一，无法分配空间。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.ReplacementStrings">
      <summary>获取与事件日志项关联的替换字符串。</summary>
      <returns>包含存储在事件项中的替换字符串的数组。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.Source">
      <summary>获取生成该事件的应用程序的名称。</summary>
      <returns>在事件日志中注册为该事件的源的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.TimeGenerated">
      <summary>获取生成该事件的本地时间。</summary>
      <returns>生成该事件的本地时间。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.TimeWritten">
      <summary>获取在日志中写入该事件的本地时间。</summary>
      <returns>在日志中写入该事件的本地时间。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntry.UserName">
      <summary>获取负责该事件的用户的名称。</summary>
      <returns>唯一标识用户或组的安全标识符 (SID)。</returns>
      <exception cref="T:System.SystemException">无法为用户的 SID 获得帐户信息。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.Count">
      <summary>获取事件日志中的项数 (即中的元素数 <see cref="T:System.Diagnostics.EventLogEntry" /> 集合)。</summary>
      <returns>事件日志中的当前条目数。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.Item(System.Int32)">
      <summary>获取在事件日志中，基于从 0 （零） 开始的索引的项。</summary>
      <param name="index">从零开始的索引，它与事件日志条目相关联。</param>
      <returns>通过指定的位置处的事件日志项 <paramref name="index" /> 参数。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 的访问（线程安全）。</summary>
      <returns>false 如果对集合的访问不同步 （线程安全）。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogEntryCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Diagnostics.EventLogEntryCollection" /> 对象的访问。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>包含此权限请求的权限项集合。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.MachineName">
      <summary>获取或设置可以在其读取事件的计算机的名称。</summary>
      <returns>可能在其读取事件的计算机的名称。 默认值是"。"。</returns>
      <exception cref="T:System.ArgumentException">计算机名是无效的。</exception>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。 默认值为 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" />。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.MachineName">
      <summary>获取在其上读取或写入事件的计算机的名称。</summary>
      <returns>若要读取或写入事件的计算机的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntry.PermissionAccess">
      <summary>获取权限请求中使用的权限访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.EventLogPermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogPermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的对象。</summary>
      <param name="index">集合中的从零开始索引。</param>
      <returns>
        <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 存在的指定索引处。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogTraceListener.EventLog">
      <summary>获取或设置要写入事件日志。</summary>
      <returns>要写入事件日志。</returns>
    </member>
    <member name="P:System.Diagnostics.EventLogTraceListener.Name">
      <summary>获取或设置此名称 <see cref="T:System.Diagnostics.EventLogTraceListener" />。</summary>
      <returns>该跟踪侦听器的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.CategoryCount">
      <summary>获取或设置类别资源文件中的类别数。</summary>
      <returns>类别资源文件中的类别数。 默认值为 0。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该属性设置为负数值或为一个值大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.CategoryResourceFile">
      <summary>获取或设置包含源的类别字符串的资源文件的路径。</summary>
      <returns>类别资源文件的路径。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.LogName">
      <summary>获取或设置源将条目写入到事件日志的名称。</summary>
      <returns>事件日志的名称。 这可以是应用程序、 系统或自定义日志名称。 默认值为"Application。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.MachineName">
      <summary>获取或设置在其上注册事件源的计算机的名称。</summary>
      <returns>在其上注册事件源系统的名称。 默认为本地计算机 (".")。</returns>
      <exception cref="T:System.ArgumentException">计算机名是无效的。</exception>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.MessageResourceFile">
      <summary>获取或设置包含消息格式的源字符串的消息资源文件的路径。</summary>
      <returns>消息资源文件的路径。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.ParameterResourceFile">
      <summary>获取或设置包含消息源的参数字符串的资源文件的路径。</summary>
      <returns>参数资源文件的路径。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.EventSourceCreationData.Source">
      <summary>获取或设置要将注册到事件日志作为事件源的名称。</summary>
      <returns>要注册为项源的事件日志的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.EventTypeFilter.EventType">
      <summary>获取或设置跟踪的消息的事件类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.SourceLevels" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Comments">
      <summary>获取与文件关联的注释。</summary>
      <returns>与文件关联的注释，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.CompanyName">
      <summary>获取生成此文件的公司的名称。</summary>
      <returns>生成文件的公司的名称，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileBuildPart">
      <summary>获取文件的生成号。</summary>
      <returns>表示文件生成号的值，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileDescription">
      <summary>获取文件说明。</summary>
      <returns>文件说明，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMajorPart">
      <summary>获取版本号的主要版本号部分。</summary>
      <returns>表示版本号主要部分的值，当文件不包含版本信息时则为 0（零）。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileMinorPart">
      <summary>获取文件版本号的次要部分。</summary>
      <returns>表示文件版本号次要部分的值，当文件不包含版本信息时则为 0（零）。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileName">
      <summary>获取 <see cref="T:System.Diagnostics.FileVersionInfo" /> 的此实例所描述的文件的名称。</summary>
      <returns>
        <see cref="T:System.Diagnostics.FileVersionInfo" /> 的此实例所描述的文件的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FilePrivatePart">
      <summary>获取文件专用部件号。</summary>
      <returns>表示文件专用部件号的值，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.FileVersion">
      <summary>获取文件版本号。</summary>
      <returns>文件的版本号，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.InternalName">
      <summary>获取文件的内部名称（如果存在）。</summary>
      <returns>文件的内部名称。 如果不存在内部名称，则该属性将包含文件的原始名称（不带扩展名）。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsDebug">
      <summary>获取一个值，该值指定文件是否包含调试信息或在调试功能启用的情况下进行编译。</summary>
      <returns>如果文件包含调试信息或在调试功能启用的情况下进行编译，值为 true；反之，值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPatched">
      <summary>获取一个值，该值指定该文件是否已修改，且不同于相同版本号的原始发行文件。</summary>
      <returns>如果该文件修补过，值为 true；反之，值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPreRelease">
      <summary>获取一个值，该值指定该文件是否为开发版本，而不是用于商业目的的发行版。</summary>
      <returns>如果该文件是预发行版本，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsPrivateBuild">
      <summary>获取一个值，该值指定文件是否采用标准的发行过程生成。</summary>
      <returns>如果文件为专用版本，值为 true；如果文件是采用标准发行过程生成的或如果文件不包含版本信息，则值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.IsSpecialBuild">
      <summary>获取一个值，该值指定该文件是否为特殊内部版本。</summary>
      <returns>如果该文件为特殊内部版本，值为 true；反之，值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.Language">
      <summary>获取版本信息区的默认语言字符串。</summary>
      <returns>版本资源中 Microsoft 语言标识符的描述字符串，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalCopyright">
      <summary>获取所有适用于指定文件的版权声明。</summary>
      <returns>适用于指定文件的版权声明。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.LegalTrademarks">
      <summary>获取应用到文件的商标和注册商标。</summary>
      <returns>应用到文件的商标和注册商标，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.OriginalFilename">
      <summary>获取创建文件时所使用的名称。</summary>
      <returns>创建文件时使用的名称，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.PrivateBuild">
      <summary>获取文件私有版本的信息。</summary>
      <returns>文件私有版本的信息，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductBuildPart">
      <summary>获取该文件关联产品的生成号。</summary>
      <returns>表示与此文件关联的产品的生成号的值，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMajorPart">
      <summary>获取与此文件关联的产品版本号的主要部分。</summary>
      <returns>表示产品版本号主要部分的值，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductMinorPart">
      <summary>获取文件关联产品版本号的次要部分。</summary>
      <returns>表示产品版本号次要部分的值，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductName">
      <summary>获取与此文件一起发行的产品的名称。</summary>
      <returns>与此文件一起发行的产品的名称，当文件不包含版本信息则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductPrivatePart">
      <summary>获取此文件关联产品的专用部件号。</summary>
      <returns>表示生成文件时关联的专用部件号的值，或者如果文件不包含版本信息，则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.ProductVersion">
      <summary>获取与此文件一起发行的产品的版本。</summary>
      <returns>与此文件一起发行的产品的版本，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.FileVersionInfo.SpecialBuild">
      <summary>获取文件的特殊内部版本信息。</summary>
      <returns>文件的特殊内部版本信息，当文件不包含版本信息时则为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceData.InstanceName">
      <summary>获取与此实例的数据关联的实例名称。</summary>
      <returns>与性能计数器关联实例的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceData.RawValue">
      <summary>获取性能计数器样本与关联的原始数据值。</summary>
      <returns>读取的性能计数器样本中的原始值与关联 <see cref="P:System.Diagnostics.InstanceData.Sample" /> 属性。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceData.Sample">
      <summary>获取生成此数据的性能计数器样本。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.CounterSample" /> 来自指定的实例 <see cref="P:System.Diagnostics.InstanceData.InstanceName" /> 属性。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.CounterName">
      <summary>获取你想要获取其实例数据的性能计数器的名称。</summary>
      <returns>性能计数器名称。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Item(System.String)">
      <summary>获取与此计数器相关联的实例数据。 这通常是一组原始计数器值。</summary>
      <param name="instanceName">性能计数器类别实例或为空字符串的名称 ("") 如果该类别包含单个实例。</param>
      <returns>
        <see cref="T:System.Diagnostics.InstanceData" /> 项，将根据其 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象进行索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceName" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Keys">
      <summary>获取与此实例数据关联的对象的对象和性能计数器注册表项。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 它表示一组特定于对象的注册表项。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollection.Values">
      <summary>获取包含该计数器的实例数据的原始计数器值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 表示计数器的原始数据值。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Item(System.String)">
      <summary>获取指定的计数器的实例数据。</summary>
      <param name="counterName">性能计数器的名称。</param>
      <returns>
        <see cref="T:System.Diagnostics.InstanceDataCollection" /> 项，将根据其 <see cref="T:System.Diagnostics.InstanceDataCollectionCollection" /> 对象进行索引。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="counterName" /> 参数为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Keys">
      <summary>获取与此实例的数据集合关联的对象的对象和性能计数器注册表项。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> 它表示一组特定于对象的注册表项。</returns>
    </member>
    <member name="P:System.Diagnostics.InstanceDataCollectionCollection.Values">
      <summary>获取该实例包含的计数器的实例集合的数据值。</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" /> ，它表示计数器的实例和及其相关联的数据值。</returns>
    </member>
    <member name="P:System.Diagnostics.MonitoringDescriptionAttribute.Description">
      <summary>获取与监视的项相关联的说明文字。</summary>
      <returns>应用程序定义的描述。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CategoryName">
      <summary>获取或设置此性能计数器的性能计数器类别的名称。</summary>
      <returns>此性能计数器与之关联的性能计数器类别 （性能对象） 的名称。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CategoryName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterHelp">
      <summary>获取此性能计数器的说明。</summary>
      <returns>此性能计数器将测量的数量的项的说明。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例不是与性能计数器相关联。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterName">
      <summary>获取或设置与此关联的性能计数器的名称 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例。</summary>
      <returns>该计数器，通常描述所计算的数量的名称。 此名称显示在列表中的计数器的性能计数器管理器 MMC 管理单元中的添加计数器对话框。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounter.CounterName" /> 为 null。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.CounterType">
      <summary>获取关联的性能计数器的计数器类型。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterType" /> 描述同时计数器如何与监视应用程序和它包含的值的性质交互 (例如，计算和非计算所得)。</returns>
      <exception cref="T:System.InvalidOperationException">实例不是程序与性能计数器。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceLifetime">
      <summary>获取或设置进程的生存期。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 值之一。 默认值为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置的值不是成员的 <see cref="T:System.Diagnostics.PerformanceCounterInstanceLifetime" /> 枚举。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 后设置 <see cref="T:System.Diagnostics.PerformanceCounter" /> 已初始化。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.InstanceName">
      <summary>获取或设置此性能计数器实例名称。</summary>
      <returns>性能计数器类别实例或为空字符串的名称 ("")，如果该计数器为单实例计数器。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.MachineName">
      <summary>获取或设置此性能计数器的计算机名称 </summary>
      <returns>驻留的性能计数器和及其关联的类别的服务器。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounter.MachineName" /> 格式无效。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.RawValue">
      <summary>获取或设置原始的和非计算所得的此计数器的值。</summary>
      <returns>此计数器的原始值。</returns>
      <exception cref="T:System.InvalidOperationException">您尝试设置该计数器的原始值，但该计数器是只读的。- 或 - 实例不是程序与性能计数器。- 或 -<see cref="P:System.Diagnostics.PerformanceCounter.InstanceLifetime" /> 属性设置为 <see cref="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process" />  使用全局共享内存时。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">访问 API 时出错。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition （me），后者不支持的性能计数器。</exception>
      <exception cref="T:System.UnauthorizedAccessException">没有管理权限执行的代码尝试读取性能计数器。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounter.ReadOnly">
      <summary>获取或设置一个值，该值指示是否此 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例是否处于只读模式。</summary>
      <returns>true, 如果 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例是否处于只读模式 （即使计数器本身是可自定义的.NET Framework 计数器）; false 知识库是否处于读/写模式。 默认值是由构造函数设置的值。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryHelp">
      <summary>获取该类别的帮助文本。</summary>
      <returns>此类别测量性能对象的说明。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 属性为 null。 获取类别帮助前，必须设置的类别名称。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">对基础系统 API 的调用失败。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryName">
      <summary>获取或设置用于定义此类别的性能对象的名称。</summary>
      <returns>性能对象、 要与此关联的性能计数器类别的名称 <see cref="T:System.Diagnostics.PerformanceCounterCategory" /> 实例。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 为一个空字符串 ("")。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.CategoryName" /> 为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.CategoryType">
      <summary>获取性能计数器类别类型。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterCategoryType" /> 值之一。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterCategory.MachineName">
      <summary>获取或设置此类别所在的计算机的名称。</summary>
      <returns>存在的性能计数器类别和及其相关的计数器的计算机的名称。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterCategory.MachineName" /> 的语法不正确。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermission.PermissionEntries">
      <summary>获取此权限请求的权限项集合。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection" /> ，它包含此权限请求权限项。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.CategoryName">
      <summary>获取或设置性能计数器类别的名称。</summary>
      <returns>性能计数器类别 （性能对象） 的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName">
      <summary>获取或设置性能计数器的计算机名称。</summary>
      <returns>性能计数器的类别所驻留的服务器。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.PerformanceCounterPermissionAttribute.MachineName" /> 格式无效。</exception>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionAttribute.PermissionAccess">
      <summary>获取或设置权限请求中使用的访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。 默认值为 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" />。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.CategoryName">
      <summary>获取性能计数器类别 （性能对象） 的名称。</summary>
      <returns>性能计数器类别 （性能对象） 的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.MachineName">
      <summary>获取性能计数器的类别所驻留的服务器的名称。</summary>
      <returns>类别所驻留的服务器的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntry.PermissionAccess">
      <summary>获取项的权限的访问级别。</summary>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionAccess" /> 值的按位组合。</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceCounterPermissionEntryCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的对象。</summary>
      <param name="index">集合中的从零开始索引。</param>
      <returns>
        <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 存在的指定索引处的对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.BasePriority">
      <summary>获取关联进程的基本优先级。</summary>
      <returns>基本优先级，从关联进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 计算。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">该进程已退出。- 或 - 尚未启动进程，因此没有进程 ID。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.EnableRaisingEvents">
      <summary>获取或设置在进程终止时是否应引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件。</summary>
      <returns>如果关联的进程终止（通过退出或者调用 <see cref="M:System.Diagnostics.Process.Kill" />）时应引发 <see cref="E:System.Diagnostics.Process.Exited" /> 事件，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.ExitCode">
      <summary>获取关联进程终止时指定的值。</summary>
      <returns>关联进程终止时指定的代码。</returns>
      <exception cref="T:System.InvalidOperationException">进程尚未退出。- 或 - 进程 <see cref="P:System.Diagnostics.Process.Handle" /> 无效。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.ExitCode" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.ExitTime">
      <summary>获取关联进程退出的时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，它指示关联进程终止的时间。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问 <see cref="P:System.Diagnostics.Process.ExitTime" /> 在远程计算机运行的进程。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Handle">
      <summary>获取关联进程的本机句柄。</summary>
      <returns>进程启动时操作系统向关联进程分配的句柄。 系统使用此句柄来跟踪进程特性。</returns>
      <exception cref="T:System.InvalidOperationException">该进程尚未启动或已退出。 不能读取 <see cref="P:System.Diagnostics.Process.Handle" /> 属性，因为没有与此 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。- 或 - <see cref="T:System.Diagnostics.Process" /> 实例已附加到正在运行的进程，但你没有获取具有完全访问权限的句柄所需的权限。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.Handle" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.HandleCount">
      <summary>获取由进程打开的句柄数。</summary>
      <returns>进程打开的操作系统句柄数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.HasExited">
      <summary>获取指示关联进程是否已终止的值。</summary>
      <returns>如果 <see cref="T:System.Diagnostics.Process" /> 组件引用的操作系统进程已终止，则为 true；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">没有与此对象关联的进程。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">无法检索该进程的退出代码。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.HasExited" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Id">
      <summary>获取关联进程的唯一标识符。</summary>
      <returns>此 <see cref="T:System.Diagnostics.Process" /> 实例引用的、由系统生成的进程的唯一标识符。</returns>
      <exception cref="T:System.InvalidOperationException">尚未设置此进程的 <see cref="P:System.Diagnostics.Process.Id" /> 属性。- 或 - 没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MachineName">
      <summary>获取关联进程正在其上运行的计算机的名称。</summary>
      <returns>关联进程正在其上运行的计算机的名称。</returns>
      <exception cref="T:System.InvalidOperationException">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainModule">
      <summary>获取关联进程的主模块。</summary>
      <returns>用于启动进程的 <see cref="T:System.Diagnostics.ProcessModule" />。</returns>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainModule" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">32 位进程正尝试访问 64 位进程的模块。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 - 该进程已退出。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowHandle">
      <summary>获取关联进程主窗口的窗口句柄。</summary>
      <returns>关联进程主窗口的系统生成的窗口句柄。</returns>
      <exception cref="T:System.InvalidOperationException">未定义 <see cref="P:System.Diagnostics.Process.MainWindowHandle" />，因为已退出进程。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainWindowHandle" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MainWindowTitle">
      <summary>获取进程的主窗口标题。</summary>
      <returns>进程的主窗口标题。</returns>
      <exception cref="T:System.InvalidOperationException">未定义 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 属性，因为进程已退出。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MainWindowTitle" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MaxWorkingSet">
      <summary>获取或设置关联进程允许的最大工作集大小（以字节为单位）。</summary>
      <returns>内存中允许的进程的最大工作集大小(以字节为单位)。</returns>
      <exception cref="T:System.ArgumentException">最大的工作集大小无效。 它必须大于或等于最小的工作集大小。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">无法从关联的进程资源中检索工作集信息。- 或 - 进程标识符或进程句柄为零，因为尚未启动该进程。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MaxWorkingSet" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 - 该进程已退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.MinWorkingSet">
      <summary>获取或设置关联进程允许的最小工作集大小（以字节为单位）。</summary>
      <returns>内存中进程所需的最小工作集大小(以字节为单位)。</returns>
      <exception cref="T:System.ArgumentException">最小工作集大小无效。 它必须小于或等于最大工作集大小。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">无法从关联的进程资源中检索工作集信息。- 或 - 进程标识符或进程句柄为零，因为尚未启动该进程。</exception>
      <exception cref="T:System.NotSupportedException">你正尝试访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.MinWorkingSet" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 - 该进程已退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Modules">
      <summary>获取已由关联进程加载的模块。</summary>
      <returns>类型 <see cref="T:System.Diagnostics.ProcessModule" /> 的数组，表示已由关联进程加载的模块。</returns>
      <exception cref="T:System.NotSupportedException">您试图访问 <see cref="P:System.Diagnostics.Process.Modules" /> 在远程计算机运行的进程。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me);设置 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 到 false 要访问此属性在 Windows 98 和 Windows me。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">您试图访问 <see cref="P:System.Diagnostics.Process.Modules" /> 系统进程或空闲的进程的属性。 这些进程不具有模块。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize">
      <summary>获取为关联的进程分配的非分页系统内存量（以字节为单位）。</summary>
      <returns>系统已为无法写入到虚拟内存分页文件的关联进程分配的内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.NonpagedSystemMemorySize64">
      <summary>获取为关联的进程分配的非分页系统内存量（以字节为单位）。</summary>
      <returns>为关联的进程分配的、不能写入虚拟内存分页文件中的系统内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize">
      <summary>获取为关联的进程分配的分页内存量（以字节为单位）。</summary>
      <returns>由可写入到虚拟内存分页文件的关联进程分配的内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PagedMemorySize64">
      <summary>获取为关联的进程分配的分页内存量（以字节为单位）。</summary>
      <returns>在虚拟内存分页文件中为关联进程分配的内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize">
      <summary>获取为关联进程分配的可分页系统内存量（以字节为单位）。</summary>
      <returns>系统已为可写入到虚拟内存页面文件的关联进程分配的内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PagedSystemMemorySize64">
      <summary>获取为关联进程分配的可分页系统内存量（以字节为单位）。</summary>
      <returns>为可写入虚拟内存分页文件的关联内存分配的系统内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize">
      <summary>获取关联的进程使用的虚拟内存分页文件中的最大内存量（以字节为单位）。</summary>
      <returns>由可写入到虚拟内存分页文件的关联进程分配的最大内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakPagedMemorySize64">
      <summary>获取关联的进程使用的虚拟内存分页文件中的最大内存量（以字节为单位）。</summary>
      <returns>从启动关联的进程以来在为虚拟内存分页文件中关联进程分配的最大内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize">
      <summary>获取关联进程使用的最大虚拟内存量（以字节为单位）。</summary>
      <returns>关联进程请求的最大虚拟内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakVirtualMemorySize64">
      <summary>获取关联进程使用的最大虚拟内存量（以字节为单位）。</summary>
      <returns>从关联进程启动以来为关联进程分配的最大虚拟内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet">
      <summary>获取关联进程的峰值工作集大小（以字节为单位）。</summary>
      <returns>关联进程一次所需的最大物理内存量（以字节为单位）。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PeakWorkingSet64">
      <summary>获取关联进程使用的最大物理内存量（以字节为单位）。</summary>
      <returns>从启动关联进程以来为关联进程分配的最大物理内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityBoostEnabled">
      <summary>获取或设置一个值，该值指示主窗口拥有焦点时是否应由操作系统暂时提升关联进程优先级。</summary>
      <returns>如果进程离开等待状态时应动态提升进程优先级别，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">从关联的进程资源，无法检索优先级提升信息。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。- 或 - 进程标识符或进程句柄为零。 （进程尚未启动。）</exception>
      <exception cref="T:System.NotSupportedException">您试图访问 <see cref="P:System.Diagnostics.Process.PriorityBoostEnabled" /> 在远程计算机运行的进程。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PriorityClass">
      <summary>获取或设置关联进程的总体优先级类别。</summary>
      <returns>关联进程的优先级类别，可从该类别计算进程的 <see cref="P:System.Diagnostics.Process.BasePriority" />。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法从关联的进程资源中设置或检索进程优先级信息。- 或 - 进程标识符或进程句柄为零。 （进程尚未启动。）</exception>
      <exception cref="T:System.NotSupportedException">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.InvalidOperationException">进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。</exception>
      <exception cref="T:System.PlatformNotSupportedException">当使用 Windows 98 或 Windows Millennium Edition (Windows Me) 时，已将 <see cref="P:System.Diagnostics.Process.PriorityClass" /> 设置为 AboveNormal 或 BelowNormal。 这些平台不支持优先级类的这些值。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">无法设置优先级类，因为它不使用有效的值，如 <see cref="T:System.Diagnostics.ProcessPriorityClass" /> 枚举中所定义。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize">
      <summary>获取为关联的进程分配的专用内存量（以字节为单位）。</summary>
      <returns>由关联的进程分配的、不能与其他进程共享的字节数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PrivateMemorySize64">
      <summary>获取为关联的进程分配的专用内存量（以字节为单位）。</summary>
      <returns>为关联进程分配的不能与其他进程共享的内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.PrivilegedProcessorTime">
      <summary>获取此进程的特权处理器时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示进程在操作系统内核中运行代码所用的时间。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 在远程计算机运行的进程。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessName">
      <summary>获取该进程的名称。</summary>
      <returns>系统用以向用户标识该进程的名称。</returns>
      <exception cref="T:System.InvalidOperationException">进程没有标识符，或者没有与 <see cref="T:System.Diagnostics.Process" /> 关联的进程。- 或 - 关联进程已退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.NotSupportedException">进程不在此计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.ProcessorAffinity">
      <summary>获取或设置一些处理器，此进程中的线程可以按计划在这些处理器上运行。</summary>
      <returns>位掩码，表示关联进程内的线程可以在其上运行的处理器。 默认值取决于计算机上的处理器数。 默认值为 2 n -1，其中 n 是处理器数。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">
        <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 无法设置或从关联的进程资源中检索信息。- 或 - 进程标识符或进程句柄为零。 （进程尚未启动。）</exception>
      <exception cref="T:System.NotSupportedException">您试图访问 <see cref="P:System.Diagnostics.Process.ProcessorAffinity" /> 在远程计算机运行的进程。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.InvalidOperationException">该进程 <see cref="P:System.Diagnostics.Process.Id" /> 不可用。- 或 - 该进程已退出。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.Responding">
      <summary>获取指示进程的用户界面当前是否响应的值。</summary>
      <returns>如果关联进程的用户界面当前响应系统，则为 true；否则为 false。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
      <exception cref="T:System.InvalidOperationException">没有与此 <see cref="T:System.Diagnostics.Process" /> 对象关联的进程。</exception>
      <exception cref="T:System.NotSupportedException">您试图访问 <see cref="P:System.Diagnostics.Process.Responding" /> 在远程计算机运行的进程。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.SafeHandle">
      <summary>获取此进程的本机句柄。</summary>
      <returns>此进程的本机句柄。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.SessionId">
      <summary>获取关联进程的终端服务会话标识符。</summary>
      <returns>关联进程的终端服务会话标识符。</returns>
      <exception cref="T:System.NullReferenceException">没有与此进程关联会话。</exception>
      <exception cref="T:System.InvalidOperationException">没有与此会话标识符关联的进程。- 或 -关联的进程不在此计算机上。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="P:System.Diagnostics.Process.SessionId" /> Windows 98 不支持属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardError">
      <summary>获取用于读取应用程序错误输出的流。</summary>
      <returns>可用于读取应用程序的标准错误流的 <see cref="T:System.IO.StreamReader" />。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.Process.StandardError" /> 尚未定义用于重定向流; 请确保 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError" /> 设置为 true 和 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false。- 或 - <see cref="P:System.Diagnostics.Process.StandardError" /> 为异步读取操作与中打开流 <see cref="M:System.Diagnostics.Process.BeginErrorReadLine" />。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardInput">
      <summary>获取用于写入应用程序输入的流。</summary>
      <returns>
        <see cref="T:System.IO.StreamWriter" />，可用于写入应用程序的标准输入流。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Diagnostics.Process.StandardInput" /> 流尚未定义，因为 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput" /> 设置为 false。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StandardOutput">
      <summary>获取用于读取应用程序文本输出的流。</summary>
      <returns>
        <see cref="T:System.IO.StreamReader" />，可用于读取应用程序的标准输出流。</returns>
      <exception cref="T:System.InvalidOperationException">尚未对 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流进行重定向定义；请确保 <see cref="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput" /> 设置为 true 且 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false。- 或 - 已打开 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流，以使用 <see cref="M:System.Diagnostics.Process.BeginOutputReadLine" /> 进行异步读取操作。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StartInfo">
      <summary>获取或设置要传递给 <see cref="T:System.Diagnostics.Process" /> 的 <see cref="M:System.Diagnostics.Process.Start" /> 方法的属性。</summary>
      <returns>表示启动进程时要使用的数据的 <see cref="T:System.Diagnostics.ProcessStartInfo" />。 这些参数包括用于启动该进程的可执行文件或文档的名称。</returns>
      <exception cref="T:System.ArgumentNullException">指定 <see cref="P:System.Diagnostics.Process.StartInfo" /> 的值为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.StartTime">
      <summary>获取关联进程启动的时间。</summary>
      <returns>指示进程启动的时间的对象。 如果进程未运行，将会引发异常。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.StartTime" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
      <exception cref="T:System.InvalidOperationException">该进程已退出。- 或 -该进程尚未启动。</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">调用 Windows 函数时出错。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.SynchronizingObject">
      <summary>获取或设置用于封送由于进程退出事件而发出的事件处理程序调用的对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它用于封送由于进程上的 <see cref="E:System.Diagnostics.Process.Exited" /> 事件而发出的事件处理程序调用。</returns>
    </member>
    <member name="P:System.Diagnostics.Process.Threads">
      <summary>获取在关联进程中运行的一组线程。</summary>
      <returns>类型 <see cref="T:System.Diagnostics.ProcessThread" /> 的数组，表示当前在关联进程中运行的操作系统线程。</returns>
      <exception cref="T:System.SystemException">进程没有 <see cref="P:System.Diagnostics.Process.Id" />，或者没有与 <see cref="T:System.Diagnostics.Process" /> 实例关联的进程。- 或 - 关联进程已退出。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)；将 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 设置为 false，以在 Windows 98 和 Windows Me 上访问此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.TotalProcessorTime">
      <summary>获取此进程的总的处理器时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示关联进程使用 CPU 的时间。 此值是 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 和 <see cref="P:System.Diagnostics.Process.PrivilegedProcessorTime" /> 的和。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.TotalProcessorTime" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.UserProcessorTime">
      <summary>获取此进程的用户处理器时间。</summary>
      <returns>
        <see cref="T:System.TimeSpan" />，它指示关联进程在该进程的应用程序部分内(而不是在操作系统内核中)运行代码所用的时间。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
      <exception cref="T:System.NotSupportedException">你正试图访问在远程计算机上运行的进程的 <see cref="P:System.Diagnostics.Process.UserProcessorTime" /> 属性。 此属性仅可用于本地计算机上运行的进程。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize">
      <summary>获取进程的虚拟内存大小（以字节为单位）。</summary>
      <returns>关联进程请求的虚拟内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.VirtualMemorySize64">
      <summary>获取为关联进程分配的虚拟内存量（以字节为单位）。</summary>
      <returns>为关联进程分配的虚拟内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet">
      <summary>获取关联的进程的物理内存使用量，以字节为单位。</summary>
      <returns>关联进程当前使用的物理内存总量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.Process.WorkingSet64">
      <summary>获取为关联的进程分配的物理内存量（以字节为单位）。</summary>
      <returns>为关的进程分配的物理内存量(以字节为单位)。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition (Windows Me)，不支持此属性。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.BaseAddress">
      <summary>获取加载模块的内存地址。</summary>
      <returns>模块加载地址。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.EntryPointAddress">
      <summary>获取运行时系统将加载并运行该模块的函数的内存地址。</summary>
      <returns>模块的入口点。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileName">
      <summary>获取该模块的完整路径。</summary>
      <returns>定义该模块的位置的完全限定的路径。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.FileVersionInfo">
      <summary>获取有关模块的版本信息。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.FileVersionInfo" /> 包含模块的版本信息。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleMemorySize">
      <summary>获取加载模块所需的内存量。</summary>
      <returns>大小 （以字节为单位，模块占用的内存）。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModule.ModuleName">
      <summary>获取进程模块的名称。</summary>
      <returns>模块的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessModuleCollection.Item(System.Int32)">
      <summary>获取用于遍历进程模块集的索引。</summary>
      <param name="index">集合中模块的从零开始的索引值。</param>
      <returns>对集合中的模块进行索引的 <see cref="T:System.Diagnostics.ProcessModule" /></returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Arguments">
      <summary>获取或设置启动应用程序时要使用的一组命令行参数。</summary>
      <returns>单个字符串包含要传递给在 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性中指定的目标应用程序的参数。 默认值为空字符串("")。 在 Windows Vista 和早期的 Windows 操作系统上，添加至进程全径的长度的参数长度必须小于 2080。 在 Windows 7 和更高版本，此长度必须小于 32699。参数由目标应用程序进行分析和解释，因此必须与该应用程序的预期保持一致。 对于以下示例中所演示的 .NET 的应用程序，空格被解释为多个参数之间的分隔符。 包含空格的单个参数必须用引号引起来，但这些引号不会传递到目标应用程序。 在包括引号在内的最终已分析的参数中，每个标记均会进行三重转义。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.CreateNoWindow">
      <summary>获取或设置指示是否在新窗口中启动该进程的值。</summary>
      <returns>如果应启动进程而不创建包含它的新窗口，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Domain">
      <summary>获取或设置确定要在启动进程时使用的域的值。</summary>
      <returns>要在启动进程时使用的 Active Directory 域。 域属性主要与使用 Active Directory 的企业级环境内的用户相关。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Environment">
      <summary>获取应用于此进程及其子进程的环境变量。</summary>
      <returns>一个泛型字典，包含应用于此进程及其子进程的环境变量。 默认值为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.EnvironmentVariables">
      <summary>获取文件的搜索路径、临时文件的目录、应用程序特定的选项和其他类似信息。</summary>
      <returns>提供应用于此进程和子进程的环境变量的字符串字典。 默认值为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialog">
      <summary>获取或设置指示不能启动进程时是否向用户显示错误对话框的值。</summary>
      <returns>如果在不能启动进程时应在屏幕上显示错误对话框，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.ErrorDialogParentHandle">
      <summary>获取或设置在为不能启动的进程显示错误对话框时要使用的窗口句柄。</summary>
      <returns>一个指针，标识因进程启动失败而产生的错误对话框的句柄。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.FileName">
      <summary>获取或设置要启动的应用程序或文档。</summary>
      <returns>要启动的应用程序的名称或某文件类型的文档的名称，该文件类型与应用程序关联并且拥有可用的默认打开操作。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.LoadUserProfile">
      <summary>获取或设置指示是否从注册表加载 Windows 用户配置文件的值。</summary>
      <returns>如果应加载 Windows 用户配置文件，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Password">
      <summary>获取或设置一个安全字符串，其中包含要在启动进程时使用的用户密码。</summary>
      <returns>启动进程时使用的用户密码。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.PasswordInClearText">
      <summary>获取或设置明文形式的用户密码以便在开始进程时使用。</summary>
      <returns>明文形式的用户密码。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardError">
      <summary>获取或设置指示是否将应用程序的错误输出写入 <see cref="P:System.Diagnostics.Process.StandardError" /> 流中的值。</summary>
      <returns>如果错误输出应写入 <see cref="P:System.Diagnostics.Process.StandardError" />，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput">
      <summary>获取或设置指示应用程序的输入是否从 <see cref="P:System.Diagnostics.Process.StandardInput" /> 流中读取的值。</summary>
      <returns>如果应从 <see cref="P:System.Diagnostics.Process.StandardInput" /> 读取输入，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput">
      <summary>获取或设置指示是否将应用程序的文本输出写入 <see cref="P:System.Diagnostics.Process.StandardOutput" /> 流中的值。</summary>
      <returns>如果输出应写入 <see cref="P:System.Diagnostics.Process.StandardOutput" />，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding">
      <summary>获取或设置错误输出的首选编码。</summary>
      <returns>表示错误输出的首选编码的对象。 默认值为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding">
      <summary>获取或设置标准输出的首选编码。</summary>
      <returns>表示标准输出的首选编码的对象。 默认值为 null。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UserName">
      <summary>获取或设置在启动进程时使用的用户名。</summary>
      <returns>启动进程时使用的用户名。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.UseShellExecute">
      <summary>获取或设置指示是否使用操作系统 shell 启动进程的值。</summary>
      <returns>如果应在启动进程时使用 shell，则为 true；如果直接从可执行文件创建进程，则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verb">
      <summary>获取或设置打开 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性指定的应用程序或文档时要使用的谓词。</summary>
      <returns>要对进程打开的文件执行的操作。 默认值为空字符串 ("")，它表示没有操作。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.Verbs">
      <summary>获取与 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性指定的文件类型关联的一组谓词。</summary>
      <returns>系统可应用于 <see cref="P:System.Diagnostics.ProcessStartInfo.FileName" /> 属性所指示文件的操作。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WindowStyle">
      <summary>获取或设置启动进程时使用的窗口状态。</summary>
      <returns>枚举值之一，它指示是在最大化窗口、最小化窗口、正常(即非最大化也非最小化)窗口还是在不可见的窗口中启动进程。 默认值为 Normal。</returns>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">窗口样式不是之一 <see cref="T:System.Diagnostics.ProcessWindowStyle" /> 枚举成员。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessStartInfo.WorkingDirectory">
      <summary>当 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性为 false 时，将获取或设置要启动的进程的工作目录。 当 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 为 true 时，获取或设置包含要启动的进程的目录。</summary>
      <returns>当 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 为 true 时，是包含要启动的进程的目录的完全限定名。 当 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性为 false 时，则为要启动的进程的工作目录。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.BasePriority">
      <summary>获取线程的基本优先级。</summary>
      <returns>基本优先级的线程，这将通过结合进程优先级类和相关联的线程的优先级计算操作系统。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.CurrentPriority">
      <summary>获取当前线程的优先级。</summary>
      <returns>当前线程，这可能会偏离基于操作系统如何安排该线程的基本优先级的优先级。 为活动线程可能会暂时提升优先级。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.Id">
      <summary>获取线程的唯一标识符。</summary>
      <returns>与特定的线程关联的唯一标识符。</returns>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.IdealProcessor">
      <summary>设置此线程上运行的首选的处理器。</summary>
      <returns>使用系统计划线程，以确定哪个处理器上运行线程的线程的处理器的首选。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">系统无法设置要在指定的处理器上启动的线程。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityBoostEnabled">
      <summary>获取或设置一个值，该值指示线程的进程的主窗口获得焦点时是否操作系统应暂时提升关联的线程的优先级。</summary>
      <returns>true 若要在用户交互与该进程时提高线程的优先级的接口;否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法检索优先级提升信息。- 或 -无法设置优先级提升信息。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PriorityLevel">
      <summary>获取或设置线程的优先级。</summary>
      <returns>其中一个 <see cref="T:System.Diagnostics.ThreadPriorityLevel" /> 指定限制的线程优先级的范围内的值。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法检索线程优先级别信息。- 或 -无法设置线程优先级别。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime">
      <summary>获取线程是在操作系统内核中运行代码所花费的时间量。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> ，该值指示线程在操作系统内核中运行代码所花费的时间量。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法检索的线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ProcessorAffinity">
      <summary>设置可以在其运行关联的线程的处理器。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 指向一组位，每个都代表一个处理器，线程可以在上运行。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法设置处理器关联。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartAddress">
      <summary>获取调用的函数的操作系统启动此线程的内存地址。</summary>
      <returns>该线程的起始地址，用于指向该线程执行的应用程序定义的函数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.StartTime">
      <summary>获取操作系统启动了线程的时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 表示系统启动该线程的操作系统时的时间。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法检索的线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.ThreadState">
      <summary>获取此线程的当前状态。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.ThreadState" /> ，该值指示线程的执行，例如，正在运行、 正在等待或已终止。</returns>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.TotalProcessorTime">
      <summary>获取此线程已使用该处理器花费的时间总量。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> ，该值指示该线程的已控制处理器的时间量。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法检索的线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.UserProcessorTime">
      <summary>获取关联的线程在应用程序内的运行代码所用的时间量。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> ，该值指示线程在应用程序内的运行代码所花费的时间量，而不是在操作系统内核中。</returns>
      <exception cref="T:System.ComponentModel.Win32Exception">无法检索的线程时间。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThread.WaitReason">
      <summary>获取线程正在等待的原因。</summary>
      <returns>一个 <see cref="T:System.Diagnostics.ThreadWaitReason" /> 表示线程处于等待状态的原因。</returns>
      <exception cref="T:System.InvalidOperationException">该线程处于等待状态。</exception>
      <exception cref="T:System.PlatformNotSupportedException">该平台是 Windows 98 或 Windows Millennium Edition。</exception>
      <exception cref="T:System.NotSupportedException">过程是在远程计算机上。</exception>
    </member>
    <member name="P:System.Diagnostics.ProcessThreadCollection.Item(System.Int32)">
      <summary>获取用于遍历进程线程集的索引。</summary>
      <param name="index">集合中线程的从零开始的索引值。</param>
      <returns>对集合中的线程进行索引的 <see cref="T:System.Diagnostics.ProcessThread" />。</returns>
    </member>
    <member name="P:System.Diagnostics.SourceFilter.Source">
      <summary>获取或设置跟踪源的名称。</summary>
      <returns>跟踪源的名称。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.SourceSwitch.Level">
      <summary>获取或设置开关的级别。</summary>
      <returns>其中一个 <see cref="T:System.Diagnostics.SourceLevels" /> 表示的事件级别的开关的值。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.Elapsed">
      <summary>获取当前实例测量得出的总运行时间。</summary>
      <returns>一个只读的 <see cref="T:System.TimeSpan" />，表示当前实例测量得出的总运行时间。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds">
      <summary>获取当前实例测量得出的总运行时间（以毫秒为单位）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的总毫秒数。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.ElapsedTicks">
      <summary>获取当前实例测量得出的总运行时间（用计时器刻度表示）。</summary>
      <returns>一个只读长整型，表示当前实例测量得出的计时器刻度总数。</returns>
    </member>
    <member name="P:System.Diagnostics.Stopwatch.IsRunning">
      <summary>获取一个值，该值表示 <see cref="T:System.Diagnostics.Stopwatch" /> 计时器是否正在运行。</summary>
      <returns>如果 <see cref="T:System.Diagnostics.Stopwatch" /> 实例当前正在运行，并且正在测量时间间隔花费的时间，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.Attributes">
      <summary>获取在应用程序配置文件中定义的自定义开关特性。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.StringDictionary" /> 包含跟踪开关不区分大小写的自定义特性。</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.Description">
      <summary>获取交换机的说明。</summary>
      <returns>切换描述。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.DisplayName">
      <summary>获取用于标识该开关的名称。</summary>
      <returns>用来标识该开关的名称。 默认值为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.SwitchSetting">
      <summary>获取或设置此开关的当前设置。</summary>
      <returns>此开关的当前设置。 默认值为零。</returns>
    </member>
    <member name="P:System.Diagnostics.Switch.Value">
      <summary>获取或设置该开关的值。</summary>
      <returns>一个表示该开关的值的字符串。</returns>
      <exception cref="T:System.Configuration.ConfigurationErrorsException">该值为 null。- 或 -值不是由组成单独的一系列的范围从 0 到 9 的数字后跟一个可选负号。- 或 -值表示的数字小于 <see cref="F:System.Int32.MinValue" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchDescription">
      <summary>获取或设置该交换机的说明。</summary>
      <returns>切换描述。</returns>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchName">
      <summary>获取或设置该开关的显示名称。</summary>
      <returns>交换机的显示名称。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Diagnostics.SwitchAttribute.SwitchName" /> 设置为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.SwitchAttribute.SwitchName" /> 设置为一个空字符串。</exception>
    </member>
    <member name="P:System.Diagnostics.SwitchAttribute.SwitchType">
      <summary>获取或设置该交换机的类型。</summary>
      <returns>交换机的类型。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Diagnostics.SwitchAttribute.SwitchType" /> 设置为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.SwitchLevelAttribute.SwitchLevelType">
      <summary>获取或设置类型，它确定是否应记录一个跟踪。</summary>
      <returns>
        <see cref="T:System.Type" /> ，它确定是否应记录一个跟踪。</returns>
      <exception cref="T:System.ArgumentNullException">设置操作失败，因为值 null。</exception>
    </member>
    <member name="P:System.Diagnostics.TextWriterTraceListener.Writer">
      <summary>获取或设置接收跟踪或调试输出的文本编写器。</summary>
      <returns>一个 <see cref="T:System.IO.TextWriter" /> 表示接收跟踪或调试输出的编写器。</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.AutoFlush">
      <summary>获取或设置每次写入后是否应在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Trace.Flush" /></summary>
      <returns>如果每次写入后在 <see cref="P:System.Diagnostics.Trace.Listeners" /> 上调用 <see cref="M:System.Diagnostics.Trace.Flush" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.CorrelationManager">
      <summary>获取此跟踪的线程的相关管理器。</summary>
      <returns>与此跟踪的线程关联的 <see cref="T:System.Diagnostics.CorrelationManager" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentLevel">
      <summary>获取或设置缩进级别。</summary>
      <returns>缩进级别。 默认值为零。</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.IndentSize">
      <summary>获取或设置缩进的空格数。</summary>
      <returns>缩进的空格数。 默认值为四。</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.Listeners">
      <summary>获取正在监视跟踪输出的侦听器集合。</summary>
      <returns>表示监视跟踪输出的类型 <see cref="T:System.Diagnostics.TraceListener" /> 集合的 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</returns>
    </member>
    <member name="P:System.Diagnostics.Trace.UseGlobalLock">
      <summary>获取或设置一个值，该值指示是否应使用全局锁。</summary>
      <returns>如果要使用全局锁，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.Callstack">
      <summary>获取当前线程的调用堆栈。</summary>
      <returns>包含堆栈跟踪信息的字符串。 此值可为空字符串 ("")。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.DateTime">
      <summary>获取日期和事件跟踪发生的时间。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 结构，其值为日期和时间以协调世界时 (UTC) 表示。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.LogicalOperationStack">
      <summary>获取包含在堆栈中的相关数据。</summary>
      <returns>一个 <see cref="T:System.Collections.Stack" /> 包含相关数据。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.ProcessId">
      <summary>获取当前进程的唯一标识符。</summary>
      <returns>由系统生成唯一标识符的当前进程。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.ThreadId">
      <summary>获取当前托管线程的唯一标识符。</summary>
      <returns>一个字符串，表示此托管线程的唯一整数标识符。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceEventCache.Timestamp">
      <summary>获取计时器机制中的当前刻度数。</summary>
      <returns>基础计时器机制刻度计数器值。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Attributes">
      <summary>获取应用程序配置文件中定义的自定义跟踪侦听器特性。</summary>
      <returns>包含自定义跟踪侦听器特性的 <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Filter">
      <summary>获取并设置跟踪侦听器的跟踪筛选器。</summary>
      <returns>一个派生自 <see cref="T:System.Diagnostics.TraceFilter" /> 基类的对象。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentLevel">
      <summary>获取或设置缩进级别。</summary>
      <returns>缩进级别。 默认值为零。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IndentSize">
      <summary>获取或设置缩进的空格数。</summary>
      <returns>缩进的空格数。 默认值为 4 个空格。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作失败，因为值小于零。</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListener.IsThreadSafe">
      <summary>获取一个值，该值指示跟踪侦听器是否是线程安全的。</summary>
      <returns>如果跟踪侦听器是线程安全的，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.Name">
      <summary>获取或设置此 <see cref="T:System.Diagnostics.TraceListener" /> 的名称。</summary>
      <returns>此 <see cref="T:System.Diagnostics.TraceListener" /> 的名称。 默认值为空字符串("")。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.NeedIndent">
      <summary>获取或设置一个值，该值指示是否缩进输出。</summary>
      <returns>如果应缩进输出，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListener.TraceOutputOptions">
      <summary>获取或设置跟踪输出选项。</summary>
      <returns>枚举值的按位组合。 默认值为 <see cref="F:System.Diagnostics.TraceOptions.None" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作失败，因为该值无效。</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Count">
      <summary>获取列表中的侦听器数。</summary>
      <returns>在列表中的侦听器数。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.Int32)">
      <summary>获取或设置指定索引处的 <see cref="T:System.Diagnostics.TraceListener" />。</summary>
      <param name="i">从零开始的索引 <see cref="T:System.Diagnostics.TraceListener" /> 若要从列表中获取。</param>
      <returns>一个 <see cref="T:System.Diagnostics.TraceListener" /> 具有指定的索引。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.Item(System.String)">
      <summary>获取第一个 <see cref="T:System.Diagnostics.TraceListener" /> 中具有指定名称的列表。</summary>
      <param name="name">名称 <see cref="T:System.Diagnostics.TraceListener" /> 若要从列表中获取。</param>
      <returns>第一个 <see cref="T:System.Diagnostics.TraceListener" /> 列表中具有给定 <see cref="P:System.Diagnostics.TraceListener.Name" />。 此项将返回 null 如果不是 <see cref="T:System.Diagnostics.TraceListener" /> 可以找到具有给定名称。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的访问（线程安全）。</summary>
      <returns>总是为 true。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#ICollection#SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 的访问的对象。</summary>
      <returns>当前的 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsFixedSize">
      <summary>获取一个值，该值指示 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 是否具有固定大小。</summary>
      <returns>总是为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#IsReadOnly">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Diagnostics.TraceListenerCollection" /> 是只读的</summary>
      <returns>总是为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceListenerCollection.System#Collections#IList#Item(System.Int32)">
      <summary>获取或设置 <see cref="T:System.Diagnostics.TraceListener" /> 中指定索引处 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</summary>
      <param name="index">从零开始的索引 <paramref name="value" /> 来获取。</param>
      <returns>位于指定索引处的 <see cref="T:System.Diagnostics.TraceListener" />。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Attributes">
      <summary>获取在应用程序配置文件中定义的自定义开关特性。</summary>
      <returns>包含跟踪开关的自定义特性的 <see cref="T:System.Collections.Specialized.StringDictionary" />。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Listeners">
      <summary>获取跟踪源的跟踪侦听器集合。</summary>
      <returns>包含与源关联的活动跟踪侦听器的 <see cref="T:System.Diagnostics.TraceListenerCollection" />。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Name">
      <summary>获取跟踪源的名称。</summary>
      <returns>跟踪源的名称。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSource.Switch">
      <summary>获取或设置源开关的值。</summary>
      <returns>表示源开关值的 <see cref="T:System.Diagnostics.SourceSwitch" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Diagnostics.TraceSource.Switch" /> 设置为 null。</exception>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.Level">
      <summary>获取或设置确定开关允许的消息的跟踪级别。</summary>
      <returns>其中一个 <see cref="T:System.Diagnostics.TraceLevel" /> 值，指定的消息所允许的交换机的级别。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 设置一个值，不是一个为 <see cref="T:System.Diagnostics.TraceLevel" /> 值。</exception>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceError">
      <summary>获取一个值，该值指示开关是否允许错误处理消息。</summary>
      <returns>true 如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Error" />, ，<see cref="F:System.Diagnostics.TraceLevel.Warning" />, ，<see cref="F:System.Diagnostics.TraceLevel.Info" />, ，或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />; 否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceInfo">
      <summary>获取一个值，该值指示开关是否允许信息性消息。</summary>
      <returns>true 如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Info" /> 或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />; 否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceVerbose">
      <summary>获取一个值，该值指示开关是否允许所有消息。</summary>
      <returns>true 如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />; 否则为 false。</returns>
    </member>
    <member name="P:System.Diagnostics.TraceSwitch.TraceWarning">
      <summary>获取一个值，该值指示开关是否允许警告消息。</summary>
      <returns>true 如果 <see cref="P:System.Diagnostics.TraceSwitch.Level" /> 属性设置为 <see cref="F:System.Diagnostics.TraceLevel.Warning" />, ，<see cref="F:System.Diagnostics.TraceLevel.Info" />, ，或 <see cref="F:System.Diagnostics.TraceLevel.Verbose" />; 否则为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.BaseStream">
      <summary>获取对基础流的引用。</summary>
      <returns>表示基础流的流对象。</returns>
      <exception cref="T:System.ObjectDisposedException">关闭基础流。</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanRead">
      <summary>获取一个值，该值指示流是否支持在解压缩文件的过程中读取文件。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Decompress 而且基础流已打开并支持读取，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanSeek">
      <summary>获取一个值，该值指示流是否支持查找。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.CanWrite">
      <summary>获取一个值，该值指示流是否支持写入。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Compress 而且基础流未关闭并支持写入，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Length">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个长值。</returns>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="P:System.IO.Compression.DeflateStream.Position">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个长值。</returns>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.BaseStream">
      <summary>获取对基础流的引用。</summary>
      <returns>表示基础流的流对象。</returns>
      <exception cref="T:System.ObjectDisposedException">关闭基础流。</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanRead">
      <summary>获取一个值，该值指示流是否支持在解压缩文件的过程中读取文件。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Decompress, 而且基础流未关闭并支持读取，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanSeek">
      <summary>获取一个值，该值指示流是否支持查找。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.GZipStream.CanWrite">
      <summary>获取一个值，该值指示流是否支持写入。</summary>
      <returns>如果 <see cref="T:System.IO.Compression.CompressionMode" /> 值为 Compress 而且基础流未关闭并支持写入，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Length">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个长值。</returns>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="P:System.IO.Compression.GZipStream.Position">
      <summary>此属性不受支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个长值。</returns>
      <exception cref="T:System.NotSupportedException">此流不支持此属性。</exception>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.ChangeType">
      <summary>获取目录所发生的事件的类型。</summary>
      <returns>其中一个 <see cref="T:System.IO.WatcherChangeTypes" /> 表示文件系统中检测到的更改类型的值。</returns>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.FullPath">
      <summary>获取受影响的文件或目录的完全限定路径。</summary>
      <returns>受影响的文件或目录的路径。</returns>
    </member>
    <member name="P:System.IO.FileSystemEventArgs.Name">
      <summary>获取受影响的文件或目录的名称。</summary>
      <returns>受影响的文件或目录的名称。</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.EnableRaisingEvents">
      <summary>获取或设置一个值，该值指示是否启用此组件。</summary>
      <returns>如果启用此组件，则为 true；否则为 false。 默认值为 false。 如果在 Visual Studio 2005 的设计器上使用该组件，则默认值为 true。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.IO.FileSystemWatcher" /> 对象已被释放。</exception>
      <exception cref="T:System.PlatformNotSupportedException">当前操作系统不是 Microsoft Windows NT 或更高版本。</exception>
      <exception cref="T:System.IO.FileNotFoundException">中指定的目录 <see cref="P:System.IO.FileSystemWatcher.Path" /> 找不到。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.FileSystemWatcher.Path" /> 未设置或无效。</exception>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Filter">
      <summary>获取或设置用于确定在目录中监视哪些文件的筛选器字符串。</summary>
      <returns>筛选器字符串。 默认值为“*.*”（监视所有文件）。</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.IncludeSubdirectories">
      <summary>获取或设置一个值，该值指示是否应监视指定路径中的子目录。</summary>
      <returns>如果要监视子目录，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.InternalBufferSize">
      <summary>获取或设置内部缓冲区的大小（以字节为单位）。</summary>
      <returns>内部缓冲区的大小（以字节为单位）。 默认值为 8192 (8 KB)。</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.NotifyFilter">
      <summary>获取或设置要监视的更改的类型。</summary>
      <returns>
        <see cref="T:System.IO.NotifyFilters" /> 值之一。 默认值为 LastWrite、FileName 和 DirectoryName 的按位“或”组合。</returns>
      <exception cref="T:System.ArgumentException">值不是有效按位或组合 <see cref="T:System.IO.NotifyFilters" /> 值。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">正在设置的值无效。</exception>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Path">
      <summary>获取或设置要监视的目录的路径。</summary>
      <returns>要监视的路径。 默认值为空字符串("")。</returns>
      <exception cref="T:System.ArgumentException">指定的路径不存在或找不到。- 或 - 指定的路径包含通配符字符。- 或 - 指定的路径包含无效路径字符。</exception>
    </member>
    <member name="P:System.IO.FileSystemWatcher.Site">
      <summary>获取或设置 <see cref="T:System.IO.FileSystemWatcher" /> 的 <see cref="T:System.ComponentModel.ISite" />。</summary>
      <returns>用于 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.IO.FileSystemWatcher" />。</returns>
    </member>
    <member name="P:System.IO.FileSystemWatcher.SynchronizingObject">
      <summary>获取或设置用于封送因目录更改而发出的事件处理程序调用的对象。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，表示一个对象，该对象用于封送因目录更改而发出的事件处理程序调用。 默认值为 null。</returns>
    </member>
    <member name="P:System.IO.IODescriptionAttribute.Description">
      <summary>获取说明。</summary>
      <returns>对事件、 扩展程序或属性的说明。</returns>
    </member>
    <member name="P:System.IO.Ports.SerialDataReceivedEventArgs.EventType">
      <summary>获取或设置事件类型。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialData" /> 值之一。</returns>
    </member>
    <member name="P:System.IO.Ports.SerialErrorReceivedEventArgs.EventType">
      <summary>获取或设置事件类型。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialError" /> 值之一。</returns>
    </member>
    <member name="P:System.IO.Ports.SerialPinChangedEventArgs.EventType">
      <summary>获取或设置事件类型。</summary>
      <returns>
        <see cref="T:System.IO.Ports.SerialPinChange" /> 值之一。</returns>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BaseStream">
      <summary>获取 <see cref="T:System.IO.Stream" /> 对象的基础 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
      <exception cref="T:System.NotSupportedException">流是在.NET Compact Framework 应用程序中，调用以下方法之一 ︰<see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /><see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /><see cref="M:System.IO.Stream.EndRead(System.IAsyncResult)" /><see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />.NET Framework 精简版不支持使用基流的异步模型。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BaudRate">
      <summary>获取或设置串行波特率。</summary>
      <returns>波特率。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的波特率小于或等于零，或者大于该设备的最大允许波特率。</exception>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BreakState">
      <summary>获取或设置中断信号状态。</summary>
      <returns>如果端口处于中断状态，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 -尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BytesToRead">
      <summary>获取接收缓冲区中数据的字节数。</summary>
      <returns>接收缓冲区中数据的字节数。</returns>
      <exception cref="T:System.InvalidOperationException">该端口未打开。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.BytesToWrite">
      <summary>获取发送缓冲区中数据的字节数。</summary>
      <returns>发送缓冲区中数据的字节数。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.CDHolding">
      <summary>获取端口的载波检测行的状态。</summary>
      <returns>如果检测到载波，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.CtsHolding">
      <summary>获取“可以发送”行的状态。</summary>
      <returns>如果检测到“可以发送”行，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DataBits">
      <summary>获取或设置每个字节的标准数据位长度。</summary>
      <returns>数据位长度。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 -尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">数据位值是小于 5 或大于 8。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DiscardNull">
      <summary>获取或设置一个值，该值指示 null 字节在端口和接收缓冲区之间传输时是否被忽略。</summary>
      <returns>如果忽略 Null 字节，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DsrHolding">
      <summary>获取数据设置就绪 (DSR) 信号的状态。</summary>
      <returns>如果“数据设置就绪”信号已发送到端口，则为 true；否则为 false。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.InvalidOperationException">流已关闭。 这可能会因为 <see cref="M:System.IO.Ports.SerialPort.Open" /> 不调用方法或 <see cref="M:System.IO.Ports.SerialPort.Close" /> 调用方法。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.DtrEnable">
      <summary>获取或设置一个值，该值在串行通信过程中启用数据终端就绪 (DTR) 信号。</summary>
      <returns>如果为 true，则启用数据终端就绪 (DTR)；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Encoding">
      <summary>获取或设置传输前后文本转换的字节编码。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 对象。 默认值为 <see cref="T:System.Text.ASCIIEncoding" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IO.Ports.SerialPort.Encoding" /> 属性被设置为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.Ports.SerialPort.Encoding" /> 属性被设置为不编码 <see cref="T:System.Text.ASCIIEncoding" />, ，<see cref="T:System.Text.UTF8Encoding" />, ，<see cref="T:System.Text.UTF32Encoding" />, ，<see cref="T:System.Text.UnicodeEncoding" />, 、 一个 Windows 单字节编码，或其中一个 Windows 双字节编码。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Handshake">
      <summary>使用 <see cref="T:System.IO.Ports.Handshake" /> 中的值获取或设置串行端口数据传输的握手协议。</summary>
      <returns>
        <see cref="T:System.IO.Ports.Handshake" /> 值之一。 默认值为 None。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">传递的值不是有效的值在 <see cref="T:System.IO.Ports.Handshake" /> 枚举。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.IsOpen">
      <summary>获取一个值，该值指示 <see cref="T:System.IO.Ports.SerialPort" /> 对象的打开或关闭状态。</summary>
      <returns>如果串行端口已打开，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 传递值是 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 传递值为空字符串 ("")。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.NewLine">
      <summary>获取或设置用于解释 <see cref="M:System.IO.Ports.SerialPort.ReadLine" /> 和 <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> 方法调用结束的值。</summary>
      <returns>表示行尾的值。 默认值为换行符，<see cref="P:System.Environment.NewLine" />。</returns>
      <exception cref="T:System.ArgumentException">属性值为空。</exception>
      <exception cref="T:System.ArgumentNullException">属性值为 null。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.Parity">
      <summary>获取或设置奇偶校验检查协议。</summary>
      <returns>表示奇偶校验检查协议的枚举值之一。 默认值为 <see cref="F:System.IO.Ports.Parity.None" />。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.Parity" /> 传递的值不是有效的值在 <see cref="T:System.IO.Ports.Parity" /> 枚举。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ParityReplace">
      <summary>获取或设置一个字节，该字节在发生奇偶校验错误时替换数据流中的无效字节。</summary>
      <returns>替换无效字节的字节。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.PortName">
      <summary>获取或设置通信端口，包括但不限于所有可用的 COM 端口。</summary>
      <returns>通信端口。 默认值为 COM1。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性被设置为具有长度为零的值。- 或 -<see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性设置为一个值，以"\\"开头。- 或 -端口名称无效。</exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.IO.Ports.SerialPort.PortName" /> 属性被设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">指定的端口已打开。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReadBufferSize">
      <summary>获取或设置 <see cref="T:System.IO.Ports.SerialPort" /> 输入缓冲区的大小。</summary>
      <returns>缓冲区大小（以字节为单位）。 默认值为 4096；最大值为正整数，即 2147483647。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 设置值小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 流处于打开状态的同时，属性已设置。</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 属性设置为一个奇整数值。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReadTimeout">
      <summary>获取或设置读取操作未完成时发生超时之前的毫秒数。</summary>
      <returns>操作未完成时发生超时之前的毫秒数。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">读取的超时值小于零，且不等于 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold">
      <summary>获取或设置 <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件发生前内部输入缓冲区中的字节数。</summary>
      <returns>
        <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件触发前内部输入缓冲区中的字节数。 默认值为 1。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold" /> 值是否小于或等于零。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.RtsEnable">
      <summary>获取或设置一个值，该值指示在串行通信中是否启用请求发送 (RTS) 信号。</summary>
      <returns>如果为 true，则启用请求发送 (RTS)；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">值 <see cref="P:System.IO.Ports.SerialPort.RtsEnable" /> 属性时设置或检索时 <see cref="P:System.IO.Ports.SerialPort.Handshake" /> 属性设置为 <see cref="F:System.IO.Ports.Handshake.RequestToSend" /> 值或 <see cref="F:System.IO.Ports.Handshake.RequestToSendXOnXOff" /> 值。</exception>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.StopBits">
      <summary>获取或设置每个字节的标准停止位数。</summary>
      <returns>
        <see cref="T:System.IO.Ports.StopBits" /> 值之一。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 值是  <see cref="F:System.IO.Ports.StopBits.None" />。</exception>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.WriteBufferSize">
      <summary>获取或设置串行端口输出缓冲区的大小。</summary>
      <returns>输出缓冲区的大小。 默认值为 2048。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 值是否小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 流处于打开状态的同时，属性已设置。</exception>
      <exception cref="T:System.IO.IOException">
        <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 属性设置为一个奇整数值。</exception>
    </member>
    <member name="P:System.IO.Ports.SerialPort.WriteTimeout">
      <summary>获取或设置写入操作未完成时发生超时之前的毫秒数。</summary>
      <returns>发生超时之前的毫秒数。 默认值为 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</returns>
      <exception cref="T:System.IO.IOException">端口处于无效状态。- 或 - 尝试将基础端口的状态设置失败。 例如，从该传递的参数 <see cref="T:System.IO.Ports.SerialPort" /> 对象已无效。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> 值小于零，且不等于 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />。</exception>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldFullPath">
      <summary>获取受影响的文件或目录的上一个完全限定的路径。</summary>
      <returns>受影响的文件或目录的以前的完全限定的路径。</returns>
    </member>
    <member name="P:System.IO.RenamedEventArgs.OldName">
      <summary>获取受影响的文件或目录的旧名称。</summary>
      <returns>以前的受影响的文件或目录名称。</returns>
    </member>
    <member name="P:System.IO.WaitForChangedResult.ChangeType">
      <summary>获取或设置发生更改的类型。</summary>
      <returns>
        <see cref="T:System.IO.WatcherChangeTypes" /> 值之一。</returns>
    </member>
    <member name="P:System.IO.WaitForChangedResult.Name">
      <summary>获取或设置文件或更改的目录的名称。</summary>
      <returns>文件或更改的目录的名称。</returns>
    </member>
    <member name="P:System.IO.WaitForChangedResult.OldName">
      <summary>获取或设置的文件或目录已被重命名的原始名称。</summary>
      <returns>文件或目录，已重命名为原始名称。</returns>
    </member>
    <member name="P:System.IO.WaitForChangedResult.TimedOut">
      <summary>获取或设置一个值，该值指示等待操作超时。</summary>
      <returns>true 如果 <see cref="M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)" /> 方法超时; 否则为 false。</returns>
    </member>
    <member name="P:System.Media.SoundPlayer.IsLoadCompleted">
      <summary>获取一个值，该值指示是否已成功完成.wav 文件的加载。</summary>
      <returns>true 如果加载.wav 文件; false 如果.wav 文件尚未加载。</returns>
    </member>
    <member name="P:System.Media.SoundPlayer.LoadTimeout">
      <summary>获取或设置的时间，以毫秒为单位，.wav 文件必须将加载。</summary>
      <returns>要等待的毫秒数。 默认值为 10000 （10 秒）。</returns>
    </member>
    <member name="P:System.Media.SoundPlayer.SoundLocation">
      <summary>获取或设置文件路径或.wav 文件的要加载的 URL。</summary>
      <returns>文件路径或从其加载.wav 文件的 URL 或 <see cref="F:System.String.Empty" /> 如果不不存在任何文件路径。 默认值为 <see cref="F:System.String.Empty" />。</returns>
    </member>
    <member name="P:System.Media.SoundPlayer.Stream">
      <summary>获取或设置 <see cref="T:System.IO.Stream" /> 要从其中加载.wav 文件。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 要从其中加载.wav 文件，或 null 没有流是否可用。 默认值为 null。</returns>
    </member>
    <member name="P:System.Media.SoundPlayer.Tag">
      <summary>获取或设置 <see cref="T:System.Object" /> ，其中包含有关数据 <see cref="T:System.Media.SoundPlayer" />。</summary>
      <returns>一个 <see cref="T:System.Object" />，包含有关 <see cref="T:System.Media.SoundPlayer" /> 的数据。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Asterisk">
      <summary>获取与关联的声音 Asterisk 程序当前的 Windows 声音方案中的事件。</summary>
      <returns>一个 <see cref="T:System.Media.SystemSound" /> 与关联 Asterisk 程序当前的 Windows 声音方案中的事件。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Beep">
      <summary>获取与关联的声音 Beep 程序当前的 Windows 声音方案中的事件。</summary>
      <returns>一个 <see cref="T:System.Media.SystemSound" /> 与关联 Beep 程序当前的 Windows 声音方案中的事件。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Exclamation">
      <summary>获取与关联的声音 Exclamation 程序当前的 Windows 声音方案中的事件。</summary>
      <returns>一个 <see cref="T:System.Media.SystemSound" /> 与关联 Exclamation 程序当前的 Windows 声音方案中的事件。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Hand">
      <summary>获取与关联的声音 Hand 程序当前的 Windows 声音方案中的事件。</summary>
      <returns>一个 <see cref="T:System.Media.SystemSound" /> 与关联 Hand 程序当前的 Windows 声音方案中的事件。</returns>
    </member>
    <member name="P:System.Media.SystemSounds.Question">
      <summary>获取与关联的声音 Question 程序当前的 Windows 声音方案中的事件。</summary>
      <returns>一个 <see cref="T:System.Media.SystemSound" /> 与关联 Question 程序当前的 Windows 声音方案中的事件。</returns>
    </member>
    <member name="P:System.Net.AuthenticationManager.CredentialPolicy">
      <summary>获取或设置用于资源发出的请求使用的凭据策略 <see cref="T:System.Net.HttpWebRequest" /> 类。</summary>
      <returns>实现的对象 <see cref="T:System.Net.ICredentialPolicy" /> 接口，用于确定是否随请求一起发送的凭据。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.AuthenticationManager.CustomTargetNameDictionary">
      <summary>获取字典，其中包含用于标识使用发出的请求的 Kerberos 身份验证过程中的主机的服务主体名称 (Spn) <see cref="T:System.Net.WebRequest" /> 及其派生类。</summary>
      <returns>可写 <see cref="T:System.Collections.Specialized.StringDictionary" /> 密钥由组成的主机信息包含的 SPN 值。</returns>
    </member>
    <member name="P:System.Net.AuthenticationManager.RegisteredModules">
      <summary>获取身份验证管理器注册的身份验证模块的列表。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> ，它使要读取的已注册的身份验证模块。</returns>
    </member>
    <member name="P:System.Net.Authorization.Complete">
      <summary>获取授权的完成状态。</summary>
      <returns>true 身份验证过程是否已完成;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Authorization.ConnectionGroupId">
      <summary>获取为特定于用户的连接的唯一标识符。</summary>
      <returns>用于将连接与身份验证的实体相关联的唯一字符串。</returns>
    </member>
    <member name="P:System.Net.Authorization.Message">
      <summary>获取返回到响应的身份验证质询中的服务器的消息。</summary>
      <returns>将返回到响应的身份验证质询中的服务器的消息。</returns>
    </member>
    <member name="P:System.Net.Authorization.MutuallyAuthenticated">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指示是否发生了相互身份验证。</summary>
      <returns>如果客户端和服务器均经过验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Authorization.ProtectionRealm">
      <summary>获取或设置统一资源标识符 (Uri) 可进行身份验证与前缀 <see cref="P:System.Net.Authorization.Message" /> 属性。</summary>
      <returns>包含 URI 前缀的字符串数组。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.CacheSyncDate">
      <summary>获取此实例的缓存同步日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 创建此实例时指定的值设置为日期。 如果未指定日期，该属性的值是 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.Level">
      <summary>获取 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 中创建此实例时指定的值。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 值，该值指定使用获得的资源的缓存行为 <see cref="T:System.Net.HttpWebRequest" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge">
      <summary>获取从缓存返回资源所允许的最大生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值设置为最长使用期限值，该值指定创建此实例。 如果未指定日期，该属性的值是 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale">
      <summary>获取从缓存返回的资源允许的最大过期值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值设置为最大过期值，该值指定创建此实例。 如果未指定日期，该属性的值是 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh">
      <summary>获取从缓存返回的资源允许的最小新鲜。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 创建此实例时指定的值，该值指定的最小新鲜。 如果未指定日期，该属性的值是 <see cref="F:System.DateTime.MinValue" />。</returns>
    </member>
    <member name="P:System.Net.Cache.RequestCachePolicy.Level">
      <summary>获取 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 构造此实例时指定的值。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 值，该值指定使用获取的资源的缓存行为 <see cref="T:System.Net.WebRequest" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModuleElement.Type">
      <summary>获取或设置当前实例的类型和程序集信息。</summary>
      <returns>一个字符串，标识实现身份验证模块的类型或 null 如果不指定任何值。</returns>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModuleElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中的指定位置的元素。</summary>
      <param name="index">元素的索引（索引从零开始）。</param>
      <returns>位于指定位置的 <see cref="T:System.Net.Configuration.AuthenticationModuleElement" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModuleElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="name">集合中的元素的键。</param>
      <returns>
        <see cref="T:System.Net.Configuration.AuthenticationModuleElement" /> 与指定的键或 null 如果没有具有指定键的元素。</returns>
    </member>
    <member name="P:System.Net.Configuration.AuthenticationModulesSection.AuthenticationModules">
      <summary>获取该节中的身份验证模块的集合。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.AuthenticationModuleElementCollection" /> ，其中包含已注册的身份验证模块。</returns>
    </member>
    <member name="P:System.Net.Configuration.BypassElement.Address">
      <summary>获取或设置的资源不使用代理服务器的地址。</summary>
      <returns>一个字符串，标识的资源。</returns>
    </member>
    <member name="P:System.Net.Configuration.BypassElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中的指定位置的元素。</summary>
      <param name="index">元素的索引（索引从零开始）。</param>
      <returns>位于指定位置的 <see cref="T:System.Net.Configuration.BypassElement" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.BypassElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="name">集合中的元素的键。</param>
      <returns>
        <see cref="T:System.Net.Configuration.BypassElement" /> 与指定的键，或 null 如果没有具有指定键的元素。</returns>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElement.Address">
      <summary>获取或设置远程计算机的地址。</summary>
      <returns>包含正则表达式描述的 IP 地址或 DNS 名称的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElement.MaxConnection">
      <summary>获取或设置最大可为远程计算机的连接数。</summary>
      <returns>一个整数，指定最大连接数。</returns>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中的指定位置的元素。</summary>
      <param name="index">元素的索引（索引从零开始）。</param>
      <returns>位于指定位置的 <see cref="T:System.Net.Configuration.ConnectionManagementElement" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="name">集合中的元素的键。</param>
      <returns>
        <see cref="T:System.Net.Configuration.ConnectionManagementElement" /> 与指定的键或 null 如果没有具有指定键的元素。</returns>
    </member>
    <member name="P:System.Net.Configuration.ConnectionManagementSection.ConnectionManagement">
      <summary>获取该节中管理对象的连接的集合。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.ConnectionManagementElementCollection" /> 包含本地计算机的连接管理信息。</returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.BypassList">
      <summary>获取不使用 Web 代理服务器获取的资源的集合。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.BypassElementCollection" /> ，其中包含的资源不使用 Web 代理服务器的地址。</returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.Enabled">
      <summary>获取或设置是否使用 Web 代理。</summary>
      <returns>true 如果将使用 Web 代理;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.Module">
      <summary>获取自定义的 Web 代理实现的类型信息。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.ModuleElement" />。有关自定义的 Web 代理实现的类型信息。</returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.Proxy">
      <summary>获取用于标识要使用的 Web 代理服务器的 URI。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.ProxyElement" />。用于标识 Web 代理服务器的 URI。</returns>
    </member>
    <member name="P:System.Net.Configuration.DefaultProxySection.UseDefaultCredentials">
      <summary>获取或设置默认凭据是否可用于访问 Web 代理服务器。</summary>
      <returns>true 如果使用，则默认凭据否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.FtpCachePolicyElement.PolicyLevel">
      <summary>获取或设置 FTP 缓存在本地计算机的行为。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 值，该值指定缓存行为。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.MaximumAge">
      <summary>获取或设置从缓存返回资源所允许的最大生存期。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，该值指定的最长期限缓存配置文件中指定的资源。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.MaximumStale">
      <summary>获取或设置从缓存返回资源所允许的最大过期值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 设置为配置文件中指定的最大过期值的值。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.MinimumFresh">
      <summary>获取或设置从缓存返回资源所允许的最小新鲜值。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 值，该值指定配置文件中指定的最小新鲜。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpCachePolicyElement.PolicyLevel">
      <summary>获取或设置 HTTP 缓存在本地计算机的行为。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.HttpRequestCacheLevel" /> 值，该值指定缓存行为。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerElement.Timeouts">
      <summary>获取用于超时元素的默认值 <see cref="T:System.Net.HttpListener" /> 对象。</summary>
      <returns>返回 <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />。用于的超时元素 <see cref="T:System.Net.HttpListener" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl">
      <summary>获取一个值，该值指示如果 <see cref="T:System.Net.HttpListener" /> 使用原始的未转义的 URI，而不是经过转换的 URI。</summary>
      <returns>一个布尔值，该值指示如果 <see cref="T:System.Net.HttpListener" /> 使用原始的未转义的 URI，而不是经过转换的 URI。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerTimeoutsElement.DrainEntityBody">
      <summary>获取的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" />  电量保持活动状态的连接上的实体正文。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。允许的时间，以秒为单位， <see cref="T:System.Net.HttpListener" />  电量保持活动状态的连接上的实体正文。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerTimeoutsElement.EntityBody">
      <summary>获取有关请求实体正文到达允许的时间，以秒为单位。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。以秒为单位，允许请求实体主体，若要到达的时间。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerTimeoutsElement.HeaderWait">
      <summary>获取的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" /> 来分析请求标头。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。允许的时间，以秒为单位， <see cref="T:System.Net.HttpListener" /> 来分析请求标头。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerTimeoutsElement.IdleConnection">
      <summary>获取的时间，以秒为单位，允许的空闲连接。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。以秒为单位，允许的空闲连接时间。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerTimeoutsElement.MinSendBytesPerSecond">
      <summary>获取响应中字节每秒的最小发送速率。</summary>
      <returns>返回 <see cref="T:System.Int64" />。最小发送速率，单位为字节数 / 秒，响应。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpListenerTimeoutsElement.RequestQueue">
      <summary>获取允许请求在之前的请求队列中保留的时间，以秒为单位， <see cref="T:System.Net.HttpListener" /> 提取它。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。请求在之前的请求队列中保留的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" /> 提取它。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.MaximumErrorResponseLength">
      <summary>获取或设置错误响应的最大允许的长度。</summary>
      <returns>32 位有符号整数，它包含错误响应的最大长度以千字节为单位 （1024 字节为单位）。 默认值为 64。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.MaximumResponseHeadersLength">
      <summary>获取或设置响应标头允许的最大长度。</summary>
      <returns>32 位有符号整数，它包含响应标头的最大长度以千字节为单位 （1024 字节）。 默认值为 64。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength">
      <summary>获取或设置响应未经授权的错误代码的上载的最大长度。</summary>
      <returns>包含响应未经授权的错误代码的上载最大长度 （以 1024 字节为单位的倍数） 的 32 位有符号的整数。 值为-1 指示没有大小限制将施加上载。 设置 <see cref="P:System.Net.Configuration.HttpWebRequestElement.MaximumUnauthorizedUploadLength" /> 属性设置为任何其他值就只会发送请求正文，如果小于指定的字节数。 因此如果值为 1 将指示仅发送了请求正文，如果小于 1024 字节。此属性的默认值为-1。</returns>
    </member>
    <member name="P:System.Net.Configuration.HttpWebRequestElement.UseUnsafeHeaderParsing">
      <summary>将此属性设置将忽略在 HTTP 分析过程中发生的验证错误。</summary>
      <returns>一个布尔值，该值指示是否已设置此属性。</returns>
    </member>
    <member name="P:System.Net.Configuration.Ipv6Element.Enabled">
      <summary>获取或设置一个布尔值，该值指示是否在本地计算机上启用 Internet 协议版本 6。</summary>
      <returns>true 如果启用了 IPv6;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.MailSettingsSectionGroup.Smtp">
      <summary>获取本地计算机的 SMTP 设置。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SmtpSection" /> 对象，其中包含本地计算机的配置信息。</returns>
    </member>
    <member name="P:System.Net.Configuration.ModuleElement.Type">
      <summary>获取或设置当前实例的类型和程序集信息。</summary>
      <returns>一个字符串，标识的类型实现 <see cref="T:System.Net.IWebProxy" /> 接口或 null 如果不指定任何值。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.AuthenticationModules">
      <summary>获取包含为本地计算机注册的身份验证模块的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.AuthenticationModulesSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.ConnectionManagement">
      <summary>获取包含在本地计算机的连接管理设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.ConnectionManagementSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.DefaultProxy">
      <summary>获取包含在本地计算机的默认 Web 代理服务器设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.DefaultProxySection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.MailSettings">
      <summary>获取包含 SMTP 客户端在本地计算机上的电子邮件设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.RequestCaching">
      <summary>获取包含在本地计算机的缓存配置设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.RequestCachingSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.Settings">
      <summary>获取包含在本地计算机的网络设置的配置节。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SettingsSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.NetSectionGroup.WebRequestModules">
      <summary>获取包含注册为与使用的模块的配置节 <see cref="T:System.Net.WebRequest" /> 类。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.WebRequestModulesSection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.PerformanceCountersElement.Enabled">
      <summary>获取或设置是否启用性能计数器。</summary>
      <returns>如果启用性能计数器，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.AutoDetect">
      <summary>获取或设置 <see cref="T:System.Net.Configuration.ProxyElement.AutoDetectValues" /> 值，该值控制是否自动检测 Web 代理。</summary>
      <returns>
        <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.True" /> 如果 <see cref="T:System.Net.WebProxy" /> 自动检测到; <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.False" /> 如果 <see cref="T:System.Net.WebProxy" /> 未自动检测; 或 <see cref="F:System.Net.Configuration.ProxyElement.AutoDetectValues.Unspecified" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.BypassOnLocal">
      <summary>获取或设置一个值，该值指示是否通过使用 Web 代理服务器来检索本地资源。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.ProxyElement.BypassOnLocalValues" />。Avalue，该值指示是否通过使用 Web 代理服务器来检索本地资源。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.ProxyAddress">
      <summary>获取或设置用于标识要使用的 Web 代理服务器的 URI。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含一个 URI。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.ScriptLocation">
      <summary>获取或设置 <see cref="T:System.Uri" /> 值，该值指定自动代理检测脚本的位置。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 指定自动代理检测脚本的位置。</returns>
    </member>
    <member name="P:System.Net.Configuration.ProxyElement.UseSystemDefault">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制是否将使用的 Internet Explorer Web 代理服务器设置。</summary>
      <returns>true 如果 Internet 资源管理器 LAN 设置用于检测和配置默认 <see cref="T:System.Net.WebProxy" /> 用于请求; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DefaultFtpCachePolicy">
      <summary>获取默认 FTP 缓存为本地计算机的行为。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.FtpCachePolicyElement" /> ，定义默认缓存策略。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DefaultHttpCachePolicy">
      <summary>获取默认值缓存在本地计算机的行为。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.HttpCachePolicyElement" /> ，定义默认缓存策略。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DefaultPolicyLevel">
      <summary>获取或设置默认缓存策略级别。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.RequestCacheLevel" /> 枚举值。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.DisableAllCaching">
      <summary>获取或设置一个布尔值，启用缓存在本地计算机上。</summary>
      <returns>true 如果在本地计算机，则禁用缓存否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.IsPrivateCache">
      <summary>获取或设置一个布尔值，该值指示本地计算机缓存为私有。</summary>
      <returns>true 如果缓存提供用户隔离;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.RequestCachingSection.UnspecifiedMaximumAge">
      <summary>获取或设置一个值，该值用作缓存有过期信息的资源的最长期限。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> ，它提供缓存的资源的默认最大期限。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.CheckCertificateName">
      <summary>获取或设置一个布尔值，控制检查主机名信息在 X509 证书。</summary>
      <returns>true 若要指定主机名称检查;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.CheckCertificateRevocationList">
      <summary>获取或设置一个布尔值，该值指示是否根据证书颁发机构的吊销列表检查证书。</summary>
      <returns>true 如果检查证书吊销列表;否则为 false。默认值是 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.DnsRefreshTimeout">
      <summary>获取或设置刷新地址信息的时间量。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> ，它指定当使用 DNS 解析地址。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.EnableDnsRoundRobin">
      <summary>获取或设置一个布尔值，用于控制连接到同一服务器上使用不同的 IP 地址。</summary>
      <returns>true 若要启用 DNS 轮循机制行为;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.EncryptionPolicy">
      <summary>获取或设置 <see cref="T:System.Net.Security.EncryptionPolicy" /> 使用。</summary>
      <returns>要用于加密策略 <see cref="T:System.Net.ServicePointManager" /> 实例。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.Expect100Continue">
      <summary>获取或设置一个布尔值，确定是否 100-使用 100-continue 行为。</summary>
      <returns>如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.Configuration.ServicePointManagerElement.UseNagleAlgorithm">
      <summary>获取或设置一个布尔值，确定是否使用 Nagle 算法。</summary>
      <returns>如果使用 Nagle 算法，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.HttpListener">
      <summary>获取控件使用的设置的配置元素 <see cref="T:System.Net.HttpListener" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.HttpListenerElement" /> 对象。控制使用的设置的配置元素 <see cref="T:System.Net.HttpListener" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.HttpWebRequest">
      <summary>获取控件使用的设置的配置元素 <see cref="T:System.Net.HttpWebRequest" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.HttpWebRequestElement" /> 对象。控制最大响应标头长度，以及使用其他设置的配置元素 <see cref="T:System.Net.HttpWebRequest" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.Ipv6">
      <summary>获取使 Internet 协议版本 6 (IPv6) 的配置元素。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.Ipv6Element" />。控制使用的 IPv6 设置的配置元素。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.PerformanceCounters">
      <summary>获取控制是否启用网络性能计数器的配置元素。</summary>
      <returns>
        <see cref="T:System.Net.Configuration.PerformanceCountersElement" />。控制设置的配置元素用于网络性能计数器。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.ServicePointManager">
      <summary>获取控制与远程主机计算机的连接设置的配置元素。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.ServicePointManagerElement" /> 对象。它控制设置的配置元素用于连接到远程主机的计算机的网络性能计数器。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.Socket">
      <summary>获取控制套接字设置的配置元素。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SocketElement" /> 对象。该配置元素可控制套接字设置。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.WebProxyScript">
      <summary>获取控件的执行超时值和下载超时的 Web 代理脚本的配置元素。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.WebProxyScriptElement" /> 对象。控制执行超时值和使用 Web 代理脚本下载超时设置的配置元素。</returns>
    </member>
    <member name="P:System.Net.Configuration.SettingsSection.WebUtility">
      <summary>获取控件使用的设置的配置元素 <see cref="T:System.Net.WebUtility" /> 对象。</summary>
      <returns>返回 <see cref="T:System.Net.Configuration.WebUtilityElement" />。控制使用的设置的配置元素 <see cref="T:System.Net.WebUtility" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.ClientDomain">
      <summary>获取或设置初始 SMTP 协议请求中用于连接到 SMTP 邮件服务器的客户端域名。</summary>
      <returns>一个表示初始 SMTP 协议请求中用于连接到 SMTP 邮件服务器的客户端域名的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.DefaultCredentials">
      <summary>确定使用默认用户凭据来访问 SMTP 服务器。 默认值为 false。</summary>
      <returns>true 指示该默认用户凭据将用于访问 SMTP 服务器;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.EnableSsl">
      <summary>获取或设置是否使用 SSL 来访问 SMTP 邮件服务器。 默认值为 false。</summary>
      <returns>true 指示将使用 SSL 来访问 SMTP 邮件服务器;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.Host">
      <summary>获取或设置 SMTP 服务器的名称。</summary>
      <returns>一个表示要连接到 SMTP 服务器的名称的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.Password">
      <summary>获取或设置要用于连接到 SMTP 邮件服务器的用户密码。</summary>
      <returns>一个字符串，表示要用于连接到 SMTP 邮件服务器的密码。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.Port">
      <summary>获取或设置 SMTP 客户端用于连接到 SMTP 邮件服务器的端口。 默认值为 25。</summary>
      <returns>一个字符串，表示要连接到 SMTP 邮件服务器的端口。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.TargetName">
      <summary>获取或设置服务提供程序名称 (SPN) 时要使用的身份验证扩展的保护用于连接到 SMTP 邮件服务器。</summary>
      <returns>一个字符串，表示要用于身份验证时使用扩展的保护连接到 SMTP 邮件服务器的 SPN。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpNetworkElement.UserName">
      <summary>获取或设置要连接到 SMTP 邮件服务器的用户名。</summary>
      <returns>表示要连接到 SMTP 邮件服务器的用户名的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.DeliveryFormat">
      <summary>获取或设置要用于发送传出电子邮件使用简单邮件传输协议 (SMTP) 的交付格式。</summary>
      <returns>返回 <see cref="T:System.Net.Mail.SmtpDeliveryFormat" />。传递格式用于发送传出电子邮件使用 SMTP。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.DeliveryMethod">
      <summary>获取或设置简单邮件传输协议 (SMTP) 传递方法。 默认的传递方法是 <see cref="F:System.Net.Mail.SmtpDeliveryMethod.Network" />。</summary>
      <returns>表示 SMTP 传递方法的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.From">
      <summary>获取或设置默认值，该值指示电子邮件的发件人。</summary>
      <returns>一个表示默认值，该值指示一封电子邮件的发件人的字符串。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.Network">
      <summary>获取控件使用的简单邮件传输协议 (SMTP) 的网络设置的配置元素。 文件。<see cref="T:System.Net.Configuration.SmtpNetworkElement" />。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SmtpNetworkElement" /> 对象。控制使用 SMTP 的网络设置的配置元素。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSection.SpecifiedPickupDirectory">
      <summary>获取 SMPT 客户端将使用的拾取目录。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement" /> 对象，它指定拾取目录文件夹。</returns>
    </member>
    <member name="P:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement.PickupDirectoryLocation">
      <summary>获取或设置应用程序在其中保存邮件以供 SMTP 服务器处理的文件夹。</summary>
      <returns>一个字符串，指定为电子邮件的拾取目录。</returns>
    </member>
    <member name="P:System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForAccept">
      <summary>获取或设置一个布尔值，指定在接受连接时是否使用完成端口。</summary>
      <returns>true 若要使用自动补全端口;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.SocketElement.AlwaysUseCompletionPortsForConnect">
      <summary>获取或设置一个布尔值，指定在建立连接时是否使用完成端口。</summary>
      <returns>true 若要使用自动补全端口;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Configuration.SocketElement.IPProtectionLevel">
      <summary>获取或设置一个值，指定的默认 <see cref="T:System.Net.Sockets.IPProtectionLevel" /> 用于套接字。</summary>
      <returns>值 <see cref="T:System.Net.Sockets.IPProtectionLevel" /> 的当前实例。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebProxyScriptElement.DownloadTimeout">
      <summary>获取或设置 Web 代理使用格式小时 ︰ 分钟 ︰ 秒的脚本下载超时。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象，其中包含的超时值。 默认的下载超时为一分钟。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElement.Prefix">
      <summary>获取或设置当前的 Web 请求模块的 URI 前缀。</summary>
      <returns>一个字符串，包含的 URI 前缀。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElement.Type">
      <summary>获取或设置创建 Web 请求的类。</summary>
      <returns>一个 <see cref="T:System.Type" /> 标识 Web 请求模块的实例。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElementCollection.Item(System.Int32)">
      <summary>获取或设置集合中的指定位置的元素。</summary>
      <param name="index">元素的索引（索引从零开始）。</param>
      <returns>位于指定位置的 <see cref="T:System.Net.Configuration.WebRequestModuleElement" />。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModuleElementCollection.Item(System.String)">
      <summary>获取或设置具有指定键的元素。</summary>
      <param name="name">集合中的元素的键。</param>
      <returns>
        <see cref="T:System.Net.Configuration.WebRequestModuleElement" /> 与指定的键或 null 如果没有具有指定键的元素。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebRequestModulesSection.WebRequestModules">
      <summary>获取该节中的 Web 请求模块的集合。</summary>
      <returns>一个 <see cref="T:System.Net.Configuration.WebRequestModuleElementCollection" /> 包含已注册的 Web 请求模块。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebUtilityElement.UnicodeDecodingConformance">
      <summary>获取默认 Unicode 解码一致性行为用于 <see cref="T:System.Net.WebUtility" /> 对象。</summary>
      <returns>返回 <see cref="T:System.Net.Configuration.UnicodeDecodingConformance" />。默认的 Unicode 解码行为。</returns>
    </member>
    <member name="P:System.Net.Configuration.WebUtilityElement.UnicodeEncodingConformance">
      <summary>获取默认 Unicode 编码一致性行为用于 <see cref="T:System.Net.WebUtility" /> 对象。</summary>
      <returns>返回 <see cref="T:System.Net.Configuration.UnicodeEncodingConformance" />。默认的 Unicode 编码行为。</returns>
    </member>
    <member name="P:System.Net.Cookie.Comment">
      <summary>获取或设置可以将服务器添加到注释 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>对文档的可选备注适用于此用法 <see cref="T:System.Net.Cookie" />。</returns>
    </member>
    <member name="P:System.Net.Cookie.CommentUri">
      <summary>获取或设置服务器可以为提供的 URI 注释 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>表示此 URI 引用的预期的用法的可选备注 <see cref="T:System.Net.Cookie" />。 值必须符合 URI 格式。</returns>
    </member>
    <member name="P:System.Net.Cookie.Discard">
      <summary>获取或设置由服务器设置的丢弃标志。</summary>
      <returns>true 如果客户端就是必须放弃 <see cref="T:System.Net.Cookie" /> 末尾的当前会话; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Cookie.Domain">
      <summary>获取或设置 URI，其中 <see cref="T:System.Net.Cookie" /> 是否有效。</summary>
      <returns>为其 URI <see cref="T:System.Net.Cookie" /> 是否有效。</returns>
    </member>
    <member name="P:System.Net.Cookie.Expired">
      <summary>获取或设置的当前状态 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>true 如果 <see cref="T:System.Net.Cookie" /> 已过期; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Cookie.Expires">
      <summary>获取或设置的过期日期和时间 <see cref="T:System.Net.Cookie" /> 作为 <see cref="T:System.DateTime" />。</summary>
      <returns>到期日期和时间 <see cref="T:System.Net.Cookie" /> 作为 <see cref="T:System.DateTime" /> 实例。</returns>
    </member>
    <member name="P:System.Net.Cookie.HttpOnly">
      <summary>确定页脚本或其他活动内容是否可访问此 cookie。</summary>
      <returns>布尔值，该值确定页面脚本或其他活动内容是否可以访问此 cookie。</returns>
    </member>
    <member name="P:System.Net.Cookie.Name">
      <summary>获取或设置的名称 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>
        <see cref="T:System.Net.Cookie" /> 的名称。</returns>
      <exception cref="T:System.Net.CookieException">为设置操作是指定的值 null 或空字符串- 或 -设置操作为指定的值包含非法字符。 以下字符必须不在内部使用 <see cref="P:System.Net.Cookie.Name" /> 属性 ︰ 等号、 分号、 逗号、 换行符 (\n)、 (\r)、 制表符 (\t) 和空格字符。 美元符号字符 （"$"） 不能为第一个字符。</exception>
    </member>
    <member name="P:System.Net.Cookie.Path">
      <summary>获取或设置到的 Uri <see cref="T:System.Net.Cookie" /> 适用。</summary>
      <returns>向其 Uri <see cref="T:System.Net.Cookie" /> 适用。</returns>
    </member>
    <member name="P:System.Net.Cookie.Port">
      <summary>获取或设置 TCP 端口的列表， <see cref="T:System.Net.Cookie" /> 适用于。</summary>
      <returns>列表中的 TCP 端口 <see cref="T:System.Net.Cookie" /> 适用于。</returns>
      <exception cref="T:System.Net.CookieException">设置操作为指定的值无法分析或没有用双引号括起来。</exception>
    </member>
    <member name="P:System.Net.Cookie.Secure">
      <summary>获取或设置安全级别为 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>true 如果客户端是仅返回该 cookie 在后续请求中，如果这些请求都使用安全超文本传输协议 (HTTPS);否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Cookie.TimeStamp">
      <summary>获取作为该 cookie 是的颁发时 <see cref="T:System.DateTime" />。</summary>
      <returns>当以颁发 cookie 的时间 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="P:System.Net.Cookie.Value">
      <summary>获取或设置 <see cref="P:System.Net.Cookie.Value" /> 的 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>
        <see cref="P:System.Net.Cookie.Value" /> 的 <see cref="T:System.Net.Cookie" />。</returns>
    </member>
    <member name="P:System.Net.Cookie.Version">
      <summary>获取或设置 cookie 符合 HTTP 状态维护的版本。</summary>
      <returns>Cookie 一致的 HTTP 状态维护版本。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">不允许指定的版本的值。</exception>
    </member>
    <member name="P:System.Net.CookieCollection.Count">
      <summary>获取 cookie 中包含的数 <see cref="T:System.Net.CookieCollection" />。</summary>
      <returns>中包含的 cookie 数 <see cref="T:System.Net.CookieCollection" />。</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsReadOnly">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Net.CookieCollection" /> 是只读的。</summary>
      <returns>true 如果这是一个只读的 <see cref="T:System.Net.CookieCollection" />; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.CookieCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否访问 <see cref="T:System.Net.CookieCollection" /> 是线程安全的。</summary>
      <returns>true 如果访问 <see cref="T:System.Net.CookieCollection" /> 是线程安全的; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Net.Cookie" /> 具有从特定索引 <see cref="T:System.Net.CookieCollection" />。</summary>
      <param name="index">从零开始的索引 <see cref="T:System.Net.Cookie" /> 要查找。</param>
      <returns>一个 <see cref="T:System.Net.Cookie" /> 具有从特定索引 <see cref="T:System.Net.CookieCollection" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于 0 或 <paramref name="index" /> 是否大于或等于 <see cref="P:System.Net.CookieCollection.Count" />。</exception>
    </member>
    <member name="P:System.Net.CookieCollection.Item(System.String)">
      <summary>获取 <see cref="T:System.Net.Cookie" /> 具有特定名称从 <see cref="T:System.Net.CookieCollection" />。</summary>
      <param name="name">名称 <see cref="T:System.Net.Cookie" /> 要查找。</param>
      <returns>
        <see cref="T:System.Net.Cookie" /> 具有特定名称从 <see cref="T:System.Net.CookieCollection" />。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 为 null。</exception>
    </member>
    <member name="P:System.Net.CookieCollection.SyncRoot">
      <summary>获取一个对象对访问进行同步 <see cref="T:System.Net.CookieCollection" />。</summary>
      <returns>对访问进行同步的对象 <see cref="T:System.Net.CookieCollection" />。</returns>
    </member>
    <member name="P:System.Net.CookieContainer.Capacity">
      <summary>获取和设置数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。</summary>
      <returns>数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳。 这是一种硬性限制，不能超过通过添加 <see cref="T:System.Net.Cookie" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="Capacity" /> 小于或等于零或 (值是小于 <see cref="P:System.Net.CookieContainer.PerDomainCapacity" /> 和 <see cref="P:System.Net.CookieContainer.PerDomainCapacity" /> 是否不等于 <see cref="F:System.Int32.MaxValue" />)。</exception>
    </member>
    <member name="P:System.Net.CookieContainer.Count">
      <summary>获取的数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 当前持有。</summary>
      <returns>数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 当前持有。 这是总数的 <see cref="T:System.Net.Cookie" /> 中的所有域的实例。</returns>
    </member>
    <member name="P:System.Net.CookieContainer.MaxCookieSize">
      <summary>表示允许的长度最大 <see cref="T:System.Net.Cookie" />。</summary>
      <returns>长度 （字节），允许的最大 <see cref="T:System.Net.Cookie" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="MaxCookieSize" /> 小于或等于零。</exception>
    </member>
    <member name="P:System.Net.CookieContainer.PerDomainCapacity">
      <summary>获取和设置数 <see cref="T:System.Net.Cookie" /> 实例 <see cref="T:System.Net.CookieContainer" /> 可以容纳每个域。</summary>
      <returns>数 <see cref="T:System.Net.Cookie" /> 允许每个域的实例。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="PerDomainCapacity" /> 小于或等于零。- 或 - <paramref name="(PerDomainCapacity" /> 超出了允许的最大 cookie 数实例，300，并且不等于 <see cref="F:System.Int32.MaxValue" />)。</exception>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultCredentials">
      <summary>获取应用程序的系统凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 表示应用程序的系统凭据。</returns>
    </member>
    <member name="P:System.Net.CredentialCache.DefaultNetworkCredentials">
      <summary>获取当前安全上下文的网络凭据。</summary>
      <returns>
        <see cref="T:System.Net.NetworkCredential" /> 表示的当前用户或应用程序的网络凭据。</returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.AddressFamily">
      <summary>获取 Internet 协议 (IP) 地址族。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Host">
      <summary>获取宿主的 Internet 协议 (IP) 地址的主机名或字符串表示形式。</summary>
      <returns>IP 地址的主机名或字符串表示形式。</returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Port">
      <summary>获取端口号 <see cref="T:System.Net.DnsEndPoint" />。</summary>
      <returns>0 到 0xffff 之间的端口号，该值指示的范围内的整数值 <see cref="T:System.Net.DnsEndPoint" />。</returns>
    </member>
    <member name="P:System.Net.DownloadDataCompletedEventArgs.Result">
      <summary>获取由下载的数据 <see cref="Overload:System.Net.WebClient.DownloadDataAsync" /> 方法。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含已下载的数据。</returns>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.BytesReceived">
      <summary>获取接收的字节数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示接收的字节数。</returns>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>获取中的字节总数 <see cref="T:System.Net.WebClient" /> 数据下载操作。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示将接收的字节数。</returns>
    </member>
    <member name="P:System.Net.DownloadStringCompletedEventArgs.Result">
      <summary>获取由下载的数据 <see cref="Overload:System.Net.WebClient.DownloadStringAsync" /> 方法。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含已下载的数据。</returns>
    </member>
    <member name="P:System.Net.EndPoint.AddressFamily">
      <summary>获取终结点所属的地址族。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.EndpointPermission.Hostname">
      <summary>获取 DNS 主机名或 IP 地址与此终结点相关联的服务器。</summary>
      <returns>一个字符串，包含的 DNS 主机名或服务器的 IP 地址。</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Port">
      <summary>获取与此终结点相关联的网络端口号。</summary>
      <returns>与此请求关联的网络端口号或 <see cref="F:System.Net.SocketPermission.AllPorts" />。</returns>
    </member>
    <member name="P:System.Net.EndpointPermission.Transport">
      <summary>获取与此终结点关联的传输类型。</summary>
      <returns>
        <see cref="T:System.Net.TransportType" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.ConnectionGroupName">
      <summary>获取或设置请求的连接组的名称。 此属性保留供将来使用。</summary>
      <returns>请求的连接组的名称。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentLength">
      <summary>获取或设置所发送的数据的内容长度。</summary>
      <returns>发送的请求数据的字节数。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.FileWebRequest.ContentLength" /> 小于 0。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.ContentType">
      <summary>获取或设置所发送的数据的内容类型。 此属性保留供将来使用。</summary>
      <returns>所发送的数据内容类型。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Credentials">
      <summary>获取或设置与此请求关联的凭据。 此属性保留供将来使用。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> ，其中包含与此请求关联的身份验证凭据。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Headers">
      <summary>获取与请求关联的名称/值对的集合。 此属性保留供将来使用。</summary>
      <returns>一个 <see cref="T:System.Net.WebHeaderCollection" /> ，其中包含与此请求关联的标头名称/值对。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Method">
      <summary>获取或设置用于请求的协议方法。 此属性保留供将来使用。</summary>
      <returns>要在此请求中使用的协议方法。</returns>
      <exception cref="T:System.ArgumentException">该方法无效。- 或 -不支持此方法。- 或 -指定了多个方法。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.PreAuthenticate">
      <summary>获取或设置一个值，该值指示是否对请求进行。 此属性保留供将来使用。</summary>
      <returns>true 若要进行预身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Proxy">
      <summary>获取或设置要用于此请求的网络代理。 此属性保留供将来使用。</summary>
      <returns>
        <see cref="T:System.Net.IWebProxy" /> ，该值指示要用于此请求的网络代理。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.RequestUri">
      <summary>获取请求的统一资源标识符 (URI)。</summary>
      <returns>一个 <see cref="T:System.Uri" /> ，其中包含请求的 URI。</returns>
    </member>
    <member name="P:System.Net.FileWebRequest.Timeout">
      <summary>获取或设置请求超时前的时间长度。</summary>
      <returns>时间 （毫秒），直到在请求超时时或值 <see cref="F:System.Threading.Timeout.Infinite" /> 以指示该请求不会超时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值是否小于或等于零且不是 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="P:System.Net.FileWebRequest.UseDefaultCredentials">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">对于文件统一资源标识符 (Uri) 不支持默认凭据。</exception>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentLength">
      <summary>在文件系统资源中获取内容的长度。</summary>
      <returns>从文件系统资源返回的字节数。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ContentType">
      <summary>获取文件系统资源的内容类型。</summary>
      <returns>值为"二进制/八进制流"。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.Headers">
      <summary>获取与响应关联的标头名称/值对的集合。</summary>
      <returns>一个 <see cref="T:System.Net.WebHeaderCollection" /> ，其中包含与响应关联的标头名称/值对。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.ResponseUri">
      <summary>获取文件系统提供的资源的响应的 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" /> ，其中包含提供响应的文件系统资源的 URI。</returns>
    </member>
    <member name="P:System.Net.FileWebResponse.SupportsHeaders">
      <summary>获取一个值，该值指示是否 <see cref="P:System.Net.FileWebResponse.Headers" /> 支持属性 <see cref="T:System.Net.FileWebResponse" /> 实例。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true <see cref="P:System.Net.FileWebResponse.Headers" /> 支持属性 <see cref="T:System.Net.FileWebResponse" /> 实例; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ClientCertificates">
      <summary>获取用于建立到 FTP 服务器的加密连接的证书。</summary>
      <returns>包含客户端证书的 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ConnectionGroupName">
      <summary>获取或设置连接组的名称，该连接组包含用于发送当前请求的服务点。</summary>
      <returns>包含连接组名称的 <see cref="T:System.String" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentLength">
      <summary>获取或设置被 <see cref="T:System.Net.FtpWebRequest" /> 类忽略的值。</summary>
      <returns>应忽略的 <see cref="T:System.Int64" /> 值。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentOffset">
      <summary>获取或设置请求所下载的文件的字节偏移量。</summary>
      <returns>指定文件偏移量（以字节为单位）的 <see cref="T:System.Int64" /> 实例。 默认值为 0。</returns>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">为此属性是指定的值小于零。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ContentType">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">为 FTP 不支持内容类型信息。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Credentials">
      <summary>获取或设置用于与 FTP 服务器通信的凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 实例；如果还未设置该属性，则为 null。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Net.ICredentials" /> 以外的其他类型的 <see cref="T:System.Net.NetworkCredential" /> 指定为 set 操作。</exception>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.DefaultCachePolicy">
      <summary>定义所有 FTP 请求的默认缓存策略。</summary>
      <returns>
        <see cref="T:System.Net.Cache.RequestCachePolicy" />，定义 FTP 请求的缓存策略。</returns>
      <exception cref="T:System.ArgumentNullException">调用方尝试将此属性设置为 null。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.EnableSsl">
      <summary>获取或设置 <see cref="T:System.Boolean" />，它指定是否使用 SSL 连接。</summary>
      <returns>如果控制和数据传输是加密的，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">已建立到 FTP 服务器的连接。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Headers">
      <summary>获取空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</summary>
      <returns>一个空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.KeepAlive">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定在请求完成之后是否关闭到 FTP 服务器的控制连接。</summary>
      <returns>如果不应销毁到服务器的连接，则为 true；否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Method">
      <summary>获取或设置要发送到 FTP 服务器的命令。</summary>
      <returns>
        <see cref="T:System.String" /> 值，包含要发送到服务器的 FTP 命令。 默认值为 <see cref="F:System.Net.WebRequestMethods.Ftp.DownloadFile" />。</returns>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
      <exception cref="T:System.ArgumentException">该方法无效。- 或 -不支持此方法。- 或 -指定了多个方法。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.PreAuthenticate">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">为 FTP 不支持预身份验证。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.Proxy">
      <summary>获取或设置用于与 FTP 服务器通信的代理。</summary>
      <returns>负责与 FTP 服务器通信的 <see cref="T:System.Net.IWebProxy" /> 实例。</returns>
      <exception cref="T:System.ArgumentNullException">无法将此属性设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.ReadWriteTimeout">
      <summary>获取或设置写入或读取流时的超时。</summary>
      <returns>读取或写入超时之前的毫秒数。 默认值为 300,000 毫秒（5 分钟）。</returns>
      <exception cref="T:System.InvalidOperationException">已发送请求。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作中是否小于或等于零，也不等于指定的值 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.RenameTo">
      <summary>获取或设置重命名文件的新名称。</summary>
      <returns>重命名文件的新名称。</returns>
      <exception cref="T:System.ArgumentException">为设置操作是指定的值 null 或空字符串。</exception>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.RequestUri">
      <summary>获取此实例所请求的 URI。</summary>
      <returns>
        <see cref="T:System.Uri" /> 实例，标识使用文件传输协议访问的资源。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.ServicePoint">
      <summary>获取用于连接 FTP 服务器的 <see cref="T:System.Net.ServicePoint" /> 对象。</summary>
      <returns>可用于自定义连接行为的 <see cref="T:System.Net.ServicePoint" /> 对象。</returns>
    </member>
    <member name="P:System.Net.FtpWebRequest.Timeout">
      <summary>获取或设置等待请求的毫秒数。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值，包含请求超时前等待的毫秒数。 默认值为 <see cref="F:System.Threading.Timeout.Infinite" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值是小于零，且不是 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseBinary">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指定文件传输的数据类型。</summary>
      <returns>true，指示服务器要传输的是二进制数据；false，指示数据为文本。 默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UseDefaultCredentials">
      <summary>总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>总是引发 <see cref="T:System.NotSupportedException" />。</returns>
      <exception cref="T:System.NotSupportedException">为 FTP 不支持默认凭据。</exception>
    </member>
    <member name="P:System.Net.FtpWebRequest.UsePassive">
      <summary>获取或设置客户端应用程序的数据传输过程的行为。</summary>
      <returns>如果客户端应用程序的数据传输过程侦听数据端口上的连接，则为 false；如果客户端应在数据端口上启动连接，则为 true。 默认值为 true。</returns>
      <exception cref="T:System.InvalidOperationException">为此属性对于正在进行的请求指定新值。</exception>
    </member>
    <member name="P:System.Net.FtpWebResponse.BannerMessage">
      <summary>获取 FTP 服务器建立连接时发送的消息之前登录。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含横幅消息发送的服务器; 否则为 <see cref="F:System.String.Empty" /> 如果不发送任何消息。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ContentLength">
      <summary>获取从 FTP 服务器接收的数据的长度。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值包含从 FTP 服务器接收的数据的字节数。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ExitMessage">
      <summary>获取 FTP 会话结束时由服务器发送的消息。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含退出消息发送的服务器; 否则为 <see cref="F:System.String.Empty" /> 如果不发送任何消息。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.Headers">
      <summary>获取空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</summary>
      <returns>一个空 <see cref="T:System.Net.WebHeaderCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.LastModified">
      <summary>获取上次修改 FTP 服务器上的文件的日期和时间。</summary>
      <returns>包含上次修改文件的日期和时间的 <see cref="T:System.DateTime" />。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.ResponseUri">
      <summary>获取发送请求的响应的 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 标识与此响应关联的资源的实例。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusCode">
      <summary>获取从 FTP 服务器发送的最新状态代码。</summary>
      <returns>
        <see cref="T:System.Net.FtpStatusCode" /> 与此响应一起返回的值，该值指示最新的状态代码。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.StatusDescription">
      <summary>获取描述从 FTP 服务器发送的状态代码的文本。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含状态代码和消息返回与此响应。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.SupportsHeaders">
      <summary>获取一个值，该值指示是否 <see cref="P:System.Net.FtpWebResponse.Headers" /> 支持属性 <see cref="T:System.Net.FtpWebResponse" /> 实例。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 <see cref="P:System.Net.FtpWebResponse.Headers" /> 支持属性 <see cref="T:System.Net.FtpWebResponse" /> 实例; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.FtpWebResponse.WelcomeMessage">
      <summary>获取 FTP 服务器身份验证完成时发送的消息。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含欢迎消息发送的服务器; 否则为 <see cref="F:System.String.Empty" /> 如果不发送任何消息。</returns>
    </member>
    <member name="P:System.Net.GlobalProxySelection.Select">
      <summary>获取或设置全局 HTTP 代理。</summary>
      <returns>
        <see cref="T:System.Net.IWebProxy" /> ，每次调用 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 使用。</returns>
      <exception cref="T:System.ArgumentNullException">为一个集运算是指定的值 null。</exception>
      <exception cref="T:System.Security.SecurityException">调用方无权执行所请求的操作。</exception>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemes">
      <summary>获取或设置用于客户端身份验证的方案。</summary>
      <returns>指示如何对客户端进行身份验证的 <see cref="T:System.Net.AuthenticationSchemes" /> 枚举值的按位组合。 默认值为 <see cref="F:System.Net.AuthenticationSchemes.Anonymous" />。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate">
      <summary>获取或设置一个委托，调用它来确定用于客户端身份验证的协议。</summary>
      <returns>
        <see cref="T:System.Net.AuthenticationSchemeSelector" /> 委托，它调用用于选择身份验证协议的方法。 默认值为 null。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListener.DefaultServiceNames">
      <summary>获取由已注册前缀确定的服务提供程序名 (SPN) 的默认列表。</summary>
      <returns>一个包含 SPN 列表的 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" />。</returns>
    </member>
    <member name="P:System.Net.HttpListener.ExtendedProtectionPolicy">
      <summary>获取或设置用于会话的扩展保护的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</returns>
      <exception cref="T:System.ArgumentException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性不是 null。</exception>
      <exception cref="T:System.ArgumentNullException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionPolicy" /> 属性之后 <see cref="M:System.Net.HttpListener.Start" /> 已调用方法。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">
        <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement" /> 属性被设置为 <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 不支持扩展的保护的平台上。</exception>
    </member>
    <member name="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate">
      <summary>获取或设置在确定要用于每个请求的 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 时调用的委托。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />，它指定要用于扩展保护的策略。</returns>
      <exception cref="T:System.ArgumentException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性，但 <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> 属性必须为 null。</exception>
      <exception cref="T:System.ArgumentNullException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 属性之后 <see cref="M:System.Net.HttpListener.Start" /> 已调用方法。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.PlatformNotSupportedException">尝试设置 <see cref="P:System.Net.HttpListener.ExtendedProtectionSelectorDelegate" /> 不支持扩展的保护的平台上的属性。</exception>
    </member>
    <member name="P:System.Net.HttpListener.IgnoreWriteExceptions">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定应用程序是否接收 <see cref="T:System.Net.HttpListener" /> 向客户端发送响应时发生的异常。</summary>
      <returns>如果此 <see cref="T:System.Net.HttpListener" /> 不返回向客户端发送响应时发生的异常，则返回 true；否则返回 false。 默认值为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListener.IsListening">
      <summary>获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否已启动。</summary>
      <returns>如果已启动 <see cref="T:System.Net.HttpListener" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListener.IsSupported">
      <summary>获取一个值，指示 <see cref="T:System.Net.HttpListener" /> 是否可用于当前操作系统。</summary>
      <returns>如果支持 <see cref="T:System.Net.HttpListener" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListener.Prefixes">
      <summary>获取由此 <see cref="T:System.Net.HttpListener" /> 对象处理的统一资源标识符 (URI) 前缀。</summary>
      <returns>
        <see cref="T:System.Net.HttpListenerPrefixCollection" />，包含此 <see cref="T:System.Net.HttpListener" /> 对象在经配置后要处理的 URI 前缀。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListener.Realm">
      <summary>获取或设置与此 <see cref="T:System.Net.HttpListener" /> 对象关联的领域或资源分区。</summary>
      <returns>
        <see cref="T:System.String" /> 值，包含与 <see cref="T:System.Net.HttpListener" /> 对象关联的领域名。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListener.TimeoutManager">
      <summary>此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</summary>
      <returns>返回 <see cref="T:System.Net.HttpListenerTimeoutManager" />。此 <see cref="T:System.Net.HttpListener" /> 实例的超时管理器。</returns>
    </member>
    <member name="P:System.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制当使用 NTLM 时是否需要对使用同一传输控制协议 (TCP) 连接的其他请求进行身份验证。</summary>
      <returns>如果第一个请求的 <see cref="T:System.Security.Principal.IIdentity" /> 将用于同一连接上的后续请求，则返回 true；否则返回 false。 默认值为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListenerBasicIdentity.Password">
      <summary>指示从基本身份验证尝试的密码。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含密码。</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.Request">
      <summary>获取 <see cref="T:System.Net.HttpListenerRequest" /> 该对象表示对某个资源的客户端的请求。</summary>
      <returns>表示客户端请求的 <see cref="T:System.Net.HttpListenerRequest" /> 对象。</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.Response">
      <summary>获取 <see cref="T:System.Net.HttpListenerResponse" /> 将发送到客户端的请求响应中的客户端的对象。</summary>
      <returns>
        <see cref="T:System.Net.HttpListenerResponse" /> 对象，用于将响应发送回客户端。</returns>
    </member>
    <member name="P:System.Net.HttpListenerContext.User">
      <summary>获取一个对象，该对象用于为其请求都由客户端获取标识、 身份验证信息和安全角色 <see cref="T:System.Net.HttpListenerContext" /> 对象。</summary>
      <returns>
        <see cref="T:System.Security.Principal.IPrincipal" /> 对象，它描述客户端，或 null 如果 <see cref="T:System.Net.HttpListener" /> 提供此 <see cref="T:System.Net.HttpListenerContext" /> 没有要求身份验证。</returns>
    </member>
    <member name="P:System.Net.HttpListenerException.ErrorCode">
      <summary>获取一个值，标识所发生的错误。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 值。</returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.Count">
      <summary>获取集合中包含的前缀数目。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含此集合中的前缀的数目。</returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsReadOnly">
      <summary>获取一个值，该值指示对集合的访问是否为只读的。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerPrefixCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.AcceptTypes">
      <summary>获取客户端接受的 MIME 类型。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，其中包含请求中指定的类型名称 Accept 标头或 null 如果客户端请求不包括 Accept 标头。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ClientCertificateError">
      <summary>获取标识有问题的错误代码 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 客户端提供的。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含 Windows 错误代码。</returns>
      <exception cref="T:System.InvalidOperationException">客户端证书尚未初始化尚未通过调用 <see cref="M:System.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)" /> 或 <see cref="M:System.Net.HttpListenerRequest.GetClientCertificate" /> 方法- 或 - 此操作仍然正在进行。</exception>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentEncoding">
      <summary>获取的内容编码可随请求发送的数据与使用</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 适合与中的数据一起使用的对象 <see cref="P:System.Net.HttpListenerRequest.InputStream" /> 属性。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentLength64">
      <summary>获取包含在请求中的正文数据的长度。</summary>
      <returns>从请求的值 Content-Length 标头。 如果不知道的内容长度，则此值为-1。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ContentType">
      <summary>获取包含在请求中的正文数据的 MIME 类型。</summary>
      <returns>一个 <see cref="T:System.String" /> ，包含请求的文本 Content-Type 标头。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Cookies">
      <summary>获取与请求一起发送的 cookie。</summary>
      <returns>一个 <see cref="T:System.Net.CookieCollection" /> ，包含与请求一起发送的 cookie。 如果请求不包含 cookie，则此属性返回一个空集合。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HasEntityBody">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示请求是否有关联的正文数据。</summary>
      <returns>true 如果请求具有关联的正文数据;，否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Headers">
      <summary>获取在请求中发送的标头名称/值对的集合。</summary>
      <returns>一个 <see cref="T:System.Net.WebHeaderCollection" /> 包含请求中包含的 HTTP 标头。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.HttpMethod">
      <summary>获取客户端指定的 HTTP 方法。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含请求中使用的方法。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.InputStream">
      <summary>获取包含客户端发送的正文数据的流。</summary>
      <returns>可读 <see cref="T:System.IO.Stream" /> 对象，其中包含在请求正文中的客户端发送的字节数。 此属性返回 <see cref="F:System.IO.Stream.Null" /> 如果随请求不发送任何数据。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsAuthenticated">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否发送此请求的客户端进行身份验证。</summary>
      <returns>true 如果客户端进行身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsLocal">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否请求是否来自本地计算机。</summary>
      <returns>true 如果请求是在同一台计算机上生成 <see cref="T:System.Net.HttpListener" /> 对象，它提供该请求; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsSecureConnection">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否使用将请求发送的 TCP 连接使用的安全套接字层 (SSL) 协议。</summary>
      <returns>true 如果 TCP 连接使用 SSL。否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.IsWebSocketRequest">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否已 WebSocket 请求 TCP 连接。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 TCP 连接是 WebSocket 请求;否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.KeepAlive">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否客户端请求的持续性连接。</summary>
      <returns>true 如果连接应保持打开状态;否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.LocalEndPoint">
      <summary>获取服务器请求定向到的 IP 地址和端口号。</summary>
      <returns>
        <see cref="T:System.Net.IPEndPoint" /> ，表示该申请发送至的 IP 地址。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ProtocolVersion">
      <summary>获取请求的客户端所使用的 HTTP 版本。</summary>
      <returns>一个 <see cref="T:System.Version" /> 标识的 HTTP 客户端的版本。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.QueryString">
      <summary>获取请求中包含的查询字符串。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象，其中包含请求中包含的查询数据 <see cref="P:System.Net.HttpListenerRequest.Url" />。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RawUrl">
      <summary>获取客户端请求的 URL 信息 （不带的主机和端口）。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含此请求的原始 URL。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RemoteEndPoint">
      <summary>获取客户端发出请求的 IP 地址和端口号。</summary>
      <returns>
        <see cref="T:System.Net.IPEndPoint" /> ，它表示从中发出请求的 IP 地址和端口号。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.RequestTraceIdentifier">
      <summary>获取传入的 HTTP 请求的请求标识符。</summary>
      <returns>一个 <see cref="T:System.Guid" /> 对象，其中包含 HTTP 请求的标识符。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.ServiceName">
      <summary>获取请求的客户端发送服务提供程序名称 (SPN)。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含在请求上发送的客户端的 SPN。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.TransportContext">
      <summary>获取 <see cref="T:System.Net.TransportContext" /> 为客户端请求。</summary>
      <returns>一个 <see cref="T:System.Net.TransportContext" /> 为客户端请求的对象。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.Url">
      <summary>获取 <see cref="T:System.Uri" /> 客户端请求的对象。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 对象，用于标识客户端请求的资源。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UrlReferrer">
      <summary>获取客户端与服务器的资源的统一资源标识符 (URI)。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 对象，其中包含请求的文本 <see cref="F:System.Net.HttpRequestHeader.Referer" /> 标头，或 null 如果标头未包含在请求中。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserAgent">
      <summary>获取客户端所提供的用户代理。</summary>
      <returns>一个 <see cref="T:System.String" /> 对象，其中包含请求的文本 User-Agent 标头。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostAddress">
      <summary>获取的服务器请求定向到的 IP 地址和端口号。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含主机地址信息。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserHostName">
      <summary>获取的 DNS 名称和客户端提供，如果指定的端口号。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值包含请求的文本 Host 标头。</returns>
    </member>
    <member name="P:System.Net.HttpListenerRequest.UserLanguages">
      <summary>获取响应的首选自然语言。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，其中包含请求中指定的语言 <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage" /> 标头或 null 如果客户端请求不包括 <see cref="F:System.Net.HttpRequestHeader.AcceptLanguage" /> 标头。</returns>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentEncoding">
      <summary>获取或设置 <see cref="T:System.Text.Encoding" /> 此响应 <see cref="P:System.Net.HttpListenerResponse.OutputStream" />。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 适合与中的数据一起使用的对象 <see cref="P:System.Net.HttpListenerResponse.OutputStream" /> 属性，或 null 如果未指定编码。</returns>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentLength64">
      <summary>获取或设置包含在响应的正文数据中的字节数。</summary>
      <returns>响应值 Content-Length 标头。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作是指定的值小于零。</exception>
      <exception cref="T:System.InvalidOperationException">已发送响应。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ContentType">
      <summary>获取或设置返回的内容的 MIME 类型。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含响应的文本 Content-Type 标头。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为设置操作是一个空字符串指定的值 ("")。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Cookies">
      <summary>获取或设置与响应一起返回的 cookie 的集合。</summary>
      <returns>一个 <see cref="T:System.Net.CookieCollection" /> ，其中包含与响应的 cookie。 如果集合为空无 cookie 已添加到响应。</returns>
    </member>
    <member name="P:System.Net.HttpListenerResponse.Headers">
      <summary>获取或设置由服务器返回的标头名称/值对的集合。</summary>
      <returns>一个 <see cref="T:System.Net.WebHeaderCollection" /> 实例，它包含所有显式设置包含在响应的 HTTP 标头。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.WebHeaderCollection" /> 指定设置操作的响应无效实例。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.KeepAlive">
      <summary>获取或设置一个值，指示服务器是否请求的持续性连接。</summary>
      <returns>true 如果服务器请求的持续性连接;，否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.OutputStream">
      <summary>获取 <see cref="T:System.IO.Stream" /> 对象传递给可写入响应。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象传递给可写入响应。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.ProtocolVersion">
      <summary>获取或设置用于响应的 HTTP 版本。</summary>
      <returns>一个 <see cref="T:System.Version" /> 对象，它指示使用客户端在响应时的 HTTP 版本。 请注意此属性现已过时。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为一个集运算不具有指定的值及其 <see cref="P:System.Version.Major" /> 属性设置为 1 或不具有其 <see cref="P:System.Version.Minor" /> 属性设置为 0 或 1。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.RedirectLocation">
      <summary>获取或设置的 http 值 Location 中此响应标头。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含要发送到客户端的绝对 URL Location 标头。</returns>
      <exception cref="T:System.ArgumentException">为设置操作是一个空字符串指定的值 ("")。</exception>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.SendChunked">
      <summary>获取或设置是否响应使用 chunked 的传输编码。</summary>
      <returns>true 如果响应设置为使用 chunked 的传输编码;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusCode">
      <summary>获取或设置要返回到客户端的 HTTP 状态代码。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定所请求的资源的 HTTP 状态代码。 默认值是 <see cref="F:System.Net.HttpStatusCode.OK" />, ，指示服务器已成功处理了客户端的请求和响应正文中未包含所请求的资源。</returns>
      <exception cref="T:System.ObjectDisposedException">此对象已关闭。</exception>
      <exception cref="T:System.Net.ProtocolViolationException">设置操作为指定的值无效。 有效值介于 100 和 999 之间 （含）。</exception>
    </member>
    <member name="P:System.Net.HttpListenerResponse.StatusDescription">
      <summary>获取或设置返回到客户端的 HTTP 状态代码的文本说明。</summary>
      <returns>返回到客户端的 HTTP 状态代码的文本说明。 默认值是 RFC 2616 描述 <see cref="P:System.Net.HttpListenerResponse.StatusCode" /> 属性值或空字符串 ("") 如果 RFC 2616 说明不存在。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">设置操作为指定的值包含非打印字符。</exception>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.DrainEntityBody">
      <summary>获取或设置的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" />  电量保持活动状态的连接上的实体正文。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。允许的时间，以秒为单位， <see cref="T:System.Net.HttpListener" />  电量保持活动状态的连接上的实体正文。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.EntityBody">
      <summary>获取或设置的时间，以秒为单位，允许要到达的请求实体正文。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。以秒为单位，允许请求实体主体，若要到达的时间。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.HeaderWait">
      <summary>获取或设置的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" /> 来分析请求标头。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。允许的时间，以秒为单位， <see cref="T:System.Net.HttpListener" /> 来分析请求标头。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.IdleConnection">
      <summary>获取或设置的时间，以秒为单位，允许的空闲连接。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。以秒为单位，允许的空闲连接时间。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.MinSendBytesPerSecond">
      <summary>获取或设置最小发送速率，字节数 / 秒，响应中。</summary>
      <returns>返回 <see cref="T:System.Int64" />。最小发送速率，单位为字节数 / 秒，响应。</returns>
    </member>
    <member name="P:System.Net.HttpListenerTimeoutManager.RequestQueue">
      <summary>获取或设置的时间，以秒为单位，允许为请求中请求队列之前保持 <see cref="T:System.Net.HttpListener" /> 提取它。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。请求在之前的请求队列中保留的时间，以秒为单位，允许 <see cref="T:System.Net.HttpListener" /> 提取它。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Accept">
      <summary>获取或设置 Accept HTTP 标头的值。</summary>
      <returns>Accept HTTP 标头的值。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Address">
      <summary>获取实际响应请求的 Internet 资源的统一资源标识符 (URI)。</summary>
      <returns>标识实际对请求作出响应的 Internet 资源的 <see cref="T:System.Uri" />。 默认值是供 <see cref="M:System.Net.WebRequest.Create(System.String)" /> 方法用来初始化请求的 URI。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowAutoRedirect">
      <summary>获取或设置一个值，该值指示请求是否应跟随重定向响应。</summary>
      <returns>如果请求应自动遵循来自 Internet 资源的重定向响应，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowReadStreamBuffering">
      <summary>获取或设置一个值，该值指示是否对从 Internet 资源接收的数据进行缓冲处理。</summary>
      <returns>如果为 true，则对从 Internet 资源接收到的数据进行缓冲处理；否则为 false。如果为 true，则启用对从 Internet 资源接收的数据进行缓冲处理；如果为 false，则禁用缓冲处理。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowWriteStreamBuffering">
      <summary>获取或设置一个值，该值指示是否对发送到 Internet 资源的数据进行缓冲处理。</summary>
      <returns>如果为 true，则允许对发送到 Internet 资源的数据进行缓冲处理；如果为 false，则禁用缓冲处理。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AutomaticDecompression">
      <summary>获取或设置所使用的解压缩类型。</summary>
      <returns>一个 T:System.Net.DecompressionMethods 对象，该对象指示所使用的解压缩类型。</returns>
      <exception cref="T:System.InvalidOperationException">对象的当前状态不允许设置此属性。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ClientCertificates">
      <summary>获取或设置与此请求关联的安全证书集合。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />，包含与此请求关联的安全证书。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Connection">
      <summary>获取或设置 Connection HTTP 标头的值。</summary>
      <returns>Connection HTTP 标头的值。 默认值为 null。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.HttpWebRequest.Connection" /> 的值设置为保持连接或关闭。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ConnectionGroupName">
      <summary>获取或设置请求的连接组的名称。</summary>
      <returns>该请求的连接组的名称。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentLength">
      <summary>获取或设置 Content-length HTTP 标头。</summary>
      <returns>要发送到 Internet 资源的数据的字节数。 默认值为 -1，该值指示尚未设置该属性，并且没有要发送的请求数据。</returns>
      <exception cref="T:System.InvalidOperationException">已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 方法启动请求。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">新的 <see cref="P:System.Net.HttpWebRequest.ContentLength" /> 值小于 0。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentType">
      <summary>获取或设置 Content-type HTTP 标头的值。</summary>
      <returns>Content-type HTTP 标头的值。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueDelegate">
      <summary>获取或设置当从 Internet 资源接收到 HTTP 100-continue 响应时调用的委托方法。</summary>
      <returns>实现回调方法的委托，该方法在从 Internet 资源返回 HTTP Continue 响应时执行。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContinueTimeout">
      <summary>获取或设置在接收到来自服务器的 100-Continue 之前要等待的超时（以毫秒为单位）。</summary>
      <returns>在接收到 100-Continue 之前要等待的超时（以毫秒为单位）。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.CookieContainer">
      <summary>获取或设置与此请求关联的 Cookie。</summary>
      <returns>包含与此请求关联的 Cookie 的 <see cref="T:System.Net.CookieContainer" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Credentials">
      <summary>获取或设置请求的身份验证信息。</summary>
      <returns>包含与该请求关联的身份验证凭据的 <see cref="T:System.Net.ICredentials" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Date">
      <summary>获取或设置要在 HTTP 请求中使用的 Date HTTP 标头值。</summary>
      <returns>HTTP 请求中的 Date 标头值。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultCachePolicy">
      <summary>获取或设置此请求的默认缓存策略。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />，它指定当没有其他策略适用时对此请求有效的缓存策略。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumErrorResponseLength">
      <summary>获取或设置 HTTP 错误响应的默认最大长度。</summary>
      <returns>HTTP 错误响应的默认最大长度。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于 0 并且不等于 -1。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.DefaultMaximumResponseHeadersLength">
      <summary>获取或设置 <see cref="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength" /> 属性的默认值。</summary>
      <returns>接收的响应标头的默认最大长度，以 KB（1024 字节）为单位。 默认配置文件将此值设置为 64 KB。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">该值不等于 -1 且小于 0。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Expect">
      <summary>获取或设置 Expect HTTP 标头的值。</summary>
      <returns>Expect HTTP 标头的内容。 默认值为 null。此属性的值存储在 <see cref="T:System.Net.WebHeaderCollection" />。 如果设置了 WebHeaderCollection，则该属性值将丢失。</returns>
      <exception cref="T:System.ArgumentException">将 Expect 设置为一个包含“100-continue”的字符串作为子字符串。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.HaveResponse">
      <summary>获取一个值，该值指示是否收到了来自 Internet 资源的响应。</summary>
      <returns>如果接收到了响应，则为 true，否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Headers">
      <summary>指定构成 HTTP 标头的名称/值对的集合。</summary>
      <returns>包含构成 HTTP 请求标头的名称/值对的 <see cref="T:System.Net.WebHeaderCollection" />。</returns>
      <exception cref="T:System.InvalidOperationException">已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 方法启动请求。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Host">
      <summary>获取或设置要在 HTTP 请求中独立于请求 URI 使用的 Host 标头值。</summary>
      <returns>HTTP 请求中的 Host 标头值。</returns>
      <exception cref="T:System.ArgumentNullException">无法将 Host 标头设置为 null。</exception>
      <exception cref="T:System.ArgumentException">无法将 Host 标头设置为无效值。</exception>
      <exception cref="T:System.InvalidOperationException">无法在已开始发送 <see cref="T:System.Net.HttpWebRequest" /> 之后设置 Host 标头。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.IfModifiedSince">
      <summary>获取或设置 If-Modified-Since HTTP 标头的值。</summary>
      <returns>包含 HTTP If-Modified-Since 标头内容的 <see cref="T:System.DateTime" />。 默认值是当前日期和时间。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.KeepAlive">
      <summary>获取或设置一个值，该值指示是否与 Internet 资源建立持续型连接。</summary>
      <returns>如果对 Internet 资源的请求所包含的 HTTP Connection 标头带有 Keep-alive 这一值，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumAutomaticRedirections">
      <summary>获取或设置请求将跟随的重定向的最大数目。</summary>
      <returns>请求将跟随的重定向响应的最大数目。 默认值为 50。</returns>
      <exception cref="T:System.ArgumentException">值设置为 0 或更小。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.MaximumResponseHeadersLength">
      <summary>获取或设置响应标头允许的最大长度。</summary>
      <returns>响应标头的长度，以 KB（1024 字节）为单位。</returns>
      <exception cref="T:System.InvalidOperationException">已提交请求后设置属性。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">值小于 0 并且不等于 -1。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.MediaType">
      <summary>获取或设置请求的媒体类型。</summary>
      <returns>请求的媒体类型。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Method">
      <summary>获取或设置请求的方法。</summary>
      <returns>用于联系 Internet 资源的请求方法。 默认值为 GET。</returns>
      <exception cref="T:System.ArgumentException">未提供任何方法。- 或 - 方法字符串包含无效字符。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Pipelined">
      <summary>获取或设置一个值，该值指示是否通过管线将请求传输到 Internet 资源。</summary>
      <returns>如果通过管线传输请求，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.PreAuthenticate">
      <summary>获取或设置一个值，该值指示是否随请求发送一个 Authorization 标头。</summary>
      <returns>如果在发生身份验证之后随请求一起发送 HTTP Authorization 标头，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ProtocolVersion">
      <summary>获取或设置用于请求的 HTTP 版本。</summary>
      <returns>用于请求的 HTTP 版本。 默认值为 <see cref="F:System.Net.HttpVersion.Version11" />。</returns>
      <exception cref="T:System.ArgumentException">HTTP 版本设置为 1.0 或 1.1 以外的值。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Proxy">
      <summary>获取或设置请求的代理信息。</summary>
      <returns>用于代理请求的 <see cref="T:System.Net.IWebProxy" /> 对象。 默认值通过调用 <see cref="P:System.Net.GlobalProxySelection.Select" /> 属性设置。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Net.HttpWebRequest.Proxy" /> 设置为 null。</exception>
      <exception cref="T:System.InvalidOperationException">已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 启动请求。</exception>
      <exception cref="T:System.Security.SecurityException">调用方无权执行所请求的操作。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ReadWriteTimeout">
      <summary>获取或设置写入或读取流时的超时（以毫秒为单位）。</summary>
      <returns>在写入超时或读取超时之前的毫秒数。 默认值为 300,000 毫秒（5 分钟）。</returns>
      <exception cref="T:System.InvalidOperationException">已发送请求。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">为集运算指定的值小于或等于零，且不等于 <see cref="F:System.Threading.Timeout.Infinite" /></exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Referer">
      <summary>获取或设置 Referer HTTP 标头的值。</summary>
      <returns>Referer HTTP 标头的值。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.RequestUri">
      <summary>获取请求的原始统一资源标识符 (URI)。</summary>
      <returns>
        <see cref="T:System.Uri" />，它包含传递给 <see cref="M:System.Net.WebRequest.Create(System.String)" /> 方法的 Internet 资源的 URI。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.SendChunked">
      <summary>获取或设置一个值，该值指示是否将数据分段发送到 Internet 资源。</summary>
      <returns>如果为 true，则将数据分段发送到 Internet 资源；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">已通过调用 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" />、<see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />、<see cref="M:System.Net.HttpWebRequest.GetResponse" /> 或 <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> 方法启动请求。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServerCertificateValidationCallback">
      <summary>获取或设置用于验证服务器证书的回调函数。</summary>
      <returns>用于验证服务器证书的回调函数。用于验证服务器证书的回调函数。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.ServicePoint">
      <summary>获取用于请求的服务点。</summary>
      <returns>表示与 Internet 资源的网络连接的 <see cref="T:System.Net.ServicePoint" />。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.SupportsCookieContainer">
      <summary>获取指示请求是否为 <see cref="T:System.Net.CookieContainer" /> 提供支持的值。</summary>
      <returns>如果请求为 <see cref="T:System.Net.CookieContainer" /> 提供支持，则为 true；否则为 false。如果支持 <see cref="T:System.Net.CookieContainer" />，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Timeout">
      <summary>获取或设置 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 和 <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的超时值（以毫秒为单位）。</summary>
      <returns>请求超时前等待的毫秒数。 默认值是 100,000 毫秒（100 秒）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值是小于零，且不是 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.TransferEncoding">
      <summary>获取或设置 Transfer-encoding HTTP 标头的值。</summary>
      <returns>Transfer-encoding HTTP 标头的值。 默认值为 null。</returns>
      <exception cref="T:System.InvalidOperationException">当 <see cref="P:System.Net.HttpWebRequest.SendChunked" /> 为 false 时设置 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" />。</exception>
      <exception cref="T:System.ArgumentException">将 <see cref="P:System.Net.HttpWebRequest.TransferEncoding" /> 设置为值“Chunked”。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.UnsafeAuthenticatedConnectionSharing">
      <summary>获取或设置一个值，该值指示是否允许经过高速 NTLM 身份验证的连接共享。</summary>
      <returns>true 表示使经过身份验证的连接保持打开状态；否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.UseDefaultCredentials">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值控制是否随请求一起发送默认凭据。</summary>
      <returns>如果使用默认凭据，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">你试图在发送请求后设置该属性。</exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.UserAgent">
      <summary>获取或设置 User-agent HTTP 标头的值。</summary>
      <returns>User-agent HTTP 标头的值。 默认值为 null。此属性的值存储在 <see cref="T:System.Net.WebHeaderCollection" />。 如果设置了 WebHeaderCollection，则该属性值将丢失。</returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.CharacterSet">
      <summary>获取响应的字符集。</summary>
      <returns>一个字符串，包含响应的字符集。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentEncoding">
      <summary>获取用于对响应体进行编码的方法。</summary>
      <returns>一个字符串，描述用于对响应体进行编码的方法。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentLength">
      <summary>获取请求返回的内容的长度。</summary>
      <returns>由请求所返回的字节数。 内容长度不包括标头信息。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ContentType">
      <summary>获取响应的内容类型。</summary>
      <returns>包含响应的内容类型的字符串。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Cookies">
      <summary>获取或设置与此响应关联的 Cookie。</summary>
      <returns>
        <see cref="T:System.Net.CookieCollection" />，包含与此响应关联的 Cookie。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Headers">
      <summary>获取来自服务器的与此响应关联的标头。</summary>
      <returns>一个 <see cref="T:System.Net.WebHeaderCollection" />，包含与响应一起返回的标头信息。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.IsMutuallyAuthenticated">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示客户端和服务器是否都已经过身份验证。</summary>
      <returns>如果发生了相互身份验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.HttpWebResponse.LastModified">
      <summary>获取最后一次修改响应内容的日期和时间。</summary>
      <returns>
        <see cref="T:System.DateTime" />，包含修改响应内容的日期和时间。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Method">
      <summary>获取用于返回响应的方法。</summary>
      <returns>一个字符串，包含用于返回响应的 HTTP 方法。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ProtocolVersion">
      <summary>获取响应中使用的 HTTP 协议的版本。</summary>
      <returns>一个 <see cref="T:System.Version" />，包含响应的 HTTP 协议版本。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.ResponseUri">
      <summary>获取响应请求的 Internet 资源的 URI。</summary>
      <returns>一个 <see cref="T:System.Uri" />，包含响应请求的 Internet 资源的 URI。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.Server">
      <summary>获取发送响应的服务器的名称。</summary>
      <returns>一个字符串，包含发送响应的服务器的名称。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusCode">
      <summary>获取响应的状态。</summary>
      <returns>
        <see cref="T:System.Net.HttpStatusCode" /> 值之一。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusDescription">
      <summary>获取与响应一起返回的状态说明。</summary>
      <returns>一个字符串，描述响应的状态。</returns>
      <exception cref="T:System.ObjectDisposedException">当前实例已被释放。</exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.SupportsHeaders">
      <summary>获取指示是否支持标题的值。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。如果标题受支持，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.AuthenticationType">
      <summary>获取此身份验证模块提供的身份验证类型。</summary>
      <returns>一个字符串，指示此身份验证模块提供的身份验证类型。</returns>
    </member>
    <member name="P:System.Net.IAuthenticationModule.CanPreAuthenticate">
      <summary>获取一个值，该值指示是否支持预身份验证的身份验证模块。</summary>
      <returns>true 如果授权模块支持预身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.Address">
      <summary>Internet 协议 (IP) 地址。</summary>
      <returns>IP 地址长整型值。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">地址族是 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />。</exception>
    </member>
    <member name="P:System.Net.IPAddress.AddressFamily">
      <summary>获取 IP 地址的地址族。</summary>
      <returns>返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> ipv4 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> ipv6。</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv4MappedToIPv6">
      <summary>获取 IP 地址是否为 IPv4 映射 IPv6 地址。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果 IP 地址是 IPv4 映射 IPv6 地址;否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6LinkLocal">
      <summary>获取该地址是否为 IPv6 链接本地地址。</summary>
      <returns>true 如果 IP 地址是 IPv6 链接本地地址;否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Multicast">
      <summary>获取 IPv6 地址是否多播全局地址。</summary>
      <returns>true 如果 IP 地址是全局 IPv6 多播地址;否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6SiteLocal">
      <summary>获取该地址是否为 IPv6 站点本地地址。</summary>
      <returns>true 如果 IP 地址是 IPv6 站点本地地址;否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Teredo">
      <summary>获取指示该地址是 IPv6 Teredo 地址。</summary>
      <returns>true 如果 IP 地址是 IPv6 Teredo 地址;否则为 false。</returns>
    </member>
    <member name="P:System.Net.IPAddress.ScopeId">
      <summary>获取或设置 IPv6 地址范围标识符。</summary>
      <returns>一个指定地址的作用域的长整型。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">AddressFamily = InterNetwork.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="scopeId" /> &lt; 0- 或 -<paramref name="scopeId" /> &gt; 0x00000000FFFFFFFF  </exception>
    </member>
    <member name="P:System.Net.IPEndPoint.Address">
      <summary>获取或设置终结点的 IP 地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 实例，包含终结点的 IP 地址。</returns>
    </member>
    <member name="P:System.Net.IPEndPoint.AddressFamily">
      <summary>获取 Internet 协议 (IP) 地址族。</summary>
      <returns>返回 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />。</returns>
    </member>
    <member name="P:System.Net.IPEndPoint.Port">
      <summary>获取或设置终结点的端口号。</summary>
      <returns>范围内的整数值 <see cref="F:System.Net.IPEndPoint.MinPort" /> 到 <see cref="F:System.Net.IPEndPoint.MaxPort" /> ，该值指示终结点的端口号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为设置操作是指定的值小于 <see cref="F:System.Net.IPEndPoint.MinPort" /> 或大于 <see cref="F:System.Net.IPEndPoint.MaxPort" />。</exception>
    </member>
    <member name="P:System.Net.IPHostEntry.AddressList">
      <summary>获取或设置与主机相关联的 IP 地址的列表。</summary>
      <returns>类型的数组 <see cref="T:System.Net.IPAddress" /> ，包含 IP 地址解析为中包含的主机名 <see cref="P:System.Net.IPHostEntry.Aliases" /> 属性。</returns>
    </member>
    <member name="P:System.Net.IPHostEntry.Aliases">
      <summary>获取或设置与主机相关联的别名的列表。</summary>
      <returns>数组的字符串，其中包含 DNS 名称解析为 IP 地址按 <see cref="P:System.Net.IPHostEntry.AddressList" /> 属性。</returns>
    </member>
    <member name="P:System.Net.IPHostEntry.HostName">
      <summary>获取或设置主机的 DNS 名称。</summary>
      <returns>一个包含服务器的主要主机名的字符串。</returns>
    </member>
    <member name="P:System.Net.IWebProxy.Credentials">
      <summary>要提交到代理服务器进行身份验证的凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 实例，其中包含所需的代理服务器对请求进行身份验证的凭据。</returns>
    </member>
    <member name="P:System.Net.Mail.AlternateView.BaseUri">
      <summary>获取或设置要用于解析相对 Uri 中的基 URI <see cref="T:System.Net.Mail.AlternateView" />。</summary>
      <returns>
        <see cref="T:System.Uri" />。基 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.Net.Mail.AlternateView.LinkedResources">
      <summary>获取引用此附件的嵌入资源的集。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.LinkedResourceCollection" /> 存储链接的资源，作为电子邮件的一部分发送的集合的对象。</returns>
    </member>
    <member name="P:System.Net.Mail.Attachment.ContentDisposition">
      <summary>获取此附件的 MIME 内容处理设置。</summary>
      <returns>一个 <see cref="T:System.Net.Mime.ContentDisposition" /> ，它提供此附件的演示文稿信息。</returns>
    </member>
    <member name="P:System.Net.Mail.Attachment.Name">
      <summary>获取或设置与此附件关联的内容类型中的 MIME 内容类型名称值。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的内容类型的值 <paramref name="name" /> 由 <see cref="P:System.Net.Mime.ContentType.Name" /> 属性。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为设置操作是指定的值 <see cref="F:System.String.Empty" /> ("")。</exception>
    </member>
    <member name="P:System.Net.Mail.Attachment.NameEncoding">
      <summary>指定的编码 <see cref="T:System.Net.Mail.Attachment" /><see cref="P:System.Net.Mail.Attachment.Name" />。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 值，该值指定的名称编码类型。 默认值由从的附件的名称。</returns>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentId">
      <summary>获取或设置此附件的 MIME 内容 ID。</summary>
      <returns>保存内容 ID 的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.ArgumentNullException">尝试将 <see cref="P:System.Net.Mail.AttachmentBase.ContentId" /> 设置为 null。</exception>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentStream">
      <summary>获取此附件的内容流。</summary>
      <returns>
        <see cref="T:System.IO.Stream" />。此附件内容流。</returns>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.ContentType">
      <summary>获取此附件的内容类型。</summary>
      <returns>
        <see cref="T:System.Net.Mime.ContentType" />。此附件的内容类型。</returns>
    </member>
    <member name="P:System.Net.Mail.AttachmentBase.TransferEncoding">
      <summary>获取或设置此附件的编码。</summary>
      <returns>
        <see cref="T:System.Net.Mime.TransferEncoding" />。此附件的编码。</returns>
    </member>
    <member name="P:System.Net.Mail.LinkedResource.ContentLink">
      <summary>获取或设置一个 URI，资源必须匹配。</summary>
      <returns>如果 <see cref="P:System.Net.Mail.LinkedResource.ContentLink" /> 是相对的 URI，该消息的接收方必须解决。</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.Address">
      <summary>获取创建此实例时指定的电子邮件地址。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的电子邮件地址。</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.DisplayName">
      <summary>获取显示名称的显示名称组成，并创建此实例时指定的地址信息。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含显示名称; 否则为 <see cref="F:System.String.Empty" /> ("") 如果创建此实例时不指定了任何显示的名称信息。</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.Host">
      <summary>获取创建此实例时指定的地址的主机部分。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含接受电子邮件地址的主机计算机的名称的 <see cref="P:System.Net.Mail.MailAddress.User" /> 属性。</returns>
    </member>
    <member name="P:System.Net.Mail.MailAddress.User">
      <summary>从创建此实例时指定的地址获取用户信息。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含的用户名称部分 <see cref="P:System.Net.Mail.MailAddress.Address" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.AlternateViews">
      <summary>获取用来存储消息正文的其他形式的附件集合。</summary>
      <returns>可写 <see cref="T:System.Net.Mail.AlternateViewCollection" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Attachments">
      <summary>获取用来存储数据附加到此电子邮件的附件集合。</summary>
      <returns>可写 <see cref="T:System.Net.Mail.AttachmentCollection" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Bcc">
      <summary>获取包含此电子邮件的密件抄送 (BCC) 收件人的地址集合。</summary>
      <returns>可写 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Body">
      <summary>获取或设置消息正文。</summary>
      <returns>一个 <see cref="T:System.String" /> 值，该值包含正文文本。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.BodyEncoding">
      <summary>获取或设置用于对消息正文进行编码的编码。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 应用到的内容 <see cref="P:System.Net.Mail.MailMessage.Body" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.BodyTransferEncoding">
      <summary>获取或设置传输编码将用于对消息正文进行编码。</summary>
      <returns>返回 <see cref="T:System.Net.Mime.TransferEncoding" />。一个 <see cref="T:System.Net.Mime.TransferEncoding" /> 应用到的内容 <see cref="P:System.Net.Mail.MailMessage.Body" />。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.CC">
      <summary>获取包含此电子邮件的抄送 (CC) 收件人的地址集合。</summary>
      <returns>可写 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.DeliveryNotificationOptions">
      <summary>获取或设置此电子邮件的发送通知。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.DeliveryNotificationOptions" /> 值，该值包含此消息的发送通知。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.From">
      <summary>获取或设置来自此电子邮件地址。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.MailAddress" /> ，其中包含从地址信息。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Headers">
      <summary>获取与此电子邮件进行传输的电子邮件标头。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> ，包含电子邮件标头。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.HeadersEncoding">
      <summary>获取或设置用于此电子邮件用户定义的自定义标题的编码。</summary>
      <returns>用于用户定义此电子邮件的自定义标头的编码。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.IsBodyHtml">
      <summary>获取或设置一个值，该值指示邮件正文是否以 html 格式。</summary>
      <returns>true 如果消息正文，则以 html 格式;其他 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Priority">
      <summary>获取或设置此电子邮件的优先级。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.MailPriority" /> ，其中包含此消息的优先级。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.ReplyTo">
      <summary>获取或设置电子邮件的回复地址。</summary>
      <returns>指示的值 MailAddress <see cref="P:System.Net.Mail.MailMessage.ReplyTo" /> 字段。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.ReplyToList">
      <summary>获取或设置要回复邮件消息的地址列表。</summary>
      <returns>若要答复的邮件消息的地址的列表。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Sender">
      <summary>获取或设置此电子邮件的发件人地址。</summary>
      <returns>一个 <see cref="T:System.Net.Mail.MailAddress" /> 包含发件人的地址信息。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.Subject">
      <summary>获取或设置此电子邮件的主题行。</summary>
      <returns>一个 <see cref="T:System.String" /> ，包含的主题内容。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.SubjectEncoding">
      <summary>获取或设置用于此电子邮件的主题内容的编码。</summary>
      <returns>
        <see cref="T:System.Text.Encoding" /> 用于编码 <see cref="P:System.Net.Mail.MailMessage.Subject" /> 属性。</returns>
    </member>
    <member name="P:System.Net.Mail.MailMessage.To">
      <summary>获取包含此电子邮件的收件人的地址集合。</summary>
      <returns>可写 <see cref="T:System.Net.Mail.MailAddressCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.ClientCertificates">
      <summary>指定应使用哪个证书来建立安全套接字层 (SSL) 连接。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />, ，包含一个或多个客户端证书。 默认值派生自配置文件中的邮件配置属性。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Credentials">
      <summary>获取或设置用来对发件人进行身份验证的凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentialsByHost" /> 表示要用于身份验证; 的凭据或 null 如果尚未指定任何凭据。</returns>
      <exception cref="T:System.InvalidOperationException">在发送一封电子邮件时，您不能更改此属性的值。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.DeliveryFormat">
      <summary>获取或设置所使用的传递格式 <see cref="T:System.Net.Mail.SmtpClient" /> 发送电子邮件。</summary>
      <returns>返回 <see cref="T:System.Net.Mail.SmtpDeliveryFormat" />。使用的传递格式 <see cref="T:System.Net.Mail.SmtpClient" />。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.DeliveryMethod">
      <summary>指定如何发送的电子邮件将处理消息。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpDeliveryMethod" /> ，该值指示如何传递电子邮件消息。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.EnableSsl">
      <summary>指定是否 <see cref="T:System.Net.Mail.SmtpClient" /> 使用安全套接字层 (SSL) 加密的连接。</summary>
      <returns>true 如果 <see cref="T:System.Net.Mail.SmtpClient" /> 使用 SSL; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Host">
      <summary>获取或设置一个或多个 SMTP 交易记录所用的主机的 IP 地址。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的名称或要使用的 SMTP 事务的计算机的 IP 地址。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为一个集运算是否等于指定的值 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.InvalidOperationException">在发送一封电子邮件时，您不能更改此属性的值。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation">
      <summary>获取或设置应用程序在其中保存邮件以处理由本地 SMTP 服务器的文件夹。</summary>
      <returns>一个 <see cref="T:System.String" /> ，它指定对电子邮件的拾取目录。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Port">
      <summary>获取或设置用于 SMTP 事务的端口。</summary>
      <returns>
        <see cref="T:System.Int32" /> ，其中包含 SMTP 主机上的端口号。 默认值为 25。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值小于或等于零。</exception>
      <exception cref="T:System.InvalidOperationException">在发送一封电子邮件时，您不能更改此属性的值。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.ServicePoint">
      <summary>获取用于传输电子邮件的网络连接。</summary>
      <returns>一个 <see cref="T:System.Net.ServicePoint" /> 连接到 <see cref="P:System.Net.Mail.SmtpClient.Host" /> 使用 smtp 属性。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.Mail.SmtpClient.Host" /> 是 null 或空字符串 ("")。- 或 -<see cref="P:System.Net.Mail.SmtpClient.Port" /> 为零。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.TargetName">
      <summary>获取或设置服务提供程序名称 (SPN) 时使用扩展的保护用于进行身份验证。</summary>
      <returns>一个 <see cref="T:System.String" /> ，它指定要用于扩展保护的 SPN。 此 SPN 的默认值是窗体的"SMTPSVC / &lt; 主机 &gt;"&lt; 主机 &gt; 是 SMTP 邮件服务器的主机名的位置。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.Timeout">
      <summary>获取或设置一个值，指定的后的时间量同步 <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 调用会超时。</summary>
      <returns>
        <see cref="T:System.Int32" /> ，以毫秒为单位指定超时值。 默认值为 100000 （100 秒）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为一个集运算是指定的值小于零。</exception>
      <exception cref="T:System.InvalidOperationException">在发送一封电子邮件时，您不能更改此属性的值。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpClient.UseDefaultCredentials">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制是否 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 随请求一起发送。</summary>
      <returns>如果使用默认凭据，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">在发送一封电子邮件时，您不能更改此属性的值。</exception>
    </member>
    <member name="P:System.Net.Mail.SmtpException.StatusCode">
      <summary>获取传输的电子邮件时返回的 SMTP 服务器的状态代码。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpStatusCode" /> 值，该值指示所发生的错误。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpFailedRecipientException.FailedRecipient">
      <summary>指示有发送困难的电子邮件地址。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的电子邮件地址。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpFailedRecipientsException.InnerExceptions">
      <summary>获取一个或多个 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" />s 表示 SMTP 发送错误的电子邮件收件人。</summary>
      <returns>类型的数组 <see cref="T:System.Net.Mail.SmtpFailedRecipientException" /> 列出的收件人的传递错误。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpPermission.Access">
      <summary>获取由权限控制的 SMTP 服务器的访问级别。</summary>
      <returns>
        <see cref="T:System.Net.Mail.SmtpAccess" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.Mail.SmtpPermissionAttribute.Access">
      <summary>获取或设置对由该属性控制的 SMTP 服务器的访问级别。</summary>
      <returns>一个 <see cref="T:System.String" /> 值。 有效值为"连接"和"None"。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.CreationDate">
      <summary>获取或设置文件附件的创建日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，该值指示文件创建日期; 否则为 <see cref="F:System.DateTime.MinValue" /> 如果未指定日期。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.DispositionType">
      <summary>获取或设置电子邮件附件的处置类型。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含处置类型。 值是不受限制，但通常是 <see cref="P:System.Net.Mime.ContentDisposition.DispositionType" /> 值。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为一个集运算是否等于指定的值 <see cref="F:System.String.Empty" /> ("")。</exception>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.FileName">
      <summary>获取或设置建议的电子邮件附件的文件名。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的文件名称。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Inline">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值确定电子邮件附件的处置类型 （内联或附件）。</summary>
      <returns>true 如果附件中的内容显示报表作为电子邮件正文中; 的一部分内联否则为 false。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.ModificationDate">
      <summary>获取或设置文件附件的修改日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，该值指示文件修改日期; 否则为 <see cref="F:System.DateTime.MinValue" /> 如果未指定日期。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Parameters">
      <summary>获取此实例所表示的 Content-disposition 标头中包含的参数。</summary>
      <returns>可写 <see cref="T:System.Collections.Specialized.StringDictionary" /> ，其中包含参数名称/值对。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.ReadDate">
      <summary>获取或设置文件附件的读取的日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 值，该值指示该文件读取日期; 否则为 <see cref="F:System.DateTime.MinValue" /> 如果未指定日期。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentDisposition.Size">
      <summary>获取或设置文件附件的大小。</summary>
      <returns>一个 <see cref="T:System.Int32" /> 文件附件中指定的字节数。 默认值为-1，指示文件大小为未知。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.Boundary">
      <summary>获取或设置边界参数包含在此实例所表示的内容类型标头的值。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含与边界参数关联的值。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.CharSet">
      <summary>获取或设置包含在此实例所表示的内容类型标头的字符集参数的值。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含与 charset 参数关联的值。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.MediaType">
      <summary>获取或设置此实例所表示的内容类型标头中包含的媒体类型值。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含媒体类型和子类型值。 此值不包括分号 （;） 分隔符后面相应的子类型。</returns>
      <exception cref="T:System.ArgumentNullException">为集运算指定的值为 null。</exception>
      <exception cref="T:System.ArgumentException">为设置操作是指定的值 <see cref="F:System.String.Empty" /> ("")。</exception>
      <exception cref="T:System.FormatException">无法分析窗体中是设置操作为指定的值。</exception>
    </member>
    <member name="P:System.Net.Mime.ContentType.Name">
      <summary>获取或设置包含在此实例所表示的内容类型标头名称参数的值。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含与名称参数关联的值。</returns>
    </member>
    <member name="P:System.Net.Mime.ContentType.Parameters">
      <summary>获取包含此实例所表示的内容类型标头中包含的参数的字典。</summary>
      <returns>可写 <see cref="T:System.Collections.Specialized.StringDictionary" /> ，其中包含名称 / 值对。</returns>
    </member>
    <member name="P:System.Net.NetworkCredential.Domain">
      <summary>获取或设置验证凭据的域或计算机名称。</summary>
      <returns>与凭据关联的域的名称。</returns>
    </member>
    <member name="P:System.Net.NetworkCredential.Password">
      <summary>获取或设置与凭据关联的用户名的密码。</summary>
      <returns>与凭据关联的密码。 如果此 <see cref="T:System.Net.NetworkCredential" /> 与已初始化实例 <paramref name="password" /> 参数设置为 null, ，则 <see cref="P:System.Net.NetworkCredential.Password" /> 属性将返回一个空字符串。</returns>
    </member>
    <member name="P:System.Net.NetworkCredential.SecurePassword">
      <summary>获取或设置该密码作为 <see cref="T:System.Security.SecureString" /> 实例。</summary>
      <returns>与凭据关联的用户名密码。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Security.SecureString" /> 此平台上不支持类。</exception>
    </member>
    <member name="P:System.Net.NetworkCredential.UserName">
      <summary>获取或设置与凭据关联的用户名。</summary>
      <returns>与凭据关联的用户名。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformation.Address">
      <summary>获取网关的 IP 地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 对象，其中包含的网关的 IP 地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Count">
      <summary>获取的数 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 此集合中的类型。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含数 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对此集合的访问是否为只读的。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.GatewayIPAddressInformationCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 集合的特定索引处。</summary>
      <param name="index">感兴趣的索引。</param>
      <returns>
        <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 集合中的特定索引处。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesReceived">
      <summary>4 (ICMPv4) 地址掩码应答接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收到的地址掩码答复消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRepliesSent">
      <summary>获取的数目 Internet 控制消息协议版本 4 (ICMPv4) 地址掩码答复消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的地址掩码答复消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsReceived">
      <summary>4 (ICMPv4) 地址掩码请求接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的地址掩码请求接收消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.AddressMaskRequestsSent">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 地址掩码请求消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的地址掩码请求消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesReceived">
      <summary>获取的数目 Internet 控制消息协议版本 4 (ICMPv4) 接收的消息，因为无法访问地址采用其目标的数据包。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定无法到达目标接收消息的总次数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.DestinationUnreachableMessagesSent">
      <summary>获取的数目 Internet 控制消息协议版本 4 (ICMPv4) 发送的邮件的由于无法访问地址采用其目标的数据包。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定无法到达目标的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesReceived">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 回显回复消息已接收的。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收到的 ICMP 回显回复消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRepliesSent">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 回显回复消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的 ICMP 回显回复消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsReceived">
      <summary>4 (ICMPv4) 回显请求接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收到的 ICMP 回显请求消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.EchoRequestsSent">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 回显请求消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的 ICMP 回显请求消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ErrorsReceived">
      <summary>获取 Internet 控制消息协议版本的版本号接收到的 4 (ICMPv4) 错误消息。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 错误消息已接收的总次数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ErrorsSent">
      <summary>获取的数目 Internet 控制消息协议版本 4 (ICMPv4) 条错误消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的 ICMP 错误消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.MessagesReceived">
      <summary>获取 Internet 控制消息协议接收消息的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMPv4 接收消息的总次数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.MessagesSent">
      <summary>获取 4 (ICMPv4) 发送的邮件的 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的 ICMPv4 消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsReceived">
      <summary>4 (ICMPv4) 参数问题接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 参数问题接收消息的总次数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.ParameterProblemsSent">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 参数错误消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的 ICMP 参数问题消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.RedirectsReceived">
      <summary>获取 Internet 控制消息协议版本的版本号接收到 4 (ICMPv4) 重定向消息。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 重定向消息已接收的总次数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.RedirectsSent">
      <summary>获取的数目 Internet 控制消息协议版本 4 (ICMPv4) 重定向消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的 ICMP 重定向消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesReceived">
      <summary>4 (ICMPv4) 源抑制接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的源抑制接收消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.SourceQuenchesSent">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 源抑制消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的源抑制发送的邮件的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesReceived">
      <summary>4 (ICMPv4) 时间超过了接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 超时的消息已接收的总次数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimeExceededMessagesSent">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 时间超过消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的 ICMP 超时消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesReceived">
      <summary>4 (ICMPv4) 时间戳答复接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的时间戳答复接收消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRepliesSent">
      <summary>获取的数目 Internet 控制消息协议版本 4 (ICMPv4) 时间戳答复消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的时间戳答复消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsReceived">
      <summary>4 (ICMPv4) 的时间戳请求接收的消息，获取 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的时间戳请求接收消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV4Statistics.TimestampRequestsSent">
      <summary>获取 Internet 控制消息协议版本的版本号 4 条 (ICMPv4) 的时间戳请求消息已发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的时间戳请求已发送的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.DestinationUnreachableMessagesReceived">
      <summary>获取 Internet 控制消息协议版本的版本号接收由于无法访问地址采用其目标的数据包的 6 (ICMPv6) 消息。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定无法到达目标接收到的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.DestinationUnreachableMessagesSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 消息，由于无法访问地址采用其目标的数据包发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定无法到达目标的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRepliesReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) Echo 回复消息接收的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 回显回复接收的消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRepliesSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) Echo 答复消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定发送 ICMP 回显回复消息的数量的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRequestsReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) Echo Request 消息接收的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 回显请求接收的消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.EchoRequestsSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 回显请求消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 回显请求发送的消息数的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ErrorsReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 错误消息接收到的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 接收值，该值指定 ICMP 错误消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ErrorsSent">
      <summary>获取的 Internet 控制消息协议版本 6 (ICMPv6) 发送的错误消息。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定 ICMP 错误消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipQueriesReceived">
      <summary>获取 Internet 组管理的多收到的协议 (IGMP) 组成员身份查询消息。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收到的组成员身份查询消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipQueriesSent">
      <summary>获取许多 Internet 组管理协议 (IGMP) 组成员身份查询消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送指定的组成员身份查询消息的总数的值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReductionsReceived">
      <summary>获取 Internet 组管理协议 (IGMP) 组成员减少收到的消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定组成员资格减少收到的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReductionsSent">
      <summary>获取 Internet 组管理协议 (IGMP) 组成员减少发送的消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定的组成员资格减少消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReportsReceived">
      <summary>获取接收的 Internet 组管理协议 (IGMP) 组成员身份报告消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收到的组成员身份报告消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MembershipReportsSent">
      <summary>获取 Internet 组管理协议 (IGMP) 组成员身份报告发送的消息数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定的组成员身份报告消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MessagesReceived">
      <summary>获取 Internet 控制消息协议版本的版本号接收 6 (ICMPv6) 消息。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMPv6 接收的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.MessagesSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMPv6 发送的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborAdvertisementsReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 邻居公告消息接收的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收 ICMP 邻居公告消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborAdvertisementsSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 邻居公告消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定的邻居公告消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborSolicitsReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 邻居请求消息接收到的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收的邻居请求消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.NeighborSolicitsSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 邻居请求消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定总邻居请求消息数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.PacketTooBigMessagesReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 数据包太大消息接收到的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收 ICMP 数据包太大消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.PacketTooBigMessagesSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 数据包太大消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定总 ICMP 数据包太大消息数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ParameterProblemsReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 参数问题消息接收的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 参数问题接收的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.ParameterProblemsSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 参数问题消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定 ICMP 参数问题消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RedirectsReceived">
      <summary>获取接收的 6 (ICMPv6) 重定向邮件 Internet 控制消息协议版本的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 重定向接收的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RedirectsSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 重定向消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定 ICMP 重定向消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterAdvertisementsReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 路由器公告消息接收到的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收路由器公告消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterAdvertisementsSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 路由器公告消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送指定的路由器公告消息的总数的值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterSolicitsReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 路由器请求消息接收到的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收的路由器请求消息的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.RouterSolicitsSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 路由器请求消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送指定的路由器请求消息的总数的值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.TimeExceededMessagesReceived">
      <summary>获取 Internet 控制消息协议版本 6 (ICMPv6) 超时的消息接收到的版本号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 ICMP 超时接收的消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IcmpV6Statistics.TimeExceededMessagesSent">
      <summary>获取的数目 Internet 控制消息协议版本 6 (ICMPv6) 的时间超过消息发送。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送值，该值指定 ICMP 超时消息总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Count">
      <summary>获取的数 <see cref="T:System.Net.IPAddress" /> 此集合中的类型。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含数 <see cref="T:System.Net.IPAddress" /> 此集合中的类型。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.IsReadOnly">
      <summary>获取一个值，该值指示对此集合的访问是否为只读的。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Net.IPAddress" /> 集合的特定索引处。</summary>
      <param name="index">感兴趣的索引。</param>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 集合中的特定索引处。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.Address">
      <summary>获取 Internet 协议 (IP) 地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 实例，它包含一个接口的 IP 地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否可在域名系统 (DNS) 服务器数据库中出现的 Internet 协议 (IP) 地址。</summary>
      <returns>true 如果地址可以出现在 DNS 数据库中;否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformation.IsTransient">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否为临时的 Internet 协议 (IP) 地址 （群集地址）。</summary>
      <returns>true 如果地址是瞬态的则否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.Count">
      <summary>获取的数 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 此集合中的类型。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含数 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对此集合的访问是否为只读的。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPAddressInformationCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 集合中的指定索引处。</summary>
      <param name="index">元素的索引（索引从零开始）。</param>
      <returns>位于指定位置的 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" />。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.DhcpScopeName">
      <summary>获取动态主机配置协议 (DHCP) 作用域名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含计算机的 DHCP 作用域名称。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.DomainName">
      <summary>获取在其中注册本地计算机的域。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含计算机的域名。 如果计算机不属于域，将返回 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.HostName">
      <summary>获取本地计算机的主机名。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含计算机的 NetBIOS 名称。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.IsWinsProxy">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指定是否将本地计算机充当 Windows Internet 名称服务 (WINS) 代理。</summary>
      <returns>true 如果本地计算机是 WINS 代理;否则为 false。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalProperties.NodeType">
      <summary>获取本地计算机的网络基本输入/输出系统 (NetBIOS) 节点类型。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.NetBiosNodeType" /> 值。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">Win32 函数调用失败。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.DefaultTtl">
      <summary>获取 Internet 协议 (IP) 数据包的默认生存时间 (TTL) 值。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 TTL。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ForwardingEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指定是否启用了 Internet 协议 (IP) 数据包转发。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值，该值指定是否启用数据包转发。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfInterfaces">
      <summary>获取网络接口的数量。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值包含用于获取该地址族的网络接口数 <see cref="T:System.Net.NetworkInformation.IPGlobalStatistics" /> 实例。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfIPAddresses">
      <summary>获取分配给本地计算机的 Internet 协议 (IP) 地址的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示 IP 地址分配给此对象所描述的地址族 （Internet 协议版本 4 或 Internet 协议版本 6） 数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.NumberOfRoutes">
      <summary>获取 Internet 协议 (IP) 路由表中的路由数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定在路由表中的路由的总次数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRequests">
      <summary>获取 Internet 协议 (IP) 的出站数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定在传出的数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketRoutingDiscards">
      <summary>从路由表中获取已丢弃的路由的数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已丢弃的有效路由的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsDiscarded">
      <summary>获取传输已丢弃的 Internet 协议 (IP) 数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已丢弃的传出数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.OutputPacketsWithNoRoute">
      <summary>获取本地计算机无法确定指向的目标地址的路由的 Internet 协议 (IP) 数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定未发送，因为找不到路由的数据包数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketFragmentFailures">
      <summary>获取碎片不多的 Internet 协议 (IP) 数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 设置位的值，该值指定所需的碎片，但具有"不分段"数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassembliesRequired">
      <summary>获取该需要的重组的 Internet 协议 (IP) 数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定需要的数据包重新组合的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyFailures">
      <summary>获取未成功重组的 Internet 协议 (IP) 数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定不会重新组合的数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketReassemblyTimeout">
      <summary>获取最长时间内的所有片段的 Internet 协议 (IP) 数据包必须按照消息到达。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定最大的数据包的所有段的毫秒数必须到达以免被丢弃。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketsFragmented">
      <summary>获取 Internet 协议 (IP) 数据包碎片数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定零碎的数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.PacketsReassembled">
      <summary>获取 Internet 协议 (IP) 数据包重新合并数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已成功重新组合的零碎数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPackets">
      <summary>获取 Internet 协议 (IP) 收到的数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接收的 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDelivered">
      <summary>获取 Internet 协议 (IP) 所传递的数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 传递值，该值指定 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsDiscarded">
      <summary>获取 Internet 协议 (IP) 已收到并丢弃的数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已丢弃的传入数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsForwarded">
      <summary>获取 Internet 协议 (IP) 转发的数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的总次数转发数据包。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithAddressErrors">
      <summary>获取具有接收到的地址错误的 Internet 协议 (IP) 数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定标头的地址部分中的错误接收的 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithHeadersErrors">
      <summary>获取具有标头接收到的错误的 Internet 协议 (IP) 数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的 IP 数据包总数收到并丢弃了由于标头中的错误。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPGlobalStatistics.ReceivedPacketsWithUnknownProtocol">
      <summary>获取接收协议未知标头中的本地计算机上的 Internet 协议 (IP) 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示收到带有未知协议的 IP 数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses">
      <summary>获取分配给此接口的任意播 IP 地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPAddressInformationCollection" /> ，包含此接口的任意播地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses">
      <summary>获取此接口的动态主机配置协议 (DHCP) 服务器的地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 包含 DHCP 服务器的地址信息或发现如果没有服务器为空数组。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses">
      <summary>获取此接口的域名系统 (DNS) 服务器的地址。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> ，其中包含 DNS 服务器地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix">
      <summary>获取与此接口关联的域名系统 (DNS) 后缀。</summary>
      <returns>一个 <see cref="T:System.String" /> ，包含此接口的 DNS 后缀或 <see cref="F:System.String.Empty" /> 如果没有 DNS 后缀的接口。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows 2000 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses">
      <summary>为此接口获取 IPv4 网络网关地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection" /> 包含网络网关的地址信息或发现如果没有网关为空数组。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否 NetBt 已配置为使用此接口上的 DNS 名称解析。</summary>
      <returns>true 如果 NetBt 配置为使用此接口; 上的 DNS 名称解析否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口被配置为自动注册其 IP 地址信息与域名系统 (DNS)。</summary>
      <returns>true 如果此接口配置为自动进行注册，其动态 IP 地址和静态域名; 之间的映射否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses">
      <summary>获取分配给此接口的多播的地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection" /> ，其中包含此接口的多播的地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses">
      <summary>获取分配给此接口的单播地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection" /> ，其中包含此接口的单播地址。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses">
      <summary>获取 Windows Internet 名称服务 (WINS) 服务器的地址。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPAddressCollection" /> 包含 WINS 服务器的地址信息或发现如果没有服务器为空数组。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.BytesReceived">
      <summary>获取该接口上接收的字节数。</summary>
      <returns>返回 <see cref="T:System.Int64" />。接口接收的字节总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.BytesSent">
      <summary>获取该接口发送的字节数。</summary>
      <returns>返回 <see cref="T:System.Int64" />。该接口发送的字节总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsDiscarded">
      <summary>获取已被弃用的传入数据包的数目。</summary>
      <returns>返回 <see cref="T:System.Int64" />。已被弃用的传入数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingPacketsWithErrors">
      <summary>获取具有错误的传入数据包的数目。</summary>
      <returns>返回 <see cref="T:System.Int64" />。有错误的传入数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.IncomingUnknownProtocolPackets">
      <summary>获取与未知协议接收到该接口上的传入数据包的数目。</summary>
      <returns>返回 <see cref="T:System.Int64" />。协议未知的传入接口接收的数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsReceived">
      <summary>获取该接口上接收到的非单播数据包数。</summary>
      <returns>返回 <see cref="T:System.Int64" />。接口上接收传入非单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.NonUnicastPacketsSent">
      <summary>获取该接口发送的非单播数据包数。</summary>
      <returns>返回 <see cref="T:System.Int64" />。该接口发送的非单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsDiscarded">
      <summary>获取已被弃用的传出数据包的数目。</summary>
      <returns>返回 <see cref="T:System.Int64" />。已被弃用的传出数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.OutgoingPacketsWithErrors">
      <summary>获取具有错误的传出数据包数。</summary>
      <returns>返回 <see cref="T:System.Int64" />。有错误的传出数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.OutputQueueLength">
      <summary>获取输出队列长度。</summary>
      <returns>返回 <see cref="T:System.Int64" />。输出队列中的数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsReceived">
      <summary>获取该接口上接收到的单播数据包数。</summary>
      <returns>返回 <see cref="T:System.Int64" />。接口接收的单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPInterfaceStatistics.UnicastPacketsSent">
      <summary>获取该接口发送的单播数据包数。</summary>
      <returns>返回 <see cref="T:System.Int64" />。该接口发送的单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Index">
      <summary>获取索引与 Internet 协议版本 4 (IPv4) 相关联的网络接口地址。</summary>
      <returns>
        <see cref="T:System.Int32" /> ，其中包含 IPv4 接口的索引。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingActive">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口是否具有自动专用 IP 寻址 (APIPA) 地址。</summary>
      <returns>true 如果该界面使用 APIPA 地址;否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsAutomaticPrivateAddressingEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否此接口还提供自动专用 IP 寻址 (APIPA) 启用。</summary>
      <returns>true 如果该界面使用 APIPA;否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsDhcpEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示该接口是否已配置为使用动态主机配置协议 (DHCP) 服务器获取 IP 地址。</summary>
      <returns>true 如果该接口配置为从 DHCP 服务器; 获取 IP 地址否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.IsForwardingEnabled">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示此接口可以将转发 （路由） 数据包。</summary>
      <returns>true 如果此接口可以将数据包;，否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.Mtu">
      <summary>为该网络接口获取最大传输单位 (MTU)。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 MTU。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceProperties.UsesWins">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示接口是否使用 Windows Internet 名称服务 (WINS)。</summary>
      <returns>true 如果该界面使用 WINS。否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.BytesReceived">
      <summary>获取该接口上接收的字节数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的接口接收的字节总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.BytesSent">
      <summary>获取该接口发送的字节数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定该接口传输的字节总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsDiscarded">
      <summary>获取已被弃用的传入数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的总次数已丢弃传入数据包。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingPacketsWithErrors">
      <summary>获取具有错误的传入数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定错误的传入数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.IncomingUnknownProtocolPackets">
      <summary>获取与未知协议接收到该接口上的传入数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定协议未知的传入数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsReceived">
      <summary>获取该接口上接收到的非单播数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接口接收的非单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.NonUnicastPacketsSent">
      <summary>获取该接口发送的非单播数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定该接口发送的非单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsDiscarded">
      <summary>获取已被弃用的传出数据包的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的总次数丢弃的传出数据包。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutgoingPacketsWithErrors">
      <summary>获取具有错误的传出数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定错误的传出数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.OutputQueueLength">
      <summary>获取输出队列长度。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定输出队列中的数据包总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsReceived">
      <summary>获取该接口上接收到的单播数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定接口接收的单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv4InterfaceStatistics.UnicastPacketsSent">
      <summary>获取该接口发送的单播数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定该接口发送的单播数据包的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv6InterfaceProperties.Index">
      <summary>获取索引的与 Internet 协议版本 6 (IPv6) 关联的网络接口地址。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含 IPv6 地址的网络接口的索引。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.IPv6InterfaceProperties.Mtu">
      <summary>为该网络接口获取最大传输单位 (MTU)。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 MTU。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressPreferredLifetime">
      <summary>获取在此期间，此地址作为首选的地址剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 保持首选此地址的剩余值，该值指定的秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressValidLifetime">
      <summary>获取在此期间，此地址有效剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 保持已分配此地址的剩余值，该值指定的秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.DhcpLeaseLifetime">
      <summary>指定此 IP 地址的动态主机配置协议 (DHCP) 租约的剩余时间量。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值包含数秒之前计算机必须释放剩余 <see cref="T:System.Net.IPAddress" /> 实例。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.DuplicateAddressDetectionState">
      <summary>获取一个值，该值指示重复地址检测算法的状态。</summary>
      <returns>其中一个 <see cref="T:System.Net.NetworkInformation.DuplicateAddressDetectionState" /> 值，该值指示在确定此 IP 地址的唯一性的算法的进度。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.PrefixOrigin">
      <summary>获取一个值，标识多播 Internet 协议 (IP) 地址前缀的源。</summary>
      <returns>其中一个 <see cref="T:System.Net.NetworkInformation.PrefixOrigin" /> 标识前缀信息如何获取的值。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformation.SuffixOrigin">
      <summary>获取一个值，用于标识多播 Internet 协议 (IP) 地址后缀的源。</summary>
      <returns>其中一个 <see cref="T:System.Net.NetworkInformation.SuffixOrigin" /> 标识后缀信息如何获取的值。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Count">
      <summary>获取的数 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 此集合中的类型。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含数 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对此集合的访问是否为只读的。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.MulticastIPAddressInformationCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 集合的特定索引处。</summary>
      <param name="index">感兴趣的索引。</param>
      <returns>
        <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 集合中的特定索引处。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkAvailabilityEventArgs.IsAvailable">
      <summary>获取网络连接的当前状态。</summary>
      <returns>true 如果网络无可用，则否则为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationException.ErrorCode">
      <summary>获取 Win32 此异常的错误代码。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含 Win32 错误代码。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermission.Access">
      <summary>获取对为由该权限控制的网络信息的访问级别。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetworkInformationAccess" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInformationPermissionAttribute.Access">
      <summary>获取或设置网络信息的访问级别。</summary>
      <returns>一个字符串，指定访问级别。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Description">
      <summary>获取接口的说明。</summary>
      <returns>一个 <see cref="T:System.String" /> 用于描述此接口。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Id">
      <summary>获取网络适配器的标识符。</summary>
      <returns>一个 <see cref="T:System.String" /> ，包含的标识符。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex">
      <summary>获取 IPv6 环回接口的索引。</summary>
      <returns>返回 <see cref="T:System.Int32" />。IPv6 环回接口的的索引。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否将网络接口设置为仅接收数据包。</summary>
      <returns>true 如果接口仅接收网络通信;否则为 false。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex">
      <summary>获取 IPv4 环回接口的索引。</summary>
      <returns>一个 <see cref="T:System.Int32" /> ，其中包含 IPv4 环回接口的索引。</returns>
      <exception cref="T:System.Net.NetworkInformation.NetworkInformationException">此属性无效，不能在仅运行 Ipv6 的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Name">
      <summary>获取网络适配器的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含适配器名称。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType">
      <summary>获取的接口类型。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.NetworkInterfaceType" /> 值，该值指定网络接口类型。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.OperationalStatus">
      <summary>获取网络连接的当前操作状态。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.OperationalStatus" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.Speed">
      <summary>获取网络接口的速度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定的速度，以每秒位数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.NetworkInterface.SupportsMulticast">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否启用网络接口来接收多播的数据包数。</summary>
      <returns>true 如果接口接收多播的数据包数。否则为 false。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.PingCompletedEventArgs.Reply">
      <summary>获取包含数据的对象，该数据描述发送 Internet 控制消息协议 (ICMP) 回送请求消息并接受相应的 ICMP 回送答复消息的尝试。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingReply" /> 对象，描述 ICMP 回送请求结果。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingOptions.DontFragment">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制发送到远程主机的数据的分段。</summary>
      <returns>true 如果数据不能发送在多个数据包中;否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingOptions.Ttl">
      <summary>获取或设置可以将转发的路由节点数 <see cref="T:System.Net.NetworkInformation.Ping" /> 前被丢弃的数据。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定的次数 <see cref="T:System.Net.NetworkInformation.Ping" /> 可以转发数据包。 默认值为 128。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值小于或等于零。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Address">
      <summary>获取发送 Internet 控制消息协议 (ICMP) 回显回复的主机的地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 包含 ICMP 回显消息的目标。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Buffer">
      <summary>获取接收 Internet 控制消息协议 (ICMP) 回送答复消息中的数据的缓冲区。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含中的 ICMP 回显回复消息，则为空数组，收到的数据，如果没有收到答复。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Options">
      <summary>获取传输对 Internet 控制消息协议 (ICMP) 回显请求的答复所用的选项。</summary>
      <returns>一个 <see cref="T:System.Net.NetworkInformation.PingOptions" /> 对象，它包含时间 (TTL) 和用于如果传输答复的分段指令 <see cref="P:System.Net.NetworkInformation.PingReply.Status" /> 是 <see cref="F:System.Net.NetworkInformation.IPStatus.Success" />; 否则为 null。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.RoundtripTime">
      <summary>获取发送 Internet 控制消息协议 (ICMP) 回显请求和接收相应 ICMP 回显回复消息所花费的毫秒数。</summary>
      <returns>一个 <see cref="T:System.Int64" />，用于指定往返时间（以毫秒计）。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.PingReply.Status">
      <summary>获取尝试发送 Internet 控制消息协议 (ICMP) 回显请求和接收相应的 ICMP 回显回复消息的状态。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.IPStatus" /> 值，该值指示请求的结果。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.LocalEndPoint">
      <summary>获取传输控制协议 (TCP) 连接的本地终结点。</summary>
      <returns>
        <see cref="T:System.Net.IPEndPoint" /> 实例，它包含 IP 地址和本地计算机上的端口。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.RemoteEndPoint">
      <summary>获取传输控制协议 (TCP) 连接的远程终结点。</summary>
      <returns>
        <see cref="T:System.Net.IPEndPoint" /> 实例，它包含 IP 地址和远程计算机上的端口。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpConnectionInformation.State">
      <summary>获取此传输控制协议 (TCP) 连接的状态。</summary>
      <returns>
        <see cref="T:System.Net.NetworkInformation.TcpState" /> 枚举值之一。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ConnectionsAccepted">
      <summary>获取已接受的传输控制协议 (TCP) 连接请求数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 所接受的值指定 TCP 连接请求的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ConnectionsInitiated">
      <summary>获取由客户端发出的传输控制协议 (TCP) 连接请求数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定由客户端启动的 TCP 连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.CumulativeConnections">
      <summary>指定已建立的传输控制协议 (TCP) 连接的总数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定建立的连接总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.CurrentConnections">
      <summary>获取当前传输控制协议 (TCP) 连接数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定当前 TCP 连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ErrorsReceived">
      <summary>获取传输控制协议 (TCP) 接收到的错误号。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定 TCP 接收到的错误总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.FailedConnectionAttempts">
      <summary>获取失败的传输控制协议 (TCP) 连接尝试次数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定失败的 TCP 连接尝试的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MaximumConnections">
      <summary>获取受支持的传输控制协议 (TCP) 连接最大数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定可以支持的 TCP 连接的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MaximumTransmissionTimeout">
      <summary>获取传输控制协议 (TCP) 段的最大重新传输超时值。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，指定 TCP 实现允许的重新传输超时值的最大毫秒数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.MinimumTransmissionTimeout">
      <summary>获取传输控制协议 (TCP) 段的最小重新传输超时值。</summary>
      <returns>一个 <see cref="T:System.Int64" /> 值，它指定重新传输超时值的 TCP 实现所允许的最小毫秒数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ResetConnections">
      <summary>获取接收的传输控制协议 (TCP) 连接的 RST 数据包数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的总次数重置 TCP 连接。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.ResetsSent">
      <summary>获取发送时重置标志设置的传输控制协议 (TCP) 段的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的 TCP 段的总数发送时设置重置标志。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsReceived">
      <summary>获取接收的传输控制协议 (TCP) 段的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 接收值，该值指定的 TCP 段的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsResent">
      <summary>获取重新发送的传输控制协议 (TCP) 段的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的总次数的 TCP 段重新传输。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.TcpStatistics.SegmentsSent">
      <summary>获取发送的传输控制协议 (TCP) 段的数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 发送指定的 TCP 段的总数的值。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.DatagramsReceived">
      <summary>获取接收到的用户数据报协议 (UDP) 数据报数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已传递给 UDP 用户数据报的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.DatagramsSent">
      <summary>获取用户数据报协议 (UDP) 发送的数据报数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定已发送的数据报的总数。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.IncomingDatagramsDiscarded">
      <summary>获取已收到而由于端口错误而丢弃的用户数据报协议 (UDP) 数据报数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的总次数接收到已被弃用，因为没有目标端口上的没有侦听应用程序的 UDP 数据报。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.IncomingDatagramsWithErrors">
      <summary>获取已收到而由于不正确的端口信息以外的错误而丢弃的用户数据报协议 (UDP) 数据报数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定的总次数接收到以外的其他应用程序在目标端口缺乏原因无法传递的 UDP 数据报。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UdpStatistics.UdpListeners">
      <summary>获取本地终结点的侦听用户数据报协议 (UDP) 数据报数目。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指定侦听 UDP 数据报的套接字的总数量。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressPreferredLifetime">
      <summary>获取在此期间，此地址作为首选的地址剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 保持首选此地址的剩余值，该值指定的秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.AddressValidLifetime">
      <summary>获取在此期间，此地址有效剩余秒数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 保持已分配此地址的剩余值，该值指定的秒数。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.DhcpLeaseLifetime">
      <summary>指定此 IP 地址的动态主机配置协议 (DHCP) 租约的剩余时间量。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值包含数秒之前计算机必须释放剩余 <see cref="T:System.Net.IPAddress" /> 实例。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.DuplicateAddressDetectionState">
      <summary>获取一个值，该值指示重复地址检测算法的状态。</summary>
      <returns>其中一个 <see cref="T:System.Net.NetworkInformation.DuplicateAddressDetectionState" /> 值，该值指示在确定此 IP 地址的唯一性的算法的进度。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.IPv4Mask">
      <summary>获取的 IPv4 掩码。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 对象，它包含 IPv4 掩码。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixLength">
      <summary>获取的长度，以位为单位的 IP 地址的前缀或网络部分。</summary>
      <returns>返回 <see cref="T:System.Int32" />。长度 （以位为单位的 IP 地址的前缀或网络部分）。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.PrefixOrigin">
      <summary>获取一个值，标识单播 Internet 协议 (IP) 地址前缀的源。</summary>
      <returns>其中一个 <see cref="T:System.Net.NetworkInformation.PrefixOrigin" /> 标识前缀信息如何获取的值。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformation.SuffixOrigin">
      <summary>获取一个值，用于标识单播 Internet 协议 (IP) 地址后缀的源。</summary>
      <returns>其中一个 <see cref="T:System.Net.NetworkInformation.SuffixOrigin" /> 标识后缀信息如何获取的值。</returns>
      <exception cref="T:System.PlatformNotSupportedException">此属性无效，不能在运行早于 Windows XP 操作系统的计算机上。</exception>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Count">
      <summary>获取的数 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值包含数 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 此集合中的类型。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.IsReadOnly">
      <summary>获取一个值，该值指示对此集合的访问是否为只读的。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.NetworkInformation.UnicastIPAddressInformationCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 集合中的指定索引处的实例。</summary>
      <param name="index">元素的索引（索引从零开始）。</param>
      <returns>位于指定位置的 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" />。</returns>
    </member>
    <member name="P:System.Net.OpenReadCompletedEventArgs.Result">
      <summary>获取包含下载的数据的可读流 <see cref="Overload:System.Net.WebClient.DownloadDataAsync" /> 方法。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> ，其中包含已下载的数据。</returns>
    </member>
    <member name="P:System.Net.OpenWriteCompletedEventArgs.Result">
      <summary>获取用于将数据发送到服务器的可写流。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> ，可用于编写要上载的数据。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.InnerStream">
      <summary>获取由此流 <see cref="T:System.Net.Security.AuthenticatedStream" /> 用于发送和接收数据。</summary>
      <returns>一个 <see cref="T:System.IO.Stream" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsAuthenticated">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否已成功身份验证。</summary>
      <returns>true 如果发生了成功的身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsEncrypted">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否已发送数据，使用此 <see cref="T:System.Net.Security.AuthenticatedStream" /> 进行加密。</summary>
      <returns>true 如果正在通过网络传输之前加密和解密数据，到达远程终结点;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否服务器和客户端已经过身份验证。</summary>
      <returns>true 如果客户端和服务器已经过身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsServer">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示连接的本地端是否已与服务器进行身份验证。</summary>
      <returns>true 如果本地终结点进行身份验证作为身份验证的客户端-服务器连接; 的服务器端 false 如果本地终结点与客户端进行身份验证。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.IsSigned">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否使用此流发送的数据进行签名。</summary>
      <returns>true 如果在正在传输; 前已签名数据否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen">
      <summary>获取由此所用的流是否 <see cref="T:System.Net.Security.AuthenticatedStream" /> 有关发送和接收数据具有已保持打开状态。</summary>
      <returns>true 内部流是否已保持打开状态;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanRead">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否可读的基础流。</summary>
      <returns>true 如果已进行身份验证且基础流可读，则为否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanSeek">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否可查找基础流。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanTimeout">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示基础流是否支持超时。</summary>
      <returns>true 如果基础流支持超时;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.CanWrite">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否可写的基础流。</summary>
      <returns>true 如果已进行身份验证且基础流可写，则为否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.ImpersonationLevel">
      <summary>获取一个值，该值指示服务器可以如何使用客户端的凭据。</summary>
      <returns>
        <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值之一。</returns>
      <exception cref="T:System.InvalidOperationException">身份验证失败或未发生。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsAuthenticated">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否已成功身份验证。</summary>
      <returns>true 如果发生了成功的身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsEncrypted">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否此 <see cref="T:System.Net.Security.NegotiateStream" /> 使用数据加密。</summary>
      <returns>true 如果正在通过网络传输之前加密和解密数据，到达远程终结点;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否在服务器和客户端已经过身份验证。</summary>
      <returns>true 如果服务器已经过身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsServer">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示连接的本地端使用的 <see cref="T:System.Net.Security.NegotiateStream" /> 与服务器进行身份验证。</summary>
      <returns>true 如果本地终结点作为经过身份验证的连接; 的服务器端成功通过了身份验证否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.IsSigned">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否使用此流发送的数据进行签名。</summary>
      <returns>true 如果在正在传输; 前已签名数据否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.Length">
      <summary>获取基础流的长度。</summary>
      <returns>一个 <see cref="T:System.Int64" /> ，它指定基础流的长度。</returns>
      <exception cref="T:System.NotSupportedException">获取此属性的值时，不支持的基础流是 <see cref="T:System.Net.Sockets.NetworkStream" />。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.Position">
      <summary>获取或设置基础流中的当前位置。</summary>
      <returns>一个 <see cref="T:System.Int64" /> ，它指定基础流中的当前位置。</returns>
      <exception cref="T:System.NotSupportedException">不支持设置此属性。- 或 -获取此属性的值时，不支持的基础流是 <see cref="T:System.Net.Sockets.NetworkStream" />。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.ReadTimeout">
      <summary>获取或设置读取的操作等待数据的时间量。</summary>
      <returns>一个 <see cref="T:System.Int32" /> ，指定的读取的操作失败前经过的时间量。</returns>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.RemoteIdentity">
      <summary>获取有关标识共享此已经过身份验证的流的远程方的信息。</summary>
      <returns>
        <see cref="T:System.Security.Principal.IIdentity" /> 描述远程终结点标识的对象。</returns>
      <exception cref="T:System.InvalidOperationException">身份验证失败或未发生。</exception>
    </member>
    <member name="P:System.Net.Security.NegotiateStream.WriteTimeout">
      <summary>获取或设置等待数据写入操作的时间量。</summary>
      <returns>一个 <see cref="T:System.Int32" /> ，指定的写入操作失败前经过的时间量。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanRead">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否可读的基础流。</summary>
      <returns>true 如果已进行身份验证且基础流可读，则为否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanSeek">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否可查找基础流。</summary>
      <returns>此属性始终返回 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanTimeout">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示基础流是否支持超时。</summary>
      <returns>true 如果基础流支持超时;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CanWrite">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否可写的基础流。</summary>
      <returns>true 如果已进行身份验证且基础流可写，则为否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CheckCertRevocationStatus">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示证书验证过程中是否检查证书吊销列表。</summary>
      <returns>如果检查证书吊销列表，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.CipherAlgorithm">
      <summary>获取一个值，标识由此的大容量加密算法 <see cref="T:System.Net.Security.SslStream" />。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.CipherAlgorithmType" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.Security.SslStream.CipherAlgorithm" /> 属性访问之前完成身份验证过程或身份验证过程失败。</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.CipherStrength">
      <summary>获取一个值，标识使用的加密算法的强度 <see cref="T:System.Net.Security.SslStream" />。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值以位为单位指定的算法的强度。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.HashAlgorithm">
      <summary>获取用于生成消息身份验证代码 (Mac) 的算法。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.HashAlgorithmType" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Net.Security.SslStream.HashAlgorithm" /> 属性访问之前完成身份验证过程或身份验证过程失败。</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.HashStrength">
      <summary>获取一个值，标识的此实例所使用的哈希算法的强度。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定的强度 <see cref="T:System.Security.Authentication.HashAlgorithmType" /> 算法，以位为单位。 有效值为 128 或 160。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsAuthenticated">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否已成功身份验证。</summary>
      <returns>true 如果发生了成功的身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsEncrypted">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否此 <see cref="T:System.Net.Security.SslStream" /> 使用数据加密。</summary>
      <returns>true 如果正在通过网络传输之前加密和解密数据，到达远程终结点;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsMutuallyAuthenticated">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否服务器和客户端已经过身份验证。</summary>
      <returns>true 如果服务器已经过身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsServer">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示连接的本地端使用的 <see cref="T:System.Net.Security.SslStream" /> 与服务器进行身份验证。</summary>
      <returns>true 如果本地终结点作为经过身份验证的连接; 的服务器端成功通过了身份验证否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.IsSigned">
      <summary>获取 <see cref="T:System.Boolean" /> 值，该值指示是否使用此流发送的数据进行签名。</summary>
      <returns>true 如果在正在传输; 前已签名数据否则为 false。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.KeyExchangeAlgorithm">
      <summary>获取用于此密钥交换算法 <see cref="T:System.Net.Security.SslStream" />。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExchangeAlgorithmType" /> 值。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.KeyExchangeStrength">
      <summary>获取一个值，用于标识此实例所使用的密钥交换算法的强度。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值指定的强度 <see cref="T:System.Security.Authentication.ExchangeAlgorithmType" /> 算法，以位为单位。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.Length">
      <summary>获取基础流的长度。</summary>
      <returns>
        <see cref="T:System.Int64" />。基础流的长度。</returns>
      <exception cref="T:System.NotSupportedException">获取此属性的值时，不支持的基础流是 <see cref="T:System.Net.Sockets.NetworkStream" />。</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.LocalCertificate">
      <summary>获取用于进行身份验证的本地终结点的证书。</summary>
      <returns>一个表示进行身份验证提供的证书的 x509 证书对象或 null 如果不提供的任何证书。</returns>
      <exception cref="T:System.InvalidOperationException">身份验证失败或未发生。</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.Position">
      <summary>获取或设置基础流中的当前位置。</summary>
      <returns>
        <see cref="T:System.Int64" />。中的基础流的当前位置。</returns>
      <exception cref="T:System.NotSupportedException">不支持设置此属性。- 或 -获取此属性的值时，不支持的基础流是 <see cref="T:System.Net.Sockets.NetworkStream" />。</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.ReadTimeout">
      <summary>获取或设置读取的操作等待数据的时间量。</summary>
      <returns>一个 <see cref="T:System.Int32" /> ，它指定一个同步读取操作失败之前所经过的时间量。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.RemoteCertificate">
      <summary>获取用于进行身份验证的远程终结点的证书。</summary>
      <returns>一个表示进行身份验证提供的证书的 x509 证书对象或 null 如果不提供的任何证书。</returns>
      <exception cref="T:System.InvalidOperationException">身份验证失败或未发生。</exception>
    </member>
    <member name="P:System.Net.Security.SslStream.SslProtocol">
      <summary>获取一个值，该值指示使用此连接进行身份验证的安全协议。</summary>
      <returns>
        <see cref="T:System.Security.Authentication.SslProtocols" /> 值，该值表示所使用的身份验证协议。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.TransportContext">
      <summary>获取 <see cref="T:System.Net.TransportContext" /> 用于使用扩展的保护的身份验证。</summary>
      <returns>
        <see cref="T:System.Net.TransportContext" /> 对象，其中包含用于扩展保护的通道绑定令牌 (CBT)。</returns>
    </member>
    <member name="P:System.Net.Security.SslStream.WriteTimeout">
      <summary>获取或设置等待数据写入操作的时间量。</summary>
      <returns>一个 <see cref="T:System.Int32" /> ，指定同步写入操作失败之前所经过的时间量。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.Address">
      <summary>获取此 <see cref="T:System.Net.ServicePoint" /> 对象连接到的服务器的统一资源标识符 (URI)。</summary>
      <returns>
        <see cref="T:System.Uri" /> 类的实例，包含此 <see cref="T:System.Net.ServicePoint" /> 对象连接到的 Internet 服务器的 URI。</returns>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Net.ServicePoint" /> 处于宿主模式。</exception>
    </member>
    <member name="P:System.Net.ServicePoint.BindIPEndPointDelegate">
      <summary>指定用于将本地 <see cref="T:System.Net.IPEndPoint" /> 与 <see cref="T:System.Net.ServicePoint" /> 关联的委托。</summary>
      <returns>强制 <see cref="T:System.Net.ServicePoint" /> 使用特定的本地 Internet 协议 (IP) 地址和端口号的委托。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.Certificate">
      <summary>获取为此 <see cref="T:System.Net.ServicePoint" /> 对象接收的证书。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 类的实例，包含为此 <see cref="T:System.Net.ServicePoint" /> 对象接收的安全证书。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.ClientCertificate">
      <summary>获取发送到服务器的上一个客户端证书。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象，包含发送到服务器的上一个客户端证书的公共值。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionLeaseTimeout">
      <summary>获取或设置在多少毫秒之后关闭活动 <see cref="T:System.Net.ServicePoint" /> 连接。</summary>
      <returns>
        <see cref="T:System.Int32" />，它指定活动 <see cref="T:System.Net.ServicePoint" /> 连接保持打开的毫秒数。 默认值为 -1，这样活动 <see cref="T:System.Net.ServicePoint" /> 连接可以无限期保持连接。 将此属性设置为 0 可在 <see cref="T:System.Net.ServicePoint" /> 连接为请求提供服务之后强制关闭该连接。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值为负的数字小于-1。</exception>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionLimit">
      <summary>获取或设置此 <see cref="T:System.Net.ServicePoint" /> 对象上允许的最大连接数。</summary>
      <returns>此 <see cref="T:System.Net.ServicePoint" /> 对象上允许的最大连接数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">连接限制为等于或小于 0。</exception>
    </member>
    <member name="P:System.Net.ServicePoint.ConnectionName">
      <summary>获取连接名。</summary>
      <returns>一个表示连接名的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.CurrentConnections">
      <summary>获取与此 <see cref="T:System.Net.ServicePoint" /> 对象关联的打开连接的数目。</summary>
      <returns>与此 <see cref="T:System.Net.ServicePoint" /> 对象关联的打开连接的数目。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.Expect100Continue">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定是否使用 100-Continue 行为。</summary>
      <returns>如果 POST 请求需要 100-Continue 响应，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.IdleSince">
      <summary>获取上次将 <see cref="T:System.Net.ServicePoint" /> 对象连接到主机的日期和时间。</summary>
      <returns>
        <see cref="T:System.DateTime" /> 对象，包含上次连接 <see cref="T:System.Net.ServicePoint" /> 对象的日期和时间。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.MaxIdleTime">
      <summary>获取或设置与 <see cref="T:System.Net.ServicePoint" /> 对象关联的连接在关闭前可以持续空闲的时间。</summary>
      <returns>与 <see cref="T:System.Net.ServicePoint" /> 对象关联的连接在关闭和重用于另一个连接前可以持续空闲的时间长度（以毫秒为单位）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePoint.MaxIdleTime" /> 设置为小于 <see cref="F:System.Threading.Timeout.Infinite" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Net.ServicePoint.ProtocolVersion">
      <summary>获取 <see cref="T:System.Net.ServicePoint" /> 对象使用的 HTTP 协议的版本。</summary>
      <returns>
        <see cref="T:System.Version" /> 对象，它包含 <see cref="T:System.Net.ServicePoint" /> 对象使用的 HTTP 协议版本。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.ReceiveBufferSize">
      <summary>获取或设置此 <see cref="T:System.Net.ServicePoint" /> 使用的套接字的接收缓冲区的大小。</summary>
      <returns>包含接收缓冲区的大小（以字节为单位）的 <see cref="T:System.Int32" />。 默认值为 8192。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">为一个集运算是否大于指定的值 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Net.ServicePoint.SupportsPipelining">
      <summary>指示 <see cref="T:System.Net.ServicePoint" /> 对象是否支持管道连接。</summary>
      <returns>如果 <see cref="T:System.Net.ServicePoint" /> 对象支持管道连接，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.ServicePoint.UseNagleAlgorithm">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定在此 <see cref="T:System.Net.ServicePoint" /> 对象所管理的连接上是否使用 Nagle 算法。</summary>
      <returns>如果使用 Nagle 算法，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.CertificatePolicy">
      <summary>获取或设置服务器证书的策略。</summary>
      <returns>一个实现 <see cref="T:System.Net.ICertificatePolicy" /> 接口的对象。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.CheckCertificateRevocationList">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值指示是否根据证书颁发机构吊销列表检查证书。</summary>
      <returns>如果检查证书吊销列表，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.DefaultConnectionLimit">
      <summary>获取或设置 <see cref="T:System.Net.ServicePoint" /> 对象所允许的最大并发连接数。</summary>
      <returns>
        <see cref="T:System.Net.ServicePoint" /> 对象允许的最大并发连接数。 默认值为 2。 当应用作为 ASP.NET 主机运行时，不能通过配置文件更改此属性的值，如果 autoConfig 属性设置为 true。 但是，当 autoConfig 属性设置为 true 时，可以按编程方式更改值。 当 AppDomain 加载时，设置一次首选值。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePointManager.DefaultConnectionLimit" /> 小于或等于 0。</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.DnsRefreshTimeout">
      <summary>获取或设置一个值，该值指示域名服务 (DNS) 解析多长时间内视为有效。</summary>
      <returns>超时值（以毫秒为单位）。 值 -1 指示超时期限无限。 默认值是 120,000 毫秒（2 分钟）。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.EnableDnsRoundRobin">
      <summary>获取或设置一个值，该值指示域名服务 (DNS) 解析是否在多个适用的 Internet 协议 (IP) 地址之间轮流进行。</summary>
      <returns>如果 DNS 解析总是返回特定主机的第一个 IP 地址，则为 false；否则，为 true。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.EncryptionPolicy">
      <summary>获取此 <see cref="T:System.Net.ServicePointManager" /> 实例的 <see cref="T:System.Net.Security.EncryptionPolicy" />。</summary>
      <returns>用于此 <see cref="T:System.Net.ServicePointManager" /> 实例的加密策略。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.Expect100Continue">
      <summary>获取或设置一个 <see cref="T:System.Boolean" /> 值，该值确定是否使用 100-Continue 行为。</summary>
      <returns>若要启用 100-Continue 行为，则为 true。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePointIdleTime">
      <summary>获取或设置 <see cref="T:System.Net.ServicePoint" /> 对象的最大空闲时间。</summary>
      <returns>
        <see cref="T:System.Net.ServicePoint" /> 对象的最大空闲时间（以毫秒为单位）。 默认值是 100,000 毫秒（100 秒）。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePointManager.MaxServicePointIdleTime" /> 是小于 <see cref="F:System.Threading.Timeout.Infinite" /> 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.MaxServicePoints">
      <summary>获取或设置任何时候保持的最大 <see cref="T:System.Net.ServicePoint" /> 对象数。</summary>
      <returns>要保持的最大 <see cref="T:System.Net.ServicePoint" /> 对象数。 默认值是 0，表示对 <see cref="T:System.Net.ServicePoint" /> 对象的数量没有限制。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <see cref="P:System.Net.ServicePointManager.MaxServicePoints" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.ReusePort">
      <summary>将此属性值设置为 true 会导致来自 HttpWebRequest 的所有出站 TCP 连接对套接字使用本机套接字选项 SO_REUSE_UNICASTPORT。 这使得可以共享基础传出端口。 这可用于在短时间内进行大量传出连接并且应用面临耗尽端口风险的情况。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.SecurityProtocol">
      <summary>获取或设置由 <see cref="T:System.Net.ServicePointManager" /> 对象管理的 <see cref="T:System.Net.ServicePoint" /> 对象所使用的安全协议。</summary>
      <returns>
        <see cref="T:System.Net.SecurityProtocolType" /> 枚举中定义的值之一。</returns>
      <exception cref="T:System.NotSupportedException">为设置属性而指定的值不是有效 <see cref="T:System.Net.SecurityProtocolType" /> 枚举值。</exception>
    </member>
    <member name="P:System.Net.ServicePointManager.ServerCertificateValidationCallback">
      <summary>获取或设置用于验证服务器证书的回调。</summary>
      <returns>
        <see cref="T:System.Net.Security.RemoteCertificateValidationCallback" />。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.ServicePointManager.UseNagleAlgorithm">
      <summary>确定由此 <see cref="T:System.Net.ServicePointManager" /> 对象管理的服务点是否使用 Nagle 算法。</summary>
      <returns>如果使用 Nagle 算法，则为 true；否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.SocketAddress.Family">
      <summary>获取 <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值的当前 <see cref="T:System.Net.SocketAddress" />。</summary>
      <returns>其中一个 <see cref="T:System.Net.Sockets.AddressFamily" /> 枚举值。</returns>
    </member>
    <member name="P:System.Net.SocketAddress.Item(System.Int32)">
      <summary>获取或设置基础缓冲区中的指定的索引元素。</summary>
      <param name="offset">数组索引的元素的所需的信息。</param>
      <returns>基础缓冲区中的指定的索引元素值。</returns>
      <exception cref="T:System.IndexOutOfRangeException">缓冲区中不存在指定的索引。</exception>
    </member>
    <member name="P:System.Net.SocketAddress.Size">
      <summary>获取基础缓冲区大小 <see cref="T:System.Net.SocketAddress" />。</summary>
      <returns>基础的缓冲区大小 <see cref="T:System.Net.SocketAddress" />。</returns>
    </member>
    <member name="P:System.Net.SocketPermission.AcceptList">
      <summary>获取一份 <see cref="T:System.Net.EndpointPermission" /> 实例标识为可以接收在此权限实例下的终结点。</summary>
      <returns>一个实例，它实现 <see cref="T:System.Collections.IEnumerator" /> 包含接口 <see cref="T:System.Net.EndpointPermission" /> 实例。</returns>
    </member>
    <member name="P:System.Net.SocketPermission.ConnectList">
      <summary>获取一份 <see cref="T:System.Net.EndpointPermission" /> 标识可以在此权限实例下连接到的终结点的实例。</summary>
      <returns>一个实例，它实现 <see cref="T:System.Collections.IEnumerator" /> 包含接口 <see cref="T:System.Net.EndpointPermission" /> 实例。</returns>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Access">
      <summary>获取或设置由此允许的网络访问方法 <see cref="T:System.Net.SocketPermissionAttribute" />。</summary>
      <returns>一个字符串，包含允许的此实例的网络访问方法 <see cref="T:System.Net.SocketPermissionAttribute" />。 有效值为"接受"和"连接"。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.SocketPermissionAttribute.Access" /> 属性不是 null 当您尝试设置的值。 若要指定多个访问方法时，使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Host">
      <summary>获取或设置的 DNS 主机名或 IP 地址指定由此 <see cref="T:System.Net.SocketPermissionAttribute" />。</summary>
      <returns>一个字符串，包含 DNS 主机名或 IP 地址，则与此实例相关联 <see cref="T:System.Net.SocketPermissionAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.SocketPermissionAttribute.Host" /> 不是 null 当您尝试设置的值。 若要指定多个主机，请使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Port">
      <summary>获取或设置与此关联的端口号 <see cref="T:System.Net.SocketPermissionAttribute" />。</summary>
      <returns>一个字符串，包含与此实例关联的端口号 <see cref="T:System.Net.SocketPermissionAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.SocketPermissionAttribute.Port" /> 属性是 null 当您尝试设置的值。 若要指定多个端口，请使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.SocketPermissionAttribute.Transport">
      <summary>获取或设置 <see cref="T:System.Net.TransportType" /> 指定由此 <see cref="T:System.Net.SocketPermissionAttribute" />。</summary>
      <returns>一个字符串，包含 <see cref="T:System.Net.TransportType" /> 这与该键相关联 <see cref="T:System.Net.SocketPermissionAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.SocketPermissionAttribute.Transport" /> 不是 null 当您尝试设置的值。 若要指定多个传输类型，请使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Address">
      <summary>获取调用后收到的数据包的来源信息 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> ，该值指示调用后收到的数据包的来源信息 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 方法。 从单播地址，已发送的数据包 <see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> 属性将返回 <see cref="T:System.Net.IPAddress" /> ; 为多播或广播数据包的发件人 <see cref="P:System.Net.Sockets.IPPacketInformation.Address" /> 属性将返回多播或广播 <see cref="T:System.Net.IPAddress" />。</returns>
    </member>
    <member name="P:System.Net.Sockets.IPPacketInformation.Interface">
      <summary>获取与调用相关联的网络接口信息 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />。</summary>
      <returns>
        <see cref="T:System.Int32" /> 值，该值表示网络接口的索引。 可以使用此索引和 <see cref="M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces" /> 以获取有关相关接口的详细信息。</returns>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.Group">
      <summary>获取或设置多播组的 IP 地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 包含多播组的 Internet 地址。</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="group" /> 为 null。</exception>
    </member>
    <member name="P:System.Net.Sockets.IPv6MulticastOption.InterfaceIndex">
      <summary>获取或设置与多播组相关联的接口索引。</summary>
      <returns>一个 <see cref="T:System.UInt64" /> 值，该值指定接口的地址。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值是小于 0 或大于 0x00000000FFFFFFFF。</exception>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.Enabled">
      <summary>获取或设置一个值，指示后是否逗留 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 之后将逗留 <see cref="M:System.Net.Sockets.Socket.Close" /> 调用; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.LingerOption.LingerTime">
      <summary>获取或设置要在调用中保持连接状态的时间量 <see cref="M:System.Net.Sockets.Socket.Close" /> 如果仍然要发送数据的方法。</summary>
      <returns>总时间，以秒为单位，以保持连接状态之后调用 <see cref="M:System.Net.Sockets.Socket.Close" />。</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.Group">
      <summary>获取或设置多播组的 IP 地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> 包含多播组的 Internet 地址。</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.InterfaceIndex">
      <summary>获取或设置用来发送和接收多播的数据包的接口的索引。</summary>
      <returns>一个整数，表示索引的 <see cref="T:System.Net.NetworkInformation.NetworkInterface" /> 数组元素。</returns>
    </member>
    <member name="P:System.Net.Sockets.MulticastOption.LocalAddress">
      <summary>获取或设置与多播组关联的本地地址。</summary>
      <returns>
        <see cref="T:System.Net.IPAddress" /> ，其中包含与多播组关联的本地地址。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanRead">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Net.Sockets.NetworkStream" /> 支持读取。</summary>
      <returns>true 如果可以从该流，则读取数据否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanSeek">
      <summary>获取一个值，该值指示流是否支持查找。 目前不支持此属性。此属性始终返回 false。</summary>
      <returns>false 在所有情况下，指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 无法查找的流中的特定位置。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanTimeout">
      <summary>该值指示是否可用于在对超时属性 <see cref="T:System.Net.Sockets.NetworkStream" />。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.CanWrite">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Net.Sockets.NetworkStream" /> 支持写入。</summary>
      <returns>true 如果可以将数据写入 <see cref="T:System.Net.Sockets.NetworkStream" />; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.DataAvailable">
      <summary>获取一个值，该值指示数据是否位于 <see cref="T:System.Net.Sockets.NetworkStream" /> 要读取。</summary>
      <returns>true 如果在可供读取; 该流上可用数据否则为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.NetworkStream" /> 已关闭。</exception>
      <exception cref="T:System.IO.IOException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">使用 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 属性来获取特定的错误代码，并请参阅 Windows 套接字第 2 版 API 错误代码文档在 MSDN 中有关错误的详细说明。</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Length">
      <summary>获取流上可用的数据的长度。 此属性当前不支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>在流上的可用数据的长度。</returns>
      <exception cref="T:System.NotSupportedException">任何使用此属性。</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Position">
      <summary>获取或设置当前流中的位置。 此属性当前不支持，并且总是引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>流中的当前新位置。</returns>
      <exception cref="T:System.NotSupportedException">任何使用此属性。</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Readable">
      <summary>获取或设置一个值，该值指示是否 <see cref="T:System.Net.Sockets.NetworkStream" /> 可以读取。</summary>
      <returns>true 若要指示 <see cref="T:System.Net.Sockets.NetworkStream" /> 可读; 否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.ReadTimeout">
      <summary>获取或设置读取的操作阻止等待其数据的时间量。</summary>
      <returns>一个 <see cref="T:System.Int32" /> ，以毫秒为单位，读取的操作失败之前将等待指定的时间量。 默认值为 <see cref="F:System.Threading.Timeout.Infinite" />, ，指定读取的操作不会超时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值是否小于或等于零且不是 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Socket">
      <summary>获取基础 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.Socket" /> 表示的基础网络连接。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.Writeable">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Net.Sockets.NetworkStream" /> 是否可写。</summary>
      <returns>true 如果可以将数据写入该流，则否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.Sockets.NetworkStream.WriteTimeout">
      <summary>获取或设置等待数据写入操作阻止的时间量。</summary>
      <returns>一个 <see cref="T:System.Int32" /> ，以毫秒为单位，写操作失败之前将等待指定的时间量。 默认值为 <see cref="F:System.Threading.Timeout.Infinite" />, ，指定写入操作不会超时。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">指定的值是否小于或等于零且不是 <see cref="F:System.Threading.Timeout.Infinite" />。</exception>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Buffer">
      <summary>获取要发送的缓冲区 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类未使用初始化 <paramref name="buffer" /> 参数。</summary>
      <returns>如果发送的字节缓冲区 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类未使用初始化 <paramref name="buffer" /> 参数。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Count">
      <summary>获取要发送的字节数。</summary>
      <returns>如果发送的字节计数 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类未使用初始化 <paramref name="count" /> 参数。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.EndOfPacket">
      <summary>获取一个布尔值，该值指示是否在此元素，不应与从套接字层传输到单个发送请求中的下一个元素结合。</summary>
      <returns>一个布尔值，该值指示是否在此元素，不应与在单个的下一个元素结合发送请求。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.FilePath">
      <summary>获取文件时才发送的文件名 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类未使用初始化 <paramref name="filepath" /> 参数。</summary>
      <returns>如果发送的文件的文件名 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 类未使用初始化 <paramref name="filepath" /> 参数。</returns>
    </member>
    <member name="P:System.Net.Sockets.SendPacketsElement.Offset">
      <summary>获取偏移量，以字节为单位，从开始处的数据缓冲区或放缓冲区或文件中开始将数据发送到的位置的文件。</summary>
      <returns>偏移量，以字节为单位，从开始处的数据缓冲区或放缓冲区或文件中开始将数据发送到的位置的文件。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.AddressFamily">
      <summary>获取的地址族 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.AddressFamily" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Available">
      <summary>获取已经从网络接收且可供读取的数据量。</summary>
      <returns>从网络接收的、可供读取的数据的字节数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Blocking">
      <summary>获取或设置一个值，该值指示是否 <see cref="T:System.Net.Sockets.Socket" /> 处于阻塞模式。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 将阻塞; 否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Connected">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Net.Sockets.Socket" /> 连接到远程主机从上次以来 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 或 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 操作。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 与截止到最近的操作的远程资源连接; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.DontFragment">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Net.Sockets.Socket" /> 允许 Internet 协议 (IP) 的数据报进行分片。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 允许数据报分段; 否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.NotSupportedException">此属性可以设置仅对中的套接字 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.DualMode">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Net.Sockets.Socket" /> 是用于 IPv4 和 IPv6 的双重模式套接字。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 是双重模式套接字; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.EnableBroadcast">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Net.Sockets.Socket" /> 可以发送或接收广播的数据包。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 允许广播的数据包; 否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">此选项是有效的数据报套接字仅。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ExclusiveAddressUse">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Net.Sockets.Socket" /> 仅允许一个进程绑定到端口。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 允许只有一个套接字绑定到特定端口; 否则为 false。 默认值是 true 为 Windows Server 2003 和 Windows XP Service Pack 2 和 false 对于所有其他版本。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" /> 已为此调用 <see cref="T:System.Net.Sockets.Socket" />。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Handle">
      <summary>获取操作系统句柄 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>
        <see cref="T:System.IntPtr" /> 表示操作系统句柄 <see cref="T:System.Net.Sockets.Socket" />。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.IsBound">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Net.Sockets.Socket" /> 绑定到特定本地端口。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 绑定到本地端口; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.LingerState">
      <summary>获取或设置一个值，指定是否 <see cref="T:System.Net.Sockets.Socket" /> 将延迟发送所有挂起的数据以尝试关闭套接字。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.LingerOption" /> ，指定如何关闭套接字时逗留。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.LocalEndPoint">
      <summary>获取本地终结点。</summary>
      <returns>
        <see cref="T:System.Net.EndPoint" /> ， <see cref="T:System.Net.Sockets.Socket" /> 使用进行通信。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.MulticastLoopback">
      <summary>获取或设置一个值，指定是否传出多播的数据包将传输到发送应用程序。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 接收传出多播的数据包数; 否则为 false。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.NoDelay">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否流 <see cref="T:System.Net.Sockets.Socket" /> 使用 Nagle 算法。</summary>
      <returns>false 如果 <see cref="T:System.Net.Sockets.Socket" /> 使用 Nagle 算法; 否则为 true。 默认值为 false。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问时出错 <see cref="T:System.Net.Sockets.Socket" />。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv4">
      <summary>指示基础操作系统和网络适配器是否支持 Internet 协议版本 4 (IPv4)。</summary>
      <returns>true 如果操作系统和网络适配器支持 IPv4 协议，则，否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv6">
      <summary>指示基础操作系统和网络适配器是否支持 Internet 协议版本 6 (IPv6)。</summary>
      <returns>true 如果操作系统和网络适配器支持 IPv6 协议;，否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ProtocolType">
      <summary>获取的协议类型 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.ProtocolType" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveBufferSize">
      <summary>获取或设置一个值，指定的接收缓冲区的大小 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含以字节为单位的接收缓冲区的大小。 默认值为 8192。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值小于 0。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveTimeout">
      <summary>获取或设置一个值，指定的后的时间量同步 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 调用将会超时。</summary>
      <returns>超时值（以毫秒为单位）。 默认值为 0，表示超时期限无限。 指定-1 还指示超时期限无限。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值是小于-1。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
      <summary>获取远程终结点。</summary>
      <returns>
        <see cref="T:System.Net.EndPoint" /> 与其 <see cref="T:System.Net.Sockets.Socket" /> 进行通信。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendBufferSize">
      <summary>获取或设置一个值，指定发送缓冲区的大小 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含以字节为单位发送缓冲区的大小。 默认值为 8192。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值小于 0。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendTimeout">
      <summary>获取或设置一个值，指定的后的时间量同步 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 调用将会超时。</summary>
      <returns>超时值（以毫秒为单位）。 如果设置具有 1 和 499 之间的值的属性，则该值将更改为 500。 默认值为 0，表示超时期限无限。 指定-1 还指示超时期限无限。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">设置操作为指定的值是小于-1。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SocketType">
      <summary>获取 <see cref="T:System.Net.Sockets.Socket" /> 的类型。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.SocketType" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv4">
      <summary>获取一个值，该值指示 IPv4 支持是否可用且已启用当前主机上。</summary>
      <returns>true 如果当前主机支持 IPv4 协议，则否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.SupportsIPv6">
      <summary>获取一个值，该值指示框架是否支持 IPv6 对于某些已过时 <see cref="T:System.Net.Dns" /> 成员。</summary>
      <returns>true 如果该框架支持 IPv6 的某些版本的过时 <see cref="T:System.Net.Dns" /> 方法; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.Ttl">
      <summary>获取或设置一个值，指定发送的 Internet 协议 (IP) 数据包的生存时间 (TTL) 值 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>TTL 值中。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">TTL 值不能设置为一个负数。</exception>
      <exception cref="T:System.NotSupportedException">此属性可以设置仅对中的套接字 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 系列。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 尝试将 TTL 设置为大于 255 的值时，也会返回此错误。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.UseOnlyOverlappedIO">
      <summary>指定套接字是否应仅使用重叠的 I/O 模式。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.Socket" /> 仅使用重叠的 I/O; 否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">套接字已绑定到完成端口。</exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket">
      <summary>获取或设置要使用的套接字的套接字或创建用于通过异步套接字方法接受连接。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.Socket" /> 使用或创建用于通过异步套接字方法接受连接的套接字。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer">
      <summary>获取要与异步套接字方法一起使用的数据缓冲区。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，它表示要与异步套接字方法一起使用的数据缓冲区。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList">
      <summary>获取或设置要与异步套接字方法一起使用的数据缓冲区的数组。</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> ，它表示要与异步套接字方法一起使用的数据缓冲区数组。</returns>
      <exception cref="T:System.ArgumentException">有二义性上设置操作中指定的缓冲区。 如果发生此异常 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性已被设置为非 null 值，并且尝试设置 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> 属性设置为非 null 值。</exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred">
      <summary>获取套接字操作中传输的字节数。</summary>
      <returns>
        <see cref="T:System.Int32" /> ，其中包含在套接字操作中传输的字节数。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError">
      <summary>获取在连接失败的情况下的异常时 <see cref="T:System.Net.DnsEndPoint" /> 使用。</summary>
      <returns>
        <see cref="T:System.Exception" /> ，该值指示连接错误的原因时 <see cref="T:System.Net.DnsEndPoint" /> 为指定 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> 属性。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket">
      <summary>创建和连接 <see cref="T:System.Net.Sockets.Socket" /> 成功完成后的对象 <see cref="Overload:System.Net.Sockets.Socket.ConnectAsync" /> 方法。</summary>
      <returns>连接 <see cref="T:System.Net.Sockets.Socket" /> 对象。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Count">
      <summary>以字节为单位，以发送或接收异步操作中获取的最大数据量。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含数据，以字节为单位，以发送或接收的最大量。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket">
      <summary>获取或设置一个值，指定是否可以在断开连接操作之后重用套接字。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> ，它指定套接字可以重用后断开连接操作。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation">
      <summary>获取套接字的最新所执行的操作与此上下文对象的类型。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.SocketAsyncOperation" /> 指示套接字操作的类型的实例最近执行与此上下文对象。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Offset">
      <summary>获取的偏移量，以字节为单位，到引用的数据缓冲区 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含到引用的数据缓冲区的偏移量，以字节为单位， <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> 属性。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo">
      <summary>获取 IP 地址和接收的数据包的接口。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.IPPacketInformation" /> 实例，它包含目标 IP 地址和接收的数据包的接口。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint">
      <summary>获取或设置一个异步操作的远程 IP 终结点。</summary>
      <returns>
        <see cref="T:System.Net.EndPoint" /> ，它表示一个异步操作的远程 IP 终结点。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements">
      <summary>获取或设置要使用的异步操作发送的缓冲区数组 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</summary>
      <returns>一个数组 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 这些对象表示要发送的缓冲区数组。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags">
      <summary>获取或设置的按位组合 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 使用的异步操作的有效值 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> 方法。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.TransmitFileOptions" /> ，其中包含与异步操作一起使用的值的按位组合。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize">
      <summary>获取或设置大小，以字节为单位，在发送操作中使用的数据块。</summary>
      <returns>
        <see cref="T:System.Int32" /> 包含以字节为单位，在发送操作中使用的数据块的大小。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketClientAccessPolicyProtocol">
      <summary>获取或设置要用于下载套接字客户端访问策略文件的协议。</summary>
      <returns>返回 <see cref="T:System.Net.Sockets.SocketClientAccessPolicyProtocol" />。要用于下载套接字客户端访问策略文件的协议。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketError">
      <summary>获取或设置异步套接字操作的结果。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.SocketError" /> 表示异步套接字操作的结果。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags">
      <summary>获取异步套接字操作的结果或设置一个异步操作的行为。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.SocketFlags" /> ，表示异步套接字操作的结果。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken">
      <summary>获取或设置与此异步套接字操作关联的用户或应用程序对象。</summary>
      <returns>表示用户的对象或与此异步套接字操作关联的应用程序对象。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.ErrorCode">
      <summary>获取与此异常关联的错误代码。</summary>
      <returns>与此异常关联的整数错误代码。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.Message">
      <summary>获取与此异常相关联的错误消息。</summary>
      <returns>包含错误消息的字符串。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.SocketErrorCode">
      <summary>获取与此异常关联的错误代码。</summary>
      <returns>与此异常关联的整数错误代码。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.Options">
      <summary>获取或设置的选项 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>一个 <see cref="T:System.Net.Sockets.SocketInformationOptions" /> 实例。</returns>
    </member>
    <member name="P:System.Net.Sockets.SocketInformation.ProtocolInformation">
      <summary>获取或设置的协议信息 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>
        <see cref="T:System.Byte" /> 类型的数组。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Active">
      <summary>获取或设置一个值，该值指示是否已建立连接。</summary>
      <returns>如果已建立连接，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Available">
      <summary>获取已经从网络接收且可供读取的数据量。</summary>
      <returns>从网络接收的、可供读取的数据的字节数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Client">
      <summary>获取或设置基础 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>基础网络 <see cref="T:System.Net.Sockets.Socket" />。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.Connected">
      <summary>获取一个值，该值指示 <see cref="T:System.Net.Sockets.TcpClient" /> 的基础 <see cref="T:System.Net.Sockets.Socket" /> 是否已连接到远程主机。</summary>
      <returns>如果 <see cref="P:System.Net.Sockets.TcpClient.Client" /> 套接字与截止到最近的操作时的远程资源连接，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ExclusiveAddressUse">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.TcpClient" /> 是否只允许一个客户端使用端口。</summary>
      <returns>如果 <see cref="T:System.Net.Sockets.TcpClient" /> 只允许一个客户端使用特定端口，则为 true；否则为 false。 在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 true；在所有其他版本中，默认为 false。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问基础套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.LingerState">
      <summary>获取或设置有关关联的套接字的延迟状态的信息。</summary>
      <returns>
        <see cref="T:System.Net.Sockets.LingerOption" />。 默认情况下，禁用逗留。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.NoDelay">
      <summary>获取或设置一个值，该值在发送或接收缓冲区未满时禁用延迟。</summary>
      <returns>如果禁用延迟，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveBufferSize">
      <summary>获取或设置接收缓冲区的大小。</summary>
      <returns>接收缓冲区的大小（以字节为单位）。 默认值为 8192 字节。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">将缓冲区大小设置时出错。- 或 -在.NET Compact Framework 应用程序中不能设置此属性。 一种解决方法，请参阅备注中的平台注意事项。</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.ReceiveTimeout">
      <summary>获取或设置在初始化一个读取操作以后 <see cref="T:System.Net.Sockets.TcpClient" /> 等待接收数据的时间量。</summary>
      <returns>连接的超时值（以毫秒为单位）。 默认值为 0。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendBufferSize">
      <summary>获取或设置发送缓冲区的大小。</summary>
      <returns>发送缓冲区的大小（以字节为单位）。 默认值为 8192 字节。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpClient.SendTimeout">
      <summary>获取或设置 <see cref="T:System.Net.Sockets.TcpClient" /> 等待发送操作成功完成的时间量。</summary>
      <returns>发送超时值（以毫秒为单位）。 默认值为 0。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Active">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Net.Sockets.TcpListener" /> 主动侦听客户端连接。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.TcpListener" /> 主动侦听; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Net.Sockets.TcpListener" /> 允许只能有一个基础套接字以侦听特定端口。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.TcpListener" /> 仅允许一个 <see cref="T:System.Net.Sockets.TcpListener" /> 使之侦听特定端口; 否则为 false。 。 在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 true；在所有其他版本中，默认为 false。</returns>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Net.Sockets.TcpListener" /> 已启动。 调用 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> 方法，然后设置 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> 属性。</exception>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问基础套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.LocalEndpoint">
      <summary>获取基础 <see cref="T:System.Net.EndPoint" /> 的当前 <see cref="T:System.Net.Sockets.TcpListener" />。</summary>
      <returns>
        <see cref="T:System.Net.EndPoint" /> 到 <see cref="T:System.Net.Sockets.Socket" /> 绑定。</returns>
    </member>
    <member name="P:System.Net.Sockets.TcpListener.Server">
      <summary>获取基础网络 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>基础 <see cref="T:System.Net.Sockets.Socket" />。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Active">
      <summary>获取或设置一个值，该值指示是否已创建默认远程主机。</summary>
      <returns>true 如果连接处于活动状态，则否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Available">
      <summary>获取接收从网络中可读取的数据量。</summary>
      <returns>从网络接收的数据的字节数。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">尝试访问套接字时出错。 有关详细信息，请参阅备注部分。</exception>
      <exception cref="T:System.ObjectDisposedException">
        <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Client">
      <summary>获取或设置基础网络 <see cref="T:System.Net.Sockets.Socket" />。</summary>
      <returns>基础网络 <see cref="T:System.Net.Sockets.Socket" />。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.DontFragment">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Net.Sockets.UdpClient" /> 允许 Internet 协议 (IP) 的数据报进行分片。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.UdpClient" /> 允许数据报分段; 否则为 false。 默认值为 true。</returns>
      <exception cref="T:System.NotSupportedException">此属性可以设置仅对使用的套接字 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> 标志或 <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> 标志。</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.EnableBroadcast">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否 <see cref="T:System.Net.Sockets.UdpClient" /> 可能会发送或接收广播的数据包。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.UdpClient" /> 允许广播的数据包; 否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.ExclusiveAddressUse">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，指定 <see cref="T:System.Net.Sockets.UdpClient" /> 是否只允许一个客户端使用端口。</summary>
      <returns>如果 <see cref="T:System.Net.Sockets.UdpClient" /> 只允许一个客户端使用特定端口，则为 true；否则为 false。 在 Windows Server 2003、Windows XP Service Pack 2 及更高版本中，默认为 true；在所有其他版本中，默认为 false。</returns>
      <exception cref="T:System.Net.Sockets.SocketException">当尝试访问基础套接字时出错。</exception>
      <exception cref="T:System.ObjectDisposedException">基础 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</exception>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.MulticastLoopback">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指定是否传出多播的数据包将传输到发送应用程序。</summary>
      <returns>true 如果 <see cref="T:System.Net.Sockets.UdpClient" /> 接收传出多播的数据包数; 否则为 false。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpClient.Ttl">
      <summary>获取或设置一个值，指定的时间 (TTL) 值 Internet 协议 (IP) 发送的数据包通过 <see cref="T:System.Net.Sockets.UdpClient" />。</summary>
      <returns>TTL 值中。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpReceiveResult.Buffer">
      <summary>获取接收 UDP 数据包中的数据缓冲区。</summary>
      <returns>返回 <see cref="T:System.Byte" />。一个 <see cref="T:System.Byte" /> 接收 UDP 数据包中的数据的数组。</returns>
    </member>
    <member name="P:System.Net.Sockets.UdpReceiveResult.RemoteEndPoint">
      <summary>获取从其接收 UDP 数据包的远程终结点。</summary>
      <returns>返回 <see cref="T:System.Net.IPEndPoint" />。远程终结点从其接收 UDP 数据包。</returns>
    </member>
    <member name="P:System.Net.UploadDataCompletedEventArgs.Result">
      <summary>获取通过调用启动的数据上载操作的服务器回复 <see cref="Overload:System.Net.WebClient.UploadDataAsync" /> 方法。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含服务器回复。</returns>
    </member>
    <member name="P:System.Net.UploadFileCompletedEventArgs.Result">
      <summary>获取服务器回复数据上载操作，它通过调用启动 <see cref="Overload:System.Net.WebClient.UploadFileAsync" /> 方法。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含服务器回复。</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesReceived">
      <summary>获取接收的字节数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示接收的字节数。</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesSent">
      <summary>获取发送的字节数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示发送的字节数。</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>获取中的字节总数 <see cref="T:System.Net.WebClient" /> 上载操作数据。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示将接收的字节数。</returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToSend">
      <summary>获取要发送字节的总数。</summary>
      <returns>
        <see cref="T:System.Int64" /> 值，该值指示将发送的字节数。</returns>
    </member>
    <member name="P:System.Net.UploadStringCompletedEventArgs.Result">
      <summary>获取通过调用启动的字符串上载操作的服务器回复 <see cref="Overload:System.Net.WebClient.UploadStringAsync" /> 方法。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含服务器回复。</returns>
    </member>
    <member name="P:System.Net.UploadValuesCompletedEventArgs.Result">
      <summary>获取通过调用启动的数据上载操作的服务器回复 <see cref="Overload:System.Net.WebClient.UploadValuesAsync" /> 方法。</summary>
      <returns>一个 <see cref="T:System.Byte" /> 数组，其中包含服务器回复。</returns>
    </member>
    <member name="P:System.Net.WebClient.AllowReadStreamBuffering">
      <summary>获取或设置一个值，该值指示是否从 Internet 资源中读取的数据进行缓冲 <see cref="T:System.Net.WebClient" /> 实例。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。如果为 true，则启用对从 Internet 资源接收的数据进行缓冲处理；如果为 false，则禁用缓冲处理。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.WebClient.AllowWriteStreamBuffering">
      <summary>获取或设置一个值，该值指示是否缓冲数据写入 Internet 资源的 <see cref="T:System.Net.WebClient" /> 实例。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 若要启用对写入 Internet 资源中; 的数据进行缓冲 false 禁用缓冲处理。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.WebClient.BaseAddress">
      <summary>获取或设置发出的请求的基 URI <see cref="T:System.Net.WebClient" />。</summary>
      <returns>一个 <see cref="T:System.String" /> 包含发出的请求的基本 URI <see cref="T:System.Net.WebClient" /> 或 <see cref="F:System.String.Empty" /> 如果尚未指定任何基址。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebClient.BaseAddress" /> 设置为无效的 URI。 内部异常可能包含有助于您找到该错误的信息。</exception>
    </member>
    <member name="P:System.Net.WebClient.CachePolicy">
      <summary>获取或设置通过使用此 WebClient 实例获取的任何资源的应用程序的缓存策略 <see cref="T:System.Net.WebRequest" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 对象，表示应用程序的缓存要求。</returns>
    </member>
    <member name="P:System.Net.WebClient.Credentials">
      <summary>获取或设置用于进行身份验证请求并发送到主机的网络凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 包含请求的身份验证凭据。 默认值为 null。</returns>
    </member>
    <member name="P:System.Net.WebClient.Encoding">
      <summary>获取和设置 <see cref="T:System.Text.Encoding" /> 用于上载和下载字符串。</summary>
      <returns>一个 <see cref="T:System.Text.Encoding" /> 用来对字符串进行编码。 此属性的默认值是由返回的编码 <see cref="P:System.Text.Encoding.Default" />。</returns>
    </member>
    <member name="P:System.Net.WebClient.Headers">
      <summary>获取或设置与请求关联的标头名称/值对的集合。</summary>
      <returns>一个 <see cref="T:System.Net.WebHeaderCollection" /> 包含与此请求关联的标头名称/值对。</returns>
    </member>
    <member name="P:System.Net.WebClient.IsBusy">
      <summary>获取指示正在进行中的 Web 请求。</summary>
      <returns>true 如果 Web 请求仍在进行;否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebClient.Proxy">
      <summary>获取或设置由此代理 <see cref="T:System.Net.WebClient" /> 对象。</summary>
      <returns>
        <see cref="T:System.Net.IWebProxy" /> 用于发送请求的实例。</returns>
      <exception cref="T:System.ArgumentNullException">将 <see cref="P:System.Net.WebClient.Proxy" /> 设置为 null。</exception>
    </member>
    <member name="P:System.Net.WebClient.QueryString">
      <summary>获取或设置与请求关联的查询名称/值对的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameValueCollection" /> ，其中包含与请求关联的查询名称/值对。 如果没有对与请求相关联，值为空 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</returns>
    </member>
    <member name="P:System.Net.WebClient.ResponseHeaders">
      <summary>获取与响应关联的标头名称/值对的集合。</summary>
      <returns>一个 <see cref="T:System.Net.WebHeaderCollection" /> 包含与响应关联的标头名称/值对或 null 如果收到没有响应。</returns>
    </member>
    <member name="P:System.Net.WebClient.UseDefaultCredentials">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制是否 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 随请求一起发送。</summary>
      <returns>如果使用默认凭据，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.WebException.Response">
      <summary>获取远程主机返回的响应。</summary>
      <returns>如果响应，则可从 Internet 资源 <see cref="T:System.Net.WebResponse" /> 实例，它包含的错误响应来自 Internet 资源; 否则为 null。</returns>
    </member>
    <member name="P:System.Net.WebException.Status">
      <summary>获取响应的状态。</summary>
      <returns>
        <see cref="T:System.Net.WebExceptionStatus" /> 值之一。</returns>
    </member>
    <member name="P:System.Net.WebHeaderCollection.AllKeys">
      <summary>获取集合中的所有标头名（关键字）。</summary>
      <returns>包含 Web 请求中所有标头名的 <see cref="T:System.String" /> 类型的数组。</returns>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Count">
      <summary>获取集合中的标头数。</summary>
      <returns>一个 <see cref="T:System.Int32" />，指示请求中的标头数。</returns>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpRequestHeader)">
      <summary>获取或设置指定的请求标头。</summary>
      <param name="header">请求标头值。</param>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含指定的标头值。</returns>
      <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许 <see cref="T:System.Net.HttpRequestHeader" /> 的实例。</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpResponseHeader)">
      <summary>获取或设置指定的响应标头。</summary>
      <param name="header">响应标头值。</param>
      <returns>一个 <see cref="T:System.String" /> 实例，包含指定的标头。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">长度 <paramref name="value" /> 大于 65535。</exception>
      <exception cref="T:System.InvalidOperationException">这 <see cref="T:System.Net.WebHeaderCollection" /> 实例不允许的实例 <see cref="T:System.Net.HttpResponseHeader" />。</exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Keys">
      <summary>获取集合中的标头名（关键字）的集合。</summary>
      <returns>一个 <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> 包含 Web 请求中的所有标头名称。</returns>
    </member>
    <member name="P:System.Net.WebPermission.AcceptList">
      <summary>此属性返回的枚举的一个接受这是由权限 <see cref="T:System.Net.WebPermission" />。 返回的枚举中包含的类型的可能对象 <see cref="T:System.String" /> 和 <see cref="T:System.Text.RegularExpressions.Regex" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 包含接口接受权限。</returns>
    </member>
    <member name="P:System.Net.WebPermission.ConnectList">
      <summary>此属性返回的枚举的单个连接权限，这是由 <see cref="T:System.Net.WebPermission" />。 返回的枚举中包含的类型的可能对象 <see cref="T:System.String" /> 和 <see cref="T:System.Text.RegularExpressions.Regex" />。</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 包含接口的连接权限。</returns>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Accept">
      <summary>获取或设置由当前接受的 URI 字符串 <see cref="T:System.Net.WebPermissionAttribute" />。</summary>
      <returns>包含 URI 的字符串由当前接受 <see cref="T:System.Net.WebPermissionAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebPermissionAttribute.Accept" /> 不是 null 当您尝试设置的值。 如果你想要指定多个接受的 URI，使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.AcceptPattern">
      <summary>获取或设置描述当前所接受的 URI 的正则表达式模式 <see cref="T:System.Net.WebPermissionAttribute" />。</summary>
      <returns>一个包含描述的 URI 的正则表达式模式字符串接受由当前 <see cref="T:System.Net.WebPermissionAttribute" />。 此字符串必须转义的编码规则根据 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数的字符串。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebPermissionAttribute.AcceptPattern" /> 不是 null 当您尝试设置的值。 如果你想要指定多个接受的 URI，使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.Connect">
      <summary>获取或设置 URI 的连接字符串受当前 <see cref="T:System.Net.WebPermissionAttribute" />。</summary>
      <returns>一个包含由当前控制 URI 连接字符串 <see cref="T:System.Net.WebPermissionAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebPermissionAttribute.Connect" /> 不是 null 当您尝试设置的值。 如果你想要指定多个连接 URI，使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebPermissionAttribute.ConnectPattern">
      <summary>获取或设置正则表达式模式，用于描述由当前控制 URI 连接 <see cref="T:System.Net.WebPermissionAttribute" />。</summary>
      <returns>一个包含描述此控制 URI 连接正则表达式模式字符串 <see cref="T:System.Net.WebPermissionAttribute" />。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebPermissionAttribute.ConnectPattern" /> 不是 null 当您尝试设置的值。 如果你想要指定多个连接 URI，使用一个额外的特性声明语句。</exception>
    </member>
    <member name="P:System.Net.WebProxy.Address">
      <summary>获取或设置代理服务器的地址。</summary>
      <returns>一个 <see cref="T:System.Uri" /> 实例，它包含代理服务器的地址。</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassArrayList">
      <summary>获取不使用代理服务器的地址的列表。</summary>
      <returns>
        <see cref="T:System.Collections.ArrayList" /> ，其中包含一份 <see cref="P:System.Net.WebProxy.BypassList" /> 表示 Uri 不使用代理服务器访问时的数组。</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassList">
      <summary>获取或设置一个不使用代理服务器的地址的数组。</summary>
      <returns>一个数组，包含正则表达式的不使用代理服务器访问时，用于描述 Uri 的列表。</returns>
    </member>
    <member name="P:System.Net.WebProxy.BypassProxyOnLocal">
      <summary>获取或设置一个值，该值指示是否对本地地址不使用代理服务器。</summary>
      <returns>如果对本地地址不使用代理服务器，则为 true；否则为 false。 默认值为 false。</returns>
    </member>
    <member name="P:System.Net.WebProxy.Credentials">
      <summary>获取或设置要提交到代理服务器进行身份验证的凭据。</summary>
      <returns>
        <see cref="T:System.Net.ICredentials" /> 实例，它包含要提交到代理服务器进行身份验证的凭据。</returns>
      <exception cref="T:System.InvalidOperationException">您试图设置此属性时 <see cref="P:System.Net.WebProxy.UseDefaultCredentials" />  属性被设置为 true。</exception>
    </member>
    <member name="P:System.Net.WebProxy.UseDefaultCredentials">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值控制是否 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 随请求一起发送。</summary>
      <returns>true 如果使用默认凭据;否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">您试图设置此属性时 <see cref="P:System.Net.WebProxy.Credentials" /> 属性包含不同的默认凭据的凭据。 有关详细信息，请参阅“备注”部分。</exception>
    </member>
    <member name="P:System.Net.WebRequest.AuthenticationLevel">
      <summary>获取或设置用于此请求的身份验证和模拟的级别。</summary>
      <returns>
        <see cref="T:System.Net.Security.AuthenticationLevel" /> 值的按位组合。 默认值为 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" />。在相互身份验证中，客户端和服务器双方都出示凭据以确定其身份。<see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> 和 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested" /> 值与 Kerberos 身份验证有关。 可以直接支持 Kerberos 身份验证，也可以仅在使用 Negotiate 安全协议选择实际的安全协议时使用该身份验证。 有关身份验证协议的更多信息，请参见 Internet 身份验证。若要确定相互身份验证是否发生，请检查 <see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated" /> 属性。如果你指定了 <see cref="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired" /> 身份验证标志值，而未发生相互身份验证，则应用程序将收到一个带有 <see cref="T:System.Net.ProtocolViolationException" /> 内部异常的 <see cref="T:System.IO.IOException" />，指示相互身份验证失败。</returns>
    </member>
    <member name="P:System.Net.WebRequest.CachePolicy">
      <summary>获取或设置此请求的缓存策略。</summary>
      <returns>定义缓存策略的 <see cref="T:System.Net.Cache.RequestCachePolicy" /> 对象。</returns>
    </member>
    <member name="P:System.Net.WebRequest.ConnectionGroupName">
      <summary>当在子类中重写时，获取或设置请求的连接组的名称。</summary>
      <returns>请求的连接组的名称。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.ContentLength">
      <summary>当在子类中被重写时，获取或设置所发送的请求数据的内容长度。</summary>
      <returns>发送的请求数据的字节数。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.ContentType">
      <summary>当在子类中被重写时，获取或设置所发送的请求数据的内容类型。</summary>
      <returns>请求数据的内容类型。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.CreatorInstance">
      <summary>当在子类中重写时，获取从 <see cref="T:System.Net.IWebRequestCreate" /> 类派生的工厂对象，该类用于创建为生成对指定 URI 的请求而实例化的 <see cref="T:System.Net.WebRequest" />。</summary>
      <returns>返回 <see cref="T:System.Net.IWebRequestCreate" />。由 <see cref="M:System.Net.IWebRequestCreate.Create(System.Uri)" /> 方法返回的派生 <see cref="T:System.Net.WebRequest" /> 类型。</returns>
    </member>
    <member name="P:System.Net.WebRequest.Credentials">
      <summary>当在子类中被重写时，获取或设置用于对 Internet 资源请求进行身份验证的网络凭据。</summary>
      <returns>包含与该请求关联的身份验证凭据的 <see cref="T:System.Net.ICredentials" />。 默认值为 null。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.DefaultCachePolicy">
      <summary>获取或设置此请求的默认缓存策略。</summary>
      <returns>一个 <see cref="T:System.Net.Cache.HttpRequestCachePolicy" />，它指定当没有其他策略适用时对此请求有效的缓存策略。</returns>
    </member>
    <member name="P:System.Net.WebRequest.DefaultWebProxy">
      <summary>获取或设置全局 HTTP 代理。</summary>
      <returns>对 <see cref="T:System.Net.WebRequest" /> 实例的每一次调用所使用的 <see cref="T:System.Net.IWebProxy" />。</returns>
    </member>
    <member name="P:System.Net.WebRequest.Headers">
      <summary>当在子类中被重写时，获取或设置与请求关联的标头名称/值对的集合。</summary>
      <returns>包含与此请求关联的标头名称/值对的 <see cref="T:System.Net.WebHeaderCollection" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.ImpersonationLevel">
      <summary>获取或设置当前请求的模拟级别。</summary>
      <returns>一个 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 值。</returns>
    </member>
    <member name="P:System.Net.WebRequest.Method">
      <summary>当在子类中被重写时，获取或设置要在此请求中使用的协议方法。</summary>
      <returns>要在此请求中使用的协议方法。</returns>
      <exception cref="T:System.NotImplementedException">属性不在子代类中重写，尝试获取或设置属性。</exception>
    </member>
    <member name="P:System.Net.WebRequest.PreAuthenticate">
      <summary>当在子类中被重写时，指示是否对请求进行预身份验证。</summary>
      <returns>若要进行预身份验证，则为 true；否则为 false。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.Proxy">
      <summary>当在子类中被重写时，获取或设置用于访问此 Internet 资源的网络代理。</summary>
      <returns>用于访问 Internet 资源的 <see cref="T:System.Net.IWebProxy" />。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.RequestUri">
      <summary>当在子类中被重写时，获取与请求关联的 Internet 资源的 URI。</summary>
      <returns>表示与请求关联的资源的 <see cref="T:System.Uri" />。 </returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.Timeout">
      <summary>获取或设置请求超时之前的时间长度（以毫秒为单位）。</summary>
      <returns>请求超时前的时间长度（以毫秒为单位）或指示请求不超时的 <see cref="F:System.Threading.Timeout.Infinite" /> 值。 默认值是由子代类定义的。</returns>
      <exception cref="T:System.NotImplementedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebRequest.UseDefaultCredentials">
      <summary>当在子代类中重写时，获取或设置一个 <see cref="T:System.Boolean" /> 值，该值控制 <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> 是否随请求一起发送。</summary>
      <returns>如果使用默认凭据，则为 true；否则为 false。 默认值为 false。</returns>
      <exception cref="T:System.InvalidOperationException">你试图在发送请求后设置该属性。</exception>
      <exception cref="T:System.NotImplementedException">任何尝试访问该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentLength">
      <summary>当在子类中重写时，获取或设置接收的数据的内容长度。</summary>
      <returns>从 Internet 资源返回的字节数。</returns>
      <exception cref="T:System.NotSupportedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentType">
      <summary>当在派生类中重写时，获取或设置接收的数据的内容类型。</summary>
      <returns>包含响应的内容类型的字符串。</returns>
      <exception cref="T:System.NotSupportedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebResponse.Headers">
      <summary>当在派生类中重写时，获取与此请求关联的标头名称/值对的集合。</summary>
      <returns>
        <see cref="T:System.Net.WebHeaderCollection" /> 类的实例，包含与此响应关联的标头值。</returns>
      <exception cref="T:System.NotSupportedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebResponse.IsFromCache">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示此响应是否为从缓存中获取的。</summary>
      <returns>如果此响应来自缓存，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebResponse.IsMutuallyAuthenticated">
      <summary>获取一个 <see cref="T:System.Boolean" /> 值，该值指示是否发生了相互身份验证。</summary>
      <returns>如果客户端和服务器均经过验证，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebResponse.ResponseUri">
      <summary>当在派生类中重写时，获取实际响应此请求的 Internet 资源的 URI。</summary>
      <returns>
        <see cref="T:System.Uri" /> 类的实例，包含实际响应此请求的 Internet 资源的 URI。</returns>
      <exception cref="T:System.NotSupportedException">任何尝试获取或设置该属性不在子代类中重写该属性时。</exception>
    </member>
    <member name="P:System.Net.WebResponse.SupportsHeaders">
      <summary>获取指示是否支持标题的值。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。如果标题受支持，则为 true；否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatus">
      <summary>获取在 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例上启动关闭握手的原因。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />。启动关闭握手的原因。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription">
      <summary>获取对关闭 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例的原因的描述。</summary>
      <returns>返回 <see cref="T:System.String" />。对关闭 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例的原因的描述。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.Options">
      <summary>获取 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例的 WebSocket 选项。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.ClientWebSocketOptions" />。<see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例的 WebSocket 选项。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.State">
      <summary>获取 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例的 WebSocket 状态。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocketState" />。<see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例的 WebSocket 状态。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocket.SubProtocol">
      <summary>获取 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 实例支持的 WebSocket 子协议。</summary>
      <returns>返回 <see cref="T:System.String" />。支持的 WebSocket 子协议。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.ClientCertificates">
      <summary>获取或设置客户端证书的集合。</summary>
      <returns>返回 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。客户端证书的集合。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Cookies">
      <summary>获取或设置与此请求关联的 Cookie。</summary>
      <returns>返回 <see cref="T:System.Net.CookieContainer" />。与请求关联的 Cookie。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Credentials">
      <summary>获取或设置客户端的凭据信息。</summary>
      <returns>返回 <see cref="T:System.Net.ICredentials" />。客户端的凭据信息。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.KeepAliveInterval">
      <summary>获取或设置 WebSocket 协议保持活动状态的间隔（以毫秒为单位）。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。WebSocket 协议保持活动状态的间隔（以毫秒为单位）。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.Proxy">
      <summary>获取或设置用于 WebSocket 请求的代理。</summary>
      <returns>返回 <see cref="T:System.Net.IWebProxy" />。用于 WebSocket 请求的代理。</returns>
    </member>
    <member name="P:System.Net.WebSockets.ClientWebSocketOptions.UseDefaultCredentials">
      <summary>获取或设置 <see cref="T:System.Boolean" /> 值，该值指示是否应 WebSocket 握手期间使用默认凭据。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果在 WebSocket 握手; 时应使用默认凭据否则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
      <summary>获取由接收的 cookie <see cref="T:System.Net.HttpListener" /> WebSocket 公开握手中的对象。</summary>
      <returns>返回 <see cref="T:System.Net.CookieCollection" />。由接收的 cookie <see cref="T:System.Net.HttpListener" /> 对象。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.Headers">
      <summary>获取由接收的 HTTP 标头 <see cref="T:System.Net.HttpListener" /> WebSocket 公开握手中的对象。</summary>
      <returns>返回 <see cref="T:System.Collections.Specialized.NameValueCollection" />。收到的 HTTP 标头 <see cref="T:System.Net.HttpListener" /> 对象。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
      <summary>获取一个值，该值指示 WebSocket 客户端进行身份验证。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 当 WebSocket 客户端进行身份验证;否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
      <summary>获取一个值，该值指示是否 WebSocket 客户端连接在本地计算机中。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果从本地计算机; WebSocket 客户端连接否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
      <summary>获取一个值，该值指示使用安全套接字层 (SSL) 保护 WebSocket 连接。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。true 如果使用 SSL; 保护 WebSocket 连接，否则为 false。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.Origin">
      <summary>获取包含在 WebSocket 公开握手的原点 HTTP 标头的值。</summary>
      <returns>返回 <see cref="T:System.String" />。原始 HTTP 标头的值。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
      <summary>获取 WebSocket 客户端发出请求的 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。WebSocket 客户端所请求的 URI。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
      <summary>获取包含在 WebSocket 公开握手的 SecWebSocketKey HTTP 标头的值。</summary>
      <returns>返回 <see cref="T:System.String" />。SecWebSocketKey HTTP 标头的值。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
      <summary>获取 WebSocket 公开握手中包含的安全 WebSocket 协议的列表。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />。保护 WebSocket 协议的列表。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
      <summary>获取 WebSocket 客户端发出请求的子协议的列表。</summary>
      <returns>返回 <see cref="T:System.String" />。WebSocket 客户端发出请求的子协议列表。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.User">
      <summary>获取用于获取 WebSocket 客户端标识、 身份验证信息和安全角色的对象。</summary>
      <returns>返回 <see cref="T:System.Security.Principal.IPrincipal" />。标识、 身份验证信息和 WebSocket 客户端的安全角色。</returns>
    </member>
    <member name="P:System.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
      <summary>获取用来发送和接收数据通过 WebSocket 连接的 WebSocket 实例。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocket" />。WebSocket 实例中。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatus">
      <summary>指示远程终结点启动关闭握手的原因。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.CloseStatusDescription">
      <summary>允许远程终结点描述关闭该连接的原因。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval">
      <summary>获取默认 WebSocket 协议保持活动状态间隔以毫秒为单位。</summary>
      <returns>返回 <see cref="T:System.TimeSpan" />。默认 WebSocket 协议保持活动状态的间隔以毫秒为单位。 此时间间隔的典型值为 30 秒。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.State">
      <summary>返回 WebSocket 连接的当前状态。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocketState" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocket.SubProtocol">
      <summary>在打开握手期间协商的子协议。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.CookieCollection">
      <summary>打开握手期间传递给服务器 cookie。</summary>
      <returns>返回 <see cref="T:System.Net.CookieCollection" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Headers">
      <summary>打开握手期间发送到服务器 HTTP 标头。</summary>
      <returns>返回 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsAuthenticated">
      <summary>是否 WebSocket 客户端进行身份验证。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsLocal">
      <summary>是否 WebSocket 客户端连接在本地计算机中。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.IsSecureConnection">
      <summary>是否使用安全套接字层 (SSL) 保护 WebSocket 连接。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.Origin">
      <summary>包含在公开握手原点 HTTP 标头的值。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.RequestUri">
      <summary>WebSocket 客户端所请求的 URI。</summary>
      <returns>返回 <see cref="T:System.Uri" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketKey">
      <summary>包含在公开握手 SecWebSocketKey HTTP 标头的值。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
      <summary>包含在公开握手 SecWebSocketKey HTTP 标头的值。</summary>
      <returns>返回 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
      <summary>WebSocket 客户端发出请求的子协议列表。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.User">
      <summary>用于以获得 WebSocket 客户端标识、 身份验证信息和安全角色的对象。</summary>
      <returns>返回 <see cref="T:System.Security.Principal.IPrincipal" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketContext.WebSocket">
      <summary>WebSocket 具有的实例进行交互所使用 （发送/接收/关闭/等） 的 WebSocket 连接。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocket" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.ErrorCode">
      <summary>发生的异常的本机错误代码。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketException.WebSocketErrorCode">
      <summary>返回 WebSocketError，它指示发生的错误的类型。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocketError" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatus">
      <summary>指示远程终结点启动关闭握手的原因。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocketCloseStatus" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.CloseStatusDescription">
      <summary>返回描述关闭握手由远程终结点启动的原因的可选说明。</summary>
      <returns>返回 <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.Count">
      <summary>指示 WebSocket 接收的字节数。</summary>
      <returns>返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.EndOfMessage">
      <summary>指示是否已完整收到该消息。</summary>
      <returns>返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Net.WebSockets.WebSocketReceiveResult.MessageType">
      <summary>指示当前消息是 UTF-8 消息还是二进制消息。</summary>
      <returns>返回 <see cref="T:System.Net.WebSockets.WebSocketMessageType" />。</returns>
    </member>
    <member name="P:System.Net.WriteStreamClosedEventArgs.Error">
      <summary>写入流关闭时，获取显示的错误值。</summary>
      <returns>返回 <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>获取参数的默认值。</summary>
      <returns>一个表示参数的默认值的对象。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>获取收集的句柄的数量。</summary>
      <returns>收集的句柄数。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>获取一个值，指定应开始执行回收的点。</summary>
      <returns>一个值，指定应开始执行回收的点。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>获取一个值，指定必须进行回收的点。</summary>
      <returns>一个值，指定必须进行回收的点。</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>获取名称 <see cref="T:System.Runtime.InteropServices.HandleCollector" /> 对象。</summary>
      <returns>这 <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> 属性使您能够分别跟踪句柄类型的名称收集器。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.FullName">
      <summary>获取此的完整名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</summary>
      <returns>完整名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Identifier">
      <summary>获取此标识符 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</summary>
      <returns>此标识符 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Profile">
      <summary>获取此配置文件名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</summary>
      <returns>此配置文件名称 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</returns>
    </member>
    <member name="P:System.Runtime.Versioning.FrameworkName.Version">
      <summary>获取此版本 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</summary>
      <returns>一个对象，包含有关此版本信息 <see cref="T:System.Runtime.Versioning.FrameworkName" /> 对象。</returns>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights">
      <summary>获取允许或拒绝访问规则的权限。</summary>
      <returns>按位组合 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值，该值指示权限允许或拒绝访问规则。</returns>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreAuditRule.SemaphoreRights">
      <summary>获取该审核规则影响的访问权限。</summary>
      <returns>按位组合 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 值，该值指示该审核规则影响的权限。</returns>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AccessRightType">
      <summary>获取枚举 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类用于表示的访问权限。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.SemaphoreRights" /> 枚举。</returns>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AccessRuleType">
      <summary>获取类型 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类用于表示访问规则。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.SemaphoreAccessRule" /> 类。</returns>
    </member>
    <member name="P:System.Security.AccessControl.SemaphoreSecurity.AuditRuleType">
      <summary>获取类型 <see cref="T:System.Security.AccessControl.SemaphoreSecurity" /> 类用于表示审核规则。</summary>
      <returns>一个 <see cref="T:System.Type" /> 对象，表示 <see cref="T:System.Security.AccessControl.SemaphoreAuditRule" /> 类。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ChannelBinding.Size">
      <summary>
        <see cref="P:System.Security.Authentication.ExtendedProtection.ChannelBinding.Size" /> 属性获取的大小，以字节为单位，与关联的通道绑定令牌 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 实例。</summary>
      <returns>大小 （字节） 中的通道绑定令牌 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 实例。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement.CustomServiceNames">
      <summary>获取或设置自定义服务提供程序名称 (SPN) 列表用来与此配置策略元素的客户端的 spn 相匹配。</summary>
      <returns>返回 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" /> 包括用来与客户端的 spn 相匹配的自定义 SPN 列表。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement.PolicyEnforcement">
      <summary>获取或设置此配置策略元素的策略强制值。</summary>
      <returns>返回 <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement" /> 值，该值指示应何时强制实施扩展的保护策略。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement.ProtectionScenario">
      <summary>获取或设置此配置策略元素的扩展的保护策略强制实施的保护类型。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario" /> 值，该值指示此策略强制实施的保护类型。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement.Name">
      <summary>获取或设置此服务提供程序名称 (SPN) <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 实例。</summary>
      <returns>一个 <see cref="T:System.String" /> ，包含此 SPN 的表示 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 实例。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Item(System.Int32)">
      <summary>
        <see cref="P:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Item(System.String)" /> 属性获取或设置 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 实例中的指定的索引位置。</summary>
      <param name="index">索引 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 在此实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</param>
      <returns>
        <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 请求实例。 如果未找到请求的实例， null 返回。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Item(System.String)">
      <summary>
        <see cref="P:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection.Item(System.String)" /> 属性获取或设置 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 实例基于一个字符串，表示 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 实例。</summary>
      <param name="name">一个 <see cref="T:System.String" /> 表示 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 在此实例 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</param>
      <returns>
        <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 请求实例。 如果未找到请求的实例， null 返回。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding">
      <summary>获取自定义通道绑定令牌 (CBT) 用于进行验证。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> ，其中包含要用于验证的自定义通道绑定。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames">
      <summary>获取自定义服务提供程序名称 (SPN) 列表用来与客户端的 spn 相匹配。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> ，其中包含用于与客户端的 spn 相匹配的自定义 SPN 列表。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.OSSupportsExtendedProtection">
      <summary>该值指示操作系统是否支持集成的 windows 身份验证的扩展保护。</summary>
      <returns>true 如果操作系统支持集成的 windows 身份验证的扩展保护，否则 false。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement">
      <summary>获取时应强制执行扩展的保护策略。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement" /> 值，该值指示应何时强制实施扩展的保护策略。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.ProtectionScenario">
      <summary>获取扩展的保护策略强制实施的保护类型。</summary>
      <returns>一个 <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario" /> 值，该值指示此策略强制实施的保护类型。</returns>
    </member>
    <member name="P:System.Security.Authentication.ExtendedProtection.TokenBinding.BindingType">
      <summary>获取令牌绑定类型。</summary>
      <returns>令牌绑定类型。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedData.Oid">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.Oid" /> 值 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedData.RawData">
      <summary>获取或设置一个字节数组中表示的抽象语法标记一个 ASN.1 编码数据。</summary>
      <returns>一个表示的抽象语法标记一个 ASN.1 编码数据的字节数组。</returns>
      <exception cref="T:System.ArgumentNullException">该值为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.Count">
      <summary>获取的数 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 集合中的对象。</summary>
      <returns>数 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否访问 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象是线程安全。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象从 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <param name="index">集合中的位置。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataCollection.SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象的访问。</summary>
      <returns>用于对访问进行同步的对象 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataEnumerator.Current">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象在 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <returns>当前 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 集合中的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AsnEncodedDataEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象在 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象。</summary>
      <returns>当前的 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.Oid.FriendlyName">
      <summary>获取或设置标识符的友好名称。</summary>
      <returns>标识符的友好名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.Oid.Value">
      <summary>获取或设置标识符以点分隔的数字。</summary>
      <returns>标识符以点分隔的数字。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Count">
      <summary>获取集合中的 <see cref="T:System.Security.Cryptography.Oid" /> 对象数。</summary>
      <returns>集合中的 <see cref="T:System.Security.Cryptography.Oid" /> 对象数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.IsSynchronized">
      <summary>获取一个值，该值表示对 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的访问是否线程安全。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Item(System.Int32)">
      <summary>从 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象获取 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</summary>
      <param name="index">集合中 <see cref="T:System.Security.Cryptography.Oid" /> 对象的位置。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.Item(System.String)">
      <summary>获取包含与 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中指定字符串值匹配的 <see cref="P:System.Security.Cryptography.Oid.Value" /> 属性值或 <see cref="P:System.Security.Cryptography.Oid.FriendlyName" /> 属性值的第一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</summary>
      <param name="oid">一个表示 <see cref="P:System.Security.Cryptography.Oid.Value" /> 属性或 <see cref="P:System.Security.Cryptography.Oid.FriendlyName" /> 属性的字符串。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidCollection.SyncRoot">
      <summary>获取一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的访问。</summary>
      <returns>一个对象，该对象可用于同步对 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象的访问。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidEnumerator.Current">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.Oid" /> 对象在 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</summary>
      <returns>当前 <see cref="T:System.Security.Cryptography.Oid" /> 集合中的对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.OidEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.Oid" /> 对象在 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</summary>
      <returns>当前的 <see cref="T:System.Security.Cryptography.Oid" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedKeyValue">
      <summary>获取的 ASN.1 编码表示形式的公钥值。</summary>
      <returns>ASN.1 编码形式显示的公钥值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.EncodedParameters">
      <summary>获取的 ASN.1 编码表示形式公钥参数。</summary>
      <returns>ASN.1 编码形式显示的公钥参数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.Key">
      <summary>获取 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 或 <see cref="T:System.Security.Cryptography.DSACryptoServiceProvider" /> 对象，表示公共密钥。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象，表示公共密钥。</returns>
      <exception cref="T:System.NotSupportedException">不支持的密钥算法。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.PublicKey.Oid">
      <summary>获取的公钥的对象标识符 (OID) 对象。</summary>
      <returns>一个对象标识符 (OID) 的公共密钥对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X500DistinguishedName.Name">
      <summary>从 X500 中获取的以逗号分隔的可分辨的名称的证书。</summary>
      <returns>以逗号分隔的可分辨的名称 X509 证书。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CertificateAuthority">
      <summary>获取一个值，该值指示证书是否为证书颁发机构 (CA) 证书。</summary>
      <returns>true 如果证书是证书颁发机构 (CA) 证书，否则， false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.HasPathLengthConstraint">
      <summary>获取一个值，该值指示证书是否有这样的路径级别数的限制。</summary>
      <returns>true 如果该证书的路径级别它允许，否则，数有限制 false。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该扩展不能进行解码。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint">
      <summary>获取证书的路径中允许的级别数。</summary>
      <returns>一个整数，指示允许的证书路径中的级别数。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该扩展不能进行解码。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived">
      <summary>获取或设置一个值，该值存档 X.509 证书。</summary>
      <returns>true 如果该证书是否已存档， false 如果证书未存档。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象的集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName">
      <summary>获取或设置的证书关联的别名。</summary>
      <returns>证书的友好名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey">
      <summary>获取一个值，该值指示是否 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象包含一个私钥。</summary>
      <returns>true 如果 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象包含一个私钥键; 否则为 false。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName">
      <summary>获取证书颁发者的可分辨的名称。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象，其中包含证书颁发者的名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter">
      <summary>获取本地时间之后证书将不再有效的日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，表示证书的到期日期。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore">
      <summary>获取本地时间的证书生效的日期。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 对象，表示证书的有效日期。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey">
      <summary>获取或设置 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象，它表示与证书关联的私钥。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 对象，它是 RSA 或 DSA 加密服务提供程序。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">键值不是为 RSA 或 DSA 的键，或该密钥是不可读取的。</exception>
      <exception cref="T:System.ArgumentNullException">为此属性所设置的值 null。</exception>
      <exception cref="T:System.NotSupportedException">不支持此私钥的密钥算法。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">X.509 密钥不匹配。</exception>
      <exception cref="T:System.ArgumentException">加密服务提供程序密钥是 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey">
      <summary>获取 <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" /> 与证书关联的对象。</summary>
      <returns>一个 <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" /> 对象。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">键值不是为 RSA 或 DSA 的键，或该密钥是不可读取的。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData">
      <summary>获取证书的原始数据。</summary>
      <returns>原始数据的字节数组形式的证书。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber">
      <summary>获取证书的序列号。</summary>
      <returns>证书序列号。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm">
      <summary>获取用于创建证书签名的算法。</summary>
      <returns>返回的对象标识符 (<see cref="T:System.Security.Cryptography.Oid" />) 的签名算法。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName">
      <summary>获取证书的主题可分辨名称。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 对象，表示证书使用者的名称。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">证书上下文无效。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint">
      <summary>获取证书的指纹。</summary>
      <returns>证书的指纹。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Version">
      <summary>获取证书的 X.509 格式版本。</summary>
      <returns>证书格式。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该证书不可读。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Item(System.Int32)">
      <summary>获取或设置指定索引处的元素。</summary>
      <param name="index">要获取或设置的元素的从零开始的索引。</param>
      <returns>指定索引处的元素。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 小于零。- 或 - <paramref name="index" /> 等于或大于 <see cref="P:System.Collections.CollectionBase.Count" /> 属性。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> 为 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Current">
      <summary>获取当前元素中 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</summary>
      <returns>中的当前元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>中的当前元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)">
      <summary>获取或设置当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的指定索引处的条目。</summary>
      <param name="index">要在当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中定位的条目的以零为基准的索引。</param>
      <returns>位于当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 的指定索引的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" />。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 参数超出集合的有效索引范围。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Current">
      <summary>获取当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 中 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</summary>
      <returns>当前 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 中 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.System#Collections#IEnumerator#Current">
      <summary>有关此成员的说明，请参阅 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns>中的当前 X.509 证书对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainContext">
      <summary>获取 X.509 链的句柄。</summary>
      <returns>X.509 链的 <see cref="T:System.IntPtr" /> 句柄。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainElements">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象的集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainPolicy">
      <summary>获取或设置生成 X.509 证书链时要使用的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" />。</summary>
      <returns>与此 X.509 链关联的 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy" /> 对象。</returns>
      <exception cref="T:System.ArgumentNullException">为此属性所设置的值 null。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 对象中每个元素的状态。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatus" /> 对象数组。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Chain.SafeHandle">
      <summary>获取此 <see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" /> 实例的安全句柄。</summary>
      <returns>返回 <see cref="T:Microsoft.Win32.SafeHandles.SafeX509ChainHandle" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.Certificate">
      <summary>获取 X.509 证书位于特定链元素处。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.ChainElementStatus">
      <summary>链中获取当前的 X.509 证书的错误状态。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatus" /> 对象数组。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElement.Information">
      <summary>从非托管的证书链结构获取其他错误信息。</summary>
      <returns>一个字符串，表示 pwszExtendedErrorInfo 成员的非托管 CERT_CHAIN_ELEMENT Crypto API 中的结构。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Count">
      <summary>获取集合中的元素数。</summary>
      <returns>一个表示集合中的元素数的整数。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步链元素的集合。</summary>
      <returns>始终返回 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 的指定索引处的对象。</summary>
      <param name="index">一个整数值。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 大于或等于该集合的长度。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementCollection.SyncRoot">
      <summary>获取一个对象，可用于同步对访问 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 对象。</summary>
      <returns>当前对象的指针的引用。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.Current">
      <summary>获取当前元素中 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" />。</summary>
      <returns>中的当前元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator.System#Collections#IEnumerator#Current">
      <summary>获取当前元素中 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" />。</summary>
      <returns>中的当前元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.ApplicationPolicy">
      <summary>获取对象标识符 (Oid) 指定证书的应用程序策略或增强型密钥用法 (Eku) 支持的集合。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.OidCollection" />  对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.CertificatePolicy">
      <summary>获取对象标识符 (Oid) 指定证书支持哪些证书策略的集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.ExtraStore">
      <summary>表示验证证书链时，链引擎可以搜索的证书的其他集合。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.RevocationFlag">
      <summary>获取或设置值 X509 吊销标志。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag" /> 提供的值不是有效的标志。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.RevocationMode">
      <summary>获取或设置值对于 X509 证书吊销模式。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" /> 对象。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509RevocationMode" /> 提供的值不是有效的标志。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.UrlRetrievalTimeout">
      <summary>获取联机吊销验证内所用的时间跨度或下载证书吊销列表 (CRL)。</summary>
      <returns>一个 <see cref="T:System.TimeSpan" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.VerificationFlags">
      <summary>获取证书验证标志。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags" /> 枚举中的一个值。</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags" /> 提供的值不是有效的标志。 默认值为 <see cref="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.NoFlag" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainPolicy.VerificationTime">
      <summary>时间已验证的证书以本地时间表示。</summary>
      <returns>一个 <see cref="T:System.DateTime" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainStatus.Status">
      <summary>指定的 X509 状态链。</summary>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags" /> 值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ChainStatus.StatusInformation">
      <summary>指定的描述 <see cref="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus" /> 值。</summary>
      <returns>可本地化的字符串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension.EnhancedKeyUsages">
      <summary>获取对象标识符 (Oid) 指示使用密钥的应用程序的集合。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.OidCollection" /> 对象，它指示应用程序使用的密钥。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Extension.Critical">
      <summary>获取一个布尔值，该值指示扩展必不可少的。</summary>
      <returns>true 如果该扩展是关键代码;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Count">
      <summary>获取的数 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</summary>
      <returns>一个整数，表示的数 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 中的对象 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.IsSynchronized">
      <summary>获取一个值，该值表示是否保证此集合是线程安全的。</summary>
      <returns>true 如果该集合为线程安全的;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.Int32)">
      <summary>获取 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 的指定索引处的对象。</summary>
      <param name="index">位置 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 要检索对象。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象。</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="index" /> 小于零。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> 是等于或大于数组的长度。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.Item(System.String)">
      <summary>获取第一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 值或友好名称指定的对象标识符 (OID) 的对象。</summary>
      <param name="oid">要检索的扩展对象标识符 (OID)。</param>
      <returns>一个 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionCollection.SyncRoot">
      <summary>获取一个对象，可用于同步对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</summary>
      <returns>一个对象，可用于同步对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 对象。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.Current">
      <summary>获取当前元素中 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />。</summary>
      <returns>中的当前元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator.System#Collections#IEnumerator#Current">
      <summary>从集合中获取的对象。</summary>
      <returns>中的当前元素 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" />。</returns>
      <exception cref="T:System.InvalidOperationException">枚举数定位在集合或最后一个元素之后的第一个元素之前。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.KeyUsages">
      <summary>获取与证书关联的密钥用法标志。</summary>
      <returns>
        <see cref="P:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension.KeyUsages" /> 值之一。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该扩展不能进行解码。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Certificates">
      <summary>返回位于 X.509 证书存储中的证书集合。</summary>
      <returns>证书集合。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Location">
      <summary>获取 X.509 证书存储的位置。</summary>
      <returns>证书存储区的位置。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.Name">
      <summary>获取 X.509 证书存储的名称。</summary>
      <returns>证书存储的名称。</returns>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509Store.StoreHandle">
      <summary>获取 HCERTSTORE 存储的 <see cref="T:System.IntPtr" /> 句柄。</summary>
      <returns>HCERTSTORE 存储的句柄。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">存储未打开。</exception>
    </member>
    <member name="P:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension.SubjectKeyIdentifier">
      <summary>获取一个字符串，表示证书的主题密钥标识符 (SKI)。</summary>
      <returns>一个字符串，以十六进制格式表示的主题密钥标识符 (SKI) 编码。</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">该扩展不能进行解码。</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.PermissionAccessType">
      <summary>获取或设置一个枚举值，描述将向该资源的访问的类型。</summary>
      <returns>一个枚举值，派生自 <see cref="T:System.Type" /> 并描述了为您提供该资源的访问的类型。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 null。</exception>
      <exception cref="T:System.ArgumentException">属性值不是一个枚举值。</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBase.TagNames">
      <summary>获取或设置一个标识要保护的资源的字符串数组。</summary>
      <returns>标识想要保护的资源的字符串数组。</returns>
      <exception cref="T:System.ArgumentNullException">属性值为 null。</exception>
      <exception cref="T:System.ArgumentException">该数组的长度为 0。</exception>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccess">
      <summary>获取访问级别的枚举值的整数表示。</summary>
      <returns>访问级别枚举值。</returns>
    </member>
    <member name="P:System.Security.Permissions.ResourcePermissionBaseEntry.PermissionAccessPath">
      <summary>获取一个标识要保护的资源的字符串数组。</summary>
      <returns>标识要保护的资源的字符串数组。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermission.Flags">
      <summary>获取或设置当前权限允许的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Store" /> 访问的类型。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。</returns>
      <exception cref="T:System.ArgumentException">尝试将此属性设置为无效值。 有关有效值，请参阅 <see cref="T:System.Security.Permissions.StorePermissionFlags" />。</exception>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.AddToStore">
      <summary>获取或设置一个值，该值指示是否允许该代码将添加到存储。</summary>
      <returns>true 如果允许将添加到存储的能力;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.CreateStore">
      <summary>获取或设置一个值，该值指示是否允许该代码创建一个存储区。</summary>
      <returns>true 如果允许创建一个存储区的功能;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.DeleteStore">
      <summary>获取或设置一个值，该值指示允许代码删除存储区。</summary>
      <returns>true 如果允许删除存储区的功能;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateCertificates">
      <summary>获取或设置一个值，该值指示是否允许该代码枚举存储区中的证书。</summary>
      <returns>true 如果允许枚举证书的能力;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.EnumerateStores">
      <summary>获取或设置一个值，该值指示允许代码枚举存储区。</summary>
      <returns>true 如果允许枚举存储区的功能;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.Flags">
      <summary>获取或设置存储权限。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.StorePermissionFlags" /> 值的按位组合。 默认值为 <see cref="F:System.Security.Permissions.StorePermissionFlags.NoFlags" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.OpenStore">
      <summary>获取或设置一个值，该值指示是否允许该代码打开存储区。</summary>
      <returns>true 如果允许打开的存储区的功能;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.StorePermissionAttribute.RemoveFromStore">
      <summary>获取或设置一个值，该值指示是否允许该代码从存储中删除证书。</summary>
      <returns>true 如果允许从存储中删除证书的能力;否则为 false。</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermission.Flags">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" /> 为类型描述符。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" /> 为类型描述符。</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.Flags">
      <summary>获取或设置 <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" /> 的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
      <returns>
        <see cref="T:System.Security.Permissions.TypeDescriptorPermissionFlags" /> 的 <see cref="T:System.ComponentModel.TypeDescriptor" />。</returns>
    </member>
    <member name="P:System.Security.Permissions.TypeDescriptorPermissionAttribute.RestrictedRegistrationAccess">
      <summary>获取或设置一个值，该值指示是否可以在部分信任访问的类型描述符。</summary>
      <returns>true 如果类型描述符可以访问由部分受信任;否则为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Index">
      <summary>在其中找到被捕获子串的第一个字符的原始字符串中的位置。</summary>
      <returns>从零开始中的起始位置的原始字符串在其中找到捕获的子字符串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Length">
      <summary>获取捕获的子字符串的长度。</summary>
      <returns>捕获的子字符串的长度。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Capture.Value">
      <summary>从输入字符串中获取捕获的子字符串。</summary>
      <returns>通过匹配捕获的子字符串。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Count">
      <summary>获取组捕获的子字符串的数目。</summary>
      <returns>
        <see cref="T:System.Text.RegularExpressions.CaptureCollection" /> 中的项数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsReadOnly">
      <summary>获取一个值，指示集合是否为只读集合。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否同步（线程安全）。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <param name="i">捕获集合中的索引。</param>
      <returns>位置处捕获的子字符串 <paramref name="i" /> 集合中。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0 或大于 <see cref="P:System.Text.RegularExpressions.CaptureCollection.Count" />。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.CaptureCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Captures">
      <summary>获取由捕获组，顺序最内层的最左侧第一个匹配的所有捕获的集合 (或如果使用修改正则表达式的最内层的最右边第一个订单 <see cref="F:System.Text.RegularExpressions.RegexOptions.RightToLeft" /> 选项)。 该集合可以有零个或多个项。</summary>
      <returns>组匹配的子字符串的集合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Group.Success">
      <summary>获取一个值，该值指示匹配是否成功。</summary>
      <returns>true 如果匹配成功，则否则为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Count">
      <summary>返回集合中的组数。</summary>
      <returns>集合中的组数。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsReadOnly">
      <summary>获取一个值，指示集合是否为只读集合。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.IsSynchronized">
      <summary>获取一个值，该值指示是否同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问（线程安全）。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.Int32)">
      <summary>允许通过整数索引访问集合成员。</summary>
      <param name="groupnum">要检索的集合成员的索引（从零开始）。</param>
      <returns>由 <paramref name="groupnum" /> 指定的集合的成员。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.Item(System.String)">
      <summary>允许通过字符串索引访问集合成员。</summary>
      <param name="groupname">捕获组的名称。</param>
      <returns>由 <paramref name="groupname" /> 指定的集合的成员。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.GroupCollection.SyncRoot">
      <summary>获取可用于同步对 <see cref="T:System.Text.RegularExpressions.GroupCollection" /> 的访问的对象。</summary>
      <returns>要同步的 <see cref="T:System.Text.RegularExpressions.Match" /> 对象的副本。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Empty">
      <summary>获取空组。 所有失败的匹配都返回此空匹配。</summary>
      <returns>空匹配。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Match.Groups">
      <summary>获取由正则表达式匹配的组的集合。</summary>
      <returns>由模式匹配的字符组。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Count">
      <summary>获取匹配项的数目。</summary>
      <returns>匹配项的数目。</returns>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsReadOnly">
      <summary>获取一个值，指示集合是否为只读集合。</summary>
      <returns>在所有情况下均为 true。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.IsSynchronized">
      <summary>获取一个值，该值指示对集合的访问是否已同步（线程安全）。</summary>
      <returns>在所有情况下均为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.Item(System.Int32)">
      <summary>获取该集合的单个成员。</summary>
      <param name="i">中的指数 <see cref="T:System.Text.RegularExpressions.Match" /> 集合。</param>
      <returns>位置处捕获的子字符串 <paramref name="i" /> 集合中。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="i" /> 小于 0 或大于或等于 <see cref="P:System.Text.RegularExpressions.MatchCollection.Count" />。</exception>
      <exception cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException">发生超时。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.MatchCollection.SyncRoot">
      <summary>获取可用于同步对集合的访问的对象。</summary>
      <returns>可用于同步集合访问的对象。 此属性始终返回对象本身。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.CacheSize">
      <summary>获取或设置已编译的正则表达式的当前静态缓存中的最大项数。</summary>
      <returns>静态缓存中的最大项数。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">集运算中的值小于零。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.MatchTimeout">
      <summary>获取当前实例的超时间隔。</summary>
      <returns>在模式匹配操作中之前所经过的最大时间间隔 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 引发，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 在超时被禁用。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.Options">
      <summary>获取已传入的选项 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数。</summary>
      <returns>一个或多个成员 <see cref="T:System.Text.RegularExpressions.RegexOptions" /> 枚举，它表示选项传递到了 <see cref="T:System.Text.RegularExpressions.Regex" /> 构造函数 </returns>
    </member>
    <member name="P:System.Text.RegularExpressions.Regex.RightToLeft">
      <summary>获取一个值，该值指示正则表达式是否从右向左进行搜索。</summary>
      <returns>true 如果正则表达式搜索，从右到左;，否则为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic">
      <summary>获取或设置一个值，该值指示是否已编译的正则表达式具有公共可见性。</summary>
      <returns>true 如果正则表达式具有公共可见性;否则为 false。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout">
      <summary>获取或设置正则表达式的默认超时间隔。</summary>
      <returns>在模式匹配操作中之前所经过的默认最大时间间隔 <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" /> 引发，或 <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" /> 在超时被禁用。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Name">
      <summary>获取或设置表示已编译的正则表达式的类型的名称。</summary>
      <returns>新类型的名称。</returns>
      <exception cref="T:System.ArgumentNullException">此属性的值是 null。</exception>
      <exception cref="T:System.ArgumentException">此属性的值为一个空字符串。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace">
      <summary>获取或设置新的类型所属的命名空间。</summary>
      <returns>新类型的命名空间。</returns>
      <exception cref="T:System.ArgumentNullException">此属性的值是 null。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Options">
      <summary>获取或设置要编译的正则表达式时使用的选项。</summary>
      <returns>枚举值的按位组合。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern">
      <summary>获取或设置要编译的正则表达式。</summary>
      <returns>要编译的正则表达式。</returns>
      <exception cref="T:System.ArgumentNullException">此属性的值是 null。</exception>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Input">
      <summary>获取正则表达式引擎处理超时发生时的输入的文本。</summary>
      <returns>正则表达式输入的文本。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.MatchTimeout">
      <summary>获取正则表达式匹配的超时间隔。</summary>
      <returns>超时间隔。</returns>
    </member>
    <member name="P:System.Text.RegularExpressions.RegexMatchTimeoutException.Pattern">
      <summary>获取超时发生时在匹配的操作中使用的正则表达式模式。</summary>
      <returns>正则表达式模式中。</returns>
    </member>
    <member name="P:System.Threading.Barrier.CurrentPhaseNumber">
      <summary>获取屏障数的当前阶段。</summary>
      <returns>返回的屏障数的当前阶段。</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantCount">
      <summary>获取屏障中参与者的总数。</summary>
      <returns>返回屏障中参与者的总数。</returns>
    </member>
    <member name="P:System.Threading.Barrier.ParticipantsRemaining">
      <summary>获取在当前阶段尚未发出信号屏障中的参与方的数量。</summary>
      <returns>返回在当前阶段尚未发出信号屏障中的参与方的数量。</returns>
    </member>
    <member name="P:System.Threading.ThreadExceptionEventArgs.Exception">
      <summary>获取 <see cref="T:System.Exception" /> 发生。</summary>
      <returns>已发生的 <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary>引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件时获取日期/时间。</summary>
      <returns>引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的时间。</returns>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary>获取或设置一个布尔值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应只引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件（(false) 或重复 (true)）。</summary>
      <returns>如果 <see cref="T:System.Timers.Timer" /> 应在每次间隔结束时引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 true；如果它仅在间隔第一次结束后引发一次 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 false。 默认值为 true。</returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary>获取或设置一个值，该值指示 <see cref="T:System.Timers.Timer" /> 是否应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件。</summary>
      <returns>如果 <see cref="T:System.Timers.Timer" /> 应引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件，则为 true；否则，为 false。 默认值为 false。</returns>
      <exception cref="T:System.ObjectDisposedException">无法设置此属性，因为计时器已被释放。</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Timers.Timer.Interval" /> 属性设置为一个值大于 <see cref="F:System.Int32.MaxValue" /> 启用计时器之前。</exception>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary>获取或设置引发 <see cref="E:System.Timers.Timer.Elapsed" /> 事件的间隔（以毫秒为单位）。</summary>
      <returns>
        <see cref="E:System.Timers.Timer.Elapsed" /> 事件之间经过的时间（以毫秒为单位）。 该值必须大于零并小于或等于 <see cref="F:System.Int32.MaxValue" />。 默认值为 100 毫秒。</returns>
      <exception cref="T:System.ArgumentException">时间间隔小于或等于零。- 或 -间隔值大于 <see cref="F:System.Int32.MaxValue" />, ，和计时器当前处于启用状态。 （如果当前未启用计时器，不是引发异常之前将变为启用状态。）</exception>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary>获取或设置在设计模式中将 <see cref="T:System.Timers.Timer" /> 绑定到其容器的站点。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" /> 界面，此界面表示将 <see cref="T:System.Timers.Timer" /> 对象绑定到其容器的站点。</returns>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary>获取或设置对象，该对象用于在间隔过后封送发出的事件处理程序调用。</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISynchronizeInvoke" />，它表示对象，该对象用于在间隔过后封送发出的事件处理程序调用。 默认值为 null。</returns>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary>获取在引用事件、 扩展程序或属性时，可视化设计器可以显示的说明。</summary>
      <returns>对事件、 扩展程序或属性的说明。</returns>
    </member>
    <member name="P:System.Uri.AbsolutePath">
      <summary>获取 URI 的绝对路径。</summary>
      <returns>包含资源的绝对路径的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.AbsoluteUri">
      <summary>获取绝对 URI。</summary>
      <returns>包含整个 URI 的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.Authority">
      <summary>获取服务器的域名系统 (DNS) 主机名或 IP 地址和端口号。</summary>
      <returns>包含此实例所表示的 URI 的证书颁发机构部分的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.DnsSafeHost">
      <summary>获得可安全用于 DNS 解析的未转义主机名。</summary>
      <returns>一个包含适用于 DNS 解析的未转义 URI 主机部分的 <see cref="T:System.String" />；或者，如果原始的未转义主机字符串已适用于解析，则为原始的未转义主机字符串。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.Fragment">
      <summary>获取转义 URI 片段。</summary>
      <returns>一个包含任意 URI 片段信息的 <see cref="T:System.String" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.Host">
      <summary>获取此实例的主机部分。</summary>
      <returns>一个包含主机名的 <see cref="T:System.String" />。 这通常是服务器的 DNS 主机名或 IP 地址。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.HostNameType">
      <summary>获取 URI 中指定的主机名的类型。</summary>
      <returns>
        <see cref="T:System.UriHostNameType" /> 枚举的一个成员。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.IdnHost">
      <summary>RFC 3490 根据需要使用 Punycode，符合主机的国际域名要求。</summary>
      <returns>根据 IDN 标准，返回采用 Punycode 格式的主机名。<see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.Uri.IsAbsoluteUri">
      <summary>获取一个值，该值指示 <see cref="T:System.Uri" /> 实例是否为绝对 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 实例是绝对 URI，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
    </member>
    <member name="P:System.Uri.IsDefaultPort">
      <summary>获取一个值，该值指示 URI 的端口值是否为此方案的默认值。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 属性中的值是此方案的默认端口，则该值为 <see cref="P:System.Uri.Port" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.IsFile">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为文件 URI。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 是文件 URI，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.IsLoopback">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否引用了本地主机。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果此 true 引用了本地主机，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.IsUnc">
      <summary>获取一个值，该值指示指定的 <see cref="T:System.Uri" /> 是否为统一命名约定 (UNC) 路径。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果 true 是 UNC 路径，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.LocalPath">
      <summary>获取文件名的本地操作系统表示形式。</summary>
      <returns>一个 <see cref="T:System.String" />，包含文件名的本地操作系统表示形式。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.OriginalString">
      <summary>获取传递给 <see cref="T:System.Uri" /> 构造函数的原始 URI 字符串。</summary>
      <returns>包含构造此实例时指定的同一 URI，则为 <see cref="T:System.String" />；否则，为 <see cref="F:System.String.Empty" />。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.PathAndQuery">
      <summary>获取用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</summary>
      <returns>一个 <see cref="T:System.String" />，它包含用问号 (?) 分隔的 <see cref="P:System.Uri.AbsolutePath" /> 和 <see cref="P:System.Uri.Query" /> 属性。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.Port">
      <summary>获取此 URI 的端口号。</summary>
      <returns>一个包含此 URI 的端口号的 <see cref="T:System.Int32" /> 值。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.Query">
      <summary>获取指定 URI 中包括的任何查询信息。</summary>
      <returns>一个<see cref="T:System.String" />，包含指定 URI 中包括的任何查询信息。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.Scheme">
      <summary>获取此 URI 的方案名称。</summary>
      <returns>一个 <see cref="T:System.String" />，包含此 URI 的方案（已转换为小写形式）。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.Segments">
      <summary>获取包含构成指定 URI 的路径段的数组。</summary>
      <returns>一个 <see cref="T:System.String" /> 数组，包含构成指定 URI 的路径段。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.Uri.UserEscaped">
      <summary>指示 URI 字符串在创建 <see cref="T:System.Uri" /> 实例之前已被完全转义。</summary>
      <returns>一个 <see cref="T:System.Boolean" /> 值。如果在创建 true 实例时 <paramref name="dontEscape" /> 参数设置为 true，则该值为 <see cref="T:System.Uri" />；否则为 false。</returns>
    </member>
    <member name="P:System.Uri.UserInfo">
      <summary>获取用户名、密码或其他与指定 URI 关联的特定于用户的信息。</summary>
      <returns>一个 <see cref="T:System.String" />，包含与该 URI 关联的用户信息。 返回值不包括“@”字符，该字符是一个保留字符，用于分隔 URI 的用户信息部分。</returns>
      <exception cref="T:System.InvalidOperationException">此实例表示一个相对 URI，并且此属性仅对绝对 Uri 有效。</exception>
    </member>
    <member name="P:System.UriBuilder.Fragment">
      <summary>获取或设置 URI 的片段部分。</summary>
      <returns>URI 的片段部分。 片断标识符 （"#"） 添加到该片段开头。</returns>
    </member>
    <member name="P:System.UriBuilder.Host">
      <summary>获取或设置的域名系统 (DNS) 主机名或服务器的 IP 地址。</summary>
      <returns>DNS 主机名或服务器的 IP 地址。</returns>
    </member>
    <member name="P:System.UriBuilder.Password">
      <summary>获取或设置与用户访问 URI 相关联的密码。</summary>
      <returns>访问 URI 的用户的密码。</returns>
    </member>
    <member name="P:System.UriBuilder.Path">
      <summary>获取或设置由 URI 引用的资源的路径。</summary>
      <returns>URI 引用资源的路径。</returns>
    </member>
    <member name="P:System.UriBuilder.Port">
      <summary>获取或设置 URI 的端口号。</summary>
      <returns>URI 的端口号。</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">无法将该端口设置为小于-1 的值或大于 65535。</exception>
    </member>
    <member name="P:System.UriBuilder.Query">
      <summary>获取或设置在 URI 中包括的任何查询信息。</summary>
      <returns>在 URI 中包含的查询信息。</returns>
    </member>
    <member name="P:System.UriBuilder.Scheme">
      <summary>获取或设置 URI 的方案名称。</summary>
      <returns>URI 的方案。</returns>
      <exception cref="T:System.ArgumentException">该方案不能设置为无效的方案名称。</exception>
    </member>
    <member name="P:System.UriBuilder.Uri">
      <summary>获取 <see cref="T:System.Uri" /> 构造由指定的实例 <see cref="T:System.UriBuilder" /> 实例。</summary>
      <returns>一个 <see cref="T:System.Uri" /> ，其中包含由构造 URI <see cref="T:System.UriBuilder" />。</returns>
      <exception cref="T:System.UriFormatException">在 .NET for Windows Store apps 或 可移植类库, ，捕获该基类异常， <see cref="T:System.FormatException" />, ，而不是。通过构造的 URI <see cref="T:System.UriBuilder" /> 属性无效。</exception>
    </member>
    <member name="P:System.UriBuilder.UserName">
      <summary>与用户访问 URI 相关联的用户名。</summary>
      <returns>访问 URI 的用户的用户名。</returns>
    </member>
    <member name="P:System.Web.AspNetHostingPermission.Level">
      <summary>获取或设置当前 ASP.NET 应用程序的宿主权限级别。</summary>
      <returns>
        <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值之一。</returns>
    </member>
    <member name="P:System.Web.AspNetHostingPermissionAttribute.Level">
      <summary>获取或设置当前的宿主权限级别。</summary>
      <returns>
        <see cref="T:System.Web.AspNetHostingPermissionLevel" /> 枚举值之一。</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>获取此属性报告的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的类型。</summary>
      <returns>
        <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>获取此类型或属性的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类型的程序集限定名称。</summary>
      <returns>类型的程序集限定名称。</returns>
    </member>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary>提供对 C# 代码生成器和代码编译器的实例的访问权限。</summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary>提供对 Visual Basic 代码生成器和代码编译器的实例的访问权限。</summary>
    </member>
    <member name="T:Microsoft.Win32.IntranetZoneCredentialPolicy">
      <summary>定义了要用于进行使用的资源请求的凭据策略 <see cref="T:System.Net.WebRequest" /> 及其派生类。</summary>
    </member>
    <member name="T:Microsoft.Win32.PowerModeChangedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.PowerModeChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:Microsoft.Win32.PowerModeChangedEventHandler">
      <summary>表示用来处理 <see cref="E:Microsoft.Win32.SystemEvents.PowerModeChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。 通过引发此事件时 <see cref="T:Microsoft.Win32.SystemEvents" /> 类，此对象始终是 null。</param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.PowerModeChangedEventArgs" />。</param>
    </member>
    <member name="T:Microsoft.Win32.PowerModes">
      <summary>定义由操作系统报告的电源模式事件的标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.Resume">
      <summary>操作系统即将从暂停状态恢复。</summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.StatusChange">
      <summary>由操作系统引发了电源模式状态通知事件。 这可能表示弱或电池充电，交流电源与电池或在系统的状态中的另一项更改之间的转换的电源。</summary>
    </member>
    <member name="F:Microsoft.Win32.PowerModes.Suspend">
      <summary>操作系统即将被挂起。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeProcessHandle">
      <summary>为一个进程句柄提供托管包装。</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeX509ChainHandle">
      <summary>提供了一个包装类，它表示 X.509 链对象的句柄。 有关详细信息，请参阅<see cref="T:System.Security.Cryptography.X509Certificates.X509Chain" />。</summary>
    </member>
    <member name="T:Microsoft.Win32.SessionEndedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnded" /> 事件提供数据。</summary>
    </member>
    <member name="T:Microsoft.Win32.SessionEndedEventHandler">
      <summary>表示用来处理 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnded" /> 事件的方法。</summary>
      <param name="sender">事件源。 通过引发此事件时 <see cref="T:Microsoft.Win32.SystemEvents" /> 类，此对象始终是 null。</param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.SessionEndedEventArgs" />。</param>
    </member>
    <member name="T:Microsoft.Win32.SessionEndingEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnding" /> 事件提供数据。</summary>
    </member>
    <member name="T:Microsoft.Win32.SessionEndingEventHandler">
      <summary>表示将处理的方法 <see cref="E:Microsoft.Win32.SystemEvents.SessionEnding" /> 从操作系统的事件。</summary>
      <param name="sender">事件源。 通过引发此事件时 <see cref="T:Microsoft.Win32.SystemEvents" /> 类，此对象始终是 null。</param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.SessionEndingEventArgs" />。</param>
    </member>
    <member name="T:Microsoft.Win32.SessionEndReasons">
      <summary>定义表示如何结束当前的登录会话的标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionEndReasons.Logoff">
      <summary>用户已注销并结束当前用户会话。 操作系统继续运行。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionEndReasons.SystemShutdown">
      <summary>操作系统正在关闭。</summary>
    </member>
    <member name="T:Microsoft.Win32.SessionSwitchEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.SessionSwitch" /> 事件提供数据。</summary>
    </member>
    <member name="T:Microsoft.Win32.SessionSwitchEventHandler">
      <summary>表示用来处理 <see cref="E:Microsoft.Win32.SystemEvents.SessionSwitch" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:Microsoft.Win32.SessionSwitchEventArgs" /> ，该值指示该会话的类型更改事件。</param>
    </member>
    <member name="T:Microsoft.Win32.SessionSwitchReason">
      <summary>定义用于表示会话切换事件的类型的标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.ConsoleConnect">
      <summary>已从控制台连接会话。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.ConsoleDisconnect">
      <summary>已断开会话连接从控制台中。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.RemoteConnect">
      <summary>会话已连接从远程连接。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.RemoteDisconnect">
      <summary>远程连接已断开连接会话。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionLogon">
      <summary>用户已登录到会话。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionLogoff">
      <summary>用户已从会话注销。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionLock">
      <summary>会话已锁定。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionUnlock">
      <summary>会话已解锁。</summary>
    </member>
    <member name="F:Microsoft.Win32.SessionSwitchReason.SessionRemoteControl">
      <summary>会话已更改其状态，或从远程控制的模式。</summary>
    </member>
    <member name="T:Microsoft.Win32.SystemEvents">
      <summary>提供对系统事件通知的访问。 此类不能被继承。</summary>
    </member>
    <member name="T:Microsoft.Win32.TimerElapsedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.TimerElapsed" /> 事件提供数据。</summary>
    </member>
    <member name="T:Microsoft.Win32.TimerElapsedEventHandler">
      <summary>表示用来处理 <see cref="E:Microsoft.Win32.SystemEvents.TimerElapsed" /> 事件的方法。</summary>
      <param name="sender">事件源。 通过引发此事件时 <see cref="T:Microsoft.Win32.SystemEvents" /> 类，此对象始终是 null。</param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.TimerElapsedEventArgs" />。</param>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceCategory">
      <summary>定义表示用户首选项的类别的标识符。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Accessibility">
      <summary>指示与为残障用户系统中的辅助功能关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Color">
      <summary>指示系统颜色与关联的用户首选项。 此类别包括如窗口或菜单的默认颜色。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Desktop">
      <summary>指示系统桌面与关联的用户首选项。 此类别包括的背景图像或桌面背景图像布局。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.General">
      <summary>指示不与任何其他类别相关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Icon">
      <summary>指示图标设置的用户首选项包括图标高度和间距。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Keyboard">
      <summary>指示键盘设置，如键重复率和延迟的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Menu">
      <summary>指示菜单设置，如菜单延迟和文本对齐方式的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Mouse">
      <summary>指示鼠标设置，例如，双击时间和鼠标的区分大小写的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Policy">
      <summary>指示对于策略设置，例如用户权限和访问级别的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Power">
      <summary>指示系统电源设置的用户首选项。 此类别包括电源功能设置，如前系统自动进入低功耗模式下的空闲时间。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Screensaver">
      <summary>指示与屏幕保护程序相关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Window">
      <summary>指示维度和特性的系统上的 windows 与关联的用户首选项。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.Locale">
      <summary>表明区域设置，例如字符编码和区域性字符串的用户首选项中进行更改。</summary>
    </member>
    <member name="F:Microsoft.Win32.UserPreferenceCategory.VisualStyle">
      <summary>指示与视觉样式，例如启用或禁用视觉样式以及从一种视觉样式切换到另一个关联的用户首选项。</summary>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangedEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangedEventHandler">
      <summary>表示用来处理 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。 通过引发此事件时 <see cref="T:Microsoft.Win32.SystemEvents" /> 类，此对象始终是 null。</param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" />。</param>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangingEventArgs">
      <summary>为 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging" /> 事件提供数据。</summary>
    </member>
    <member name="T:Microsoft.Win32.UserPreferenceChangingEventHandler">
      <summary>表示用来处理 <see cref="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。 通过引发此事件时 <see cref="T:Microsoft.Win32.SystemEvents" /> 类，此对象始终是 null。</param>
      <param name="e">包含事件数据的 <see cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" />。</param>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary>表示传递给方法的参数的值的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary>表示创建数组的表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary>表示对数组的索引的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary>表示一个简单的赋值语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary>表示一个事件处理程序委托，它会将附加到事件的语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary>表示元数据属性声明中使用的参数。</summary>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeArgument" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary>表示一个属性声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary>表示对基类的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary>表示包含两个表达式之间的二进制文件操作的表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary>受支持的二元运算符为定义标识符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary>加法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary>减法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary>乘法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary>除法运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary>取模运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary>赋值运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary>非恒等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary>恒等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary>值相等运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary>按位 or 运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary>按位 and 运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary>一个布尔值或运算符。 这表示短路运算符。 仅计算短路运算符所必需的任意多个表达式，然后再将返回正确的值。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary>一个布尔值和运算符。 这表示短路运算符。 仅计算短路运算符所必需的任意多个表达式，然后再将返回正确的值。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary>小于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary>小于或等于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary>大于运算符。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary>大于或等于运算符。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary>表示强制转换为数据类型或接口的表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary>表示 catch 异常块 try/catch 语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCatchClause" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary>表示代码校验和杂注代码实体。</summary>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary>表示一个注释。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary>表示包含单个批注的语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeCommentStatement" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary>提供了 CodeDOM 程序图容器。</summary>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary>表示条件分支语句，通常表示为 if 语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary>表示一种类型的实例构造函数的声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary>表示为默认值的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary>表示创建委托的表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary>表示引发事件的表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary>表示一个表达式用作一种方法的调用参数连同引用方向指示器。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary>作为代码指令类的基类。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeDirective" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary>表示一个可执行文件的入口点方法。</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary>表示对事件的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary>表示代码表达式。 这是代码表达式的其他对象的基类，不会实例化。</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeExpression" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary>表示包含单个表达式的语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary>表示到字段的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary>表示 goto 语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary>表示对象的索引器属性的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary>表示 for 语句或块的语句，使用作为用于继续的条件测试表达式循环的循环。</summary>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary>表示带标签的语句或独立标签。</summary>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary>表示特定的文件内的特定位置。</summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary>表示一个事件的一种类型的声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary>表示一种类型的字段声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary>表示一种方法的一种类型的声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary>表示一种类型的属性的声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary>表示调用的方法的表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary>表示一种方法的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary>表示返回值的语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary>表示命名空间声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeNamespace" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary>表示该值指示要使用命名空间的命名空间导入指令。</summary>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeNamespaceImport" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary>对于大多数代码文档对象模型 (CodeDOM) 对象提供一个公共基类。</summary>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary>表示创建一种类型的新实例的表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary>表示方法、 属性或构造函数的参数声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary>表示一个基元数据类型值。</summary>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary>表示对属性的值的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary>表示属性集方法内的属性集方法调用的值参数。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary>指定的名称和代码区域的模式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary>指定的开始或末尾的代码区域。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary>未使用。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary>区域的开始。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary>区域的结束日期。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary>表示移除事件处理程序的语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary>表示可编译原义代码片段。</summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary>表示的文字表达式。</summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary>表示一种使用原义代码片段声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary>表示使用原义代码片段的类型的成员。</summary>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary>表示 abstract 基类语句均派生自的所有代码。</summary>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeStatement" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary>表示对当前的局部类实例的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary>表示引发异常的语句。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary>表示 try 块包含任意数量的 catch 子句和 （可选） finally 块。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary>表示一个类的静态构造函数。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary>表示类、 结构、 接口或枚举的类型声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary>表示一个委托声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary>提供一种类型的成员的基类。 类型成员包括字段、 方法、 属性、 构造函数和嵌套的类型。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeMember" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary>表示 typeof 表达式，该表达式返回 <see cref="T:System.Type" /> 为指定的类型名称。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary>表示泛型类型或方法的类型参数。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeParameter" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary>表示一种类型的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary>表示 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary>表示对数据类型的引用。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary>指定的代码类型引用的解析方式。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary>解决的根命名空间中的类型。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary>解决从类型参数的类型。</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary>表示变量的声明。</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary>表示对本地变量的引用。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary>提供的示例实现 <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 接口。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary>提供类的基类 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现。 此类为抽象类。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary>提供的示例实现 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 接口。 此类为抽象类。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary>表示一组使用的代码生成器选项。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary>提供的空实现 <see cref="T:System.CodeDom.Compiler.ICodeParser" /> 接口。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary>表示编译器错误或警告。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary>表示 <see cref="T:System.CodeDom.Compiler.CompilerError" /> 对象集合。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary>表示一个语言提供程序的配置设置。 此类不能被继承。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary>表示来调用编译器时使用的参数。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary>表示从编译器返回的编译结果。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary>提供命令执行函数调用编译器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratedCodeAttribute">
      <summary>标识由工具生成的代码。 此类不能被继承。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary>定义用于确定代码生成器是否支持某些类型的代码元素的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary>指示支持数组的数组的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary>指示支持程序入口点方法指定的生成器。 生成可执行文件时，使用此值。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary>指示支持 goto 语句生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary>指示支持引用多维数组的生成器。 目前，CodeDom 不能用于实例化多维数组。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary>指示支持静态构造函数的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary>指示生成器支持 try...catch 语句。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary>指示支持返回类型特性声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary>指示支持值类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary>指示支持枚举声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary>指示支持委托声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary>指示支持接口声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary>指示支持事件声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary>指示支持程序集特性的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary>指示支持的生成器的参数属性。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary>指示生成器支持引用和输出参数。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary>指示支持链接的构造函数参数的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary>指示支持嵌套类型的声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary>指示支持实现多个接口的成员的声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary>指示支持公共静态成员的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary>指示支持复杂的表达式生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary>指示支持使用 Win32 资源进行编译的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary>指示支持使用.NET Framework 资源进行编译的生成器。 这可能是直接编译成程序集或附属程序集中引用的资源的默认资源。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary>指示支持分部类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary>指示支持泛型类型引用的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary>指示支持泛型类型声明的生成器。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary>指示支持索引器属性的声明的生成器。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary>定义一个接口来调用编译源代码或使用特定的编译器的 CodeDOM 树。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary>定义用于生成代码的接口。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary>定义用于分析代码转换为一个接口 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.IndentedTextWriter">
      <summary>提供的文本编写器可以通过将选项卡上的字符串标记缩进新行。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary>定义用于指示特殊功能的一种语言标识符。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary>语言都有默认特性。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary>语言是不区分大小写。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary>表示临时文件的集合。</summary>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary>定义用于指示方向的参数和参数声明的标识符。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary>传入的字段。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary>输出字段。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary>通过引用字段。</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary>对于类成员定义成员属性标识符。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary>抽象成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary>不能在派生类中重写成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary>静态成员。 在 Visual Basic 中，这相当于 Shared 关键字。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary>重写基类成员的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary>常量的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary>新成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary>重载的成员。 某些语言中的，如 Visual Basic 中，需要重载的成员，以明确指出。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary>访问同一程序集中的任何类的成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary>可以在其类以及派生的类中相同的程序集内访问一个成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary>可以在其类以及派生的类的系列内访问一个成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary>可以在其类、 其派生的类中任何程序集和同一程序集中的任何类内访问一个成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary>私有成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary>公共成员。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary>访问掩码。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary>作用域操作的掩码。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary>操作的 VTable 掩码。</summary>
    </member>
    <member name="T:System.Collections.Concurrent.BlockingCollection`1">
      <summary>为实现 <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> 的线程安全集合提供阻塞和限制功能。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
      <summary>表示对象的线程安全的无序集合。</summary>
      <typeparam name="T">要存储在集合中的元素的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.ISet`1">
      <summary>提供用于集的抽象的基接口。</summary>
      <typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary>表示双重链接列表。</summary>
      <typeparam name="T">指定链接列表的元素类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.LinkedList`1" /> 的元素。</summary>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary>表示中的节点 <see cref="T:System.Collections.Generic.LinkedList`1" />。 无法继承此类。</summary>
      <typeparam name="T">指定链接列表的元素类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary>表示对象的先进先出集合。</summary>
      <typeparam name="T">指定队列中元素的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.Queue`1" /> 的元素。</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary>表示根据键进行排序的键/值对的集合。</summary>
      <typeparam name="TKey">字典中的键的类型。</typeparam>
      <typeparam name="TValue">字典中的值的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 的元素。</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary>表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中密钥的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 的元素。</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary>表示 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 中值的集合。 无法继承此类</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 的元素。</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary>表示基于相关的 <see cref="T:System.Collections.Generic.IComparer`1" /> 实现按键进行排序的键/值对的集合。</summary>
      <typeparam name="TKey">集合中的键的类型。</typeparam>
      <typeparam name="TValue">集合中值的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary>表示按排序顺序维护的对象的集合。</summary>
      <typeparam name="T">集内元素的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.SortedSet`1" /> 对象的元素。</summary>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary>表示可变大小的后进先出 (LIFO) 集合（对于相同指定类型的实例）。</summary>
      <typeparam name="T">指定堆栈中元素的类型。</typeparam>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary>枚举 <see cref="T:System.Collections.Generic.Stack`1" /> 的元素。</summary>
    </member>
    <member name="T:System.Collections.ObjectModel.ObservableCollection`1">
      <summary>表示一个动态数据集合，它可在添加、删除项目或刷新整个列表时提供通知。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>表示一个只读的 <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />。</summary>
      <typeparam name="T">集合中的元素类型。</typeparam>
    </member>
    <member name="T:System.Collections.Specialized.BitVector32">
      <summary>提供一个简单结构，该结构以 32 位内存存储布尔值和小整数。</summary>
    </member>
    <member name="T:System.Collections.Specialized.BitVector32.Section">
      <summary>表示可以包含整数的向量部分。</summary>
    </member>
    <member name="T:System.Collections.Specialized.CollectionsUtil">
      <summary>创建忽略字符串大小写的集合。</summary>
    </member>
    <member name="T:System.Collections.Specialized.HybridDictionary">
      <summary>实现 IDictionary 使用 <see cref="T:System.Collections.Specialized.ListDictionary" /> 在集合较小型的然后切换到 <see cref="T:System.Collections.Hashtable" /> 时在集合变大。</summary>
    </member>
    <member name="T:System.Collections.Specialized.INotifyCollectionChanged">
      <summary>例如，当添加和删除项或清除整个列表时，向侦听器通知动态更改。</summary>
    </member>
    <member name="T:System.Collections.Specialized.IOrderedDictionary">
      <summary>表示键/值对的索引集合。</summary>
    </member>
    <member name="T:System.Collections.Specialized.ListDictionary">
      <summary>实现 IDictionary 使用单向链接的表。 对于通常包含少于 10 项的集合，建议使用该实现方法。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NameObjectCollectionBase">
      <summary>为关联的 <see cref="T:System.String" /> 键和 <see cref="T:System.Object" /> 值的集合（可通过键或索引来访问它）提供 abstract 基类。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection">
      <summary>表示集合中 <see cref="T:System.String" /> 密钥的集合。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NameValueCollection">
      <summary>表示可通过键或索引访问的关联 <see cref="T:System.String" /> 键和 <see cref="T:System.String" /> 值的集合。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedAction">
      <summary>描述导致 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的操作。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add">
      <summary>项已添加到集合中。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove">
      <summary>已从集合中删除项。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Replace">
      <summary>已在集合中替换项。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move">
      <summary>已在集合内移动项。</summary>
    </member>
    <member name="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset">
      <summary>集合的内容已清除。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs">
      <summary>为 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler">
      <summary>表示 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的处理方法。</summary>
      <param name="sender">引发事件的对象。</param>
      <param name="e">有关事件的信息。</param>
    </member>
    <member name="T:System.Collections.Specialized.OrderedDictionary">
      <summary>表示可通过键或索引访问的键/值对的集合。</summary>
    </member>
    <member name="T:System.Collections.Specialized.StringCollection">
      <summary>表示字符串的集合。</summary>
    </member>
    <member name="T:System.Collections.Specialized.StringDictionary">
      <summary>使用字符串（而不是对象）强类型的键和值来实现哈希表。</summary>
    </member>
    <member name="T:System.Collections.Specialized.StringEnumerator">
      <summary>支持对简单迭代 <see cref="T:System.Collections.Specialized.StringCollection" />。</summary>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary>为 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary>表示用来处理 <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> 事件的方法。</summary>
      <param name="sender">该事件，通常是数据容器或数据绑定集合的源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary>指定要传递给属性以使该属性用于从其他来源获取其值的值。 这称为 ︰ 氛围。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.Array" /> 对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventArgs">
      <summary>将提供数据供 MethodNameCompleted 事件。</summary>
    </member>
    <member name="T:System.ComponentModel.AsyncCompletedEventHandler">
      <summary>表示将处理的方法 MethodNameCompleted 事件的异步操作。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AsyncOperation">
      <summary>跟踪异步操作的生存期。</summary>
    </member>
    <member name="T:System.ComponentModel.AsyncOperationManager">
      <summary>提供支持异步方法调用的类的并发管理。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary>表示特性的集合。</summary>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary>启用属性重定向。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.BackgroundWorker">
      <summary>对单独线程执行操作。</summary>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary>提供非浮点数字类型的基类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary>指定成员是否通常用于绑定。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary>指定一个值来指示是否可以将属性绑定到数据元素或另一个属性。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary>该属性在设计时不可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary>在设计时，该属性是可绑定。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary>该属性设置为默认值。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary>指定该模板是可绑定的一种方法或两种方式。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary>该模板只能接受属性值。 采用泛型时使用 <see cref="T:System.Web.UI.ITemplate" />。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary>该模板可以接受并公开属性值。 与使用 <see cref="T:System.Web.UI.IBindableTemplate" />。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary>提供支持数据绑定的泛型集合。</summary>
      <typeparam name="T">列表中元素的类型。</typeparam>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.Boolean" /> 对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>指定是否应在属性窗口中显示的属性或事件。</summary>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary>提供用于在 8 位无符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventArgs">
      <summary>为可取消的事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary>表示用于处理可取消的事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>指定在其中进行分组的属性或事件中显示的类别的名称 <see cref="T:System.Windows.Forms.PropertyGrid" /> 控件设置为按分类顺序模式。</summary>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary>提供用于在 Unicode 字符对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary>指定如何更改集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary>指定已将一个元素添加到集合。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary>指定元素已从集合中移除。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary>指定整个集合已更改。 这由使用方法处理整个集合，如 <see cref="M:System.Collections.CollectionBase.Clear" />。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary>为 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary>表示用于处理的方法 <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> 将元素添加到或从集合中删除元素时引发的事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary>提供用于在集合对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary>指定数据源和数据成员属性，支持复杂数据绑定的组件。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Component">
      <summary>提供的基实现 <see cref="T:System.ComponentModel.IComponent" /> 接口并启用应用程序之间共享的对象。</summary>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>为 <see cref="T:System.ComponentModel.IComponent" /> 对象的集合提供只读容器。</summary>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary>提供与其他各种表示形式转换组件的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary>自定义组件编辑器中提供的基类。</summary>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary>枚举资源的组件或对象提供简单的功能。<see cref="T:System.ComponentModel.ComponentResourceManager" /> 类是 <see cref="T:System.Resources.ResourceManager" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary>封装零个或多个组件。</summary>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary>容器筛选器服务提供基类。</summary>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.Globalization.CultureInfo" /> 对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary>提供的简单的默认实现 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 接口。</summary>
    </member>
    <member name="T:System.ComponentModel.DataErrorsChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary>类型标识为适合绑定到对象 <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary>表示数据字段的属性提供元数据。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary>标识由一种类型，该方法所执行的操作的类型和方法是否是默认数据方法公开的数据操作方法。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary>标识数据执行的操作的方法，由指定类型 <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 应用于此方法。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary>指示某一方法用于填充的数据操作 <see cref="T:System.Data.DataSet" /> 对象。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary>指示某一方法用于检索数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary>指示某一方法用于更新数据的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary>指示某一方法用于将数据插入的数据操作。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary>指示某一方法用于删除数据的数据操作。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.DateTime" /> 对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.DateTimeOffset" /> 结构与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.Decimal" /> 对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary>指定组件的默认绑定属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary>指定组件的默认事件。</summary>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary>指定组件的默认属性。</summary>
    </member>
    <member name="T:System.ComponentModel.DefaultValueAttribute">
      <summary>指定属性的默认值。</summary>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>指定属性或事件的描述。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary>为 <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary>当签出被签入源代码管理程序的文件的尝试被取消或失败时引发的异常。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary>表示一个命令 ID 数字组成的唯一的命令标识符和 GUID 菜单组标识符。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件提供数据。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件提供数据。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> 包含事件数据的事件。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary>将提供数据供 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />, ，和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> 事件。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />, ，<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />, ，和 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> 组件级别的事件引发的事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary>表示设计器的集合。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary>提供有关 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 事件的数据。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> 创建或释放的文档时引发的事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary>用于获取和设置选项值为设计器提供基类。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary>包含设计器选项的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary>提供一种方法来对一系列的设计时操作进行分组，从而提高性能并能撤销大多数类型的更改。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary>提供有关 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 事件的数据。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary>表示用于处理的方法 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> 和 <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> 设计器的事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />  包含事件数据。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary>表示可以从设计器调用的谓词。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary>表示 <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 对象集合。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary>表示可以在设计时支持许可证提供程序的设计时许可证上下文。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary>为设计时许可证上下文序列化提供支持。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary>定义表示有关在其中产生的帮助信息请求的上下文信息的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary>常规的上下文。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary>一个窗口。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary>所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary>工具窗口选项。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary>指定为类或成员的上下文关键字。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary>定义用于指示帮助关键字类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary>按 F1 请求有关的帮助关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary>普通的关键字。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary>筛选关键字。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary>提供了一个接口，以添加和移除事件处理程序，添加、 更改、 删除或重命名组件，并提供若干方法来引发 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> 或 <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> 事件。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary>启用在设计时组件的枚举。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary>在组件的创建过程中提供一的组推荐的默认值。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary>提供用于生成自定义设计器的基本框架。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary>出现以下情况时提供事件通知：添加和移除根设计器、更改选定的组件、更改当前的根设计器。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary>提供了一个接口，使设计器来访问和筛选的字典 <see cref="T:System.ComponentModel.TypeDescriptor" /> 存储组件设计器可以公开到设计时环境的属性、 属性和事件描述符。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary>提供用于管理设计器事务和组件的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary>指定方法上的事务的状态的报表设计器宿主。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary>可以访问位于设计器选项 工具 下的菜单 选项 命令在 Visual Studio 开发环境中。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary>提供了通过一个设计器可用于存储用户定义数据服务的基本，组件特定于站点的键 / 值对字典。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary>提供用于注册事件处理程序组件的服务。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary>提供可以列出扩展程序提供程序的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary>用于添加和删除扩展程序提供程序在设计时提供的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary>提供用于显示帮助主题以及如何添加和删除帮助关键字，在设计时方法。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary>提供用于标识组件的组件的方法。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary>提供方法来管理全局设计器谓词和菜单命令可用在设计模式，并显示某些类型的快捷菜单。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary>提供一个接口，用于获取对项目中的对象的引用通过名称或类型，获取指定对象的名称和定位设计器的项目中指定的对象的父级。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary>提供的接口为设计器访问的资源读取器和编写器的特定 <see cref="T:System.Globalization.CultureInfo" /> 资源类型。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary>为根级别的设计器视图技术提供支持。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary>提供设计器选择的组件的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary>为服务提供一个容器。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary>提供用于生成一组相关的自定义设计器支持。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary>提供在设计模式下修改组件的成员描述符集的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary>在设计时发现可用的类型。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary>提供用于按名称检索程序集或类型的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary>表示 Windows 菜单或工具栏命令项。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary>定义指示所选内容的类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary>表示正则所选内容。 选择服务响应 CTRL 和 SHIFT 键以支持添加或删除组件到或从所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary>表示正则所选内容。 选择服务响应 CTRL 和 SHIFT 键以支持添加或删除组件到或从所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary>表示当所选内容的内容被替换时发生的选择。 选择服务替换替换为当前所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary>表示当鼠标指针位于在组件上时，用户按下鼠标按钮时出现的选择。 如果已选中指针下方的组件，则它将提升为主选择组件，而不被取消。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary>表示当用户选择组件后立即释放鼠标按钮时出现的选择。 如果已选择新选择的组件，它将提升为主选择的组件，而不是被取消。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary>表示当用户单击组件时发生的选择。 如果已选择新选择的组件，它将提升为主选择的组件，而不是被取消。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary>表示当用户单击组件时发生的主选择。 如果已选中选择列表中的一个组件，组件提升为主选择。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary>表示当前所选内容和提供的选择项之间切换的切换选择。 如果组件已被选中，并传递给 <see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> 选择类型为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" />, ，所选择的组件都将被取消。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary>表示将选定的组件添加到当前所选内容，维护当前所选组件的集合添加所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary>表示从当前所选内容，维护当前所选组件的集合中删除所选的组件移除所选内容。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary>标识的有效选择类型为 <see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />, ，<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />, ，<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />, ，<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" />, ，或 <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary>将一组组件或可序列化对象序列化为序列化存储区提供基类。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary>提供序列化程序可用于向嵌套的序列化程序提供信息的堆栈对象。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 特性被放置在一个序列化程序，以指示要为该类型的序列化程序的默认提供程序使用的类。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary>提供用于实现自定义设计器加载程序的基本设计器加载程序界面。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>指示要用来序列化此特性应用于类型的值的序列化管理器的序列化程序。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary>提供可以扩展以支持从序列化状态加载设计器宿主的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary>提供了一个接口来扩展 <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> 来指定是否允许加载设计文档时发生错误。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary>提供可以扩展设计器的加载程序，以支持异步加载的外部组件的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary>提供可管理设计时序列化的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary>提供了一个接口，使一个序列化程序的访问。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary>提供可调用序列化和反序列化的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary>提供了一种服务，可以生成对象的唯一名称。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary>提供创建对象的实例所需的信息。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary>表示一个对象和成员之间的单一关系。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary>为一个成员与另一个提供基本类。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary>表示用于处理的方法 <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> 事件的序列化管理器。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />  包含事件数据。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary>指示要用于根设计器对象的基序列化程序。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary>提供用于存储序列化数据的类的基类 <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary>提供的简单实现 <see cref="T:System.ComponentModel.Design.IServiceContainer" /> 接口。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary>提供了一种回调机制，则可以按需创建服务的实例。</summary>
      <param name="container">请求的服务创建服务容器。</param>
      <param name="serviceType">要创建的服务类型。</param>
      <returns>通过指定的服务 <paramref name="serviceType" />, ，或 null 如果无法创建该服务。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary>定义可供大多数应用程序的命令的标准集的标识符。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary>定义在设计环境中可用的工具窗口的标准集相对应的 GUID 标识符。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary>为指定类型提供类型说明提供程序。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary>定义一组设计器的主机支持的技术的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary>表示在其中的视图对象直接传递给开发环境的模式。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary>表示在 Windows 窗体控件对象所提供的根设计器的显示模式。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary>指定默认的视图技术支持。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>指定用于实现组件的设计时服务的类。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerCategoryAttribute">
      <summary>指定一个类的设计器属于某一类别。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibility">
      <summary>指定可见性属性具有设计时序列化程序。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Hidden">
      <summary>代码生成器不生成对象代码。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Visible">
      <summary>代码生成器生成代码的对象。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Content">
      <summary>代码生成器生成代码的对象的内容，而不是对象本身。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
      <summary>指定在设计时序列化在组件上的属性时使用持久性的类型。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignOnlyAttribute">
      <summary>指定是否属性仅可以设置在设计时。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary>
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> 将标记组件的可见性。 如果 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> 不存在，可视化设计器可以显示此组件设计器上。</summary>
    </member>
    <member name="T:System.ComponentModel.DisplayNameAttribute">
      <summary>指定属性、 事件或 public void 方法不带参数的显示名称。</summary>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary>提供的类型转换器来转换双精度浮点数字对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventArgs">
      <summary>将提供数据供 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件处理程序。</summary>
    </member>
    <member name="T:System.ComponentModel.DoWorkEventHandler">
      <summary>表示用来处理 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> 事件的方法。 无法继承此类。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.ComponentModel.DoWorkEventArgs" />    包含事件数据。</param>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>指定要使用的属性进行更改的编辑器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableAttribute">
      <summary>指定可在编辑器中查看的属性或方法。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.EditorBrowsableState">
      <summary>从编辑器内指定属性或方法的可浏览状态。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Always">
      <summary>属性或方法都可从编辑器内浏览。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Never">
      <summary>该属性或方法是永远不会从编辑器内可浏览。</summary>
    </member>
    <member name="F:System.ComponentModel.EditorBrowsableState.Advanced">
      <summary>属性或方法是应该会看到一种功能，只有高级用户。 编辑器可以显示或隐藏此类属性。</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.Enum" /> 对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary>提供有关事件的信息。</summary>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.EventDescriptor" /> 对象集合。</summary>
    </member>
    <member name="T:System.ComponentModel.EventHandlerList">
      <summary>提供了一系列简单的委托。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary>提供可扩展对象和其他各种表示形式之间来回进行转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary>指定由扩展程序提供商提供的属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.Guid" /> 对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary>可以在事件处理程序中完全处理的事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary>表示可以处理事件可能有也可能不需要进一步处理后返回的事件处理程序的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.HandledEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary>提供支持复杂且简单的情况下，绑定到数据源时所需的功能。</summary>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary>扩展 <see cref="T:System.ComponentModel.IBindingList" /> 接口通过提供高级排序和筛选功能。</summary>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary>向集合添加新项时，请添加事务性功能。</summary>
    </member>
    <member name="T:System.ComponentModel.IChangeTracking">
      <summary>定义用于查询对象的更改和重置已更改状态的机制。</summary>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary>提供了 COM 对象之间的顶级映射层和一个 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>提供全部组件所需的功能。</summary>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>提供容器的功能。 容器是在逻辑上包含零个或多个组件的对象。</summary>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary>提供一个接口，用于提供动态自定义类型的对象的信息。</summary>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary>提供的功能来提供用户界面可以绑定到的自定义错误信息。</summary>
    </member>
    <member name="T:System.ComponentModel.IEditableObject">
      <summary>提供功能以提交或回滚到用作数据源的对象的更改。</summary>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary>定义用于扩展属性添加到容器中的其他组件的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary>提供可用于促进检索生成器的名称和显示生成器的接口。</summary>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary>提供了以下功能的对象以返回可绑定到数据源的列表。</summary>
    </member>
    <member name="T:System.ComponentModel.ImmutableObjectAttribute">
      <summary>指定一个对象有没有可以被编辑的子属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary>对于嵌套的容器，也不能在逻辑上包含零个或多个其他组件所拥有的父组件提供功能。</summary>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary>提供的功能来检索嵌套的完整组件名称。</summary>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary>指示是否已从基类继承此属性与关联的组件。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary>定义继承级别类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary>该对象继承。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary>该对象继承，但具有只读访问权限。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary>该对象不继承。</summary>
    </member>
    <member name="T:System.ComponentModel.InitializationEventAttribute">
      <summary>指定在初始化时引发的事件。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyDataErrorInfo">
      <summary>定义数据实体类可实现以提供自定义同步和异步验证支持的成员。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanged">
      <summary>通知客户端属性值已更改。</summary>
    </member>
    <member name="T:System.ComponentModel.INotifyPropertyChanging">
      <summary>通知客户端属性值正在更改。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary>指定的安装程序安装组件的类型。</summary>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary>从下拉列表框内创建特定类型的属性的一个实例 <see cref="T:System.Windows.Forms.PropertyGrid" />。</summary>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary>提供用于在 16 位有符号整数对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary>提供用于在 32 位有符号整数对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary>提供用于在 64 位有符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>当不再存在或没有消息循环的线程应在其执行某个操作时引发。</summary>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>使用由枚举器无效参数时引发的异常。</summary>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary>指示类是否将转换到的属性更改事件 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件。</summary>
    </member>
    <member name="T:System.ComponentModel.IRevertibleChangeTracking">
      <summary>提供对回滚更改的支持</summary>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>提供站点所需的功能。</summary>
    </member>
    <member name="T:System.ComponentModel.ISupportInitialize">
      <summary>指定此对象对批初始化支持简单的事务处理通知。</summary>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary>实现协作的一个组件和其依赖项属性的初始化。</summary>
    </member>
    <member name="T:System.ComponentModel.ISynchronizeInvoke">
      <summary>提供了一种同步或异步执行委托。</summary>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary>提供有关组件，如其容器和属性描述符的上下文信息。</summary>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary>提供功能以发现可绑定列表，其中可用于绑定的属性不同于要将绑定到的对象的公共属性的架构。</summary>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary>提供了 abstract 基类的所有许可证。 对组件的特定实例授予许可证。</summary>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary>指定何时可以使用授权的对象并提供一种方法获取支持许可证在其域内运行所需的其他服务。</summary>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary>表示当无法授予组件许可证时引发的异常。</summary>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary>提供属性和方法来将许可证添加到组件以及管理 <see cref="T:System.ComponentModel.LicenseProvider" />。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary>提供了 abstract 基类以便实现许可证提供程序。</summary>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary>指定 <see cref="T:System.ComponentModel.LicenseProvider" /> 若要使用的类。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary>指定何时 <see cref="T:System.ComponentModel.License" /> 可用。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary>在运行时使用。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary>在设计时通过可视化设计器或编译器期间使用。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary>提供的实现 <see cref="T:System.ComponentModel.LicenseProvider" />。 在类似于标准的 Microsoft.NET Framework 的许可模型，该提供程序工作正常。</summary>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary>指定列表可以用作数据源。 可视化设计器中应使用此属性来确定是否在数据绑定选取器中显示特定的列表。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> 事件 <see cref="T:System.ComponentModel.IBindingList" /> 类。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary>指定列表的更改方式。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary>很多列表已更改。 任何侦听控件应刷新其从列表中的所有数据。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary>添加到列表项。<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含已添加的项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary>从列表中删除的项。<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含已删除的项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary>在列表中移动的项。<see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> 包含该项目的先前索引，而 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含项的新索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary>在列表中更改的项。<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> 包含已更改的项的索引。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已添加，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已被删除，这更改了架构。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary>一个 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 已被更改，这更改了架构。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary>提供应用于数据源的排序操作的说明。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary>表示 <see cref="T:System.ComponentModel.ListSortDescription" /> 对象集合。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>指定排序操作的方向。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>按升序排序。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>按降序排序。</summary>
    </member>
    <member name="T:System.ComponentModel.LocalizableAttribute">
      <summary>指定是否应本地化属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary>指定支持基于查找的绑定的属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary>实现 <see cref="T:System.ComponentModel.IComponent" /> ，并提供了进行封送的值 （传递序列化对象的副本） 的可远程处理组件的基实现。</summary>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary>表示可由任意数量的屏蔽，如支持的控件的掩码分析服务 <see cref="T:System.Windows.Forms.MaskedTextBox" /> 控件。</summary>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary>指定用于简单地描述了掩码的文本分析操作的结果的值。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary>未知。 无法确定操作的结果。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary>成功。 操作成功，因为为文本、 提示或空格字符是转义的字符。 有关转义字符的详细信息，请参阅 <see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary>成功。 不执行主要操作，因为不需要它的;因此，没有任何副作用被生成。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary>成功。 不执行主要操作，因为不需要但该方法产生负面影响。 例如， <see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> 方法可以删除在格式化字符串将导致第二个字符的左移赋值的编辑位置。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary>成功。 主操作成功。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary>操作未成功。输入的字符遇到包含非 ASCII 字符集的成员。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary>操作未成功。输入字符中包含非字母数字字符。 。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary>操作未成功。 遇到不是一个数字的输入的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary>操作未成功。 输入字符中包含非字母字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary>操作未成功。 遇到不是有符号的数字的输入的字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary>操作未成功。 该程序时遇到了无效的输入的字符。 有关无效的字符的详细信息，请参阅 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary>操作未成功。 提示字符不是有效的输入，可能是因为 <see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> 属性设置为 false。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary>操作未成功。 没有足够可用编辑位置来满足请求。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary>操作未成功。 格式化字符串中的当前位置是原义字符。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary>操作未成功。 指定的位置不在目标字符串中; 的范围内通常它是小于零或更高版本然后目标字符串的长度。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary>表示一个类成员，例如属性或事件。 这是一个抽象基类。</summary>
    </member>
    <member name="T:System.ComponentModel.MergablePropertyAttribute">
      <summary>指定此属性可以与属于属性窗口中的其他对象的属性进行组合。</summary>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary>提供用于将多行字符串转换成单行字符串的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary>提供的基实现 <see cref="T:System.ComponentModel.INestedContainer" /> 接口，使容器可以拥有一个所属组件。</summary>
    </member>
    <member name="T:System.ComponentModel.NotifyParentPropertyAttribute">
      <summary>指示此特性应用于该属性的值被修改时通知的父属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary>提供可以为 null 的类型与其基础基元类型之间的自动转换。</summary>
    </member>
    <member name="T:System.ComponentModel.ParenthesizePropertyNameAttribute">
      <summary>指示是否使用括号，在属性窗口中显示相关联的属性的名称。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary>指示字符，如星号遮盖对象文本表示形式。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.ProgressChangedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> 事件 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类。 此类不能被继承。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.ComponentModel.ProgressChangedEventArgs" />   包含事件数据。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 在组件上更改属性时引发的事件。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangingEventHandler">
      <summary>表示将要处理 <see cref="T:System.ComponentModel.INotifyPropertyChanging" /> 接口的 <see cref="E:System.ComponentModel.INotifyPropertyChanging.PropertyChanging" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangingEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary>提供类的属性的抽象。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary>表示 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 对象集合。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary>标识属性选项卡或选项卡以显示指定的类或类。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary>定义用于指示在属性窗口的选项卡的持久性作用域标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary>此选项卡添加到属性窗口，并且不能删除。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary>此选项卡添加到属性窗口，并可以仅将其显式移除由父组件。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary>此选项卡是特定于当前的文档。 此选项卡添加到属性窗口，并删除当前所选的文档发生更改时。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary>此选项卡是特定于当前的组件。 此选项卡添加到当前组件属性窗口，并且不再选择该组件时会被删除。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary>指定的属性名称中的实现器 <see cref="T:System.ComponentModel.IExtenderProvider" /> 提供给其他组件。 无法继承此类</summary>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>指定此属性绑定到的属性是只读的还是读/写。 无法继承此类</summary>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary>指定该属性可以用作应用程序设置。</summary>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary>提供了其他表示形式之间来回转换的对象引用的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary>为 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary>表示用于处理的方法 <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> 事件时引发 <see cref="T:System.Type" /> 或在设计时更改组件。</summary>
      <param name="e">一个 <see cref="T:System.ComponentModel.RefreshEventArgs" /> ，其中包含该组件或 <see cref="T:System.Type" /> 更改。</param>
    </member>
    <member name="T:System.ComponentModel.RefreshProperties">
      <summary>定义指示的属性窗口刷新类型的标识符。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.None">
      <summary>任何一次刷新不是必需的。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.All">
      <summary>属性应该重新查询以及应该刷新视图。</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.Repaint">
      <summary>应刷新该视图。</summary>
    </member>
    <member name="T:System.ComponentModel.RefreshPropertiesAttribute">
      <summary>指示在关联的属性值更改时，应刷新属性网格。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary>指定是否 Visual Studio 自定义操作安装程序或 Installutil.exe（安装程序工具） 时安装的程序集时要调用。</summary>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventArgs">
      <summary>将提供数据供 MethodNameCompleted 事件。</summary>
    </member>
    <member name="T:System.ComponentModel.RunWorkerCompletedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> 事件 <see cref="T:System.ComponentModel.BackgroundWorker" /> 类。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.ComponentModel.RunWorkerCompletedEventArgs" />   包含事件数据。</param>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary>提供用于在 8 位无符号整数对象与字符串之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary>指定当组件属性可以绑定到应用程序设置。</summary>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary>提供的类型转换器来转换单精度浮点数字对象与其他各种表示形式。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary>提供用于在字符串对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary>提供方法以验证计算机名称和路径符合特定的语法。 无法继承此类。</summary>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary>提供要转换的类型转换器 <see cref="T:System.TimeSpan" /> 对象与其他表示形式之间。</summary>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary>表示工具箱项的属性。</summary>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary>指定的筛选器字符串和要用于工具箱项的筛选器类型。</summary>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary>定义用于指示筛选器的类型的标识符， <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> 使用。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary>指示工具箱项筛选器字符串是允许的但不是要求。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary>表示自定义处理需要以确定是否使用工具箱项筛选器字符串。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary>指示不允许工具箱项筛选器字符串。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary>指示必须存在要启用的工具箱项工具箱项筛选器字符串。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary>提供了一种统一的方法将类型的值转换为其他类型，以及用于访问标准值和子属性。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary>表示 abstract 提供用于不具有属性的对象的属性的类。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary>表示值的集合。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverterAttribute">
      <summary>指定对于此属性绑定到的对象要使用哪种类型作为转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary>提供补充元数据到 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProviderAttribute">
      <summary>指定的自定义类型说明提供程序类。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary>对于组件，例如其属性、 属性和事件提供有关的特征。 此类不能被继承。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary>提供可用于在列表框中填充可用类型的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary>提供用于在 16 位无符号整数对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary>提供用于在 32 位无符号整数对象与其他各种表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary>提供用于在 64 位无符号整数对象与其他表示形式之间实现相互转换的类型转换器。</summary>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary>指定作为警告而不是错误处理的异常。</summary>
    </member>
    <member name="T:System.ComponentModel.Win32Exception">
      <summary>引发 Win32 错误代码异常。</summary>
    </member>
    <member name="T:System.Configuration.ApplicationScopedSettingAttribute">
      <summary>指定应用程序设置属性的所有用户的应用程序的常见值。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.ApplicationSettingsBase">
      <summary>作为类的基类派生具体包装类要在 Window 窗体应用程序中实现应用程序设置功能。</summary>
    </member>
    <member name="T:System.Configuration.ApplicationSettingsGroup">
      <summary>表示一的组相关的应用程序配置文件中的设置节。 无法继承此类。</summary>
    </member>
    <member name="T:System.Configuration.AppSettingsReader">
      <summary>提供用于从配置读取特定类型的值的方法。</summary>
    </member>
    <member name="T:System.Configuration.ClientSettingsSection">
      <summary>表示一组用户范围的应用程序配置文件中的设置。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationException">
      <summary>发生配置系统错误时引发的异常。</summary>
    </member>
    <member name="T:System.Configuration.ConfigurationSettings">
      <summary>支持运行时 1.0 和 1.1 版中读取配置节和公用配置设置。</summary>
    </member>
    <member name="T:System.Configuration.ConfigXmlDocument">
      <summary>包装相应的 <see cref="T:System.Xml.XmlDocument" /> 类型并带有报告文件名和行号所需的信息。</summary>
    </member>
    <member name="T:System.Configuration.DefaultSettingValueAttribute">
      <summary>指定应用程序设置属性的默认值。</summary>
    </member>
    <member name="T:System.Configuration.DictionarySectionHandler">
      <summary>提供键/值对从一个配置节的配置信息。</summary>
    </member>
    <member name="T:System.Configuration.IApplicationSettingsProvider">
      <summary>定义基于客户端应用程序设置提供程序扩展的功能。</summary>
    </member>
    <member name="T:System.Configuration.IConfigurationSectionHandler">
      <summary>处理对特定的配置节的访问。</summary>
    </member>
    <member name="T:System.Configuration.IConfigurationSystem">
      <summary>提供标准配置的方法。</summary>
    </member>
    <member name="T:System.Configuration.IdnElement">
      <summary>提供的配置设置的国际域名 (IDN) 中的处理 <see cref="T:System.Uri" /> 类。</summary>
    </member>
    <member name="T:System.Configuration.IgnoreSectionHandler">
      <summary>提供了由未处理的配置节的旧的节处理程序定义 <see cref="N:System.Configuration" /> 类型。</summary>
    </member>
    <member name="T:System.Configuration.IPersistComponentSettings">
      <summary>定义控件或类的存储和检索应用程序设置的标准功能。</summary>
    </member>
    <member name="T:System.Configuration.IriParsingElement">
      <summary>提供的配置设置的国际资源标识符 (IRI) 中的处理 <see cref="T:System.Uri" /> 类。</summary>
    </member>
    <member name="T:System.Configuration.ISettingsProviderService">
      <summary>用于定义备用应用程序设置提供程序提供的接口。</summary>
    </member>
    <member name="T:System.Configuration.LocalFileSettingsProvider">
      <summary>提供了应用程序设置类的持久性。</summary>
    </member>
    <member name="T:System.Configuration.NameValueFileSectionHandler">
      <summary>提供对配置文件的访问。 此类型支持.NET Framework 配置基础结构，不宜在代码中直接使用。</summary>
    </member>
    <member name="T:System.Configuration.NameValueSectionHandler">
      <summary>提供配置节中的名称/值对配置信息。</summary>
    </member>
    <member name="T:System.Configuration.NoSettingsVersionUpgradeAttribute">
      <summary>指定设置提供程序应禁用在检测到应用程序升级时调用的任何逻辑。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SchemeSettingElement">
      <summary>表示一个元素在 <see cref="T:System.Configuration.SchemeSettingElementCollection" /> 类。</summary>
    </member>
    <member name="T:System.Configuration.SchemeSettingElementCollection">
      <summary>表示 <see cref="T:System.Configuration.SchemeSettingElement" /> 对象集合。</summary>
    </member>
    <member name="T:System.Configuration.SettingAttribute">
      <summary>表示用于设置属性相关联的设置信息的自定义设置属性。</summary>
    </member>
    <member name="T:System.Configuration.SettingChangingEventArgs">
      <summary>为 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Configuration.SettingChangingEventHandler">
      <summary>表示用来处理 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingChanging" /> 事件的方法。</summary>
      <param name="sender">事件源，通常应用程序设置包装器类派生自 <see cref="T:System.Configuration.ApplicationSettingsBase" /> 类。</param>
      <param name="e">一个 <see cref="T:System.Configuration.SettingChangingEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Configuration.SettingElement">
      <summary>表示用来更新配置中的元素的简化的配置元素。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingElementCollection">
      <summary>包含 <see cref="T:System.Configuration.SettingElement" /> 对象的集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingsAttributeDictionary">
      <summary>表示用来描述配置对象的键/值对的集合以及一个 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.SettingsBase">
      <summary>提供用来支持用户属性设置的基类。</summary>
    </member>
    <member name="T:System.Configuration.SettingsContext">
      <summary>提供在持久保存设置时，可以使用该提供程序的上下文信息。</summary>
    </member>
    <member name="T:System.Configuration.SettingsDescriptionAttribute">
      <summary>提供描述单独的配置属性的字符串。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingsGroupDescriptionAttribute">
      <summary>提供了一个字符串，描述应用程序设置属性组。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingsGroupNameAttribute">
      <summary>指定应用程序设置属性组的名称。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingsLoadedEventArgs">
      <summary>为 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Configuration.SettingsLoadedEventHandler">
      <summary>表示用来处理 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsLoaded" /> 事件的方法。</summary>
      <param name="sender">该事件，通常为设置类的源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Configuration.SettingsLoadedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Configuration.SettingsManageability">
      <summary>提供了值，以指示哪些服务应将提供对应用程序设置。</summary>
    </member>
    <member name="F:System.Configuration.SettingsManageability.Roaming">
      <summary>使应用程序设置存储在漫游用户配置文件中。 有关漫游用户配置文件的详细信息，请参阅 Isolated Storage and Roaming。</summary>
    </member>
    <member name="T:System.Configuration.SettingsManageabilityAttribute">
      <summary>指定特殊服务以查找应用程序设置属性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingsProperty">
      <summary>表示有关单个配置属性的元数据的类在内部使用。</summary>
    </member>
    <member name="T:System.Configuration.SettingsPropertyCollection">
      <summary>包含 <see cref="T:System.Configuration.SettingsProperty" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Configuration.SettingsPropertyIsReadOnlyException">
      <summary>提供一种异常的只读 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.SettingsPropertyNotFoundException">
      <summary>提供一种异常的 <see cref="T:System.Configuration.SettingsProperty" /> 找不到的对象。</summary>
    </member>
    <member name="T:System.Configuration.SettingsPropertyValue">
      <summary>包含一个设置属性，可以加载并存储的实例的值 <see cref="T:System.Configuration.SettingsBase" />。</summary>
    </member>
    <member name="T:System.Configuration.SettingsPropertyValueCollection">
      <summary>包含映射的设置属性值的集合 <see cref="T:System.Configuration.SettingsProperty" /> 对象添加到 <see cref="T:System.Configuration.SettingsPropertyValue" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.SettingsPropertyWrongTypeException">
      <summary>提供了无效的类型一起使用时将引发的异常 <see cref="T:System.Configuration.SettingsProperty" /> 对象。</summary>
    </member>
    <member name="T:System.Configuration.SettingsProvider">
      <summary>作为类的基类派生应用程序设置体系结构中的自定义设置提供程序。</summary>
    </member>
    <member name="T:System.Configuration.SettingsProviderAttribute">
      <summary>指定用于为当前应用程序设置类或属性提供存储的设置提供程序。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingsProviderCollection">
      <summary>表示应用程序设置提供程序的集合。</summary>
    </member>
    <member name="T:System.Configuration.SettingsSavingEventHandler">
      <summary>表示用来处理 <see cref="E:System.Configuration.ApplicationSettingsBase.SettingsSaving" /> 事件的方法。</summary>
      <param name="sender">该事件，通常是数据容器或数据绑定集合的源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="T:System.Configuration.SettingsSerializeAs">
      <summary>确定用于存储应用程序设置的序列化方案。</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.String">
      <summary>设置属性序列化为纯文本。</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.Xml">
      <summary>设置属性序列化为 XML 使用 XML 序列化。</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.Binary">
      <summary>设置属性是使用二进制对象序列化序列化。</summary>
    </member>
    <member name="F:System.Configuration.SettingsSerializeAs.ProviderSpecific">
      <summary>设置提供程序具有该属性或其类型的隐式知识并选取适当的序列化机制。 通常用于自定义序列化。</summary>
    </member>
    <member name="T:System.Configuration.SettingsSerializeAsAttribute">
      <summary>指定的设置提供程序应使用的序列化机制。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SettingValueElement">
      <summary>包含表示该设置的序列化的值的 XML。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.SingleTagSectionHandler">
      <summary>处理由.config 文件中的单个 XML 标记表示的配置节。</summary>
    </member>
    <member name="T:System.Configuration.SpecialSetting">
      <summary>指定应用程序设置属性的特殊设置类别。</summary>
    </member>
    <member name="F:System.Configuration.SpecialSetting.ConnectionString">
      <summary>配置属性表示一个连接字符串，通常用于数据存储区或网络资源。</summary>
    </member>
    <member name="F:System.Configuration.SpecialSetting.WebServiceUrl">
      <summary>配置属性表示统一资源定位器 (URL) 到 Web 服务。</summary>
    </member>
    <member name="T:System.Configuration.SpecialSettingAttribute">
      <summary>指示应用程序设置属性具有特殊意义。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.UriSection">
      <summary>表示配置文件中的 Uri 部分。</summary>
    </member>
    <member name="T:System.Configuration.UserScopedSettingAttribute">
      <summary>指定将应用程序设置组或属性包含应用程序的每个用户的非重复值。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Configuration.UserSettingsGroup">
      <summary>表示一的组相关的用户配置文件中的设置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Diagnostics.BooleanSwitch">
      <summary>提供简单的打开/关闭开关来控制调试和跟踪输出。</summary>
    </member>
    <member name="T:System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverageAttribute">
      <summary>指定应从代码覆盖率信息中排除属性化的代码。</summary>
    </member>
    <member name="T:System.Diagnostics.ConsoleTraceListener">
      <summary>将跟踪或调试输出到标准输出或标准错误流。</summary>
    </member>
    <member name="T:System.Diagnostics.CorrelationManager">
      <summary>关联是逻辑事务的一部分的跟踪。</summary>
    </member>
    <member name="T:System.Diagnostics.CounterCreationData">
      <summary>计数器类型、 名称和自定义计数器的帮助字符串定义。</summary>
    </member>
    <member name="T:System.Diagnostics.CounterCreationDataCollection">
      <summary>提供 <see cref="T:System.Diagnostics.CounterCreationData" /> 对象的强类型集合。</summary>
    </member>
    <member name="T:System.Diagnostics.CounterSample">
      <summary>定义一个包含性能计数器的原始数据结构。</summary>
    </member>
    <member name="T:System.Diagnostics.CounterSampleCalculator">
      <summary>用于解释性能计数器数据，提供了一套实用工具函数。</summary>
    </member>
    <member name="T:System.Diagnostics.DataReceivedEventArgs">
      <summary>提供有关 <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> 和 <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> 事件的数据。</summary>
    </member>
    <member name="T:System.Diagnostics.DataReceivedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Diagnostics.Process.OutputDataReceived" /> 事件或 <see cref="E:System.Diagnostics.Process.ErrorDataReceived" /> 事件 <see cref="T:System.Diagnostics.Process" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Diagnostics.DataReceivedEventArgs" />。</param>
    </member>
    <member name="T:System.Diagnostics.Debug">
      <summary>提供一组有助于调试代码的方法和属性。</summary>
    </member>
    <member name="T:System.Diagnostics.DefaultTraceListener">
      <summary>用于跟踪提供的默认输出方法和行为。</summary>
    </member>
    <member name="T:System.Diagnostics.DelimitedListTraceListener">
      <summary>将跟踪或调试输出到文本编写器，如流编写器，或写入流，如文件流。</summary>
    </member>
    <member name="T:System.Diagnostics.DiagnosticsConfigurationHandler">
      <summary>处理配置文件的诊断部分。</summary>
    </member>
    <member name="T:System.Diagnostics.EntryWrittenEventArgs">
      <summary>为 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Diagnostics.EntryWrittenEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> 事件 <see cref="T:System.Diagnostics.EventLog" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Diagnostics.EntryWrittenEventArgs" />。</param>
    </member>
    <member name="T:System.Diagnostics.EventInstance">
      <summary>表示一个事件日志条目的非特定语言的信息。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLog">
      <summary>提供与 Windows 事件日志的交互。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogEntry">
      <summary>在事件日志中封装单个记录。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogEntryCollection">
      <summary>定义 <see cref="T:System.Diagnostics.EventLogEntry" /> 实例的集合的大小和枚举器。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogEntryType">
      <summary>指定事件日志条目的事件类型。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Error">
      <summary>错误事件。 这表明用户应该知道; 有重大问题通常的功能或数据丢失。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Warning">
      <summary>警告事件。 这表示有问题不是马上就很明显，但，可能表示将来会导致问题的条件。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.Information">
      <summary>信息事件。 这指示重要、 成功的操作。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.SuccessAudit">
      <summary>成功审核事件。 它指示成功，则审核的访问尝试时将发生安全事件例如，成功登录。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogEntryType.FailureAudit">
      <summary>失败审核事件。 它指示当审核的访问尝试而失败; 时发生的安全事件例如，若要打开的文件的尝试失败。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermission">
      <summary>事件日志记录的控件代码访问权限。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAccess">
      <summary>定义使用的访问级别 <see cref="T:System.Diagnostics.EventLog" /> 权限类。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.None">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 不具有任何权限。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Write">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以写入到现有日志，并创建事件源和日志。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Administer">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以创建事件源、 读取现有的日志、 删除事件源或日志、 对项作出响应、 清除事件日志、 侦听事件，并访问所有事件日志的集合。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Browse">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取现有的日志。Note 此成员是现在已过时，使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /> 相反。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Instrument">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取或写入到现有日志，并创建事件源和日志。Note 此成员是现在已过时，使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /> 相反。</summary>
    </member>
    <member name="F:System.Diagnostics.EventLogPermissionAccess.Audit">
      <summary>
        <see cref="T:System.Diagnostics.EventLog" /> 可以读取现有的日志、 删除事件源或日志、 对项作出响应、 清除事件日志、 侦听事件，并访问所有事件日志的集合。Note 此成员是现在已过时，使用 <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /> 相反。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionAttribute">
      <summary>有关事件日志记录允许进行声明性权限检查。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntry">
      <summary>定义为设置的代码访问安全权限的最小单位 <see cref="T:System.Diagnostics.EventLog" />。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogPermissionEntryCollection">
      <summary>包含 <see cref="T:System.Diagnostics.EventLogPermissionEntry" /> 对象的强类型集合。</summary>
    </member>
    <member name="T:System.Diagnostics.EventLogTraceListener">
      <summary>提供将跟踪或调试输出到一个简单侦听器 <see cref="T:System.Diagnostics.EventLog" />。</summary>
    </member>
    <member name="T:System.Diagnostics.EventSourceCreationData">
      <summary>表示用于在本地计算机或远程计算机上创建事件日志源的配置设置。</summary>
    </member>
    <member name="T:System.Diagnostics.EventTypeFilter">
      <summary>指示是否应跟踪侦听器根据事件类型。</summary>
    </member>
    <member name="T:System.Diagnostics.FileVersionInfo">
      <summary>为磁盘上的物理文件提供版本信息。</summary>
    </member>
    <member name="T:System.Diagnostics.ICollectData">
      <summary>准备性能 DLL 系统加载时使用性能计数器的性能数据。</summary>
    </member>
    <member name="T:System.Diagnostics.InstanceData">
      <summary>包含性能计数器样本与关联的实例数据。</summary>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollection">
      <summary>提供 <see cref="T:System.Diagnostics.InstanceData" /> 对象的强类型集合。</summary>
    </member>
    <member name="T:System.Diagnostics.InstanceDataCollectionCollection">
      <summary>提供 <see cref="T:System.Diagnostics.InstanceDataCollection" /> 对象的强类型集合。</summary>
    </member>
    <member name="T:System.Diagnostics.MonitoringDescriptionAttribute">
      <summary>指定属性或事件的描述。</summary>
    </member>
    <member name="T:System.Diagnostics.OverflowAction">
      <summary>指定如何处理已达到其最大文件大小的事件日志中的条目。</summary>
    </member>
    <member name="F:System.Diagnostics.OverflowAction.DoNotOverwrite">
      <summary>指示当事件日志已满而丢弃新条目时，将保留现有条目。</summary>
    </member>
    <member name="F:System.Diagnostics.OverflowAction.OverwriteAsNeeded">
      <summary>指示每个新条目覆盖最旧条目，当事件日志已满。</summary>
    </member>
    <member name="F:System.Diagnostics.OverflowAction.OverwriteOlder">
      <summary>指示新事件覆盖早事件，不是由指定 <see cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" /> 事件日志已满时的属性值。 如果事件日志已满，没有较旧的事件超过指定值，将丢弃新事件 <see cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" /> 属性值。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounter">
      <summary>表示 Windows NT 性能计数器组件。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategory">
      <summary>表示一个性能对象，它定义性能计数器的类别。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterCategoryType">
      <summary>指示性能计数器类别是否可以具有多个实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.Unknown">
      <summary>性能计数器类别的实例功能是未知的。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.SingleInstance">
      <summary>性能计数器类别可有只能运行一个实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterCategoryType.MultiInstance">
      <summary>性能计数器类别可以有多个实例。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterInstanceLifetime">
      <summary>指定性能计数器实例的生存期。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Global">
      <summary>当没有计数器使用进程类别中删除的性能计数器实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterInstanceLifetime.Process">
      <summary>关闭该进程时，请删除性能计数器实例。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterManager">
      <summary>准备系统时使用性能计数器加载的 performance.dll 性能数据。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermission">
      <summary>允许代码访问权限控制 <see cref="T:System.Diagnostics.PerformanceCounter" />。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAccess">
      <summary>定义使用的访问级别 <see cref="T:System.Diagnostics.PerformanceCounter" /> 权限类。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Browse">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Instrument">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取和写入类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.None">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 不具有任何权限。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Read">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Write">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以编写类别。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterPermissionAccess.Administer">
      <summary>
        <see cref="T:System.Diagnostics.PerformanceCounter" /> 可以读取、 写入和创建类别。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionAttribute">
      <summary>允许进行声明性性能计数器权限检查。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntry">
      <summary>定义为设置的代码访问安全权限的最小单位 <see cref="T:System.Diagnostics.PerformanceCounter" />。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterPermissionEntryCollection">
      <summary>包含 <see cref="T:System.Diagnostics.PerformanceCounterPermissionEntry" /> 对象的强类型集合。</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceCounterType">
      <summary>指定用于计算的公式 <see cref="M:System.Diagnostics.PerformanceCounter.NextValue" /> 方法 <see cref="T:System.Diagnostics.PerformanceCounter" /> 实例。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems32">
      <summary>即时计数器，其中显示的最近一次观测的值。 例如，用于维护工作项或操作的简单计数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItems64">
      <summary>即时计数器，其中显示的最近一次观测的值。 例如，用于维护非常大量的项或操作的简单计数。 它等同于 NumberOfItems32 之处在于它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32">
      <summary>以十六进制格式显示的最近一次观测的值即时计数器。 例如，用于维护工作项或操作的简单计数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64">
      <summary>即时计数器，其中显示的最近一次观测的值。 例如，用于维护非常大量的项或操作的简单计数。 它等同于 NumberOfItemsHEX32 之处在于它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32">
      <summary>差异计数器，它显示在采样间隔的每一秒内完成的操作的平均数目。 此类型的计数器测量在计时周期的系统时钟时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64">
      <summary>差异计数器，它显示在采样间隔的每一秒内完成的操作的平均数目。 此类型的计数器测量在计时周期的系统时钟时间。 此计数器类型等同于 RateOfCountsPerSecond32 类型，但是它使用更大的字段来容纳较大的值来跟踪大容量大量的项或操作 / 秒，如字节传输速率。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32">
      <summary>平均计数器，专用于随着时间的推移监视队列对资源的平均长度。 它显示最后两个除以时间间隔的采样间隔期间观察到的队列长度之间的差异。 计数器的此类型通常用于跟踪的项进行排队或正在等待数。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64">
      <summary>平均计数器，随着时间的推移监视队列对资源的平均长度。 此类型的计数器显示最后两个采样间隔，除以时间间隔期间观察到的队列长度之间的差异。 此计数器类型等同于 CountPerTimeInterval32 之处在于它使用更大的字段来容纳较大的值。 计数器的此类型通常用于跟踪大型或特大型大量排队的项或正在等待。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawFraction">
      <summary>即时百分比计数器它显示为其设置为百分比形式表示的子集的比率。 例如，它将比较中使用的磁盘上的字节总数为磁盘上的字节数。 这种类型的计数器显示当前百分比仅，不是一段时间的平均值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.RawBase">
      <summary>基本的计数器，它将存储一个计数器，它表示常规算术分数的分母。 检查此值是否大于零，然后再将其作为分母中使用 RawFraction 值计算。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageTimer32">
      <summary>平均计数器测量完成所需，一般情况下，进程或操作的时间。 此种类型的计数器数量的进程或在此期间完成的操作显示在采样间隔的总已用时间的比率。 此种类型的计数器来测量以刻度为单位的系统时钟的时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageBase">
      <summary>如在时间或计数平均值计算中使用的基本计数器 AverageTimer32 和 AverageCount64。 将存储分母用于计算计数器与存在"时间每个操作"或"每个操作的计数"。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.AverageCount64">
      <summary>计数器显示多少项处理，一般情况下，在操作期间的平均数据。 此类型的计数器显示的比率，即处理的项与完成的操作数目。 通过将最后一个时间间隔内完成的操作的数目为最后一个时间间隔内处理的项的数目进行比较计算该比率。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleFraction">
      <summary>百分比计数器，它显示最后两个采样间隔期间命中与所有操作的平均比率。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleCounter">
      <summary>平均计数器来显示一秒内完成的操作的平均数目。 当这种类型的计数器进行数据抽样时，每个采样中断返回一个或零。 计数器数据是一种是采样数。 它测量单位的计时周期的系统性能计时器的时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.SampleBase">
      <summary>存储的采样数的基本计数器获取中断，并用作样本分数中的分母。 样本分数是为 1 的样本数 (或 true) 采用中断。 检查此值是否大于零，然后再将其用作中一次计算分母 SampleFraction。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimer">
      <summary>显示组件处于活动状态以占总的采样时间的平均时间百分比计数器。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse">
      <summary>百分比计数器显示采样间隔期间观察到的活动时间的平均百分比。 通过监视服务处于非活动状态的时间的百分比，然后该值从 100%中减去计算这些计数器的值。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100Ns">
      <summary>在采样间隔的总已用时间的百分比形式显示组件的活动时间百分比计数器。 它测量以 100 纳秒 (ns) 为单位的时间。 此种类型的计数器用于一次度量的一个组件的活动。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse">
      <summary>百分比计数器，它显示在采样间隔期间观察到的活动时间的平均百分比。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.ElapsedTime">
      <summary>差异计时器，它显示的组件或进程启动时计算此值时的时间之间的总时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer">
      <summary>显示在采样间隔的总时间的百分比的一个或多个组件的活动时间百分比计数器。 因为分子记录同时操作的组件的活动时间，因此最终的百分比可以超过 100%。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse">
      <summary>在采样间隔的总时间的百分比形式显示一个或多个组件的活动时间百分比计数器。 通过测量组件处于非活动状态的时间和受监视的对象数减去从 100%的结果，它派生的活动时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns">
      <summary>在采样间隔的总时间的百分比形式显示一个或多个组件的活动时间百分比计数器。 它测量以 100 纳秒为单位 (ns) 为单位的时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse">
      <summary>在采样间隔的总时间的百分比形式显示一个或多个组件的活动时间百分比计数器。 这种类型的计数器测量以 100 纳秒为单位 (ns) 为单位的时间。 它们通过测量组件处于非活动状态的时间，然后将结果从受监视的对象数乘以 100%中减去推算出活动的时间。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterMultiBase">
      <summary>基本的计数器，该值指示项采样的数目。 它可作为在计算中分母以得出平均值取样的多个计时时间时各项类似项。 与使用 CounterMultiTimer, ，CounterMultiTimerInverse, ，CounterMultiTimer100Ns, ，和 CounterMultiTimer100NsInverse。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta32">
      <summary>差异计数器，它显示最近的两个示例时间间隔测量属性的更改。</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceCounterType.CounterDelta64">
      <summary>差异计数器，它显示最近的两个示例时间间隔测量属性的更改。 它等同于 CounterDelta32 计数器类型，但它使用更大的字段来容纳较大的值。</summary>
    </member>
    <member name="T:System.Diagnostics.Process">
      <summary>提供对本地和远程进程的访问权限并使你能够启动和停止本地系统进程。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessModule">
      <summary>表示到特定的进程中加载的.dll 或.exe 文件。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessModuleCollection">
      <summary>提供 <see cref="T:System.Diagnostics.ProcessModule" /> 对象的强类型集合。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessPriorityClass">
      <summary>指示系统将与进程关联的优先级。 此值与进程的每个线程的优先级值一起来确定每个线程的基本优先级别。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Normal">
      <summary>指定进程没有特殊的安排需求。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.Idle">
      <summary>指定此进程的线程只能在系统空闲时运行，如屏幕保护程序。 更高优先级类中运行的任何进程的线程都优先于此进程的线程。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.High">
      <summary>指定进程执行必须立即执行的时间关键任务，如 Task List 对话框，不管操作系统的负荷如何，用户调用该对话框后均必须迅速响应。 该进程的线程优先于普通或空闲优先级类进程的线程。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.RealTime">
      <summary>指定进程拥有可能的最高优先级。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.BelowNormal">
      <summary>指定进程的优先级在 Idle 之上，但在 Normal 之下。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessPriorityClass.AboveNormal">
      <summary>指定进程的优先级在 Normal 之上，但在 <see cref="F:System.Diagnostics.ProcessPriorityClass.High" /> 之下。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessStartInfo">
      <summary>指定启动进程时使用的一组值。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessThread">
      <summary>表示操作系统进程线程。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessThreadCollection">
      <summary>提供 <see cref="T:System.Diagnostics.ProcessThread" /> 对象的强类型集合。</summary>
    </member>
    <member name="T:System.Diagnostics.ProcessWindowStyle">
      <summary>指定一个新的窗口应如何显示在系统启动进程时。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Normal">
      <summary>普通、 可见的窗口样式。 系统会显示一个带有窗口 Normal 在屏幕上，默认位置中的样式。 如果窗口可见时，用户可以提供输入到窗口并查看该窗口的输出。 通常情况下，应用程序可能会初始化一个新窗口以 Hidden 样式时自定义窗口的外观，然后使窗口样式 Normal。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Hidden">
      <summary>隐藏的窗口样式。 窗口可以是可见还是隐藏。 系统会通过不绘制来显示隐藏的窗口。 如果一个窗口处于隐藏状态，将有效地将其禁用。 隐藏的窗口可以处理消息从系统或其他窗口，但它无法处理来自用户的输入或显示输出。 通常情况下，应用程序可以保留一个新的窗口隐藏时自定义窗口的外观并再使窗口样式成为 Normal。 若要使用 <see cref="F:System.Diagnostics.ProcessWindowStyle.Hidden" />, 、 <see cref="P:System.Diagnostics.ProcessStartInfo.UseShellExecute" /> 属性必须为 false。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Minimized">
      <summary>最小化的窗口样式。 默认情况下，系统将最小化的窗口缩小为其任务栏按钮的大小，并将最小化的窗口移到任务栏。</summary>
    </member>
    <member name="F:System.Diagnostics.ProcessWindowStyle.Maximized">
      <summary>最大化的窗口样式。 默认情况下，系统会放大最大化的窗口，使其填入屏幕或者，如果子窗口中，父窗口工作区。 如果窗口具有标题栏，系统会自动将其移动到屏幕的顶部或父窗口工作区的顶部。 此外，系统禁用该窗口的大小调整边框和标题栏的窗口定位功能，以便用户不能将窗口移动通过拖动标题栏。</summary>
    </member>
    <member name="T:System.Diagnostics.SourceFilter">
      <summary>指示一个侦听器是否应跟踪基于源的跟踪消息。</summary>
    </member>
    <member name="T:System.Diagnostics.SourceLevels">
      <summary>指定按源开关和事件类型筛选器筛选的跟踪消息的级别。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Off">
      <summary>不允许通过任何事件。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Critical">
      <summary>仅允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Error">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" /> 和 <see cref="F:System.Diagnostics.TraceEventType.Error" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Warning">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" />, ，<see cref="F:System.Diagnostics.TraceEventType.Error" />, ，和 <see cref="F:System.Diagnostics.TraceEventType.Warning" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Information">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" />, ，<see cref="F:System.Diagnostics.TraceEventType.Error" />, ，<see cref="F:System.Diagnostics.TraceEventType.Warning" />, ，和 <see cref="F:System.Diagnostics.TraceEventType.Information" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.Verbose">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Critical" />, ，<see cref="F:System.Diagnostics.TraceEventType.Error" />, ，<see cref="F:System.Diagnostics.TraceEventType.Warning" />, ，<see cref="F:System.Diagnostics.TraceEventType.Information" />, ，和 <see cref="F:System.Diagnostics.TraceEventType.Verbose" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.ActivityTracing">
      <summary>允许 <see cref="F:System.Diagnostics.TraceEventType.Stop" />, ，<see cref="F:System.Diagnostics.TraceEventType.Start" />, ，<see cref="F:System.Diagnostics.TraceEventType.Suspend" />, ，<see cref="F:System.Diagnostics.TraceEventType.Transfer" />, ，和 <see cref="F:System.Diagnostics.TraceEventType.Resume" /> 事件通过。</summary>
    </member>
    <member name="F:System.Diagnostics.SourceLevels.All">
      <summary>允许通过的所有事件。</summary>
    </member>
    <member name="T:System.Diagnostics.SourceSwitch">
      <summary>无需重新编译您的代码提供多级开关，用于控制跟踪和调试输出。</summary>
    </member>
    <member name="T:System.Diagnostics.Stopwatch">
      <summary>提供一组方法和属性，可用于准确地测量运行时间。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
    </member>
    <member name="T:System.Diagnostics.Switch">
      <summary>提供一个抽象基类，若要创建新的调试和跟踪开关。</summary>
    </member>
    <member name="T:System.Diagnostics.SwitchAttribute">
      <summary>标识程序集、 类或成员中使用的开关。</summary>
    </member>
    <member name="T:System.Diagnostics.SwitchLevelAttribute">
      <summary>标识开关的级别类型。</summary>
    </member>
    <member name="T:System.Diagnostics.TextWriterTraceListener">
      <summary>将跟踪或调试输出到 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.IO.Stream" />, ，如 <see cref="T:System.IO.FileStream" />。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadPriorityLevel">
      <summary>指定线程的优先级。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Idle">
      <summary>指定空闲优先级。 这是最低的可能的优先级值的所有线程的关联的值无关 <see cref="T:System.Diagnostics.ProcessPriorityClass" />。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Lowest">
      <summary>指定最低优先级。 这是两个步骤关联的普通优先级低 <see cref="T:System.Diagnostics.ProcessPriorityClass" />。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.BelowNormal">
      <summary>指定关联的普通优先级低的一个步骤 <see cref="T:System.Diagnostics.ProcessPriorityClass" />。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Normal">
      <summary>指定关联的正常优先级 <see cref="T:System.Diagnostics.ProcessPriorityClass" />。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.AboveNormal">
      <summary>指定关联的普通优先级高的一个步骤 <see cref="T:System.Diagnostics.ProcessPriorityClass" />。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.Highest">
      <summary>指定最高优先级。 这是关联的普通优先级高的两个步骤 <see cref="T:System.Diagnostics.ProcessPriorityClass" />。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadPriorityLevel.TimeCritical">
      <summary>指定严格要求时间的优先级。 这是独立于关联的值的所有线程的最高优先级 <see cref="T:System.Diagnostics.ProcessPriorityClass" />。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadState">
      <summary>指定的线程的当前执行状态。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Initialized">
      <summary>此状态指示该线程已初始化但尚未开始。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Ready">
      <summary>此状态指示该线程正在等待使用处理器，因为没有处理器是免费的。 该线程准备就绪，可在下一个可用处理器上运行。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Running">
      <summary>此状态指示在线程当前正在使用处理器。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Standby">
      <summary>此状态指示该线程即将使用的处理器。 只有一个线程可以在此状态下一次。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Terminated">
      <summary>此状态指示该线程执行完毕并已退出。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Wait">
      <summary>此状态指示该线程未准备好使用处理器，因为它正在等待外围操作完成或等待资源变为可用。 当该线程尚未准备时，将被重新计划。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Transition">
      <summary>在执行之前，此状态指示该线程正在等待处理器，处理器之外的资源。 例如，它可能会等待其执行堆栈以便从磁盘中分页。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadState.Unknown">
      <summary>线程的状态是未知的。</summary>
    </member>
    <member name="T:System.Diagnostics.ThreadWaitReason">
      <summary>指定一个线程正在等待的原因。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Executive">
      <summary>该线程正在等待计划程序。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.FreePage">
      <summary>该线程正在等待的可用虚拟内存页面。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageIn">
      <summary>该线程正在等待到达在内存中的虚拟内存页面。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.SystemAllocation">
      <summary>该线程正在等待系统分配。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.ExecutionDelay">
      <summary>线程执行将被延迟。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Suspended">
      <summary>挂起线程执行。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.UserRequest">
      <summary>该线程正在等待用户请求。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairHigh">
      <summary>该线程正在等待事件对高。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.EventPairLow">
      <summary>该线程正在等待事件对低。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReceive">
      <summary>该线程正在等待本地过程调用到达。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.LpcReply">
      <summary>该线程正在等待回复到达本地过程调用。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.VirtualMemory">
      <summary>该线程正在等待系统分配的虚拟内存。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.PageOut">
      <summary>线程正在等待要写入的虚拟内存页面写入磁盘。</summary>
    </member>
    <member name="F:System.Diagnostics.ThreadWaitReason.Unknown">
      <summary>线程正在等待原因不明。</summary>
    </member>
    <member name="T:System.Diagnostics.Trace">
      <summary>提供了一组方法和属性，帮助您跟踪您的代码的执行。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceEventCache">
      <summary>提供特定于线程和进程的跟踪事件数据。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceEventType">
      <summary>标识引发跟踪的事件的类型。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Critical">
      <summary>致命错误或应用程序崩溃。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Error">
      <summary>可恢复的错误。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Warning">
      <summary>非严重问题。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Information">
      <summary>信息性消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Verbose">
      <summary>调试跟踪。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Start">
      <summary>开始某项逻辑操作。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Stop">
      <summary>停止某项逻辑操作。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Suspend">
      <summary>某项逻辑操作挂起。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Resume">
      <summary>继续某项逻辑操作。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceEventType.Transfer">
      <summary>更改相关标识。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceFilter">
      <summary>为跟踪筛选器实现提供基类。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceLevel">
      <summary>指定何种消息到输出 <see cref="T:System.Diagnostics.Debug" />, ，<see cref="T:System.Diagnostics.Trace" /> 和 <see cref="T:System.Diagnostics.TraceSwitch" /> 类。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Off">
      <summary>不输出跟踪和调试消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Error">
      <summary>输出错误处理消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Warning">
      <summary>输出警告和错误处理消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Info">
      <summary>输出信息性消息、 警告和错误处理消息。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLevel.Verbose">
      <summary>输出所有调试和跟踪消息。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceListener">
      <summary>为监视跟踪和调试输出的侦听器提供 abstract 基类。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceListenerCollection">
      <summary>提供 <see cref="T:System.Diagnostics.TraceListener" /> 对象的线程安全列表。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceOptions">
      <summary>指定要写入跟踪输出的跟踪数据选项。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.None">
      <summary>不写入任何元素。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.LogicalOperationStack">
      <summary>编写逻辑操作堆栈，这由返回的值来表示 <see cref="P:System.Diagnostics.CorrelationManager.LogicalOperationStack" /> 属性。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.DateTime">
      <summary>编写的日期和时间。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.Timestamp">
      <summary>写入的时间戳，这由返回的值来表示 <see cref="M:System.Diagnostics.Stopwatch.GetTimestamp" /> 方法。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.ProcessId">
      <summary>写入的进程标识，这由返回的值来表示 <see cref="P:System.Diagnostics.Process.Id" /> 属性。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.ThreadId">
      <summary>编写线程标识，这由返回的值来表示 <see cref="P:System.Threading.Thread.ManagedThreadId" /> 当前线程的属性。</summary>
    </member>
    <member name="F:System.Diagnostics.TraceOptions.Callstack">
      <summary>编写调用堆栈，这由返回的值来表示 <see cref="P:System.Environment.StackTrace" /> 属性。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceSource">
      <summary>提供一组方法和属性，利用这些方法和属性，应用程序可以跟踪代码的执行并将跟踪消息和它们的源关联起来。</summary>
    </member>
    <member name="T:System.Diagnostics.TraceSwitch">
      <summary>无需重新编译您的代码提供多级开关，用于控制跟踪和调试输出。</summary>
    </member>
    <member name="T:System.Diagnostics.XmlWriterTraceListener">
      <summary>将跟踪或调试输出到 XML 编码数据作为定向 <see cref="T:System.IO.TextWriter" /> 或 <see cref="T:System.IO.Stream" />, ，如 <see cref="T:System.IO.FileStream" />。</summary>
    </member>
    <member name="T:System.FileStyleUriParser">
      <summary>基于文件方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.FtpStyleUriParser">
      <summary>基于文件传输协议 (FTP) 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.GenericUriParser">
      <summary>分层 URI 可自定义分析器。</summary>
    </member>
    <member name="T:System.GenericUriParserOptions">
      <summary>指定用于选项 <see cref="T:System.UriParser" />。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Default">
      <summary>分析器 ︰</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.GenericAuthority">
      <summary>此分析器允许基于注册表的颁发机构。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.AllowEmptyAuthority">
      <summary>此分析器允许没有证书颁发机构 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoUserInfo">
      <summary>此方案不定义用户信息部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoPort">
      <summary>此方案不定义一个端口。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoQuery">
      <summary>此方案不定义查询部件。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.NoFragment">
      <summary>此方案未定义的片段部分。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontConvertPathBackslashes">
      <summary>分析器不为正斜杠转换反斜杠。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontCompressPath">
      <summary>分析器不规范化 URI。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes">
      <summary>分析器不会恢复原义路径点、 正斜杠或反斜杠。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.Idn">
      <summary>分析器支持国际化域名 (IDN) 分析 (IDN) 的主机名。 是否使用 IDN 指定由配置值。 请参阅有关详细信息备注。</summary>
    </member>
    <member name="F:System.GenericUriParserOptions.IriParsing">
      <summary>分析器支持 RFC 3987 中指定国际资源标识符 (IRI) 分析规则。 由配置值指定是否使用 IRI。 请参阅有关详细信息备注。</summary>
    </member>
    <member name="T:System.GopherStyleUriParser">
      <summary>基于 Gopher 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.HttpStyleUriParser">
      <summary>基于 HTTP 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.IO.Compression.CompressionLevel">
      <summary>指定用来指示压缩操作是强调速度还是强调压缩大小的值。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionLevel.Optimal">
      <summary>压缩操作应以最佳方式压缩，即使该操作采用较长时间才能完成。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionLevel.Fastest">
      <summary>即使生成的文件将不会以最佳方式压缩，压缩操作应尽可能快地完成。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionLevel.NoCompression">
      <summary>应该对文件执行不进行压缩。</summary>
    </member>
    <member name="T:System.IO.Compression.CompressionMode">
      <summary> 指定对基础流进行压缩还是解压缩。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Decompress">
      <summary>解压缩基础流。</summary>
    </member>
    <member name="F:System.IO.Compression.CompressionMode.Compress">
      <summary>将压缩的基础流。</summary>
    </member>
    <member name="T:System.IO.Compression.DeflateStream">
      <summary>提供使用 Deflate 算法压缩和解压缩流的方法和属性。</summary>
    </member>
    <member name="T:System.IO.Compression.GZipStream">
      <summary>提供用于压缩和解压缩流的方法和属性。</summary>
    </member>
    <member name="T:System.IO.ErrorEventArgs">
      <summary>为 <see cref="E:System.IO.FileSystemWatcher.Error" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IO.ErrorEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.IO.FileSystemWatcher.Error" /> 事件 <see cref="T:System.IO.FileSystemWatcher" /> 对象。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.ErrorEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.IO.FileSystemEventArgs">
      <summary>为目录事件提供数据 ︰ <see cref="E:System.IO.FileSystemWatcher.Changed" />, ，<see cref="E:System.IO.FileSystemWatcher.Created" />, ，<see cref="E:System.IO.FileSystemWatcher.Deleted" />。</summary>
    </member>
    <member name="T:System.IO.FileSystemEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.IO.FileSystemWatcher.Changed" />, ，<see cref="E:System.IO.FileSystemWatcher.Created" />, ，或 <see cref="E:System.IO.FileSystemWatcher.Deleted" /> 事件 <see cref="T:System.IO.FileSystemWatcher" /> 类。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.FileSystemEventArgs" />。</param>
    </member>
    <member name="T:System.IO.FileSystemWatcher">
      <summary>侦听文件系统更改通知，并在目录或目录中的文件发生更改时引发事件。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
    </member>
    <member name="T:System.IO.InternalBufferOverflowException">
      <summary>内部缓冲区溢出时引发的异常。</summary>
    </member>
    <member name="T:System.IO.InvalidDataException">
      <summary>数据流格式无效时引发的异常。</summary>
    </member>
    <member name="T:System.IO.IODescriptionAttribute">
      <summary>设置在引用事件、 扩展程序或属性时，可视化设计器可以显示的说明。</summary>
    </member>
    <member name="T:System.IO.NotifyFilters">
      <summary>指定要监视的文件或文件夹中更改。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.FileName">
      <summary>文件的名称。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.DirectoryName">
      <summary>目录的名称。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Attributes">
      <summary>文件或文件夹的属性。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Size">
      <summary>文件或文件夹的大小。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.LastWrite">
      <summary>文件或文件夹上一次有任何内容写入到该日期。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.LastAccess">
      <summary>上次打开的文件或文件夹的日期。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.CreationTime">
      <summary>创建文件或文件夹的时间。</summary>
    </member>
    <member name="F:System.IO.NotifyFilters.Security">
      <summary>文件或文件夹的安全设置。</summary>
    </member>
    <member name="T:System.IO.Ports.Handshake">
      <summary>指定在建立串行端口的通信使用的控制协议 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.None">
      <summary>无法控制用于在握手。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.XOnXOff">
      <summary>使用 XON/XOFF 软件控制协议。 XOFF 控件发送，以停止数据传输。 XON 控制发送以继续传输。 这些软件控制而不是请求发送 (RTS) 使用，并清除硬件控件的发送 (CTS)。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.RequestToSend">
      <summary>使用请求发送 (RTS) 硬件流控制。 RTS 通知可用于传输数据。 RTS 行输入的缓冲区变满之后，如果将设置为 false。 RTS 行会将设置为 true 更多的空间变得可用时输入缓冲区中。</summary>
    </member>
    <member name="F:System.IO.Ports.Handshake.RequestToSendXOnXOff">
      <summary>使用请求-发送 (RTS) 硬件控制和 XON/XOFF 软件控制。</summary>
    </member>
    <member name="T:System.IO.Ports.Parity">
      <summary>指定的奇偶校验位 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.None">
      <summary>没有奇偶校验检查时发生。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Odd">
      <summary>设置奇偶校验位，以便设置了位数为奇数。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Even">
      <summary>设置奇偶校验位，以便设置了位的计数为偶数。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Mark">
      <summary>将奇偶校验位设置为 1。</summary>
    </member>
    <member name="F:System.IO.Ports.Parity.Space">
      <summary>将奇偶校验位设置为 0。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialData">
      <summary>指定的串行端口接收到的字符类型 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialData.Chars">
      <summary>接收和输入缓冲区中放置一个字符。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialData.Eof">
      <summary>文件尾字符已收到并放入输入缓冲区。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialDataReceivedEventArgs">
      <summary>为 <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialDataReceivedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> 事件 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
      <param name="sender">发件人的事件，即 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.Ports.SerialDataReceivedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.IO.Ports.SerialError">
      <summary>指定出现的错误 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.TXFull">
      <summary>应用程序尝试传输一个字符，但输出缓冲区已满。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.RXOver">
      <summary>输入的缓冲区溢出。 输入缓冲区中没有空间不足或之后接收到的文件尾 (EOF) 字符。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.Overrun">
      <summary>发生字符缓冲区溢出。 下一个字符会丢失。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.RXParity">
      <summary>硬件中检测到奇偶校验错误。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialError.Frame">
      <summary>硬件检测到了分帧错误。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialErrorReceivedEventArgs">
      <summary>准备数据 <see cref="E:System.IO.Ports.SerialPort.ErrorReceived" /> 事件。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialErrorReceivedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.IO.Ports.SerialPort.ErrorReceived" /> 事件 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
      <param name="sender">发件人的事件，即 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.Ports.SerialErrorReceivedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.IO.Ports.SerialPinChange">
      <summary>指定在发生的更改类型 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.CtsChanged">
      <summary>明文形式传送到发送 (CTS) 信号更改状态。 该信号用于指示是否可以通过串行端口发送数据。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.DsrChanged">
      <summary>数据设置就绪 (DSR) 信号更改状态。 该信号用于指示是否已准备好运行的设备上的串行端口。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.CDChanged">
      <summary>检测到载波 (CD) 信号更改状态。 该信号用于指示是否调制解调器连接到正常工作的电话线和检测到数据载波信号。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.Ring">
      <summary>检测到环指示器。</summary>
    </member>
    <member name="F:System.IO.Ports.SerialPinChange.Break">
      <summary>在输入检测到一个分行符。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialPinChangedEventArgs">
      <summary>为 <see cref="E:System.IO.Ports.SerialPort.PinChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IO.Ports.SerialPinChangedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.IO.Ports.SerialPort.PinChanged" /> 事件 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
      <param name="sender">事件的来源，这是 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.Ports.SerialPinChangedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.IO.Ports.SerialPort">
      <summary>表示串行端口资源。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
    </member>
    <member name="T:System.IO.Ports.StopBits">
      <summary>指定停止上使用的比特数 <see cref="T:System.IO.Ports.SerialPort" /> 对象。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.None">
      <summary>使用没有停止位。 不支持此值 <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 属性。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.One">
      <summary>使用一个停止位。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.Two">
      <summary>使用两个停止位。</summary>
    </member>
    <member name="F:System.IO.Ports.StopBits.OnePointFive">
      <summary>使用 1.5 停止位。</summary>
    </member>
    <member name="T:System.IO.RenamedEventArgs">
      <summary>为 <see cref="E:System.IO.FileSystemWatcher.Renamed" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.IO.RenamedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.IO.FileSystemWatcher.Renamed" /> 事件 <see cref="T:System.IO.FileSystemWatcher" /> 类。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.IO.RenamedEventArgs" />。</param>
    </member>
    <member name="T:System.IO.WaitForChangedResult">
      <summary>包含有关所发生更改的信息。</summary>
    </member>
    <member name="T:System.IO.WatcherChangeTypes">
      <summary>对文件或目录可能发生的更改。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Created">
      <summary>文件或文件夹的创建。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Deleted">
      <summary>删除文件或文件夹。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Changed">
      <summary>文件或文件夹的更改。 更改类型包括 ︰ 将更改为大小、 属性、 安全设置、 最后一次写入和上次访问时间。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.Renamed">
      <summary>重命名文件或文件夹。</summary>
    </member>
    <member name="F:System.IO.WatcherChangeTypes.All">
      <summary>创建、 删除、 更改或重命名文件或文件夹。</summary>
    </member>
    <member name="T:System.LdapStyleUriParser">
      <summary>基于轻型目录访问协议 (LDAP) 方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.Media.SoundPlayer">
      <summary>.Wav 文件中的声音控制播放。</summary>
    </member>
    <member name="T:System.Media.SystemSound">
      <summary>表示一种系统声音类型。</summary>
    </member>
    <member name="T:System.Media.SystemSounds">
      <summary>检索与 Windows 操作系统的系统声音事件类型的一组相关的声音。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.AuthenticationManager">
      <summary>管理客户端身份验证过程中调用的身份验证模块。</summary>
    </member>
    <member name="T:System.Net.AuthenticationSchemes">
      <summary>指定身份验证的协议。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.None">
      <summary>允许不带身份验证。 客户端请求 <see cref="T:System.Net.HttpListener" /> 设置此标志的对象始终将收到 403 禁止访问状态。 资源应永远不会提供给客户端时，请使用此标志。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Digest">
      <summary>指定摘要式身份验证。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Negotiate">
      <summary>客户端确定的身份验证方案和协商。 如果客户端和服务器均支持 Kerberos，则使用 Kerberos；否则使用 NTLM。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Ntlm">
      <summary>指定 NTLM 身份验证。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Basic">
      <summary>指定基本身份验证。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.Anonymous">
      <summary>指定匿名身份验证。</summary>
    </member>
    <member name="F:System.Net.AuthenticationSchemes.IntegratedWindowsAuthentication">
      <summary>指定 Windows 身份验证。</summary>
    </member>
    <member name="T:System.Net.AuthenticationSchemeSelector">
      <summary>选择的身份验证方案 <see cref="T:System.Net.HttpListener" /> 实例。</summary>
      <param name="httpRequest">
        <see cref="T:System.Net.HttpListenerRequest" /> 要为其选择的身份验证方案的实例。</param>
      <returns>其中一个 <see cref="T:System.Net.AuthenticationSchemes" /> 值，该值指示要为指定的客户端请求使用的身份验证方法。</returns>
    </member>
    <member name="T:System.Net.Authorization">
      <summary>包含 Internet 服务器的身份验证消息。</summary>
    </member>
    <member name="T:System.Net.BindIPEndPoint">
      <summary>表示指定的本地 Internet 协议地址和端口号的方法 <see cref="T:System.Net.ServicePoint" />。</summary>
      <param name="servicePoint">
        <see cref="T:System.Net.ServicePoint" /> 与要创建的连接关联。</param>
      <param name="remoteEndPoint">远程 <see cref="T:System.Net.IPEndPoint" /> 指定远程主机。</param>
      <param name="retryCount">此委托曾为指定的连接的次数。</param>
      <returns>本地 <see cref="T:System.Net.IPEndPoint" /> 到 <see cref="T:System.Net.ServicePoint" /> 绑定。</returns>
      <exception cref="T:System.OverflowException">
        <paramref name="retryCount" /> 等于 <see cref="F:System.Int32.MaxValue" /></exception>
    </member>
    <member name="T:System.Net.Cache.HttpCacheAgeControl">
      <summary>指定时间值，用于控制资源使用获取的缓存行为的含义 <see cref="T:System.Net.HttpWebRequest" /> 对象。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.None">
      <summary>仅限内部使用。 框架将引发 <see cref="T:System.ArgumentException" /> 如果尝试使用此成员。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MinFresh">
      <summary>如果在过期前剩余的时间大于或等于此值与指定的时间，内容可以从缓存中取出。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAge">
      <summary>超过此值与指定的期限之前，内容可以从缓存中取出。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxStale">
      <summary>它已过期，直到用此值指定的时间结束后，内容可以从缓存中取出。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMinFresh">
      <summary>
        <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge" /> 和 <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MinFresh" />。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpCacheAgeControl.MaxAgeAndMaxStale">
      <summary>
        <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxAge" /> 和 <see cref="P:System.Net.Cache.HttpRequestCachePolicy.MaxStale" />。</summary>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCacheLevel">
      <summary>指定获取使用超文本传输协议 (HTTP) 的资源的缓存行为。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Default">
      <summary>通过使用该资源的缓存的副本或将对资源的请求发送到服务器可满足对资源的请求。 由当前的缓存策略和缓存中内容的生存期确定要执行的操作。 这是大多数应用程序应使用的缓存级别。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.BypassCache">
      <summary>使用的服务器满足请求。 无项是从缓存中取出、 添加到缓存，或从客户端和服务器之间的缓存中移除。 无项是从缓存中取出、 添加到缓存，或从客户端和服务器之间的缓存中移除。 这是随.NET Framework 一起提供的计算机配置文件中指定的默认缓存行为。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOnly">
      <summary>满足使用本地缓存的资源; 的请求不发送对不在缓存中的项的请求。 如果指定此缓存策略级别， <see cref="T:System.Net.WebException" /> 如果项不是客户端缓存中将引发异常。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheIfAvailable">
      <summary>如果该资源将可用，则，满足对从缓存资源的请求否则，将对资源的请求发送到服务器。 如果客户端和服务器之间的任何缓存中提供了请求的项，可能通过中间缓存来满足请求。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Revalidate">
      <summary>将在缓存中的资源与服务器上的副本的副本进行比较。 如果较新服务器上的副本，它可用于满足该请求，并替代在缓存中的副本。 如果缓存中的副本服务器复制相同，将使用缓存的副本。 在 HTTP 缓存协议中，这被实现使用条件请求。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Reload">
      <summary>使用的服务器满足请求。 可以将响应保存在缓存中。 在 HTTP 缓存协议中，这实现使用无缓存缓存控制指令和无缓存 Pragma 标头。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.NoCacheNoStore">
      <summary>永远不会从缓存中使用的资源满足请求并不会缓存资源。 如果在本地缓存中存在该资源，则会删除它。 此策略级别指示中间缓存他们应删除该资源。 在 HTTP 缓存协议中，这被实现使用无缓存缓存控制指令。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.CacheOrNextCacheOnly">
      <summary>满足对从本地计算机的缓存或本地网络上的远程缓存资源的请求。 如果不能满足该请求， <see cref="T:System.Net.WebException" /> 则会引发异常。 在 HTTP 缓存协议中，这实现使用 only-if-cached 缓存控制指令。</summary>
    </member>
    <member name="F:System.Net.Cache.HttpRequestCacheLevel.Refresh">
      <summary>通过使用本地缓存以外的服务器或缓存满足请求。 可以通过中间缓存来满足请求之前，该缓存必须重新验证它与服务器的缓存的项。 在 HTTP 缓存协议中，这使用实现的最长时间 = 0 的缓存控制指令和无缓存 Pragma 标头。</summary>
    </member>
    <member name="T:System.Net.Cache.HttpRequestCachePolicy">
      <summary>定义通过使用获取的资源的应用程序的缓存要求 <see cref="T:System.Net.HttpWebRequest" /> 对象。</summary>
    </member>
    <member name="T:System.Net.Cache.RequestCacheLevel">
      <summary>指定获取使用的资源的缓存行为 <see cref="T:System.Net.WebRequest" /> 及其派生类。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Default">
      <summary>通过使用该资源的缓存的副本或将对资源的请求发送到服务器可满足对资源的请求。 由当前的缓存策略和缓存中内容的生存期确定要执行的操作。 这是大多数应用程序应使用的缓存级别。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.BypassCache">
      <summary>使用的服务器满足请求。 无项是从缓存中取出、 添加到缓存，或从客户端和服务器之间的缓存中移除。 这是随.NET Framework 一起提供的计算机配置文件中指定的默认缓存行为。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheOnly">
      <summary>满足使用本地缓存的资源; 的请求不发送对不在缓存中的项的请求。 如果指定此缓存策略级别， <see cref="T:System.Net.WebException" /> 如果项不是客户端缓存中将引发异常。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.CacheIfAvailable">
      <summary>如果该资源将可用，则，满足对从缓存中，资源的请求否则，将对资源的请求发送到服务器。 如果客户端和服务器之间的任何缓存中提供了请求的项，可能通过中间缓存来满足请求。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Revalidate">
      <summary>通过使用该资源的缓存的副本，如果时间戳服务器; 上的资源的时间戳相同来满足请求否则为该资源是从服务器下载、 提供给调用方，并存储在缓存中。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.Reload">
      <summary>使用的服务器满足请求。 可以将响应保存在缓存中。 在 HTTP 缓存协议中，这实现使用 no-cache 缓存控制指令和无缓存 Pragma 标头。</summary>
    </member>
    <member name="F:System.Net.Cache.RequestCacheLevel.NoCacheNoStore">
      <summary>永远不会从缓存中使用的资源满足请求并不会缓存资源。 如果在本地缓存中存在该资源，则会删除它。 此策略级别指示中间缓存他们应删除该资源。 在 HTTP 缓存协议中，这实现使用 no-cache 缓存控制指令。</summary>
    </member>
    <member name="T:System.Net.Cache.RequestCachePolicy">
      <summary>定义通过使用获取的资源的应用程序的缓存要求 <see cref="T:System.Net.WebRequest" /> 对象。</summary>
    </member>
    <member name="T:System.Net.Configuration.AuthenticationModuleElement">
      <summary>表示一个身份验证模块的类型信息。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.AuthenticationModuleElementCollection">
      <summary>表示身份验证模块配置元素的容器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.AuthenticationModulesSection">
      <summary>表示身份验证模块的配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.BypassElement">
      <summary>表示不使用代理服务器检索的资源的地址信息。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.BypassElementCollection">
      <summary>表示不使用代理服务器的资源的地址的容器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.ConnectionManagementElement">
      <summary>表示连接到远程计算机的最大数量。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.ConnectionManagementElementCollection">
      <summary>表示连接管理配置元素的容器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.ConnectionManagementSection">
      <summary>表示连接管理的配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.DefaultProxySection">
      <summary>表示 Web 代理服务器使用情况的配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.FtpCachePolicyElement">
      <summary>表示网络资源的默认 FTP 缓存策略。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.HttpCachePolicyElement">
      <summary>表示网络资源的默认 HTTP 缓存策略。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.HttpListenerElement">
      <summary>表示配置文件中的 HttpListener 元素。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.HttpListenerTimeoutsElement">
      <summary>表示 <see cref="T:System.Net.HttpListener" /> 配置文件中的超时元素。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.HttpWebRequestElement">
      <summary>表示响应标头的最大长度。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.Ipv6Element">
      <summary>确定是否在本地计算机上启用 Internet 协议版本 6。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.MailSettingsSectionGroup">
      <summary>初始化 <see cref="T:System.Net.Configuration.MailSettingsSectionGroup" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Net.Configuration.ModuleElement">
      <summary>表示一个自定义的类型信息 <see cref="T:System.Net.IWebProxy" /> 模块。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.NetSectionGroup">
      <summary>获取网络的命名空间的节组信息。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.PerformanceCountersElement">
      <summary>表示 System.Net 配置文件中的性能计数器元素，该元素确定是否启用网络性能计数器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement">
      <summary>标识 Web 代理服务器的配置设置。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement.AutoDetectValues">
      <summary>指定是否自动检测代理。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.AutoDetectValues.Unspecified">
      <summary>指定此字符集。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.AutoDetectValues.False">
      <summary>不会自动检测代理服务器。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.AutoDetectValues.True">
      <summary>自动检测代理。</summary>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement.BypassOnLocalValues">
      <summary>指定是否对本地资源不使用代理。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.BypassOnLocalValues.Unspecified">
      <summary>指定此字符集。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.BypassOnLocalValues.False">
      <summary>对于本地资源的所有请求应都经过代理</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.BypassOnLocalValues.True">
      <summary>直接访问本地资源。</summary>
    </member>
    <member name="T:System.Net.Configuration.ProxyElement.UseSystemDefaultValues">
      <summary>指定是否使用本地系统代理设置来确定是否对本地资源不使用代理。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.UseSystemDefaultValues.Unspecified">
      <summary>系统默认代理设置不指定。</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.UseSystemDefaultValues.False">
      <summary>不使用系统默认代理设置值</summary>
    </member>
    <member name="F:System.Net.Configuration.ProxyElement.UseSystemDefaultValues.True">
      <summary>使用系统默认代理设置值。</summary>
    </member>
    <member name="T:System.Net.Configuration.RequestCachingSection">
      <summary>表示缓存行为的配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.ServicePointManagerElement">
      <summary>表示用来创建连接到远程计算机的默认设置。 无法继承此类。</summary>
    </member>
    <member name="T:System.Net.Configuration.SettingsSection">
      <summary>表示套接字、 IPv6、 响应标头和服务点的配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.SmtpNetworkElement">
      <summary>表示在 SMTP 配置文件中的网络元素。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.SmtpSection">
      <summary>表示的 SMTP 节 System.Net 配置文件。</summary>
    </member>
    <member name="T:System.Net.Configuration.SmtpSpecifiedPickupDirectoryElement">
      <summary>表示 SMTP 拾取目录配置元素。</summary>
    </member>
    <member name="T:System.Net.Configuration.SocketElement">
      <summary>表示用于配置信息 <see cref="T:System.Net.Sockets.Socket" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.UnicodeDecodingConformance">
      <summary>控制如何将 Unicode 字符解释通过 <see cref="Overload:System.Net.WebUtility.HtmlDecode" /> 方法。</summary>
    </member>
    <member name="F:System.Net.Configuration.UnicodeDecodingConformance.Auto">
      <summary>使用自动行为。 解码的行为是由当前应用程序的目标框架确定的。 有关 .NET Framework 4.5 和更高版本，Unicode 编码解码严格。</summary>
    </member>
    <member name="F:System.Net.Configuration.UnicodeDecodingConformance.Strict">
      <summary>使用严格的行为。 指定传入编码的数据将被解码之前检查的有效性。 例如，输入的字符串的"&amp; #144308;"将解码为 U + 233B4，但使用输入的字符串"&amp; #xD84C; &amp; #xDFB4;"将无法正确解码。 已解码字符串中的数据未检查的有效性。 例如，"\ud800"的输入的字符串将导致"\ud800"的输出字符串，因为已解码代理期间会跳过解码，即使它是不成对。</summary>
    </member>
    <member name="F:System.Net.Configuration.UnicodeDecodingConformance.Compat">
      <summary>使用兼容的行为。 指定传入的数据被解码之前不检查的有效性。 例如，输入的字符串的"&amp; amp; #xD84C;"将解码为 U + D84C，这是一个不成对的代理项。 此外，解码器不能理解代码数据点处于 SMP 它们被表示为 HTML 编码的代理项，因此除非 inputstring"&amp; #144308;"将导致输出字符串"&amp; #144308;"。</summary>
    </member>
    <member name="F:System.Net.Configuration.UnicodeDecodingConformance.Loose">
      <summary>使用松散的行为。 类似于 <see cref="F:System.Net.Configuration.UnicodeDecodingConformance.Compat" /> 在于，不会有效性检查，但解码器还能理解的代码数据点。 输入的字符串"&amp; #144308;"会将解码为字符 U + 233B4 正确。 此开关旨在提供最大互操作性，如果解码器不知道哪种格式提供程序使用来生成编码的字符串。</summary>
    </member>
    <member name="T:System.Net.Configuration.UnicodeEncodingConformance">
      <summary>控制如何将 Unicode 字符输出的 <see cref="Overload:System.Net.WebUtility.HtmlEncode" /> 方法。</summary>
    </member>
    <member name="F:System.Net.Configuration.UnicodeEncodingConformance.Auto">
      <summary>使用自动行为。 Unicode 编码行为由当前应用程序的目标框架。 有关 .NET Framework 4.5 和更高版本，Unicode 编码行为严格。        </summary>
    </member>
    <member name="F:System.Net.Configuration.UnicodeEncodingConformance.Strict">
      <summary>使用严格的行为。 指定单个 utf-16 代理项码位将合并为一个单独的码位的 <see cref="Overload:System.Net.WebUtility.HtmlEncode" /> 调用方法。 例如，给定的输入的字符串"\uD84C\uDFB4"（或"\U000233B4"），输出的 <see cref="Overload:System.Net.WebUtility.HtmlEncode" /> 方法为"&amp; #144308;"。如果输入是一个格式不正确的 utf-16 字符串 （它包含不成对的代理项，例如），坏码位将被替换为 U + FFFD （Unicode 替换字符） 之前进行 HTML 编码。</summary>
    </member>
    <member name="F:System.Net.Configuration.UnicodeEncodingConformance.Compat">
      <summary>使用兼容的行为。 指定单个 utf-16 代理项码位的输出作为-当之一 <see cref="Overload:System.Net.WebUtility.HtmlEncode" /> 调用方法。 例如，给定字符串"\uD84C\uDFB4"（或"\U000233B4"） 的输出 <see cref="Overload:System.Net.WebUtility.HtmlEncode" /> 是"\uD84C\uDFB4"（未编码输入）。</summary>
    </member>
    <member name="T:System.Net.Configuration.WebProxyScriptElement">
      <summary>表示用于配置 Web 代理脚本的信息。 无法继承此类。</summary>
    </member>
    <member name="T:System.Net.Configuration.WebRequestModuleElement">
      <summary>表示 URI 前缀和关联的类用于处理创建 Web 请求的前缀。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.WebRequestModuleElementCollection">
      <summary>表示用于 Web 请求模块配置元素的容器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.WebRequestModulesSection">
      <summary>表示 Web 请求模块的配置节。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Configuration.WebUtilityElement">
      <summary>表示配置文件中的 WebUtility 元素。</summary>
    </member>
    <member name="T:System.Net.Cookie">
      <summary>提供一组用于管理 Cookie 的属性和方法。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.CookieCollection">
      <summary>提供集合容器的实例 <see cref="T:System.Net.Cookie" /> 类。</summary>
    </member>
    <member name="T:System.Net.CookieContainer">
      <summary>为集合提供容器 <see cref="T:System.Net.CookieCollection" /> 对象。</summary>
    </member>
    <member name="T:System.Net.CookieException">
      <summary>向 <see cref="T:System.Net.CookieContainer" /> 添加 <see cref="T:System.Net.Cookie" /> 出错时引发的异常。</summary>
    </member>
    <member name="T:System.Net.CredentialCache">
      <summary>为多个凭据提供存储空间。</summary>
    </member>
    <member name="T:System.Net.DecompressionMethods">
      <summary>表示要用于压缩响应中收到的数据的文件压缩和解压缩编码格式 <see cref="T:System.Net.HttpWebRequest" />。</summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.None">
      <summary>不使用压缩。</summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.GZip">
      <summary>使用 gZip 压缩解压缩算法。</summary>
    </member>
    <member name="F:System.Net.DecompressionMethods.Deflate">
      <summary>使用 deflate 压缩解压缩算法。</summary>
    </member>
    <member name="T:System.Net.Dns">
      <summary>提供了简单的域名解析功能。</summary>
    </member>
    <member name="T:System.Net.DnsEndPoint">
      <summary>将网络终结点表示为主机名或 IP 地址和端口号的字符串表示方法。</summary>
    </member>
    <member name="T:System.Net.DnsPermission">
      <summary>控制在网络上的域名系统 (DNS) 服务器的访问权。</summary>
    </member>
    <member name="T:System.Net.DnsPermissionAttribute">
      <summary>指定用于从域名服务器请求信息的权限。</summary>
    </member>
    <member name="T:System.Net.DownloadDataCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.DownloadDataCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.DownloadDataCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventArgs">
      <summary>将提供数据供 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 事件 <see cref="T:System.Net.WebClient" />。</summary>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.EndPoint">
      <summary>标识网络地址。 这是一个 abstract 类。</summary>
    </member>
    <member name="T:System.Net.EndpointPermission">
      <summary>定义由授权终结点 <see cref="T:System.Net.SocketPermission" /> 实例。</summary>
    </member>
    <member name="T:System.Net.FileWebRequest">
      <summary>提供的文件系统实现 <see cref="T:System.Net.WebRequest" /> 类。</summary>
    </member>
    <member name="T:System.Net.FileWebResponse">
      <summary>提供的文件系统实现 <see cref="T:System.Net.WebResponse" /> 类。</summary>
    </member>
    <member name="T:System.Net.FtpStatusCode">
      <summary>指定为文件传输协议 (FTP) 操作返回的状态代码。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.Undefined">
      <summary>包含出于完整性的考虑，此值是永远不会返回由服务器中。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.RestartMarker">
      <summary>指定该响应包含重新启动标记回复。 通常会显示此状态的说明的文本包含用户数据的流标记和服务器标记。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceTemporarilyNotAvailable">
      <summary>指定的服务现在不可用;稍后尝试您的请求。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.DataAlreadyOpen">
      <summary>指定数据连接已打开，并且请求的传输已开始。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.OpeningData">
      <summary>指定服务器正在打开数据连接。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandOK">
      <summary>指定该命令已成功完成。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandExtraneous">
      <summary>指定因为不需要该命令未实现的服务器。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.DirectoryStatus">
      <summary>指定一个目录的状态。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileStatus">
      <summary>指定文件的状态。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SystemType">
      <summary>指定将使用分配编号文档由 Internet 号码分配机构发布中发布的系统名称的系统类型名称。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendUserCommand">
      <summary>指定服务器可供用户登录操作。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingControl">
      <summary>指定服务器正在关闭的控制连接。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ClosingData">
      <summary>指定服务器正在关闭数据连接和请求的文件操作是否成功。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.EnteringPassive">
      <summary>指定服务器正在进入被动模式。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.LoggedInProceed">
      <summary>指定用户登录，并可以将命令发送。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServerWantsSecureSession">
      <summary>指定服务器接受由客户端上，指定的身份验证机制和安全数据交换已完成。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionOK">
      <summary>指定请求的文件操作已成功完成。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.PathnameCreated">
      <summary>指定已创建的请求的路径名称。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.SendPasswordCommand">
      <summary>指定服务器需要提供密码。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.NeedLoginAccount">
      <summary>指定的服务器要求提供的登录帐户。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileCommandPending">
      <summary>指定请求的文件操作需要的其他信息。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ServiceNotAvailable">
      <summary>指定该服务不可用。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CantOpenData">
      <summary>指定不能打开数据连接。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ConnectionClosed">
      <summary>指定此连接已经关闭。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailableOrBusy">
      <summary>指定不能指定的文件执行所请求的操作，因为文件不可用或正在使用。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedLocalProcessingError">
      <summary>指定发生了错误，无法完成请求操作。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenInsufficientSpace">
      <summary>指定无法执行请求的操作，因为在服务器上没有足够的空间。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandSyntaxError">
      <summary>指定该命令有语法错误或不是被服务器识别的命令。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ArgumentSyntaxError">
      <summary>指定一个或多个命令参数有语法错误。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.CommandNotImplemented">
      <summary>指定 FTP 服务器不执行该命令。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.BadCommandSequence">
      <summary>指定的命令序列不按正确的顺序。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.NotLoggedIn">
      <summary>指定登录信息必须发送到服务器。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.AccountNeeded">
      <summary>指定在服务器上的用户帐户是必需的。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFileUnavailable">
      <summary>指定不能指定的文件执行所请求的操作，因为文件不可用。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionAbortedUnknownPageType">
      <summary>指定不能执行请求的操作，因为指定的页类型是未知的。 RFC 959 一节中描述的页面类型 3.1.2.3</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.FileActionAborted">
      <summary>指定不能执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.FtpStatusCode.ActionNotTakenFilenameNotAllowed">
      <summary>指定无法在指定的文件上执行请求的操作。</summary>
    </member>
    <member name="T:System.Net.FtpWebRequest">
      <summary>实现文件传输协议 (FTP) 客户端。</summary>
    </member>
    <member name="T:System.Net.FtpWebResponse">
      <summary>封装对请求的文件传输协议 (FTP) 服务器的响应。</summary>
    </member>
    <member name="T:System.Net.GlobalProxySelection">
      <summary>包含的所有 HTTP 请求的全局默认代理实例。</summary>
    </member>
    <member name="T:System.Net.HttpContinueDelegate">
      <summary>表示由客户端收到继续响应时通知调用方的方法。</summary>
      <param name="StatusCode">从服务器的 HTTP 状态的数值。</param>
      <param name="httpHeaders">使用了返回的标头-继续来自服务器的响应。</param>
    </member>
    <member name="T:System.Net.HttpListener">
      <summary>提供一个简单的、可通过编程方式控制的 HTTP 协议侦听器。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.HttpListener.ExtendedProtectionSelector">
      <summary>调用的委托来确定 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 以用于每 <see cref="T:System.Net.HttpListener" /> 请求。</summary>
      <param name="request">
        <see cref="T:System.Net.HttpListenerRequest" /> 来确定的扩展的保护策略， <see cref="T:System.Net.HttpListener" /> 实例将用于提供扩展的保护。</param>
      <returns>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 对象，它指定要用于此请求的扩展的保护策略。</returns>
    </member>
    <member name="T:System.Net.HttpListenerBasicIdentity">
      <summary>保留的用户名和密码从基本身份验证请求。</summary>
    </member>
    <member name="T:System.Net.HttpListenerContext">
      <summary>提供对使用的请求和响应对象的访问 <see cref="T:System.Net.HttpListener" /> 类。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.HttpListenerException">
      <summary>当处理 HTTP 请求出错时引发的异常。</summary>
    </member>
    <member name="T:System.Net.HttpListenerPrefixCollection">
      <summary>表示用于存储的统一资源标识符 (URI) 前缀的集合 <see cref="T:System.Net.HttpListener" /> 对象。</summary>
    </member>
    <member name="T:System.Net.HttpListenerRequest">
      <summary>描述对传入的 HTTP 请求 <see cref="T:System.Net.HttpListener" /> 对象。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.HttpListenerResponse">
      <summary>表示正在处理的请求的响应 <see cref="T:System.Net.HttpListener" /> 对象。</summary>
    </member>
    <member name="T:System.Net.HttpListenerTimeoutManager">
      <summary>若要使用的超时管理器 <see cref="T:System.Net.HttpListener" /> 对象。</summary>
    </member>
    <member name="T:System.Net.HttpRequestHeader">
      <summary>可能在客户端请求中指定的 HTTP 标头。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.CacheControl">
      <summary>Cache-Control 标头，指定请求/响应链上所有缓存控制机制必须服从的指令。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Connection">
      <summary>Connection 标头，指定特定连接所需的选项。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Date">
      <summary>Date 标头，指定发出请求的日期和时间。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.KeepAlive">
      <summary>Keep-Alive 标头，指定用于保持持久性连接的参数。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Pragma">
      <summary>Pragma 标头，指定特定于实现的指令，这些指令可应用到请求/响应链上的任意代理。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Trailer">
      <summary>Trailer 标头，指定显示在以成块传输编码方式编码的消息尾部的标头字段。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.TransferEncoding">
      <summary>Transfer-Encoding 标头，指定应用到消息正文的转换类型（如果有）。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Upgrade">
      <summary>Upgrade 标头，指定客户端支持的其他通信协议。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Via">
      <summary>Via 标头，指定网关和代理要使用的中间协议。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Warning">
      <summary>Warning 标头，指定消息中可能不会反映的有关消息的状态或转换的其他信息。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Allow">
      <summary>Allow 标头，指定支持的 HTTP 方法集。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLength">
      <summary>Content-Length 标头，指定随附的正文数据的长度（以字节为单位）。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentType">
      <summary>Content-Type 标头，指定随附的正文数据的 MIME 类型。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentEncoding">
      <summary>Content-Encoding 标头，指定应用到随附的正文数据的编码。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLanguage">
      <summary>Content-Langauge 标头，指定随附的正文数据的自然语言。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLocation">
      <summary>Content-Location 标头，指定可从中获取随附的正文的 URI。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentMd5">
      <summary>Content-MD5 标头，指定随附的正文数据的 MD5 摘要，以便提供端到端消息完整性检查。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentRange">
      <summary>Content-Range 标头，指定完整正文中应用随附的部分正文数据的位置。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expires">
      <summary>Expires 标头，指定日期和时间，在该日期和时间之后随附的正文数据将被视为已过期。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.LastModified">
      <summary>Last-Modified 标头，指定上次修改随附的正文数据的日期和时间。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Accept">
      <summary>Accept 标头，指定响应可接受的 MIME 类型。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptCharset">
      <summary>Accept-Charset 标头，指定响应可接受的字符集。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptEncoding">
      <summary>Accept-Charset 标头，指定响应可接受的内容编码。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptLanguage">
      <summary>Accept-Langauge 标头，指定响应首选的自然语言。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Authorization">
      <summary>Authorization 标头，指定客户端提供的以向服务器验证自身身份的凭据。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Cookie">
      <summary>Cookie 标头，指定向服务器提供的 cookie 数据。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expect">
      <summary>Expect 标头，指定客户端所需的特定服务器行为。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.From">
      <summary>From 标头，指定控制请求的用户代理的用户的 Internet 电子邮件地址。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Host">
      <summary>Host 标头，指定要请求的资源的主机名和端口号。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfMatch">
      <summary>If-match 标头，指定仅当客户端所指示的资源的缓存副本是最新的时，才执行所请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfModifiedSince">
      <summary>If-Modified-Since 标头，指定仅当自指示的数据和时间之后修改了请求的资源时，才执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfNoneMatch">
      <summary>If-None-Match 标头，指定仅当客户端所指示的资源的缓存副本都不是最新的时，才执行所请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfRange">
      <summary>If-Range 标头，指定如果客户端的缓存副本是最新的，则仅发送指定范围的请求资源。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfUnmodifiedSince">
      <summary>If-Unmodified-Since 标头，指定仅当自指示的数据和时间之后未修改请求的资源时，才执行请求的操作。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.MaxForwards">
      <summary>Max-Forwards 标头，指定一个整数，表示此请求还可以被转发的次数。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ProxyAuthorization">
      <summary>Proxy-Authorization 标头，指定客户端提供的以向代理验证自身身份的凭据。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Referer">
      <summary>Referer 标头，指定可从中获取请求 URI 的资源 URI。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Range">
      <summary>Range 标头，指定代替整个响应返回的客户端请求的响应的子范围。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Te">
      <summary>TE 标头，指定响应可接受的传输编码。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Translate">
      <summary>Translate 标头，与 WebDAV 功能一起使用的 HTTP 规范的 Microsoft 扩展。</summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.UserAgent">
      <summary>User-Agent 标头，指定有关客户端代理的信息。</summary>
    </member>
    <member name="T:System.Net.HttpResponseHeader">
      <summary>可在服务器响应中指定的 HTTP 标头。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.CacheControl">
      <summary>缓存控制标头，指定缓存必须遵守的请求/响应链沿所有缓存机制的指令。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Connection">
      <summary>Connection 标头，指定特定连接所需的选项。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Date">
      <summary>日期标头，指定的日期和时间起源响应。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.KeepAlive">
      <summary>保持活动状态标头，它指定要用于维护的持续性连接的参数。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Pragma">
      <summary>Pragma 标头，指定特定于实现的指令，这些指令可应用到请求/响应链上的任意代理。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Trailer">
      <summary>尾部标头，指定使用 chunked 传输编码进行编码的消息的尾部显示指示的标头字段。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.TransferEncoding">
      <summary>传输编码标头，它指定的内容 （如果有） 的转换类型已应用于消息正文。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Upgrade">
      <summary>Upgrade 标头，指定客户端支持的其他通信协议。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Via">
      <summary>Via 标头，指定网关和代理要使用的中间协议。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Warning">
      <summary>Warning 标头，指定消息中可能不会反映的有关消息的状态或转换的其他信息。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Allow">
      <summary>允许标头，指定的受支持的 HTTP 方法集。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLength">
      <summary>Content-Length 标头，指定随附的正文数据的长度（以字节为单位）。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentType">
      <summary>Content-Type 标头，指定随附的正文数据的 MIME 类型。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentEncoding">
      <summary>Content-Encoding 标头，指定应用到随附的正文数据的编码。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLanguage">
      <summary>内容语言标头，指定的自然语言或语言伴随的正文数据。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentLocation">
      <summary>内容位置标头，指定一个 uri，该 URI 可以从中获得随附的正文。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentMd5">
      <summary>Content-MD5 标头，指定随附的正文数据的 MD5 摘要，以便提供端到端消息完整性检查。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ContentRange">
      <summary>Range 标头，指定的子范围或子范围的代替整个响应返回客户端请求的响应。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Expires">
      <summary>Expires 标头，指定日期和时间，在该日期和时间之后随附的正文数据将被视为已过期。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.LastModified">
      <summary>Last-Modified 标头，指定上次修改随附的正文数据的日期和时间。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.AcceptRanges">
      <summary>Accept-ranges 标头，指定服务器接受的范围。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Age">
      <summary>Age 标头，以秒为单位，指定的时间，因为源服务器通过为生成响应。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ETag">
      <summary>Etag 标头，指定请求的变量的当前值。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Location">
      <summary>位置标头，指定客户端将重定向至以获取所请求的资源的 URI。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.ProxyAuthenticate">
      <summary>代理服务器进行身份验证标头，它指定客户端必须验证自身身份向代理服务器。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.RetryAfter">
      <summary>重试后标头，它指定时间 （以秒为单位），或日期和时间，此后客户端可以重试请求。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Server">
      <summary>服务器标头，指定有关源服务器代理的信息。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.SetCookie">
      <summary>Set-cookie 标头，指定将此信息将提供给客户端的 cookie 数据。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.Vary">
      <summary>Vary 标头，指定用于确定缓存的响应是否是最新的请求标头。</summary>
    </member>
    <member name="F:System.Net.HttpResponseHeader.WwwAuthenticate">
      <summary>WWW 身份验证标头，它指定客户端必须进行自我验证到服务器。</summary>
    </member>
    <member name="T:System.Net.HttpStatusCode">
      <summary>包含为 HTTP 定义的状态代码的值。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Continue">
      <summary>等效于 HTTP 状态 100。<see cref="F:System.Net.HttpStatusCode.Continue" /> 指示客户端可以继续其请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SwitchingProtocols">
      <summary>等效于 HTTP 状态为 101。<see cref="F:System.Net.HttpStatusCode.SwitchingProtocols" /> 指示正在更改的协议版本或协议。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.OK">
      <summary>等效于 HTTP 状态 200。<see cref="F:System.Net.HttpStatusCode.OK" /> 指示请求成功，且请求的信息包含在响应中。 这是要接收的最常见状态代码。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Created">
      <summary>等效于 HTTP 状态 201。<see cref="F:System.Net.HttpStatusCode.Created" /> 指示请求导致已发送响应之前创建一个新的资源。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Accepted">
      <summary>等效于 HTTP 状态 202。<see cref="F:System.Net.HttpStatusCode.Accepted" /> 指示请求已被接受进行进一步处理。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NonAuthoritativeInformation">
      <summary>等效于 HTTP 状态 203。<see cref="F:System.Net.HttpStatusCode.NonAuthoritativeInformation" /> 指示返回的元信息来自而不是原始服务器的缓存副本，因此可能不正确。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NoContent">
      <summary>等效于 HTTP 状态 204。<see cref="F:System.Net.HttpStatusCode.NoContent" /> 指示已成功处理请求和响应是有意留为空白。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ResetContent">
      <summary>等效于 HTTP 状态 205。<see cref="F:System.Net.HttpStatusCode.ResetContent" /> 指示客户端应重置 （而不是重新加载） 的当前资源。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PartialContent">
      <summary>等效于 HTTP 206 状态。<see cref="F:System.Net.HttpStatusCode.PartialContent" /> 指示根据包括字节范围的 GET 请求的请求的响应是部分响应。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MultipleChoices">
      <summary>等效于 HTTP 状态 300。<see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> 指示所需的信息有多种表示形式。 默认操作是将此状态视为一个重定向，并按照与此响应关联的位置标头的内容。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Ambiguous">
      <summary>等效于 HTTP 状态 300。<see cref="F:System.Net.HttpStatusCode.Ambiguous" /> 指示所需的信息有多种表示形式。 默认操作是将此状态视为一个重定向，并按照与此响应关联的位置标头的内容。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MovedPermanently">
      <summary>等效于 HTTP 状态 301。<see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> 指示已将所需的信息移动到的位置标头中指定的 URI。 当收到此状态时的默认操作是遵循与响应关联的位置标头。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Moved">
      <summary>等效于 HTTP 状态 301。<see cref="F:System.Net.HttpStatusCode.Moved" /> 指示已将所需的信息移动到的位置标头中指定的 URI。 当收到此状态时的默认操作是遵循与响应关联的位置标头。 当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Found">
      <summary>等效于 HTTP 状态 302。<see cref="F:System.Net.HttpStatusCode.Found" /> 指示所需的信息位于的位置标头中指定的 URI。 当收到此状态时的默认操作是遵循与响应关联的位置标头。 当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Redirect">
      <summary>等效于 HTTP 状态 302。<see cref="F:System.Net.HttpStatusCode.Redirect" /> 指示所需的信息位于的位置标头中指定的 URI。 当收到此状态时的默认操作是遵循与响应关联的位置标头。 当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.SeeOther">
      <summary>等效于 HTTP 状态 303。<see cref="F:System.Net.HttpStatusCode.SeeOther" /> 自动将客户端重定向到的位置标头中指定作为公告的结果的 URI。 对指定的位置标头的资源的请求将会执行与 GET。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectMethod">
      <summary>等效于 HTTP 状态 303。<see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> 自动将客户端重定向到的位置标头中指定作为公告的结果的 URI。 对指定的位置标头的资源的请求将会执行与 GET。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotModified">
      <summary>等效于 HTTP 状态 304。<see cref="F:System.Net.HttpStatusCode.NotModified" /> 指示客户端的缓存的副本是最新。 不会传输资源的内容。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UseProxy">
      <summary>等效于 HTTP 状态 305。<see cref="F:System.Net.HttpStatusCode.UseProxy" /> 指示该请求应使用的位置标头中指定的 uri 的代理服务器。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unused">
      <summary>等效于 HTTP 状态 306。<see cref="F:System.Net.HttpStatusCode.Unused" /> 是对未完全指定的 HTTP/1.1 规范建议的扩展。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.TemporaryRedirect">
      <summary>等效于 HTTP 状态 307。<see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> 指示请求信息位于的位置标头中指定的 URI。 当收到此状态时的默认操作是遵循与响应关联的位置标头。 当原始请求方法是 POST 时，重定向的请求还将使用 POST 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RedirectKeepVerb">
      <summary>等效于 HTTP 状态 307。<see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> 指示请求信息位于的位置标头中指定的 URI。 当收到此状态时的默认操作是遵循与响应关联的位置标头。 当原始请求方法是 POST 时，重定向的请求还将使用 POST 方法。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadRequest">
      <summary>等效于 HTTP 状态 400。<see cref="F:System.Net.HttpStatusCode.BadRequest" /> 指示无法由服务器理解此请求。<see cref="F:System.Net.HttpStatusCode.BadRequest" /> 如果没有其他错误适用，或者如果具体的错误是未知的或不具有其自己的错误代码发送。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Unauthorized">
      <summary>等效于 HTTP 状态 401。<see cref="F:System.Net.HttpStatusCode.Unauthorized" /> 指示所请求的资源需要身份验证。 Www-authenticate 标头包含如何执行身份验证的详细信息。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PaymentRequired">
      <summary>等效于 HTTP 状态 402。<see cref="F:System.Net.HttpStatusCode.PaymentRequired" /> 已保留供将来使用。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Forbidden">
      <summary>等效于 HTTP 状态 403。<see cref="F:System.Net.HttpStatusCode.Forbidden" /> 指示服务器拒绝无法完成请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotFound">
      <summary>等效于 HTTP 状态 404。<see cref="F:System.Net.HttpStatusCode.NotFound" /> 指示所请求的资源不存在的服务器上。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.MethodNotAllowed">
      <summary>等效于 HTTP 状态 405。<see cref="F:System.Net.HttpStatusCode.MethodNotAllowed" /> 指示请求方法 （POST 或 GET） 不允许对所请求的资源。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotAcceptable">
      <summary>等效于 HTTP 状态 406。<see cref="F:System.Net.HttpStatusCode.NotAcceptable" /> 表示客户端已指定使用 Accept 标头，它将不接受任何可用的资源表示。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired">
      <summary>等效于 HTTP 状态 407。<see cref="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired" /> 指示请求的代理要求身份验证。 代理服务器进行身份验证标头包含如何执行身份验证的详细信息。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestTimeout">
      <summary>等效于 HTTP 状态 408。<see cref="F:System.Net.HttpStatusCode.RequestTimeout" /> 指示客户端的服务器预期请求的时间内没有未发送请求。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Conflict">
      <summary>等效于 HTTP 状态 409。<see cref="F:System.Net.HttpStatusCode.Conflict" /> 指示该请求可能不会执行由于在服务器上发生冲突。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.Gone">
      <summary>等效于 HTTP 状态 410。<see cref="F:System.Net.HttpStatusCode.Gone" /> 指示所请求的资源不再可用。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.LengthRequired">
      <summary>等效于 HTTP 状态 411。<see cref="F:System.Net.HttpStatusCode.LengthRequired" /> 指示缺少必需的内容长度标头。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.PreconditionFailed">
      <summary>等效于 HTTP 状态 412。<see cref="F:System.Net.HttpStatusCode.PreconditionFailed" /> 表示失败，此请求的设置的条件，无法执行请求。 使用条件请求标头，如果匹配项，如设置条件无-If-match，或如果-修改-自从。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestEntityTooLarge">
      <summary>等效于 HTTP 状态 413。<see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge" /> 指示请求来说太大的服务器能够处理。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestUriTooLong">
      <summary>等效于 HTTP 状态 414。<see cref="F:System.Net.HttpStatusCode.RequestUriTooLong" /> 指示 URI 太长。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UnsupportedMediaType">
      <summary>等效于 HTTP 状态 415。<see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType" /> 指示该请求是不受支持的类型。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
      <summary>等效于 HTTP 416 状态。<see cref="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable" /> 指示从资源请求的数据范围不能返回，或者因为范围的开始处，然后该资源的开头或范围的末尾后在资源的结尾。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ExpectationFailed">
      <summary>等效于 HTTP 状态 417。<see cref="F:System.Net.HttpStatusCode.ExpectationFailed" /> 指示无法由服务器满足 Expect 标头中给定。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.UpgradeRequired">
      <summary>等效于 HTTP 状态 426。<see cref="F:System.Net.HttpStatusCode.UpgradeRequired" /> 指示客户端应切换到不同的协议，例如 TLS/1.0。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.InternalServerError">
      <summary>等效于 HTTP 状态 500。<see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 表示在服务器上发生一般性错误。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotImplemented">
      <summary>等效于 HTTP 状态 501。<see cref="F:System.Net.HttpStatusCode.NotImplemented" /> 指示服务器不支持所请求的功能。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.BadGateway">
      <summary>等效于 HTTP 状态 502。<see cref="F:System.Net.HttpStatusCode.BadGateway" /> 指示中间代理服务器从另一个代理或原始服务器接收到错误响应。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.ServiceUnavailable">
      <summary>等效于 HTTP 状态 503。<see cref="F:System.Net.HttpStatusCode.ServiceUnavailable" /> 指示将服务器暂时不可用，通常是由于高负载或维护。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.GatewayTimeout">
      <summary>等效于 HTTP 状态 504。<see cref="F:System.Net.HttpStatusCode.GatewayTimeout" /> 指示中间代理服务器在等待来自另一个代理或原始服务器的响应时已超时。</summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.HttpVersionNotSupported">
      <summary>等效于 HTTP 状态 505。<see cref="F:System.Net.HttpStatusCode.HttpVersionNotSupported" /> 指示服务器不支持请求的 HTTP 版本。</summary>
    </member>
    <member name="T:System.Net.HttpVersion">
      <summary>定义支持的 HTTP 版本号 <see cref="T:System.Net.HttpWebRequest" /> 和 <see cref="T:System.Net.HttpWebResponse" /> 类。</summary>
    </member>
    <member name="T:System.Net.HttpWebRequest">
      <summary>提供 <see cref="T:System.Net.WebRequest" /> 类的 HTTP 特定的实现。</summary>
    </member>
    <member name="T:System.Net.HttpWebResponse">
      <summary>提供 <see cref="T:System.Net.WebResponse" /> 类的 HTTP 特定的实现。</summary>
    </member>
    <member name="T:System.Net.IAuthenticationModule">
      <summary>为 Web 客户端身份验证模块提供基本身份验证接口。</summary>
    </member>
    <member name="T:System.Net.ICertificatePolicy">
      <summary>验证服务器证书。</summary>
    </member>
    <member name="T:System.Net.ICredentialPolicy">
      <summary>定义要用于进行使用的资源请求的凭据策略 <see cref="T:System.Net.WebRequest" /> 及其派生类。</summary>
    </member>
    <member name="T:System.Net.ICredentials">
      <summary>提供用于检索 Web 客户端身份验证的凭据的基本身份验证接口。</summary>
    </member>
    <member name="T:System.Net.ICredentialsByHost">
      <summary>提供用于检索主机、端口和身份验证类型的凭据的接口。</summary>
    </member>
    <member name="T:System.Net.IPAddress">
      <summary>提供 Internet 协议 (IP) 地址。</summary>
    </member>
    <member name="T:System.Net.IPEndPoint">
      <summary>将网络终结点表示为 IP 地址和端口号。</summary>
    </member>
    <member name="T:System.Net.IPHostEntry">
      <summary>为 Internet 主机地址信息提供一个容器类。</summary>
    </member>
    <member name="T:System.Net.IWebProxy">
      <summary>提供用于实现的代理访问基接口 <see cref="T:System.Net.WebRequest" /> 类。</summary>
    </member>
    <member name="T:System.Net.IWebProxyScript">
      <summary>提供的基接口来加载和执行自动代理检测的脚本。</summary>
    </member>
    <member name="T:System.Net.IWebRequestCreate">
      <summary>提供用于创建基接口 <see cref="T:System.Net.WebRequest" /> 实例。</summary>
    </member>
    <member name="T:System.Net.Mail.AlternateView">
      <summary>表示要查看电子邮件的格式。</summary>
    </member>
    <member name="T:System.Net.Mail.AlternateViewCollection">
      <summary>表示 <see cref="T:System.Net.Mail.AlternateView" /> 对象集合。</summary>
    </member>
    <member name="T:System.Net.Mail.Attachment">
      <summary>表示一封电子邮件的附件。</summary>
    </member>
    <member name="T:System.Net.Mail.AttachmentBase">
      <summary>表示电子邮件附件的基类。 类 <see cref="T:System.Net.Mail.Attachment" />, ，<see cref="T:System.Net.Mail.AlternateView" />, ，和 <see cref="T:System.Net.Mail.LinkedResource" /> 从此类派生。</summary>
    </member>
    <member name="T:System.Net.Mail.AttachmentCollection">
      <summary>存储将作为电子邮件的一部分发送的附件。</summary>
    </member>
    <member name="T:System.Net.Mail.DeliveryNotificationOptions">
      <summary>介绍电子邮件的送达通知选项。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.None">
      <summary>将不发送任何通知信息。 邮件服务器将利用其已配置的行为，以确定它是否应生成送达通知。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.OnSuccess">
      <summary>成功送达时通知。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.OnFailure">
      <summary>成功送达时通知。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.Delay">
      <summary>如果被延迟传送，通知。</summary>
    </member>
    <member name="F:System.Net.Mail.DeliveryNotificationOptions.Never">
      <summary>在任何情况下，不应生成一个通知。</summary>
    </member>
    <member name="T:System.Net.Mail.LinkedResource">
      <summary>表示在电子邮件附件，如 HTML 附件中的图像中嵌入的外部资源。</summary>
    </member>
    <member name="T:System.Net.Mail.LinkedResourceCollection">
      <summary>存储将作为邮件一部分进行发送的链接资源。</summary>
    </member>
    <member name="T:System.Net.Mail.MailAddress">
      <summary>表示电子邮件发件人或收件人的地址。</summary>
    </member>
    <member name="T:System.Net.Mail.MailAddressCollection">
      <summary>存储与电子邮件关联的电子邮件地址。</summary>
    </member>
    <member name="T:System.Net.Mail.MailMessage">
      <summary>表示使用可发送的电子邮件 <see cref="T:System.Net.Mail.SmtpClient" /> 类。</summary>
    </member>
    <member name="T:System.Net.Mail.MailPriority">
      <summary>指定的优先级 <see cref="T:System.Net.Mail.MailMessage" />。</summary>
    </member>
    <member name="F:System.Net.Mail.MailPriority.Normal">
      <summary>此电子邮件具有正常的优先级。</summary>
    </member>
    <member name="F:System.Net.Mail.MailPriority.Low">
      <summary>此电子邮件具有较低的优先级。</summary>
    </member>
    <member name="F:System.Net.Mail.MailPriority.High">
      <summary>此电子邮件具有高优先级。</summary>
    </member>
    <member name="T:System.Net.Mail.SendCompletedEventHandler">
      <summary>表示用来处理 <see cref="E:System.Net.Mail.SmtpClient.SendCompleted" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">
        <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.Mail.SmtpAccess">
      <summary>指定允许使用简单邮件传输协议 (SMTP) 服务器的访问级别。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.None">
      <summary>SMTP 主机没有访问权限。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.Connect">
      <summary>连接到默认端口 （端口 25） 上的 SMTP 主机。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpAccess.ConnectToUnrestrictedPort">
      <summary>连接到任何端口上的 SMTP 主机。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpClient">
      <summary>允许应用程序使用简单邮件传输协议 (SMTP) 发送电子邮件。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpDeliveryFormat">
      <summary>要用于发送传出电子邮件使用简单邮件传输协议 (SMTP) 的传递格式。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryFormat.SevenBit">
      <summary>使用 7 位 ASCII 交付格式。在简单邮件传输协议 (SMTP) 用于电子邮件的传统传递格式。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryFormat.International">
      <summary>在简单邮件传输协议 (SMTP) 用于邮件消息的信封和标头字段中的非 ASCII 字符与 utf-8 字符编码的其中一种传递格式。IETF RFC 6530，6531 和 6532 中定义了扩展以支持国际电子邮件。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpDeliveryMethod">
      <summary>指定电子邮件的传送方式。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.Network">
      <summary>通过网络发送电子邮件到 SMTP 服务器。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.SpecifiedPickupDirectory">
      <summary>电子邮件复制到指定的目录 <see cref="P:System.Net.Mail.SmtpClient.PickupDirectoryLocation" /> 外部应用程序传递的属性。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpDeliveryMethod.PickupDirectoryFromIis">
      <summary>电子邮件复制到 pickup 目录用于传递由本地 Internet 信息服务 (IIS)。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpException">
      <summary>表示时，将引发的异常 <see cref="T:System.Net.Mail.SmtpClient" /> 不能完成 <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 或 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 操作。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpFailedRecipientException">
      <summary>表示时，将引发的异常 <see cref="T:System.Net.Mail.SmtpClient" /> 不能完成 <see cref="Overload:System.Net.Mail.SmtpClient.Send" /> 或 <see cref="Overload:System.Net.Mail.SmtpClient.SendAsync" /> 给特定收件人的操作。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpFailedRecipientsException">
      <summary>当使用发送电子邮件时引发的异常 <see cref="T:System.Net.Mail.SmtpClient" /> 无法传递给所有收件人。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpPermission">
      <summary>控制到简单邮件传输协议 (SMTP) 服务器的访问。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpPermissionAttribute">
      <summary>控制到简单邮件传输协议 (SMTP) 服务器的访问。</summary>
    </member>
    <member name="T:System.Net.Mail.SmtpStatusCode">
      <summary>指定的结果，通过发送电子邮件的 <see cref="T:System.Net.Mail.SmtpClient" /> 类。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.SystemStatus">
      <summary>系统状态或系统帮助回复。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.HelpMessage">
      <summary>由服务返回的帮助消息。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceReady">
      <summary>SMTP 服务已准备就绪。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceClosingTransmissionChannel">
      <summary>SMTP 服务正在关闭传输信道。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.Ok">
      <summary>电子邮件已成功发送至 SMTP 服务。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.UserNotLocalWillForward">
      <summary>用户邮箱不位于接收服务器;服务器将转发电子邮件。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CannotVerifyUserWillAttemptDelivery">
      <summary>指定的用户不是本地的但接收 SMTP 服务接受了邮件并试图将它传递。 在将位于的 RFC 1123 中定义此状态代码 http://www.ietf.org。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.StartMailInput">
      <summary>SMTP 服务已准备好接收电子邮件内容。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ServiceNotAvailable">
      <summary>SMTP 服务不可用;服务器正在关闭传输信道。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxBusy">
      <summary>目标邮箱正在使用中。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.LocalErrorInProcessing">
      <summary>SMTP 服务无法完成请求。 如果客户端的 IP 地址无法解析可能出现此错误 （即，反向查找失败）。 如果客户端域已被标识为开放中继或未经请求的电子邮件 （垃圾邮件） 的源，还可以接收此错误。 有关详细信息，请参阅 RFC 2505，网址为 http://www.ietf.org。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.InsufficientStorage">
      <summary>SMTP 服务没有足够的存储空间来完成该请求。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ClientNotPermitted">
      <summary>客户端未经过身份验证或不允许使用指定的 SMTP 主机发送邮件。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandUnrecognized">
      <summary>SMTP 服务无法识别指定的命令。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.SyntaxError">
      <summary>用于指定的命令或参数的语法不正确。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandNotImplemented">
      <summary>SMTP 服务不实现指定的命令。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.BadCommandSequence">
      <summary>发送命令的顺序不正确。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MustIssueStartTlsFirst">
      <summary>SMTP 服务器配置为仅接受 TLS 连接，并且 SMTP 客户端正在尝试使用非 TLS 连接进行连接。 解决方法是为用户设置 EnableSsl = true; 如果 SMTP 客户端。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.CommandParameterNotImplemented">
      <summary>SMTP 服务不实现指定的命令参数。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxUnavailable">
      <summary>目标邮箱找不到或无法访问。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.UserNotLocalTryAlternatePath">
      <summary>用户邮箱不位于接收服务器。 您应重新发送使用提供的地址信息。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.ExceededStorageAllocation">
      <summary>消息为太大，无法在目标邮箱存储。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.MailboxNameNotAllowed">
      <summary>用于指定目标邮箱的语法不正确。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.TransactionFailed">
      <summary>事务失败。</summary>
    </member>
    <member name="F:System.Net.Mail.SmtpStatusCode.GeneralFailure">
      <summary>事务可能不会发生。 找不到指定的 SMTP 主机时，您会收到此错误。</summary>
    </member>
    <member name="T:System.Net.Mime.ContentDisposition">
      <summary>表示 MIME 协议的 Content-disposition 标头。</summary>
    </member>
    <member name="T:System.Net.Mime.ContentType">
      <summary>表示 MIME 协议内容类型标头。</summary>
    </member>
    <member name="T:System.Net.Mime.DispositionTypeNames">
      <summary>提供用来指定电子邮件附件的处置类型的字符串。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames">
      <summary>指定的媒体类型的电子邮件附件的信息。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Application">
      <summary>指定电子邮件附件中的应用程序数据类型。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Image">
      <summary>电子邮件附件中指定的图像数据的类型。</summary>
    </member>
    <member name="T:System.Net.Mime.MediaTypeNames.Text">
      <summary>电子邮件附件中指定文本数据的类型。</summary>
    </member>
    <member name="T:System.Net.Mime.TransferEncoding">
      <summary>指定电子邮件附件的内容传输编码标头信息。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.QuotedPrintable">
      <summary>对这些数据包含 US ASCII 字符集中的可打印字符进行编码。 请参阅 RFC 2406 部分 6.7。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.Base64">
      <summary>将基于流的数据的编码。 请参阅 RFC 2406 部分 6.8。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.SevenBit">
      <summary>用于未编码的数据。 数据是以 7 位 US-ASCII 字符合计行长度为不超过 1000年个字符为单位。 请参阅 rfc2406 第 2.7 节。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.EightBit">
      <summary>以 8 位字符，可能表示与行总长度不超过 1000 个 8 位字符的国际字符为单位的数据。 有关此 8 位 MIME 传输扩展插件的详细信息，请参阅 IETF RFC 6152。</summary>
    </member>
    <member name="F:System.Net.Mime.TransferEncoding.Unknown">
      <summary>指示传输编码为未知。</summary>
    </member>
    <member name="T:System.Net.NetworkAccess">
      <summary>指定网络访问权限。</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Accept">
      <summary>表示允许此应用程序以接受来自 Internet 的本地资源上的连接。 请注意，这是接受用于授予对本地资源 （地址/端口） 的访问的本地主机的保护。 当套接字尝试绑定到此本地资源权限时执行检查以确定 Accept 上是否存在该资源。</summary>
    </member>
    <member name="F:System.Net.NetworkAccess.Connect">
      <summary>表示允许此应用程序连接到特定的 Internet 资源。 请注意，在远程主机资源的情况下，不执行任何检查来查看 Connect 权限存在。 这是因为连接远程主机的端口是未知的可以预先生成不适当的权限。 它是应用程序负责检查尝试连接到侦听套接字的远程主机的权限。</summary>
    </member>
    <member name="T:System.Net.NetworkCredential">
      <summary>为基于密码的身份验证方案（如基本、摘要式、NTLM 和 Kerberos 身份验证）提供凭据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.DuplicateAddressDetectionState">
      <summary>指定的 IP 地址的当前状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Invalid">
      <summary>地址不是有效的。 无效的地址已过期，不再分配给一个接口;应用程序不应该向其发送数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Tentative">
      <summary>该地址重复地址检测过程评估未成功完成。 应用程序不应使用该地址，因为尚未生效，并且向其发送的数据包将被丢弃。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Duplicate">
      <summary>该地址不是唯一的。 此地址不应分配给网络接口。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Deprecated">
      <summary>地址有效，但它即将达到其租约期限并不能由应用程序。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.DuplicateAddressDetectionState.Preferred">
      <summary>地址有效，并使用它不受限制。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.GatewayIPAddressInformation">
      <summary>表示网关的 IP 地址。 此类不能实例化。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection">
      <summary>将一组存储 <see cref="T:System.Net.NetworkInformation.GatewayIPAddressInformation" /> 类型。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IcmpV4Statistics">
      <summary>提供了用于 IPv4 Internet 控制消息协议 (ICMPv4) 本地计算机的统计数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IcmpV6Statistics">
      <summary>提供 Internet 协议版本 6 (ICMPv6) 统计数据，本地计算机的 Internet 控制消息协议。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressCollection">
      <summary>将一组存储 <see cref="T:System.Net.IPAddress" /> 类型。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressInformation">
      <summary>提供有关网络接口地址的信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPAddressInformationCollection">
      <summary>将一组存储 <see cref="T:System.Net.NetworkInformation.IPAddressInformation" /> 类型。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPGlobalProperties">
      <summary>提供有关网络连接的本地计算机的信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPGlobalStatistics">
      <summary>提供 Internet 协议 (IP) 统计数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPInterfaceProperties">
      <summary>提供有关支持 Internet 协议版本 4 (IPv4) 或 Internet 协议版本 6 (IPv6) 的网络接口的信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPInterfaceStatistics">
      <summary>为本地计算机上的网络接口提供 Internet 协议 (IP) 统计数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPStatus">
      <summary>报告将 Internet 控制消息协议 (ICMP) 回显消息发送到一台计算机的状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.Success">
      <summary>ICMP 回显请求成功则收到 ICMP 回显回复。 当收到此状态代码，其他 <see cref="T:System.Net.NetworkInformation.PingReply" /> 属性包含有效的数据。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationNetworkUnreachable">
      <summary>ICMP 回显请求失败，因为包含目标计算机的网络不可访问。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationHostUnreachable">
      <summary>ICMP 回显请求失败，因为目标计算机不可访问。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationProtocolUnreachable">
      <summary>ICMP 回显请求失败，因为 ICMP 回显消息中指定的目标计算机不是可以访问，因为它不支持数据包的协议。 此值仅适用于 IPv4。 此值在 IETF RFC 1812 中所述为通信以管理方式被禁止。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationPortUnreachable">
      <summary>ICMP 回显请求失败，因为目标计算机上的端口不可用。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationProhibited">
      <summary>ICMPv6 回显请求失败，因为管理员禁止与目标计算机的联系人。 此值仅适用于 IPv6。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.NoResources">
      <summary>由于网络资源不足而失败的 ICMP 回显请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadOption">
      <summary>ICMP 回显请求失败，因为它包含了无效的选项。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.HardwareError">
      <summary>ICMP 回显请求失败，因为硬件出错。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.PacketTooBig">
      <summary>ICMP 回显请求失败，因为包含请求的数据包大于最大传输单位 (MTU) 位于源和目标之间的节点 （路由器或网关）。 MTU 定义可传送的数据包的最大大小。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TimedOut">
      <summary>分配的时间内未收到 ICMP 回显回复。 允许的答复的默认时间为 5 秒。 您可以更改此值使用 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" />  或 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 采用方法 <paramref name="timeout" /> 参数。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadRoute">
      <summary>ICMP 回显请求失败，因为源和目标计算机之间没有有效的路由。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TtlExpired">
      <summary>ICMP 回显请求失败，因为它的时间 (TTL) 值达到零，导致转发节点 （路由器或网关），丢弃该数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TtlReassemblyTimeExceeded">
      <summary>ICMP 回显请求失败，因为数据包被分成片段以便传输和重组分配的时间内未收到所有片段。 RFC 2460 （可从 www.ietf.org） 指定为时间限制内的所有数据包必须收到片段 60 秒。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.ParameterProblem">
      <summary>ICMP 回显请求失败，因为节点 （路由器或网关） 在处理数据包标头时遇到问题。 这是状态，如果，例如，标头中包含字段数据无效或无法识别的选项。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.SourceQuench">
      <summary>ICMP 回显请求失败，因为已丢弃数据包。 发生这种情况是当源计算机的输出队列中没有足够的存储空间，或者当数据包到达目的地的过快地进行处理。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadDestination">
      <summary>ICMP 回显请求失败，因为目标 IP 地址不能接收 ICMP 回显请求或不应出现在任何 IP 数据报的目标地址字段。 例如，调用 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> ，并指定 IP 地址"000.0.0.0"返回此状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationUnreachable">
      <summary>ICMP 回显请求失败，因为 ICMP 回显消息中指定的目标计算机不可访问;问题的确切原因是未知的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.TimeExceeded">
      <summary>ICMP 回显请求失败，因为它的时间 (TTL) 值达到零，导致转发节点 （路由器或网关），丢弃该数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.BadHeader">
      <summary>ICMP 回显请求失败，因为标头无效。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.UnrecognizedNextHeader">
      <summary>ICMP 回显请求失败，因为下一标头字段不包含可识别的值。 下一标头字段指示扩展标头类型 （如果存在） 或以上 IP 层，例如，TCP 或 UDP 协议。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.IcmpError">
      <summary>由于出现 ICMP 协议错误失败 ICMP 回显请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.DestinationScopeMismatch">
      <summary>ICMP 回显请求失败，因为源地址和 ICMP 回显消息中指定的目标地址不在同一作用域。 这通常是由路由器转发数据包使用的接口，不在范围之内的源地址引起的。 地址范围 （链接本地、 站点本地和全局范围） 确定网络地址有效。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.IPStatus.Unknown">
      <summary>ICMP 回显请求失败，原因未知。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv4InterfaceProperties">
      <summary>提供有关支持 Internet 协议版本 4 (IPv4) 的网络接口的信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv4InterfaceStatistics">
      <summary>为本地计算机上的网络接口提供的统计数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.IPv6InterfaceProperties">
      <summary>提供有关支持 Internet 协议版本 6 (IPv6) 的网络接口的信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.MulticastIPAddressInformation">
      <summary>提供有关网络接口的多播地址信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection">
      <summary>将一组存储 <see cref="T:System.Net.NetworkInformation.MulticastIPAddressInformation" /> 类型。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetBiosNodeType">
      <summary>指定网络基本输入/输出系统 (NetBIOS) 节点类型。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Unknown">
      <summary>未知的节点类型。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Broadcast">
      <summary>广播的节点。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Peer2Peer">
      <summary>一个对等节点。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Mixed">
      <summary>混合的节点。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetBiosNodeType.Hybrid">
      <summary>一个混合的节点。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAddressChangedEventHandler">
      <summary>引用在网络接口地址更改时调用的一个或多个方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">
        <see cref="T:System.EventArgs" /> 对象，其中包含有关事件的数据。</param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAvailabilityChangedEventHandler">
      <summary>引用一个或多个网络的可用性发生变化时要调用的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">
        <see cref="T:System.EventArgs" /> 对象，其中包含有关事件的数据。</param>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkAvailabilityEventArgs">
      <summary>为 <see cref="E:System.Net.NetworkInformation.NetworkChange.NetworkAvailabilityChanged" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkChange">
      <summary>允许应用程序在网络接口 Internet 协议 (IP) 地址（也称为网卡或适配器）更改时接收通知。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationAccess">
      <summary>指定有关网络接口和通信统计数据的信息的访问权。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.None">
      <summary>网络信息没有访问权限。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Read">
      <summary>对网络信息的读取访问权限。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInformationAccess.Ping">
      <summary>Ping 访问的网络信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationException">
      <summary>因检索网络信息时发生错误而引发的异常。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermission">
      <summary>控制对本地计算机网络的信息和通信统计数据的访问。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInformationPermissionAttribute">
      <summary>允许的操作安全 <see cref="T:System.Net.NetworkInformation.NetworkInformationPermission" /> 要应用于代码中使用声明性安全。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterface">
      <summary>提供网络接口的配置和统计信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterfaceComponent">
      <summary>指定网络接口支持的 Internet 协议版本。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceComponent.IPv4">
      <summary>Internet 协议版本 4。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceComponent.IPv6">
      <summary>Internet 协议版本 6。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.NetworkInterfaceType">
      <summary>指定网络接口的类型。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Unknown">
      <summary>接口类型未知。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ethernet">
      <summary>网络接口使用以太网连接。 IEEE 802.3 标准中定义了以太网。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.TokenRing">
      <summary>网络接口使用令牌环连接。 令牌环 IEEE 标准 802.5 中定义。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Fddi">
      <summary>网络接口使用纤程分布式数据接口 (FDDI) 连接。 FDDI 是一套标准的本地网络中光纤线路上的数据传输。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.BasicIsdn">
      <summary>网络接口使用基本的速率接口集成业务数字网 (ISDN) 连接。 ISDN 通过电话线路是一套标准的数据传输。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.PrimaryIsdn">
      <summary>网络接口使用主速率接口集成业务数字网 (ISDN) 连接。 ISDN 通过电话线路是一套标准的数据传输。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ppp">
      <summary>网络接口使用点对点协议 (PPP) 连接。 PPP 是一种使用串行设备的数据传输协议。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Loopback">
      <summary>网络接口是环回适配器。 此类接口通常用于测试; 错误检测通过网络不发送任何通信。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Ethernet3Megabit">
      <summary>网络接口使用以太网 3 兆位每秒连接。 此版本的以太网 IETF RFC 895 中定义。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Slip">
      <summary>网络接口使用串行线路 Internet 协议 (SLIP) 连接。 滑动 IETF RFC 1055 中定义。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Atm">
      <summary>网络接口使用异步传输模式 (ATM) 进行数据传输。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.GenericModem">
      <summary>网络接口使用调制解调器。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.FastEthernetT">
      <summary>网络接口在双绞线上使用快速以太网连接，并提供每秒 100 兆位的数据速率。 此类型的连接也称为 100Base t。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Isdn">
      <summary>网络接口使用 ISDN 和 X.25 协议配置的连接。 X.25 允许使用中间计算机进行通信的公用网络上的计算机。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.FastEthernetFx">
      <summary>网络接口使用通过光纤快速以太网连接，并提供每秒 100 兆位的数据速率。 此类型也称为是连接的 100Base FX。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wireless80211">
      <summary>网络接口使用无线 LAN 连接 (IEEE 802.11 标准)。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.AsymmetricDsl">
      <summary>网络接口使用非对称的数字订户线路 (ADSL)。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.RateAdaptDsl">
      <summary>网络接口使用速率自适应数字订户线路 (RADSL)。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.SymmetricDsl">
      <summary>网络接口使用对称的数字订户线路 (SDSL)。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.VeryHighSpeedDsl">
      <summary>网络接口使用非常高的数据速率数字订户线路 (VDSL)。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.IPOverAtm">
      <summary>网络接口的数据传输与异步传输模式 (ATM) 结合使用 Internet 协议 (IP)。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.GigabitEthernet">
      <summary>网络接口使用千兆以太网连接，并提供 1000 兆位 / 秒 （每秒 1 千兆比特） 的数据速率。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Tunnel">
      <summary>网络接口使用隧道连接。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.MultiRateSymmetricDsl">
      <summary>网络接口使用多速率数字订户线路。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.HighPerformanceSerialBus">
      <summary>网络接口使用高性能串行总线。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wman">
      <summary>网络接口为 WiMax 设备使用移动宽带接口。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wwanpp">
      <summary>网络接口使用 GSM 基于设备的移动宽带接口。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.NetworkInterfaceType.Wwanpp2">
      <summary>网络接口使用 CDMA 基于设备的移动宽带接口。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.OperationalStatus">
      <summary>指定网络接口的操作状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Up">
      <summary>网络接口已启动;它可以传输数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Down">
      <summary>网络接口不能传输数据包。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Testing">
      <summary>网络接口正在运行测试。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Unknown">
      <summary>网络接口的状态未知。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.Dormant">
      <summary>网络接口未处于传输数据包; 的状态它正在等待外部事件。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.NotPresent">
      <summary>网络接口不能传输数据包，由于缺少一个组件，通常为硬件组件。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.OperationalStatus.LowerLayerDown">
      <summary>网络接口不能传输数据包，因为它在一个或多个其他接口，之上运行，而至少一个这些"低层"接口已关闭。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PhysicalAddress">
      <summary>为网络接口 （适配器） 提供的媒体访问控制 (MAC) 地址。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.Ping">
      <summary>允许应用程序确定远程计算机是否可访问网络。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PingCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PingCompletedEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件 <see cref="T:System.Net.NetworkInformation.Ping" /> 对象。</summary>
      <param name="sender">根源 <see cref="E:System.Net.NetworkInformation.Ping.PingCompleted" /> 事件。</param>
      <param name="e">一个 <see cref="T:System.Net.NetworkInformation.PingCompletedEventArgs" />  对象，其中包含事件数据。</param>
    </member>
    <member name="T:System.Net.NetworkInformation.PingException">
      <summary>当 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 或 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 方法调用的方法引发异常时引发的异常。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PingOptions">
      <summary>用于控制如何 <see cref="T:System.Net.NetworkInformation.Ping" /> 传输数据包。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PingReply">
      <summary>提供有关的状态和生成的数据的信息 <see cref="Overload:System.Net.NetworkInformation.Ping.Send" /> 或 <see cref="Overload:System.Net.NetworkInformation.Ping.SendAsync" /> 操作。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.PrefixOrigin">
      <summary>指定一个 IP 地址网络前缀的方式。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Other">
      <summary>前缀是定位使用未指定的源。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Manual">
      <summary>手动配置该前缀。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.WellKnown">
      <summary>该前缀是人所熟知的前缀。 指定标准跟踪征求意见文档 (RFC) 文档和由 Internet 号码分配机构 (Iana) 或地址注册表分配熟知的前缀。 此类的前缀被保留用于特殊用途。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.Dhcp">
      <summary>前缀是由动态主机配置协议 (DHCP) 服务器提供的。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.PrefixOrigin.RouterAdvertisement">
      <summary>前缀是通过路由器公告提供的。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.ScopeLevel">
      <summary>对于 IPv6 地址作用域级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.None">
      <summary>未指定作用域级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Interface">
      <summary>作用域是界面级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Link">
      <summary>作用域是链接级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Subnet">
      <summary>作用域是子网级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Admin">
      <summary>作用域是管理级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Site">
      <summary>作用域是网站级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Organization">
      <summary>作用域是组织级别。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.ScopeLevel.Global">
      <summary>作用域是全局的。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.SuffixOrigin">
      <summary>指定 IP 地址主机后缀的方式。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Other">
      <summary>后缀已找到使用未指定的源。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Manual">
      <summary>手动配置该后缀。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.WellKnown">
      <summary>后缀是已知的后缀。 指定标准跟踪征求意见文档 (RFC) 文档和由 Internet 号码分配机构 (Iana) 或地址注册表分配熟知的后缀。 这样的后缀将保留用于特殊用途。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.OriginDhcp">
      <summary>后缀提供的动态主机配置协议 (DHCP) 服务器。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.LinkLayerAddress">
      <summary>后缀是链接本地后缀。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.SuffixOrigin.Random">
      <summary>后缀是随机分配。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpConnectionInformation">
      <summary>本地计算机上提供有关传输控制协议 (TCP) 连接的信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpState">
      <summary>指定的传输控制协议 (TCP) 连接的状态。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Unknown">
      <summary>TCP 连接状态为未知。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Closed">
      <summary>TCP 连接已关闭。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Listen">
      <summary>TCP 连接的本地终结点侦听来自任何远程终结点的连接请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.SynSent">
      <summary>TCP 连接的本地终结点已发送的远程终结点的同步 (SYN) 控制位的段标头设置，并且正在等待对匹配的连接请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.SynReceived">
      <summary>TCP 连接的本地终结点已发送和接收连接请求并且正在等待确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Established">
      <summary>TCP 握手已完成。 已建立的连接，并且可以发送数据。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.FinWait1">
      <summary>TCP 连接的本地终结点将等待来自远程端点的连接终止请求或对先前发送的连接终止请求的确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.FinWait2">
      <summary>TCP 连接的本地终结点正在等待来自远程端点的连接终止请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.CloseWait">
      <summary>TCP 连接的本地终结点正在等待来自本地用户的连接终止请求。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.Closing">
      <summary>TCP 连接的本地终结点正在等待对先前发送的连接终止请求的确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.LastAck">
      <summary>TCP 连接的本地终结点正在等待先前发送的连接终止请求的最终确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.TimeWait">
      <summary>TCP 连接的本地终结点正在等待足够的时间来传递，以确保远程终结点接收其连接终止请求的确认。</summary>
    </member>
    <member name="F:System.Net.NetworkInformation.TcpState.DeleteTcb">
      <summary>正在删除 TCP 连接的传输控制缓冲区 (TCB)。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.TcpStatistics">
      <summary>提供传输控制协议 (TCP) 统计数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.UdpStatistics">
      <summary>提供用户数据报协议 (UDP) 统计数据。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.UnicastIPAddressInformation">
      <summary>提供有关网络接口的单播地址信息。</summary>
    </member>
    <member name="T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection">
      <summary>将一组存储 <see cref="T:System.Net.NetworkInformation.UnicastIPAddressInformation" /> 类型。</summary>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.OpenReadCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.OpenReadCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.ProtocolViolationException">
      <summary>使用网络协议期间出错时引发的异常。</summary>
    </member>
    <member name="T:System.Net.Security.AuthenticatedStream">
      <summary>提供用于通过流传递凭据和请求或客户端-服务器应用程序执行身份验证方法。</summary>
    </member>
    <member name="T:System.Net.Security.AuthenticationLevel">
      <summary>指定的身份验证和模拟客户端要求使用时 <see cref="T:System.Net.WebRequest" /> 类和派生的类，以请求资源。</summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.None">
      <summary>不进行身份验证是必需的客户端和服务器。</summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequested">
      <summary>客户端和服务器应进行身份验证。 如果服务器未经过身份验证，该请求不会失败。 若要确定是否发生了相互身份验证，请检查的值 <see cref="P:System.Net.WebResponse.IsMutuallyAuthenticated" /> 属性。</summary>
    </member>
    <member name="F:System.Net.Security.AuthenticationLevel.MutualAuthRequired">
      <summary>客户端和服务器应进行身份验证。 如果服务器未经过身份验证，则应用程序将收到 <see cref="T:System.IO.IOException" /> 与 <see cref="T:System.Net.ProtocolViolationException" /> 内部异常，指示相互身份验证失败</summary>
    </member>
    <member name="T:System.Net.Security.EncryptionPolicy">
      <summary>若要使用政策。</summary>
    </member>
    <member name="F:System.Net.Security.EncryptionPolicy.RequireEncryption">
      <summary>要求加密，并且永远不会允许使用 NULL 密码。</summary>
    </member>
    <member name="F:System.Net.Security.EncryptionPolicy.AllowNoEncryption">
      <summary>更喜欢使用完全加密，但如果在服务器同意允许 NULL 密码 （不加密）。</summary>
    </member>
    <member name="F:System.Net.Security.EncryptionPolicy.NoEncryption">
      <summary>允许没有加密，并请求如果另一个终结点可以处理 NULL 密码的情况下使用 NULL 密码。</summary>
    </member>
    <member name="T:System.Net.Security.LocalCertificateSelectionCallback">
      <summary>选择用于进行身份验证的本地安全套接字层 (SSL) 证书。</summary>
      <param name="sender">一个包含此验证的状态信息的对象。</param>
      <param name="targetHost">指定客户端的主机服务器。</param>
      <param name="localCertificates">
        <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 包含本地证书。</param>
      <param name="remoteCertificate">用于对远程方进行身份验证的证书。</param>
      <param name="acceptableIssuers">一个 <see cref="T:System.String" /> 可接受的远程方的证书颁发者的数组。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 用于建立 SSL 连接。</returns>
    </member>
    <member name="T:System.Net.Security.NegotiateStream">
      <summary>提供了一个流，它使用 Negotiate 安全协议进行身份验证客户端上，和 （可选） 服务器上的，在客户端-服务器通信。</summary>
    </member>
    <member name="T:System.Net.Security.ProtectionLevel">
      <summary>指示为已经过身份验证流请求的安全服务。</summary>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.None">
      <summary>仅使用身份验证。</summary>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.Sign">
      <summary>数据签名，以帮助确保传输数据的完整性。</summary>
    </member>
    <member name="F:System.Net.Security.ProtectionLevel.EncryptAndSign">
      <summary>加密和签名数据，以帮助确保保密性和传输数据的完整性。</summary>
    </member>
    <member name="T:System.Net.Security.RemoteCertificateValidationCallback">
      <summary>验证用于进行身份验证的远程安全套接字层 (SSL) 证书。</summary>
      <param name="sender">一个包含此验证的状态信息的对象。</param>
      <param name="certificate">用于对远程方进行身份验证的证书。</param>
      <param name="chain">与远程证书相关联的证书颁发机构链。</param>
      <param name="sslPolicyErrors">与远程证书关联的一个或多个错误。</param>
      <returns>一个 <see cref="T:System.Boolean" /> 值，该值确定是否进行身份验证接受指定的证书。</returns>
    </member>
    <member name="T:System.Net.Security.SslPolicyErrors">
      <summary>枚举安全套接字层 (SSL) 策略错误。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.None">
      <summary>没有 SSL 策略错误。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNotAvailable">
      <summary>证书不可用。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateNameMismatch">
      <summary>证书名称不匹配。</summary>
    </member>
    <member name="F:System.Net.Security.SslPolicyErrors.RemoteCertificateChainErrors">
      <summary>
        <see cref="P:System.Security.Cryptography.X509Certificates.X509Chain.ChainStatus" /> 返回一个非空数组。</summary>
    </member>
    <member name="T:System.Net.Security.SslStream">
      <summary>提供使用安全套接字层 (SSL) 安全协议进行身份验证服务器和 （可选） 客户端的客户端-服务器通信所用的流。</summary>
    </member>
    <member name="T:System.Net.SecurityProtocolType">
      <summary>指定 Schannel 安全包支持的安全协议。</summary>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Ssl3">
      <summary>指定安全套接字层 (SSL) 3.0 安全协议。</summary>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Tls">
      <summary>指定传输层安全 (TLS) 1.0 安全协议。</summary>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Tls11">
      <summary>指定传输层安全 (TLS) 1.1 安全协议。</summary>
    </member>
    <member name="F:System.Net.SecurityProtocolType.Tls12">
      <summary>指定传输层安全 (TLS) 1.2 安全协议。</summary>
    </member>
    <member name="T:System.Net.ServicePoint">
      <summary>提供 HTTP 连接的连接管理。</summary>
    </member>
    <member name="T:System.Net.ServicePointManager">
      <summary>管理 <see cref="T:System.Net.ServicePoint" /> 对象集合。</summary>
    </member>
    <member name="T:System.Net.SocketAddress">
      <summary>存储序列化信息从 <see cref="T:System.Net.EndPoint" /> 派生的类。</summary>
    </member>
    <member name="T:System.Net.SocketPermission">
      <summary>若要建立或接受连接的传输地址上的控件权限。</summary>
    </member>
    <member name="T:System.Net.SocketPermissionAttribute">
      <summary>指定到控件的安全操作 <see cref="T:System.Net.Sockets.Socket" /> 连接。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.Sockets.AddressFamily">
      <summary>指定的寻址方案的一个实例 <see cref="T:System.Net.Sockets.Socket" /> 类可以使用。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unknown">
      <summary>未知的地址族。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
      <summary>未指定的地址族。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unix">
      <summary>Unix 本地主机地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
      <summary>IP 版本 4 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.ImpLink">
      <summary>当初 ARPANET 导入地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Pup">
      <summary>PUP 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Chaos">
      <summary>MIT 混乱不堪的局面协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NS">
      <summary>Xerox NS 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ipx">
      <summary>IPX 或 SPX 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Iso">
      <summary>对 ISO 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Osi">
      <summary>OSI 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ecma">
      <summary>欧洲计算机制造商协会 (ECMA) 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataKit">
      <summary>Datakit 协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ccitt">
      <summary>对于 CCITT 协议，如 X.25 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Sna">
      <summary>IBM SNA 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DecNet">
      <summary>DECnet 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.DataLink">
      <summary>直接链接数据接口地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Lat">
      <summary>LAT 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.HyperChannel">
      <summary>NSC Hyperchannel 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.AppleTalk">
      <summary>AppleTalk 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetBios">
      <summary>NetBios 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.VoiceView">
      <summary>VoiceView 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.FireFox">
      <summary>FireFox 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Banyan">
      <summary>Banyan 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Atm">
      <summary>本机 ATM 服务地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
      <summary>IP 版本 6 的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Cluster">
      <summary>针对 Microsoft 群集产品的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Ieee12844">
      <summary>IEEE 1284.4 工作组地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Irda">
      <summary>IrDA 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.NetworkDesigners">
      <summary>网络设计器 OSI 网关启用的协议的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Max">
      <summary>最大地址。</summary>
    </member>
    <member name="T:System.Net.Sockets.IOControlCode">
      <summary>指定支持的 IO 控制代码 <see cref="M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])" /> 方法。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AsyncIO">
      <summary>启用数据正在等待要接收的通知。 此值等于 Winsock 2 FIOASYNC 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NonBlockingIO">
      <summary>控件的套接字的阻塞行为。 如果指定使用此控制代码的参数为零，则套接字置于锁定模式。 如果参数为非零，则套接字置于非锁定模式。 此值等于 Winsock 2 FIONBIO 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DataToRead">
      <summary>返回可供读取的字节数。 此值等于 Winsock 2 FIONREAD 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.OobDataRead">
      <summary>返回有关等待接收的带外数据的信息。 在流套接字上使用此控制代码，则返回值指示可用字节数。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AssociateHandle">
      <summary>将此套接字与附带接口的指定句柄相关联。 请参考 Winsock 2 参考或更多详细信息的特定附带接口文档中相应的特定于协议的附录。 建议的组件对象模型 (COM) 来代替此 IOCTL 可以发现和套接字跟踪可能支持其他接口。 此控制代码是可行的向后兼容的系统 COM 不可用或不能用于其他原因的位置。 此值等于 Winsock 2 SIO_ASSOCIATE_HANDLE 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.EnableCircularQueuing">
      <summary>在传入的消息队列已满时，将替换为传入的数据报最旧的排队数据报。 此值等于 Winsock 2 SIO_ENABLE_CIRCULAR_QUEUEING 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.Flush">
      <summary>放弃发送队列的内容。 此值等于 Winsock 2 SIO_FLUSH 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetBroadcastAddress">
      <summary>返回一个包含为当前的套接字地址族的广播的地址的 SOCKADDR 结构。 返回的地址可与 <see cref="Overload:System.Net.Sockets.Socket.SendTo" /> 方法。 此值等于 Winsock 2 SIO_GET_BROADCAST_ADDRESS 常量。 可以在用户数据报协议 (UDP) 套接字上使用此值。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetExtensionFunctionPointer">
      <summary>获取不可 Winsock 规范的一部分的提供程序特有的功能。 使用其提供程序分配的 GUID 来指定函数。 此值等于 Winsock 2 SIO_GET_EXTENSION_FUNCTION_POINTER 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetQos">
      <summary>检索与套接字关联的 QOS 结构。 此控件仅提供具有 QOS 能力的传输 （Windows Me、 Windows 2000 和更高版本） 的平台上受支持 此值等于 Winsock 2 SIO_GET_QOS 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.GetGroupQos">
      <summary>返回套接字组的服务质量 (QOS) 属性。 此值是保留供将来使用，并且等同于 Winsock 2 SIO_GET_GROUP_QOS 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MultipointLoopback">
      <summary>控制是否对套接字所发送的多路广播的数据显示为套接字中的传入数据接收队列。 此值等于 Winsock 2 SIO_MULTIPOINT_LOOPBACK 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastScope">
      <summary>控制多路广播的数据包通过路由器，也称为生存时间 (TTL)，可以将转发或跃点计数次数。 此值等于 Winsock 2 SIO_MULTICAST_SCOPE 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetQos">
      <summary>设置套接字的服务质量 (QOS) 属性。 QOS 定义套接字的带宽要求。 此控制代码支持 Windows Me、 Windows 2000 和更高版本操作系统。 此值等于 Winsock 2 SIO_SET_QOS 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.SetGroupQos">
      <summary>套接字组设置的服务质量 (QOS) 属性。 此值是保留供将来使用，并且等同于 Winsock 2 SIO_SET_GROUP_QOS 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.TranslateHandle">
      <summary>返回的套接字的附带接口的上下文中有效的句柄。 此值等于 Winsock 2 SIO_TRANSLATE_HANDLE 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceQuery">
      <summary>返回可用来连接到指定的远程地址的接口地址。 此值等于 Winsock 2 SIO_ROUTING_INTERFACE_QUERY 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.RoutingInterfaceChange">
      <summary>启用了本地界面用于访问远程终结点更改时接收通知。 此值等于 Winsock 2 SIO_ROUTING_INTERFACE_CHANGE 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListQuery">
      <summary>返回的套接字可以绑定到的本地接口的列表。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_ADDRESS_LIST_QUERY 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListChange">
      <summary>启用的本地接口的套接字协议族列表发生变化时接收通知。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_ADDRESS_LIST_CHANGE 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.QueryTargetPnpHandle">
      <summary>检索基础提供程序的套接字句柄。 此句柄可以用于接收即插即用播放事件通知。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_QUERY_TARGET_PNP_HANDLE 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.NamespaceChange">
      <summary>控制命名空间查询将变为无效时，套接字是否收到通知。 在 Windows XP 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_NSP_NOTIFY_CHANGE 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddressListSort">
      <summary>返回的结构进行排序 <see cref="F:System.Net.Sockets.IOControlCode.AddressListQuery" /> 字段并添加对于 IPv6 地址的作用域 ID 信息。 在 Windows XP 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_ADDRESS_LIST_SORT 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAll">
      <summary>启用在网络上的所有 IPv4 数据包的都接收。 套接字必须具有地址族 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, ，套接字类型必须为 <see cref="F:System.Net.Sockets.SocketType.Raw" />, ，并且协议类型必须为 <see cref="F:System.Net.Sockets.ProtocolType.IP" />。 当前用户必须属于本地计算机上 Administrators 组和套接字必须绑定到特定端口。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_RCVALL 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllMulticast">
      <summary>启用在网络上的所有多播的 IPv4 数据包的接收。 这些都是具有范围 224.0.0.0 到 239.255.255.255 中的目标地址的数据包。 套接字必须具有地址族 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, ，套接字类型必须为 <see cref="F:System.Net.Sockets.SocketType.Raw" />, ，并且协议类型必须为 <see cref="F:System.Net.Sockets.ProtocolType.Udp" />。 当前用户必须属于本地计算机上 Administrators 组和套接字必须绑定到特定端口。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_RCVALL_MCAST 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.ReceiveAllIgmpMulticast">
      <summary>启用在网络上的所有 Internet 组管理协议 (IGMP) 数据包的都接收。 套接字必须具有地址族 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />, ，套接字类型必须为 <see cref="F:System.Net.Sockets.SocketType.Raw" />, ，并且协议类型必须为 <see cref="F:System.Net.Sockets.ProtocolType.Igmp" />。 当前用户必须属于本地计算机上 Administrators 组和套接字必须绑定到特定端口。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_RCVALL_IGMPMCAST 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.KeepAliveValues">
      <summary>控制发送 TCP keep-alive 数据包以及从该处发送的时间间隔。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 有关其他信息，请参阅 RFC 1122 4.2.3.6。 此值等于 Winsock 2 SIO_KEEPALIVE_VALS 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AbsorbRouterAlert">
      <summary>此值等于 Winsock 2 SIO_ABSORB_RTRALERT 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.UnicastInterface">
      <summary>设置用于输出的单播数据包的接口。 此值等于 Winsock 2 SIO_UCAST_IF 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.LimitBroadcasts">
      <summary>此值等于 Winsock 2 SIO_LIMIT_BROADCASTS 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.BindToInterface">
      <summary>将对套接字绑定到指定的接口索引。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_INDEX_BIND 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.MulticastInterface">
      <summary>设置用于输出的多路广播数据包的接口。 该接口由其索引标识。 在 Windows 2000 和更高版本操作系统上支持此控制代码。  此值等于 Winsock 2 SIO_INDEX_MCASTIF 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.AddMulticastGroupOnInterface">
      <summary>加入多播的组使用的索引标识的接口。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_INDEX_ADD_MCAST 常量。</summary>
    </member>
    <member name="F:System.Net.Sockets.IOControlCode.DeleteMulticastGroupFromInterface">
      <summary>从多播组中删除对套接字。 在 Windows 2000 和更高版本操作系统上支持此控制代码。 此值等于 Winsock 2 SIO_INDEX_ADD_MCAST 常量。</summary>
    </member>
    <member name="T:System.Net.Sockets.IPPacketInformation">
      <summary>显示数据包信息通过调用 <see cref="M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" /> 或 <see cref="M:System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" />。</summary>
    </member>
    <member name="T:System.Net.Sockets.IPProtectionLevel">
      <summary>一个值，使限制为指定的范围，例如具有相同的链接本地地址或站点本地前缀将 IPv6 套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Unspecified">
      <summary>未指定 IP 保护级别。 在 Windows 7 和 Windows Server 2008 R2，套接字上的 IP 保护级别的默认值是未指定。</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Unrestricted">
      <summary>IP 保护级别是不受限制。 用于在 Internet 上，包括利用 IPv6 NAT 遍历功能构建的应用程序中运行的应用程序将使用此值到窗口 (例如 Teredo)。 这些应用程序可能会绕过 IPv4 防火墙，因此应用程序必须强制写入免受 Internet 攻击定向开放端口。 在 Windows Server 2008 R2 和 Windows Vista 上，是不受限制的默认值为套接字上的 IP 保护级别。</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.EdgeRestricted">
      <summary>IP 保护级别是受限制的边缘。 用于在 Internet 上运行的应用程序将使用此值。 此设置不允许使用 Windows Teredo 实现的网络地址转换 (NAT) 遍历。 这些应用程序可能会绕过 IPv4 防火墙，因此应用程序必须强制写入免受 Internet 攻击定向开放端口。 在 Windows Server 2003 和 Windows XP 上，套接字上的 IP 保护级别的默认值是受限的边缘。</summary>
    </member>
    <member name="F:System.Net.Sockets.IPProtectionLevel.Restricted">
      <summary>IP 保护级别是受限制。 未实现 Internet 方案中的 intranet 应用程序将使用此值。 这些应用程序通常不经过测试或强化了抵御 Internet 样式的攻击。 此设置将限制为仅限链接本地已接收的通信。</summary>
    </member>
    <member name="T:System.Net.Sockets.IPv6MulticastOption">
      <summary>包含用于联接 IPv6 多播的组选项值。</summary>
    </member>
    <member name="T:System.Net.Sockets.LingerOption">
      <summary>指定是否 <see cref="T:System.Net.Sockets.Socket" /> 也会保持连接到在调用后 <see cref="M:System.Net.Sockets.Socket.Close" /> 或 <see cref="M:System.Net.Sockets.TcpClient.Close" /> 连接的方法和它将保持的时间长度，如果仍然要发送数据。</summary>
    </member>
    <member name="T:System.Net.Sockets.MulticastOption">
      <summary>包含 <see cref="T:System.Net.IPAddress" /> 用于联接和丢弃多播的组的值。</summary>
    </member>
    <member name="T:System.Net.Sockets.NetworkStream">
      <summary>提供网络访问的基础流的数据。</summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolFamily">
      <summary>指定的协议的类型的实例 <see cref="T:System.Net.Sockets.Socket" /> 类可以使用。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unknown">
      <summary>未知的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unspecified">
      <summary>未指定的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Unix">
      <summary>Unix 本地主机协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetwork">
      <summary>IP 版本 4 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.ImpLink">
      <summary>当初 ARPANET 导入协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Pup">
      <summary>PUP 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Chaos">
      <summary>MIT 混乱的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NS">
      <summary>Xerox NS 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ipx">
      <summary>IPX 或 SPX 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Iso">
      <summary>ISO 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Osi">
      <summary>OSI 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ecma">
      <summary>欧洲计算机制造商协会 (ECMA) 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataKit">
      <summary>DataKit 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ccitt">
      <summary>CCITT 协议，如 X.25。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Sna">
      <summary>IBM SNA 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DecNet">
      <summary>DECNet 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.DataLink">
      <summary>将数据定向链接协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Lat">
      <summary>LAT 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.HyperChannel">
      <summary>NSC HyperChannel 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.AppleTalk">
      <summary>AppleTalk 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetBios">
      <summary>NetBIOS 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.VoiceView">
      <summary>VoiceView 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.FireFox">
      <summary>FireFox 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Banyan">
      <summary>Banyan 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Atm">
      <summary>本机 ATM 服务协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.InterNetworkV6">
      <summary>IP 版本 6 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Cluster">
      <summary>Microsoft 群集产品协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Ieee12844">
      <summary>IEEE 1284.4 工作组协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Irda">
      <summary>IrDA 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.NetworkDesigners">
      <summary>网络设计器 OSI 网关已启用的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolFamily.Max">
      <summary>最大的协议。</summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolType">
      <summary>指定 <see cref="T:System.Net.Sockets.Socket" /> 类支持的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IP">
      <summary>Internet 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6HopByHopOptions">
      <summary>IPv6 逐跳选项标头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Icmp">
      <summary>Internet 控制消息协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Igmp">
      <summary>Internet 组管理协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ggp">
      <summary>网关到网关协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv4">
      <summary>Internet 协议版本 4。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Tcp">
      <summary>传输控制协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Pup">
      <summary>PARC 通用数据包协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Udp">
      <summary>用户数据报协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Idp">
      <summary>Internet 数据报协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6">
      <summary>Internet 协议版本 6 (IPv6)。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6RoutingHeader">
      <summary>IPv6 路由标头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6FragmentHeader">
      <summary>IPv6 片段标头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecEncapsulatingSecurityPayload">
      <summary>IPv6 封装安全负载标头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPSecAuthenticationHeader">
      <summary>IPv6 身份验证标头。 有关详细信息，请参阅 http://www.ietf.org 上的 RFC 2292，2.2.1 节。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IcmpV6">
      <summary>IPv6 的 Internet 控制消息协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6NoNextHeader">
      <summary>IPv6 无下一个标头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.IPv6DestinationOptions">
      <summary>IPv6 目标选项标头。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.ND">
      <summary>网络磁盘协议（非正式）。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Raw">
      <summary>原始 IP 数据包协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
      <summary>未指定的协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Ipx">
      <summary>Internet 数据包交换协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Spx">
      <summary>顺序包交换协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.SpxII">
      <summary>顺序包交换版本 2 协议。</summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unknown">
      <summary>未知的协议。</summary>
    </member>
    <member name="T:System.Net.Sockets.SelectMode">
      <summary>定义的轮询模式 <see cref="M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)" /> 方法。</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectRead">
      <summary>读状态模式。</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectWrite">
      <summary>写状态模式。</summary>
    </member>
    <member name="F:System.Net.Sockets.SelectMode.SelectError">
      <summary>错误状态模式。</summary>
    </member>
    <member name="T:System.Net.Sockets.SendPacketsElement">
      <summary>表示一个元素在 <see cref="T:System.Net.Sockets.SendPacketsElement" /> 数组。</summary>
    </member>
    <member name="T:System.Net.Sockets.Socket">
      <summary>实现 Berkeley 套接字接口。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncEventArgs">
      <summary>表示异步套接字操作。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncOperation">
      <summary>最近使用此上下文对象执行的异步套接字操作的类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.None">
      <summary>非套接字操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Accept">
      <summary>套接字的接收操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Connect">
      <summary>套接字连接操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Disconnect">
      <summary>套接字的断开连接操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Receive">
      <summary>套接字的接收操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveFrom">
      <summary>套接字的联系人操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.ReceiveMessageFrom">
      <summary>套接字的 ReceiveMessageFrom 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Send">
      <summary>套接字的发送操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendPackets">
      <summary>套接字的 SendPackets 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.SendTo">
      <summary>套接字的发送到操作。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketClientAccessPolicyProtocol">
      <summary>指定要下载客户端访问策略文件的方法。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketClientAccessPolicyProtocol.Tcp">
      <summary>使用 TCP 端口 943 上运行的自定义 TCP 协议下载套接字策略文件。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketClientAccessPolicyProtocol.Http">
      <summary>套接字策略文件是使用 HTTP 协议 943 的 TCP 端口上运行下载的。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketError">
      <summary>定义的错误代码 <see cref="T:System.Net.Sockets.Socket" /> 类。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Success">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 操作成功。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketError">
      <summary>未指定 <see cref="T:System.Net.Sockets.Socket" /> 发生错误。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Interrupted">
      <summary>阻塞 <see cref="T:System.Net.Sockets.Socket" /> 调用已被取消。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AccessDenied">
      <summary>尝试访问 <see cref="T:System.Net.Sockets.Socket" /> 禁止使用其访问权限的方式。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Fault">
      <summary>检测到无效的指针地址的基础套接字提供程序。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
      <summary>无效的参数提供给 <see cref="T:System.Net.Sockets.Socket" /> 成员。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
      <summary>在基础套接字提供程序中有太多打开套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.WouldBlock">
      <summary>不能立即完成对非阻止套接字的操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InProgress">
      <summary>阻止操作正在进行。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
      <summary>非阻塞 <see cref="T:System.Net.Sockets.Socket" /> 已有一个操作正在进行中。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotSocket">
      <summary>一个 <see cref="T:System.Net.Sockets.Socket" /> 试图在非套接字上操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
      <summary>在上一个操作中被省略了必需的地址 <see cref="T:System.Net.Sockets.Socket" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.MessageSize">
      <summary>数据报是太长。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolType">
      <summary>协议类型不正确此 <see cref="T:System.Net.Sockets.Socket" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
      <summary>与使用了未知、 无效或不受支持的选项或级别 <see cref="T:System.Net.Sockets.Socket" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
      <summary>采用协议未实施或未配置。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
      <summary>此地址族中不存在指定的套接字类型的支持。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
      <summary>协议系列不支持地址系列。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
      <summary>协议系列未实施或未配置。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
      <summary>不支持指定的地址族。 如果指定 IPv6 地址族，并且在本地计算机上未安装 IPv6 堆栈，将返回此错误。 如果指定了 IPv4 地址族并且 IPv4 堆栈未安装在本地计算机上，将返回此错误。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
      <summary>通常情况下允许只能有一个使用的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
      <summary>所选的 IP 地址在此上下文中无效。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkDown">
      <summary>网络不可用。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
      <summary>不存在的路由与远程主机。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkReset">
      <summary>应用程序试图设置 <see cref="F:System.Net.Sockets.SocketOptionName.KeepAlive" /> 已超时的连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
      <summary>连接已中止.NET Framework 或基础套接字提供程序。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
      <summary>连接被远程对等方重置。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
      <summary>没有可用缓冲区的空间可供 <see cref="T:System.Net.Sockets.Socket" /> 操作。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IsConnected">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 已连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotConnected">
      <summary>应用程序尝试发送或接收数据，与 <see cref="T:System.Net.Sockets.Socket" /> 未连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Shutdown">
      <summary>若要发送或接收数据的请求被禁止，因为 <see cref="T:System.Net.Sockets.Socket" /> 已关闭。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TimedOut">
      <summary>连接尝试超时或被连接的主机未能响应。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
      <summary>远程主机正在主动拒绝连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostDown">
      <summary>操作失败，因为远程主机已关闭。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
      <summary>没有到指定的主机的网络路由。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
      <summary>太多的进程正在使用基础套接字提供程序。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
      <summary>网络子系统不可用。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
      <summary>版本的基础套接字提供超出了范围。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotInitialized">
      <summary>尚未初始化基础套接字提供程序。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Disconnecting">
      <summary>正常关闭正在进行中。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
      <summary>找不到指定的类。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostNotFound">
      <summary>此主机不是已知的。 名称不是正式的主机名或别名。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TryAgain">
      <summary>无法解析主机的名称。 请稍后再试。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoRecovery">
      <summary>是不可恢复的错误或找不到所请求的数据库。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoData">
      <summary>名称服务器上未找到请求的名称或 IP 地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IOPending">
      <summary>应用程序已开始将重叠的操作不能立即完成的。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationAborted">
      <summary>将重叠的操作已中止的闭包由于 <see cref="T:System.Net.Sockets.Socket" />。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketException">
      <summary>发生套接字错误时引发的异常。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketFlags">
      <summary>指定套接字的发送和接收行为。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.None">
      <summary>为使此调用中使用任何标志。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.OutOfBand">
      <summary>处理带外数据。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Peek">
      <summary>查看传入消息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.DontRoute">
      <summary>不使用路由表发送。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.MaxIOVectorLength">
      <summary>提供的用于发送和接收数据的 WSABUF 结构数的标准值。 此值不使用或支持 .NET Framework 4.5。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Truncated">
      <summary>消息太大，以至于无法放入指定的缓冲区，并且已被截断。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.ControlDataTruncated">
      <summary>指示控件数据不适合内部 64 KB 缓冲区且已被截断。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Broadcast">
      <summary>指示广播的数据包。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Multicast">
      <summary>表示多路广播的数据包。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketFlags.Partial">
      <summary>部分发送或接收消息。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketInformation">
      <summary>是复制所需的信息进行封装 <see cref="T:System.Net.Sockets.Socket" />。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketInformationOptions">
      <summary>描述状态 <see cref="T:System.Net.Sockets.Socket" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.NonBlocking">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 被阻止。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Connected">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.Listening">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 侦听新连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketInformationOptions.UseOnlyOverlappedIO">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 使用重叠的 I/O。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionLevel">
      <summary>定义为套接字选项级别 <see cref="M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)" /> 和 <see cref="M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)" /> 方法。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Socket">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项适用于所有套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IP">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 IP 套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.IPv6">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 IPv6 套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Tcp">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 TCP 套接字。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionLevel.Udp">
      <summary>
        <see cref="T:System.Net.Sockets.Socket" /> 选项仅适用于 UDP 套接字。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketOptionName">
      <summary>定义配置选项名称。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Debug">
      <summary>记录调试信息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AcceptConnection">
      <summary>套接字正在侦听。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseAddress">
      <summary>允许将套接字绑定到已在使用中的地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.KeepAlive">
      <summary>使用 keep-alive。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontRoute">
      <summary>不路由，将数据包直接发送到接口地址。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Broadcast">
      <summary>允许在套接字上发送广播消息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UseLoopback">
      <summary>可能时避开硬件。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Linger">
      <summary>如果存在未发送的数据，则在关闭时逗留。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.OutOfBandInline">
      <summary>接收正常数据流中的带外数据。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontLinger">
      <summary>完全关闭套接字，不做逗留。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ExclusiveAddressUse">
      <summary>使套接字能够为独占访问进行绑定。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendBuffer">
      <summary>指定为发送保留的每个套接字缓冲区空间的总量。 这与最大消息大小或 TCP 窗口的大小无关。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveBuffer">
      <summary>指定为接收保留的每个套接字缓冲区空间的总量。 这与最大消息大小或 TCP 窗口的大小无关。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendLowWater">
      <summary>为 <see cref="Overload:System.Net.Sockets.Socket.Send" /> 操作指定低水印。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveLowWater">
      <summary>为 <see cref="Overload:System.Net.Sockets.Socket.Receive" /> 操作指定低水印。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.SendTimeout">
      <summary>发送超时。 此选项只适用于同步方法，它对异步方法（如 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法）无效。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReceiveTimeout">
      <summary>接收超时。 此选项只适用于同步方法，它对异步方法（如 <see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)" /> 方法）无效。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Error">
      <summary>获取错误状态并清除。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Type">
      <summary>获取套接字类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ReuseUnicastPort">
      <summary>指示系统应延迟出站连接的临时端口分配。 这等效于使用 Winsock2 SO_REUSE_UNICASTPORT 套接字选项。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MaxConnections">
      <summary>不受支持；如果使用，将引发 <see cref="T:System.Net.Sockets.SocketException" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPOptions">
      <summary>指定要插入到输出数据报中的 IP 选项。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HeaderIncluded">
      <summary>指示应用程序为输出数据报提供 IP 头。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.TypeOfService">
      <summary>更改服务字段的 IP 头类型。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IpTimeToLive">
      <summary>设置 IP 头生存时间字段。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastInterface">
      <summary>为输出的多路广播数据包设置接口。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastTimeToLive">
      <summary>IP 多路广播生存时间。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.MulticastLoopback">
      <summary>IP 多路广播环回。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddMembership">
      <summary>添加一个 IP 组成员。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropMembership">
      <summary>放置一个 IP 组成员。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DontFragment">
      <summary>不对 IP 数据报进行分段。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.AddSourceMembership">
      <summary>联接源组。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.DropSourceMembership">
      <summary>放置一个源组。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BlockSource">
      <summary>阻止源中的数据。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UnblockSource">
      <summary>取消阻止先前被阻止的源。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.PacketInformation">
      <summary>返回有关接收到的数据包的信息。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.HopLimit">
      <summary>指定 Internet 协议版本 6 (IPv6) 数据包的最大路由器跃点数目。 这类似于 Internet 协议版本 4 的生存时间 (TTL)。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel">
      <summary>可用于将 IPv6 套接字限制为一个指定范围，例如限制为具有相同的链接本地或站点本地前缀的地址。利用此套接字选项，应用程序可以对 IPv6 套接字设置访问限制。 通过应用此类限制，可让在专用局域网上运行的应用程序能够通过简单的方式很好地增强自身的安全性，以便防范外部攻击。 此套接字选项可以扩大或缩小侦听套接字的范围，从而使得公共用户和私人用户可以在适当情况下对站点进行无限制的访问，或者可以根据需要对同一站点进行有限制的访问。 此套接字选项具有 <see cref="T:System.Net.Sockets.IPProtectionLevel" /> 枚举中指定的已定义保护级别。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.IPv6Only">
      <summary>指示为 AF_INET6 地址族创建的套接字是否仅适用于 IPv6 通信。 为 AF_INET6 地址族创建的套接字可用于 IPv6 和 IPv4 通信。 一些应用程序可能需要将为 AF_INET6 地址族创建的套接字限制为仅用于 IPv6 通信。 当此值不为零（Windows 上的默认值）时，为 AF_INET6 地址族创建的套接字只可用于发送和接收 IPv6 数据包。 当此值为零时，为 AF_INET6 地址族创建的套接字可用于向 IPv6 地址或 IPv4 地址发送数据包以及从 IPv6 地址或 IPv4 地址接收数据包。 请注意，需要使用 IPv4 映射地址才能与 IPv4 地址进行交互。 Windows Vista 或更高版本上支持此套接字选项。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoDelay">
      <summary>为发送合并禁用 Nagle 算法。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.BsdUrgent">
      <summary>使用 RFC-1222 中定义的紧急数据。 此选项只能设置一次，而且设置以后就不能关闭。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.Expedited">
      <summary>使用 RFC-1222 中定义的加急数据。 此选项只能设置一次，而且设置以后就不能关闭。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.NoChecksum">
      <summary>发送校验和设置为零的 UDP 数据报。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.ChecksumCoverage">
      <summary>设置或获取 UDP 校验和覆盖。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateAcceptContext">
      <summary>使用现有套接字的属性更新已接受套接字的属性。 这等效于使用 Winsock2 SO_UPDATE_ACCEPT_CONTEXT 套接字选项，并且仅在面向连接的套接字上受支持。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketOptionName.UpdateConnectContext">
      <summary>使用现有套接字的属性更新已连接套接字的属性。 这等效于使用 Winsock2 SO_UPDATE_CONNECT_CONTEXT 套接字选项，并且仅在面向连接的套接字上受支持。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketShutdown">
      <summary>定义由常数 <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" /> 方法。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Receive">
      <summary>禁用 <see cref="T:System.Net.Sockets.Socket" /> 用于接收。 此字段为常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Send">
      <summary>禁用 <see cref="T:System.Net.Sockets.Socket" /> 用于发送。 此字段为常数。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Both">
      <summary>禁用 <see cref="T:System.Net.Sockets.Socket" /> 来发送和接收。 此字段为常数。</summary>
    </member>
    <member name="T:System.Net.Sockets.SocketType">
      <summary>指定套接字类型的实例 <see cref="T:System.Net.Sockets.Socket" /> 类表示。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Stream">
      <summary>支持可靠、 双向、 基于连接的字节流，而无需复制数据，不保留边界。 一个 Socket 这种类型的通信与单个对等方并在可以开始通信之前需要远程主机的连接。<see cref="F:System.Net.Sockets.SocketType.Stream" /> 使用传输控制协议 (<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) <see cref="T:System.Net.Sockets.ProtocolType" /> 和 InterNetwork<see cref="T:System.Net.Sockets.AddressFamily" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Dgram">
      <summary>支持数据报，即为固定 （通常很小） 的最大长度的无连接的、 不可靠的消息。 消息可能会丢失或重复，并且可能不按顺序抵达。 一个 <see cref="T:System.Net.Sockets.Socket" /> 类型的 <see cref="F:System.Net.Sockets.SocketType.Dgram" /> 不需要任何连接之前发送和接收数据，并且可以与多个对等方通信。<see cref="F:System.Net.Sockets.SocketType.Dgram" /> 使用数据报协议 (<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) 和 <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /><see cref="T:System.Net.Sockets.AddressFamily" />。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Raw">
      <summary>支持访问基础传输协议。 使用 <see cref="T:System.Net.Sockets.SocketType" /><see cref="F:System.Net.Sockets.SocketType.Raw" />, ，您可以使用 Internet 控制消息协议等协议进行通信 (<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) 和 Internet 组管理协议 (<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />)。 在发送时，您的应用程序必须提供完整的 IP 标头。 接收数据报在返回的 IP 标头和选项保持不变。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Rdm">
      <summary>支持无连接、 面向消息的、 可靠地发送的消息，并保留在数据中的消息边界。 Rdm （可靠地发送的消息） 消息到达无重复和顺序。 此外，如果消息也会丢失，将通知发件人。 如果初始化 Socket 使用 <see cref="F:System.Net.Sockets.SocketType.Rdm" />, ，不需要远程主机的连接之前发送和接收数据。 与 <see cref="F:System.Net.Sockets.SocketType.Rdm" />, ，您可以与多个对等端进行通信。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Seqpacket">
      <summary>在网络中提供排序的字节流的面向连接的和可靠的双向传输。<see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> 并不重复数据，并保留在数据流中的边界。 一个 Socket 类型的 <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> 与单个对等方进行通信，并且在通信开始之前需要远程主机的连接。</summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Unknown">
      <summary>指定未知 Socket 类型。</summary>
    </member>
    <member name="T:System.Net.Sockets.TcpClient">
      <summary>为 TCP 网络服务提供客户端连接。</summary>
    </member>
    <member name="T:System.Net.Sockets.TcpListener">
      <summary>侦听的 TCP 网络客户端的连接。</summary>
    </member>
    <member name="T:System.Net.Sockets.TransmitFileOptions">
      <summary>
        <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 枚举定义的文件传输请求中使用的值。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread">
      <summary>使用的默认线程来处理长文件传输请求。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.Disconnect">
      <summary>开始传输级别毕竟断开数据已在排队传输的文件。 如果用于 <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket" />, ，这些标志套接字后返回到断开连接、 可重复使用的状态已传送该文件。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket">
      <summary>在请求完成时，可能重用套接字句柄。 此标志无效，只有当 <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" /> 还指定了。 如果用于 <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" />, ，这些标志套接字后返回到断开连接、 可重复使用的状态已传送该文件。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.WriteBehind">
      <summary>完成文件传输请求立即，而无需挂起。 如果指定此标志，并且文件传输成功，数据已接受的系统，但不是一定是由远程端确认。 请不要使用此标志与 <see cref="F:System.Net.Sockets.TransmitFileOptions.Disconnect" /> 和 <see cref="F:System.Net.Sockets.TransmitFileOptions.ReuseSocket" /> 标志。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseSystemThread">
      <summary>使用系统线程来处理长文件传输请求。</summary>
    </member>
    <member name="F:System.Net.Sockets.TransmitFileOptions.UseKernelApc">
      <summary>使用内核异步过程调用 (Apc) 而不是辅助线程来处理长文件传输请求。 长的请求被定义为需要从该文件或缓存中; 将多次单个读取的请求请求因此取决于文件的大小和指定的长度发送数据包。</summary>
    </member>
    <member name="T:System.Net.Sockets.UdpClient">
      <summary>提供用户数据报协议 (UDP) 网络服务。</summary>
    </member>
    <member name="T:System.Net.Sockets.UdpReceiveResult">
      <summary>显示 UDP 收到调用结果信息 <see cref="M:System.Net.Sockets.UdpClient.ReceiveAsync" /> 方法。</summary>
    </member>
    <member name="T:System.Net.TransportContext">
      <summary>
        <see cref="T:System.Net.TransportContext" /> 类提供了有关基础传输层的附加上下文。</summary>
    </member>
    <member name="T:System.Net.TransportType">
      <summary>定义传输类型为 <see cref="T:System.Net.SocketPermission" /> 和 <see cref="T:System.Net.Sockets.Socket" /> 类。</summary>
    </member>
    <member name="F:System.Net.TransportType.Udp">
      <summary>UDP 传输。</summary>
    </member>
    <member name="F:System.Net.TransportType.Connectionless">
      <summary>无连接，如 UDP 的传输类型。 指定此值具有相同的效果与指定 <see cref="F:System.Net.TransportType.Udp" />。</summary>
    </member>
    <member name="F:System.Net.TransportType.Tcp">
      <summary>TCP 传输。</summary>
    </member>
    <member name="F:System.Net.TransportType.ConnectionOriented">
      <summary>传输协议是面向，如 TCP 连接。 指定此值具有相同的效果与指定 <see cref="F:System.Net.TransportType.Tcp" />。</summary>
    </member>
    <member name="F:System.Net.TransportType.All">
      <summary>所有传输类型。</summary>
    </member>
    <member name="T:System.Net.UploadDataCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.UploadDataCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.UploadDataCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.UploadDataCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.UploadFileCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.UploadFileCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.UploadFileCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.UploadFileCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventArgs">
      <summary>将提供数据供 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 事件 <see cref="T:System.Net.WebClient" />。</summary>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.UploadProgressChanged" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.UploadProgressChangedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.UploadStringCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.UploadStringCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.UploadValuesCompletedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.UploadValuesCompletedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.UploadValuesCompleted" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">一个 <see cref="T:System.Net.UploadValuesCompletedEventArgs" /> 包含事件数据。</param>
    </member>
    <member name="T:System.Net.WebClient">
      <summary>提供用于将数据发送到和接收来自通过 URI 确认的资源数据的常用方法。</summary>
    </member>
    <member name="T:System.Net.WebException">
      <summary>通过可插入协议访问网络期间发生错误时引发的异常。</summary>
    </member>
    <member name="T:System.Net.WebExceptionStatus">
      <summary>定义状态代码 <see cref="T:System.Net.WebException" /> 类。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Success">
      <summary>不遇到任何错误。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.NameResolutionFailure">
      <summary>名称解析程序服务无法解析主机名。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
      <summary>在传输级别无法联系远程服务点。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ReceiveFailure">
      <summary>从远程服务器未收到完整的响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SendFailure">
      <summary>无法与远程服务器发送一个完整的请求。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.PipelineFailure">
      <summary>该请求是管线请求和连接被关闭之前收到响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
      <summary>请求已取消， <see cref="M:System.Net.WebRequest.Abort" /> 方法被调用，或者不可分类时出错。 这是 <see cref="P:System.Net.WebException.Status" /> 的默认值。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProtocolError">
      <summary>从服务器收到的响应已完成，但指示协议级错误。 例如，HTTP 协议错误，如 401 拒绝访问将使用此状态。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectionClosed">
      <summary>过早关闭连接。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.TrustFailure">
      <summary>无法验证服务器证书。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SecureChannelFailure">
      <summary>使用 SSL 建立连接时出错。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ServerProtocolViolation">
      <summary>服务器响应不是有效的 HTTP 响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.KeepAliveFailure">
      <summary>指定保持活动状态的标头的请求的连接意外关闭。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Pending">
      <summary>内部异步请求处于挂起状态。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Timeout">
      <summary>请求的超时期限内未不收到任何响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ProxyNameResolutionFailure">
      <summary>名称解析程序服务无法解析代理服务器主机名。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.UnknownError">
      <summary>发生未知类型的异常。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.MessageLengthLimitExceeded">
      <summary>已收到一条消息的发送请求时超出指定的限制或从服务器接收响应。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.CacheEntryNotFound">
      <summary>找不到指定的缓存项。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByCachePolicy">
      <summary>缓存策略不允许该请求。 一般情况下，发生这种情况时请求不缓存，而有效的策略禁止向服务器发送请求。 如果请求方法暗示请求正文的状态、 请求方法需要直接与服务器交互，或者请求包含条件标头，您可能会收到此状态。</summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestProhibitedByProxy">
      <summary>由该代理不允许此请求。</summary>
    </member>
    <member name="T:System.Net.WebHeaderCollection">
      <summary>包含与请求或响应关联的协议标头。</summary>
    </member>
    <member name="T:System.Net.WebPermission">
      <summary>控制 HTTP Internet 资源的访问权。</summary>
    </member>
    <member name="T:System.Net.WebPermissionAttribute">
      <summary>指定 Internet 资源的访问权。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.WebProxy">
      <summary>包含 HTTP 代理服务器设置 <see cref="T:System.Net.WebRequest" /> 类。</summary>
    </member>
    <member name="T:System.Net.WebRequest">
      <summary>对统一资源标识符 (URI) 发出请求。 这是一个 abstract 类。</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods">
      <summary>容器类 <see cref="T:System.Net.WebRequestMethods.Ftp" />, ，<see cref="T:System.Net.WebRequestMethods.File" />, ，和 <see cref="T:System.Net.WebRequestMethods.Http" /> 类。 无法继承此类</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.File">
      <summary>表示文件可用于文件请求的协议方法的类型。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.Ftp">
      <summary>表示可与一个 FTP 请求使用的 FTP 协议方法的类型。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Net.WebRequestMethods.Http">
      <summary>表示可用于 HTTP 请求的 HTTP 协议方法的类型。</summary>
    </member>
    <member name="T:System.Net.WebResponse">
      <summary>提供来自统一资源标识符 (URI) 的响应。 这是一个 abstract 类。</summary>
    </member>
    <member name="T:System.Net.WebSockets.ClientWebSocket">
      <summary>提供用于连接到 WebSocket 服务的客户端。</summary>
    </member>
    <member name="T:System.Net.WebSockets.ClientWebSocketOptions">
      <summary>要与 <see cref="T:System.Net.WebSockets.ClientWebSocket" /> 对象结合使用的选项。</summary>
    </member>
    <member name="T:System.Net.WebSockets.HttpListenerWebSocketContext">
      <summary>可以访问的信息由接收 <see cref="T:System.Net.HttpListener" /> 类接受 WebSocket 连接时。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocket">
      <summary>WebSocket 类允许应用程序在 WebSocket 升级完成后发送和接收数据。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketCloseStatus">
      <summary>表示已知 WebSocket 关闭代码中定义 section 11.7 的 WebSocket 协议规范。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.NormalClosure">
      <summary>(1000) 完成请求后，连接关闭。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.EndpointUnavailable">
      <summary>(1001) 表示正在删除终结点。 服务器或客户端将不可用。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.ProtocolError">
      <summary>(1002) 由于协议错误，客户端或服务器正在终止连接。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidMessageType">
      <summary>(1003) 因为无法接受已收到的数据类型，客户端或服务器正在终止连接。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.Empty">
      <summary>未指定错误。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InvalidPayloadData">
      <summary>（1007）因为收到的数据与消息类型不一致，客户端或服务器正在终止连接。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.PolicyViolation">
      <summary>（1008）因为终结点收到了违反其策略的消息，连接将关闭。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MessageTooBig">
      <summary>(1004) 留待将来使用。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.MandatoryExtension">
      <summary>(1010) 因为需要服务器协商扩展，客户端正在终止连接。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketCloseStatus.InternalServerError">
      <summary>由于服务器出错，连接将由服务器关闭。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketContext">
      <summary>用于访问 WebSocket 握手中的信息。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketError">
      <summary>包含可能的 WebSocket 错误的列表。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Success">
      <summary>指示不存在该异常的本机错误信息。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidMessageType">
      <summary>指示收到具有未知操作码的 WebSocket 帧。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.Faulted">
      <summary>指示常规错误。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NativeError">
      <summary>指示发生了未知的本机错误。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.NotAWebSocket">
      <summary>指示传入的请求不是有效的 websocket 请求。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedVersion">
      <summary>指示客户端请求了不支持的 WebSocket 协议版本。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.UnsupportedProtocol">
      <summary>指示客户端请求了不支持的 WebSocket 子协议。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.HeaderError">
      <summary>指示在打开握手期间分析 HTTP 头时出错。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.ConnectionClosedPrematurely">
      <summary>指示连接已意外终止。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketError.InvalidState">
      <summary>指示针对给定的操作（如被关闭或中止），WebSocket 处于无效状态。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketException">
      <summary>表示在 WebSocket 连接上执行操作时发生的异常。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketMessageType">
      <summary>指示消息类型。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Text">
      <summary>消息为明文形式。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Binary">
      <summary>消息采用二进制格式。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketMessageType.Close">
      <summary>因为收到关闭消息，接收已完成。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketReceiveResult">
      <summary>此类的实例表示在 WebSocket 上执行单个 ReceiveAsync 操作所得到的结果。</summary>
    </member>
    <member name="T:System.Net.WebSockets.WebSocketState">
      <summary> 定义 WebSockets 实例可能处于的不同状态。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.None">
      <summary>留待将来使用。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Connecting">
      <summary>连接正在与远程终结点协商握手。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Open">
      <summary>HTTP 握手完成之后的初始状态。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseSent">
      <summary>向远程终结点发送了关闭消息。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.CloseReceived">
      <summary>从远程终结点收到了关闭消息。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Closed">
      <summary>指示 WebSocket 关闭握手正常完成。</summary>
    </member>
    <member name="F:System.Net.WebSockets.WebSocketState.Aborted">
      <summary>留待将来使用。</summary>
    </member>
    <member name="T:System.Net.WebUtility">
      <summary>提供在处理 Web 请求时用于编码和解码 URL 的方法。</summary>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventArgs">
      <summary>为 <see cref="E:System.Net.WebClient.WriteStreamClosed" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Net.WebClient.WriteStreamClosed" /> 的 <see cref="T:System.Net.WebClient" /> 事件的方法。</summary>
    </member>
    <member name="T:System.NetPipeStyleUriParser">
      <summary>基于"Indigo"系统的 NetPipe 方案的分析器。</summary>
    </member>
    <member name="T:System.NetTcpStyleUriParser">
      <summary>基于"Indigo"系统的 NetTcp 方案的分析器。</summary>
    </member>
    <member name="T:System.NewsStyleUriParser">
      <summary>基于使用网络新闻传输协议 (NNTP) 新闻方案的可自定义分析器。</summary>
    </member>
    <member name="T:System.Reflection.ICustomTypeProvider">
      <summary>表示提供自定义类型的对象。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>当设置建议接收器或缓存与对象的连接时，指定请求的行为。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>对于数据通知连接 (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> 或 <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />)，此标志请求不希望将数据发送时，它调用的数据对象 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>请求对象不等待数据或视图，以更改在进行初始调用前 <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> （对于数据或视图的通知连接） 或更新缓存 （针对缓存的连接）。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>请求的对象只进行一次更改通知或缓存 update，然后再删除连接。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>对于数据通知连接可确保对数据的可访问性。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>同义词 <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, ，它更常用。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>DLL 对象应用程序和执行其对象的绘制的对象处理程序使用此值。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>对于缓存连接，此标志仅在保存包含缓存的对象时，才更新缓存的表示形式。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>指定在数据流的方向 <paramref name="dwDirection" /> 参数 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 方法。 这确定了生成的枚举器可枚举的格式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>将请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 提供可以在中指定的格式的枚举数 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>将请求 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> 提供可以在中指定的格式的枚举数 <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>在绘制或获取数据时，指定所需对象数据或对象视图方位。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>作为嵌入对象在容器内显示的对象，它使该对象表示形式。 此值通常为复合文档对象指定。 此演示文稿可提供用于屏幕或打印机。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>对象，它使该对象的缩略图表示显示在浏览工具。 缩略图是大约 120 x 120 像素，16 颜色 （建议），与设备无关位图可能包含在图元文件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>一个对象的图标表示形式。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>在屏幕上对象的表示形式，就好像它已打印到打印机使用 打印 命令 文件 菜单。 描述的数据可以表示一系列页。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>表示通用的剪贴板格式。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>提供的托管的定义 IAdviseSink 接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>提供的托管的定义 IDataObject 接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>提供的托管的定义 IEnumFORMATETC 接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>提供的托管的定义 IEnumSTATDATA 接口。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>提供的托管的定义 STATDATA 结构。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>提供的托管的定义 STGMEDIUM 结构。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>提供的托管的定义 TYMED 结构。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>存储介质是全局内存句柄 (HGLOBAL)。 分配有 GMEM_SHARE 标志全局句柄。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 null, ，则目标进程应使用 GlobalFree 释放的内存。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>存储媒体是由路径标识的磁盘文件。 如果 STGMEDIUM<see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 null, ，则目标进程应使用 OpenFile 删除该文件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>该存储介质是由标识的流对象 IStream 指针。 使用 ISequentialStream::Read 读取数据。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不是 null, ，则目标进程应使用 IStream::Release 释放流组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>该存储介质是由标识存储组件 IStorage 指针。 数据采用的流和包含由此存储 IStorage 实例。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员不是 null, ，则目标进程应使用 IStorage::Release 释放存储组件。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>存储媒体是一个图形设备接口 (GDI) 组件 (HBITMAP)。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 null, ，则目标进程应使用 DeleteObject 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>存储介质是图元文件 (HMETAFILE)。 使用 Windows 或 WIN32 函数访问图元文件的数据。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 null, ，则目标进程应使用 DeleteMetaFile 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>存储介质是增强型图元文件。 如果 <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> 成员是 null, ，则目标进程应使用 DeleteEnhMetaFile 删除位图。</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>不传递的任何数据。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>设置当从支持默认参数的语言中调用参数时参数的默认值。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>跟踪未完成的句柄并在达到指定阈值时强制实施垃圾回收。</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>标准公共语言运行时 (CLR) 自由线程封送处理程序替换为标准 OLE STA 封送处理程序。</summary>
    </member>
    <member name="T:System.Runtime.Versioning.FrameworkName">
      <summary>表示 .NET Framework 的版本名称。</summary>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreAccessRule">
      <summary>表示一组允许或拒绝用户或组访问权限。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreAuditRule">
      <summary>表示一组用户或组要审核的访问权限。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreRights">
      <summary>指定可应用于的访问控制权限命名的系统信号量对象。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Modify">
      <summary>用于发布命名信号量的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Delete">
      <summary>删除名称为信号量的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.ReadPermissions">
      <summary>规则的名称为信号量的权限来打开并将复制的访问规则和审核。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.ChangePermissions">
      <summary>更改安全和审核名称为信号量与规则相关联的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.TakeOwnership">
      <summary>用于更改名称为信号量的所有者的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.Synchronize">
      <summary>用于在名称为信号量上等待的权限。</summary>
    </member>
    <member name="F:System.Security.AccessControl.SemaphoreRights.FullControl">
      <summary>权限名称为信号量，对进行完全控制和修改其访问规则和审核规则。</summary>
    </member>
    <member name="T:System.Security.AccessControl.SemaphoreSecurity">
      <summary>表示命名信号量的 Windows 访问控制安全性。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Authentication.AuthenticationException">
      <summary>当身份验证流的身份验证失败时引发的异常。</summary>
    </member>
    <member name="T:System.Security.Authentication.CipherAlgorithmType">
      <summary>定义为可能的密码算法 <see cref="T:System.Net.Security.SslStream" /> 类。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.None">
      <summary>使用未加密算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc2">
      <summary>Rivest 的代码 2 (RC2) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Rc4">
      <summary>Rivest 的代码 4 (RC4) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Des">
      <summary>数据加密标准 (DES) 算法中。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.TripleDes">
      <summary>三重数据加密标准 (3DES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes">
      <summary>高级加密标准 (AES) 算法中。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes128">
      <summary>具有 128 位密钥的高级加密标准 (AES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes192">
      <summary>具有 192 位密钥的高级加密标准 (AES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Aes256">
      <summary>使用 256 位密钥的高级加密标准 (AES) 算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.CipherAlgorithmType.Null">
      <summary>无加密用于 Null 密码算法。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExchangeAlgorithmType">
      <summary>指定用于创建客户端和服务器共享密钥的算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.None">
      <summary>使用没有密钥交换算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaSign">
      <summary>RSA 公钥签名算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.RsaKeyX">
      <summary>RSA 公钥交换算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExchangeAlgorithmType.DiffieHellman">
      <summary>Diffie Hellman 临时密钥交换算法。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ChannelBinding">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 类封装了指向用于将身份验证的事务绑定到一个安全通道的不透明数据的指针。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ChannelBindingKind">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBindingKind" /> 枚举表示可以查询从安全通道的通道绑定的类型。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Unknown">
      <summary>未知的通道绑定类型。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Unique">
      <summary>完全唯一通道绑定到给定通道 （如 TLS 会话密钥）。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint">
      <summary>唯一通道绑定到给定的终结点 （如 TLS 服务器证书）。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ExtendedProtectionPolicyElement" /> 类表示一个配置元素 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElement" /> 类表示一个配置元素中使用的服务名称 <see cref="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection" />。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.Configuration.ServiceNameElementCollection">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 类是一个集合表示的配置元素的服务主体名称 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 类表示服务器用来验证传入客户端连接的扩展的保护策略。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> 类表示服务器用来验证传入客户端连接的扩展的保护策略的类型转换器。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.PolicyEnforcement" /> 枚举指定何时 <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 应何时强制实施。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 永远不会强制实施和扩展已禁用保护。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.WhenSupported">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 客户端和服务器支持扩展的保护时，才会强制执行。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 总是强制实施。 不支持扩展的保护的客户端将无法进行身份验证。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ProtectionScenario" /> 枚举指定此策略强制实施的保护方案。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ProtectionScenario.TransportSelected">
      <summary>传输会根据使用的通道类型安全且标准的保护方案之间选择。 对于安全保护，集成的 Windows 身份验证都包装在一个安全通道，并都具有一个完全匹配的通道绑定令牌，而不服务提供程序名称 (SPN) 进行验证。 对于标准保护，集成的 Windows 身份验证 （可选） 在包装在可选通道绑定令牌的安全通道和 SPN 验证是必需的。 因此如果请求是通过安全通道，通道绑定令牌 (CBT) 检查，否则检查 SPN。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.ProtectionScenario.TrustedProxy">
      <summary>集成的 Windows 身份验证终止由受信任的代理服务器的安全通道中包装，并且有一个通道绑定令牌所需的 SPN 验证。 这要求的 CBT，但 CBT 存在不检查时检查 SPN。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection">
      <summary>
        <see cref="T:System.Security.Authentication.ExtendedProtection.ServiceNameCollection" /> 类是服务主体名称的只读集合。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.TokenBinding">
      <summary>包含用于令牌绑定的 API。</summary>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.TokenBindingType">
      <summary>表示令牌绑定的类型。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.TokenBindingType.Provided">
      <summary>用于在连接到服务器时建立令牌绑定。</summary>
    </member>
    <member name="F:System.Security.Authentication.ExtendedProtection.TokenBindingType.Referred">
      <summary>当请求向另一个服务器呈现令牌时使用。</summary>
    </member>
    <member name="T:System.Security.Authentication.HashAlgorithmType">
      <summary>指定用于生成消息身份验证代码 (MAC) 的算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.None">
      <summary>使用无哈希算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Md5">
      <summary>Message Digest 5 (MD5) 哈希算法。</summary>
    </member>
    <member name="F:System.Security.Authentication.HashAlgorithmType.Sha1">
      <summary>安全哈希算法 (SHA1)。</summary>
    </member>
    <member name="T:System.Security.Authentication.InvalidCredentialException">
      <summary>当身份验证流的身份验证失败并且不能重试时引发的异常。</summary>
    </member>
    <member name="T:System.Security.Authentication.SslProtocols">
      <summary>定义的可能版本 <see cref="T:System.Security.Authentication.SslProtocols" />。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.None">
      <summary>未不指定任何 SSL 协议。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl2">
      <summary>指定 SSL 2.0 协议。 SSL 2.0 已取代 TLS 协议，用于向后兼容性。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Ssl3">
      <summary>指定 SSL 3.0 协议。 SSL 3.0 已由 TLS 协议取代，提供有关向后兼容性。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls">
      <summary>指定 TLS 1.0 安全协议。 TLS 协议是在 IETF RFC 2246 中定义的。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls11">
      <summary>指定 TLS 1.1 安全协议。 TLS 协议是在 IETF RFC 4346 中定义的。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Tls12">
      <summary>指定 TLS 1.2 安全协议。 TLS 协议是在 IETF RFC 5246 中定义的。</summary>
    </member>
    <member name="F:System.Security.Authentication.SslProtocols.Default">
      <summary>指定安全套接字层 (SSL) 3.0 或传输层安全 (TLS) 1.0 可接受的安全通信</summary>
    </member>
    <member name="T:System.Security.Claims.DynamicRoleClaimProvider">
      <summary>Single 方法 <see cref="M:System.Security.Claims.DynamicRoleClaimProvider.AddDynamicRoleClaims(System.Security.Claims.ClaimsIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})" />, 、 公开此类已过时。 您可以使用 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 要添加对象声明与 <see cref="T:System.Security.Claims.ClaimsIdentity" /> 对象。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedData">
      <summary>表示抽象语法表示法一 (ASN.1) 编码的数据。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedDataCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.AsnEncodedData" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.AsnEncodedDataEnumerator">
      <summary>提供在 <see cref="T:System.Security.Cryptography.AsnEncodedDataCollection" /> 对象中导航的能力。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.Oid">
      <summary>表示加密对象标识符。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.OidCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.Oid" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.OidEnumerator">
      <summary>提供在 <see cref="T:System.Security.Cryptography.OidCollection" /> 对象中导航的能力。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.OidGroup">
      <summary>标识 Windows 加密对象标识符 (OID) 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.All">
      <summary>所有组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.HashAlgorithm">
      <summary>由 CRYPT_HASH_ALG_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.EncryptionAlgorithm">
      <summary>由 CRYPT_ENCRYPT_ALG_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.PublicKeyAlgorithm">
      <summary>由 CRYPT_PUBKEY_ALG_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.SignatureAlgorithm">
      <summary>由 CRYPT_SIGN_ALG_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.Attribute">
      <summary>由 CRYPT_RDN_ATTR_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.ExtensionOrAttribute">
      <summary>由 CRYPT_EXT_OR_ATTR_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.EnhancedKeyUsage">
      <summary>由 CRYPT_ENHKEY_USAGE_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.Policy">
      <summary>由 CRYPT_POLICY_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.Template">
      <summary>由 CRYPT_TEMPLATE_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="F:System.Security.Cryptography.OidGroup.KeyDerivationFunction">
      <summary>由 CRYPT_KDF_OID_GROUP_ID 表示 Windows 组。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.OpenFlags">
      <summary>指定打开 X.509 证书存储的方法。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.ReadOnly">
      <summary>打开以仅供读取的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.ReadWrite">
      <summary>打开以便读取和写入的 X.509 证书存储。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.MaxAllowed">
      <summary>打开允许的最高访问 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly">
      <summary>打开现有的唯一存储区。如果不存在任何存储， <see cref="M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)" /> 方法将不会创建一个新的存储。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.OpenFlags.IncludeArchived">
      <summary>打开的 X.509 证书存储区，并包括存档的证书。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.PublicKey">
      <summary>表示证书的公钥信息。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.StoreLocation">
      <summary>指定 X.509 证书存储的位置。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreLocation.CurrentUser">
      <summary>当前用户所使用的 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreLocation.LocalMachine">
      <summary>分配给本地计算机的 X.509 证书存储。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.StoreName">
      <summary>指定要打开的 X.509 证书存储区的名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.AddressBook">
      <summary>其他用户 X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.AuthRoot">
      <summary>第三方证书颁发机构 (Ca) X.509 证书存储区。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.CertificateAuthority">
      <summary>中间证书颁发机构 (Ca) 将 X.509 证书存储。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.Disallowed">
      <summary>吊销的证书将 X.509 证书存储。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.My">
      <summary>X.509 证书的个人证书存储。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.Root">
      <summary>受信任的根证书颁发机构 (Ca) 将 X.509 证书存储。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.TrustedPeople">
      <summary>直接受信任的人和资源 X.509 证书存储区中。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.StoreName.TrustedPublisher">
      <summary>直接受信任的发行者 X.509 证书存储区。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName">
      <summary>表示 X509 证书的可分辨名称。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags">
      <summary>指定 X.500 可分辨名称的特性。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.None">
      <summary>可分辨名称没有特殊特性。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.Reversed">
      <summary>反转可分辨名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseSemicolons">
      <summary>可分辨名称使用分号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.DoNotUsePlusSign">
      <summary>可分辨名称不使用加号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.DoNotUseQuotes">
      <summary>可分辨名称不使用引号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseCommas">
      <summary>可分辨名称使用逗号。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseNewLines">
      <summary>可分辨名称使用新行字符。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseUTF8Encoding">
      <summary>可分辨名称使用 UTF8 编码而不是 Unicode 字符编码。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.UseT61Encoding">
      <summary>可分辨名称使用 T61 编码。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X500DistinguishedNameFlags.ForceUTF8Encoding">
      <summary>强制可分辨名称将特定 X.500 密钥编码为 UTF-8 字符串而不是可打印的 Unicode 字符串。 有关受影响的 X.500 密钥的列表和详细信息，请参阅 X500NameFlags enumeration。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension">
      <summary>定义对证书设置的约束。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2">
      <summary>表示 X.509 证书。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Certificate2Enumerator">
      <summary>支持对 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2Collection" /> 对象执行简单迭代。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection">
      <summary>定义一个存储 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象的集合。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator">
      <summary>枚举 <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection" /> 中的 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> 对象。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Chain">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 证书的链生成引擎。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElement">
      <summary>表示 X.509 链的元素。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElement" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainElementEnumerator">
      <summary>支持对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ChainElementCollection" /> 执行简单迭代。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainPolicy">
      <summary>表示在生成 X509 证书链时要应用的链策略。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainStatus">
      <summary>提供一个用于存储 X509 链状态和错误信息的简单结构。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags">
      <summary>定义一个 X509 链的状态。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError">
      <summary>将 X509 链指定为无错误。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotTimeValid">
      <summary>将 X509 链指定为因无效时间值（如表明证书已过期的值）而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotTimeNested">
      <summary>已否决。 将 CA（证书颁发机构）证书和已颁发证书指定为具有不嵌套的有效期。 例如，CA 证书的有效期可为 1 月 1 日至 12 月 1 日，而颁发证书的有效期为 1 月 2 日至 12 月 2 日，这就意味着有效期不嵌套。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Revoked">
      <summary>将 X509 链指定为因证书吊销而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotSignatureValid">
      <summary>将 X509 链指定为因证书签名无效而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NotValidForUsage">
      <summary>将密钥用法指定为无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.UntrustedRoot">
      <summary>将 X509 链指定为因根证书不受信任而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.RevocationStatusUnknown">
      <summary>指定无法确定证书是否已吊销。 这可能是由于证书吊销列表 (CRL) 脱机或不可用。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.Cyclic">
      <summary>将 X509 链指定为无法生成。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidExtension">
      <summary>将 X509 链指定为因扩展无效而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidPolicyConstraints">
      <summary>将 X509 链指定为因策略约束无效而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidBasicConstraints">
      <summary>将 X509 链指定为因基本约束无效而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.InvalidNameConstraints">
      <summary>将 X509 链指定为因名称约束无效而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotSupportedNameConstraint">
      <summary>将证书指定为不具有受支持的名称约束或具有的名称约束不受支持。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotDefinedNameConstraint">
      <summary>将证书指定为具有未定义的名称约束。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotPermittedNameConstraint">
      <summary>将证书指定为具有不受许可的名称约束。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasExcludedNameConstraint">
      <summary>将 X509 链指定为因证书排除了名称约束而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.PartialChain">
      <summary>将 X509 链指定为无法生成至根证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotTimeValid">
      <summary>将证书信任列表 (CTL) 指定为因时间值（如表明 CTL 已过期的值）无效而无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotSignatureValid">
      <summary>将证书信任列表 (CTL) 指定为包含无效签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.CtlNotValidForUsage">
      <summary>将证书信任列表 (CTL) 指定为对该使用无效。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.OfflineRevocation">
      <summary>将 X509 链依赖的联机证书吊销列表 (CRL) 指定为当前处于脱机状态。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoIssuanceChainPolicy">
      <summary>指定在证书中不存在证书策略扩展。 如果组策略已指定所有证书都必须具有证书策略，则会发生此错误。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.ExplicitDistrust">
      <summary>将证书指定为显式不受信任。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasNotSupportedCriticalExtension">
      <summary>将证书指定为不支持关键扩展。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.HasWeakSignature">
      <summary>将证书指定为未经强签名。 这通常指示 MD2 或 MD5 哈希算法被用于创建证书的哈希。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509EnhancedKeyUsageExtension">
      <summary>定义对象标识符 (OID) 的集合，该对象标识符指示使用密钥的应用程序。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Extension">
      <summary>表示 X509 扩展。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection">
      <summary>表示 <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> 对象集合。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509ExtensionEnumerator">
      <summary>支持对 <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> 执行简单迭代。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509FindType">
      <summary>指定的值的类型 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法搜索。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByThumbprint">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个字符串，表示证书的指纹。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个表示证书的使用者名称的字符串。 这是所提供的相比更具体的搜索 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName" /> 枚举值。 使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName" /> 值， <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法执行不区分大小写的字符串比较，使用提供的值。 例如，如果将"mycert 传递"传递给 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法，它将查找所有的证书主题名称中包含该字符串，而不考虑其他使用者值。 按可分辨名称搜索是一个更精确的搜索。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个表示证书的主题可分辨的名称的字符串。 这是所提供的相比更具体的搜索 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectName" /> 枚举值。 使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectDistinguishedName" /> 值， <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法对整个可分辨名称执行不区分大小写的字符串比较。 按主题名称是一个不太精确的搜索。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个表示证书的颁发者名称的字符串。 这是所提供的相比更具体的搜索 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName" /> 枚举值。 使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName" /> 值， <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法执行不区分大小写的字符串比较，使用提供的值。 例如，如果将"MyCA"传递给 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法，它将查找所有的证书颁发者名称包含该字符串，而不考虑其他颁发者值。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个表示证书的颁发者可分辨的名称的字符串。 这是所提供的相比更具体的搜索 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerName" /> 枚举值。 使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByIssuerDistinguishedName" /> 值， <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法对整个可分辨名称执行不区分大小写的字符串比较。 按颁发者名称搜索是一个不太精确的搜索。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySerialNumber">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法，必须是一个字符串，表示证书的序列号，显示证书对话框中，但不包含空格，或者返回 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString" /> 方法。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是 <see cref="T:System.DateTime" /> 本地时间值。 您可以使用 <see cref="P:System.DateTime.Now" /> 查找所有当前有效的证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是 <see cref="T:System.DateTime" /> 本地时间值。 值不需要是将来的日期。 例如，您可以使用 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid" /> 查找由使用的结果的交集成为在当前年份中有效的证书 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 操作 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeNotYetValid" /> 的结果与上一年的最后一天 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 操作 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeValid" /> 的 <see cref="P:System.DateTime.Now" />。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是 <see cref="T:System.DateTime" /> 本地时间值。 例如，可以查找之前，都将有效今年年底通过消除的结果的所有证书 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 操作 <see cref="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTimeExpired" /> 从结果中每年的最后一天 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 操作 <see cref="P:System.DateTime.Now" />。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByTemplateName">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个表示证书，如"ClientAuth"的证书模板名称的字符串。 模板名称是 X509 版本 3 扩展名，指定的证书用法。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByApplicationPolicy">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个字符串，表示应用程序策略的友好名称或对象标识符 (OID，或 <see cref="T:System.Security.Cryptography.Oid" />) 的证书。 例如，可以使用"加密文件系统"或"1.3.6.1.4.1.311.10.3.4"。 对于将进行本地化的应用，必须使用 OID 值，因为已本地化的友好名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByCertificatePolicy">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是字符串表示的友好名称或对象标识符 (OID，或 <see cref="T:System.Security.Cryptography.Oid" />) 的证书策略。 最佳做法是使用 OID，如"1.3.6.1.4.1.311.10.3.4"。 对于将进行本地化的应用，必须使用 OID，因为已本地化的友好名称。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByExtension">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个描述要查找的扩展字符串。 对象标识符 (OID) 最常用于直接 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法搜索具有匹配 OID 该值扩展名的所有证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindByKeyUsage">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个表示密钥用法或一个整数，表示一个位掩码，包含的所有请求的密钥用法的字符串。 对于字符串值中，可以指定一次只有一个密钥用法，但 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法可以使用级联顺序，以获取请求的用法的交集。 例如， <paramref name="findValue" /> 参数可以设置为"KeyEncipherment"或整数 （0x30 表示"KeyEncipherment"和"DataEncipherment"）。 值的 <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags" /> 还可以使用枚举。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509FindType.FindBySubjectKeyIdentifier">
      <summary>
        <paramref name="findValue" /> 参数 <see cref="M:System.Security.Cryptography.X509Certificates.X509Certificate2Collection.Find(System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Boolean)" /> 方法必须是一个表示以十六进制格式，如"F3E815D45E83B8477B9284113C64EF208E897112"的主题密钥标识符的字符串，如在 UI 中显示。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509IncludeOption">
      <summary>指定 X.509 证书链中有多少应包括在 X.509 数据。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.None">
      <summary>不不包括任何 X.509 链信息。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.ExcludeRoot">
      <summary>除根证书之外包含整个 X.509 链。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.EndCertOnly">
      <summary>仅对最终证书是 X.509 链信息中包括的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509IncludeOption.WholeChain">
      <summary>包含整个 X.509 链。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension">
      <summary>定义 X.509 证书中包含的密钥的使用情况。  此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags">
      <summary>定义可以如何使用证书密钥。 如果未定义此值，该密钥可以用于任何目的。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.None">
      <summary>无密钥使用参数。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.EncipherOnly">
      <summary>密钥可以用于只加密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.CrlSign">
      <summary>可以使用密钥进行签名的证书吊销列表 (CRL)。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyCertSign">
      <summary>可以使用密钥证书进行签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyAgreement">
      <summary>该密钥可以用于确定密钥的协议，如使用 Diffie-hellman 密钥协议算法创建的密钥。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DataEncipherment">
      <summary>密钥可用于数据加密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.KeyEncipherment">
      <summary>密钥可用于密钥加密。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.NonRepudiation">
      <summary>密钥可用于身份验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DigitalSignature">
      <summary>该密钥可以用作数字签名。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509KeyUsageFlags.DecipherOnly">
      <summary>密钥可用于解密。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509NameType">
      <summary>指定 X509 证书包含的名称类型。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.SimpleName">
      <summary>简单名称的使用者或颁发者的 X509 证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.EmailName">
      <summary>电子邮件地址的使用者或颁发者相关联的 X509 证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.UpnName">
      <summary>UPN 名称的使用者或颁发者的 X509 证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsName">
      <summary>与颁发者的 X509 或的使用者备用名称关联的 DNS 名称的证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsFromAlternativeName">
      <summary>与 X.509 证书的颁发者或使用者备用名称关联的 DNS 名称。  此值等效于 <see cref="F:System.Security.Cryptography.X509Certificates.X509NameType.DnsName" /> 值。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509NameType.UrlName">
      <summary>URL 地址关联的使用者备用名称或颁发者的 X509 证书。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509RevocationFlag">
      <summary>指定链中应进行吊销检查的 X509 证书。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.EndCertificateOnly">
      <summary>仅对最终证书进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.EntireChain">
      <summary>整个链的证书进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationFlag.ExcludeRoot">
      <summary>进行吊销检查除根证书之外的整个链。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509RevocationMode">
      <summary>指定用于检查 X509 证书吊销的模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.NoCheck">
      <summary>对证书执行不进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Online">
      <summary>使用联机证书吊销列表 (CRL) 以进行吊销检查。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509RevocationMode.Offline">
      <summary>使用缓存的证书吊销列表 (CRL) 以进行吊销检查。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509Store">
      <summary>表示 X.509 存储，该存储是保留和管理证书的物理存储。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension">
      <summary>定义标识证书的主题密钥标识符 (SKI) 的字符串。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm">
      <summary>定义的哈希算法和一起使用的类型 <see cref="T:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension" /> 类。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.Sha1">
      <summary>SKI 组成 160 位 sha-1 哈希值的值的公钥 （不包括标记、 长度和未使用的比特数）。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.ShortSha1">
      <summary>SKI 组成具有值 0100 后, 跟最不明显的 60 位的值的 （不包括标记、 长度和未使用的位字符串比特数） 的公钥的 sha-1 哈希值的四位类型字段</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierHashAlgorithm.CapiSha1">
      <summary>主题密钥标识符 (SKI) 组成的编码公钥 （包括标记、 长度和未使用的比特数） 160 位 sha-1 哈希。</summary>
    </member>
    <member name="T:System.Security.Cryptography.X509Certificates.X509VerificationFlags">
      <summary>指定应对 X509 链中证书进行验证的条件。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.NoFlag">
      <summary>不将包含与验证相关的任何标志。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreNotTimeValid">
      <summary>忽略证书链中的包含无效或者因为它们已过期或者是它们不是尚未生效时确定证书的有效性。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCtlNotTimeValid">
      <summary>忽略，证书信任列表 (CTL) 无效，原因如 CTL 已过期，确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreNotTimeNested">
      <summary>忽略 CA （证书颁发机构） 证书和颁发的证书具有不嵌套时验证证书的有效期。 例如，CA 证书的有效期可为 1 月 1 日至 12 月 1 日，而颁发证书的有效期为 1 月 2 日至 12 月 2 日，这就意味着有效期不嵌套。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidBasicConstraints">
      <summary>忽略，基本约束不能在确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.AllowUnknownCertificateAuthority">
      <summary>忽略无法由于未知的证书颁发机构 (CA) 验证链。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreWrongUsage">
      <summary>忽略到已不为当前使用颁发证书时确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidName">
      <summary>忽略证书具有无效的名称，在确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreInvalidPolicy">
      <summary>忽略证书具有无效的策略，在确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreEndRevocationUnknown">
      <summary>时，忽略最终证书 （用户证书） 吊销未知确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCtlSignerRevocationUnknown">
      <summary>时，忽略证书信任列表 (CTL) 签名者吊销未知确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreCertificateAuthorityRevocationUnknown">
      <summary>时，忽略证书颁发机构吊销未知确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.IgnoreRootRevocationUnknown">
      <summary>时，忽略根吊销未知确定证书验证。</summary>
    </member>
    <member name="F:System.Security.Cryptography.X509Certificates.X509VerificationFlags.AllFlags">
      <summary>将包含与验证相关的所有标志。</summary>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBase">
      <summary>允许控制代码访问安全权限。</summary>
    </member>
    <member name="T:System.Security.Permissions.ResourcePermissionBaseEntry">
      <summary>定义代码访问安全权限集的最小单位。</summary>
    </member>
    <member name="T:System.Security.Permissions.StorePermission">
      <summary>控制对存储包含 X.509 证书。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionAttribute">
      <summary>允许的操作安全 <see cref="T:System.Security.Permissions.StorePermission" /> 要应用于代码中使用声明性安全。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Security.Permissions.StorePermissionFlags">
      <summary>指定对 X.509 证书存储区的允许访问权限。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.NoFlags">
      <summary>未授予权限以执行任何证书或存储操作。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.CreateStore">
      <summary>若要创建新的存储能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.DeleteStore">
      <summary>删除存储区的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateStores">
      <summary>枚举计算机上的存储的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.OpenStore">
      <summary>若要打开的存储区功能。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AddToStore">
      <summary>能够将证书添加到存储区。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.RemoveFromStore">
      <summary>能够从存储中删除证书。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.EnumerateCertificates">
      <summary>枚举存储区中的证书的能力。</summary>
    </member>
    <member name="F:System.Security.Permissions.StorePermissionFlags.AllFlags">
      <summary>能够执行所有的证书，并存储操作。</summary>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermission">
      <summary>定义对部分信任访问 <see cref="T:System.ComponentModel.TypeDescriptor" /> 类。</summary>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionAttribute">
      <summary>确定将应用于的权限标志 <see cref="T:System.ComponentModel.TypeDescriptor" />。</summary>
    </member>
    <member name="T:System.Security.Permissions.TypeDescriptorPermissionFlags">
      <summary>定义类型描述符的权限设置。</summary>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.NoFlags">
      <summary>类型描述符上不设置的任何权限标志。</summary>
    </member>
    <member name="F:System.Security.Permissions.TypeDescriptorPermissionFlags.RestrictedRegistrationAccess">
      <summary>可以从部分受信任代码调用类型描述符。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Capture">
      <summary>表示来自单个成功子表达式捕获的结果。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.CaptureCollection">
      <summary>表示单个捕获组执行的捕获集。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Group">
      <summary>表示来自单个捕获组的结果。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.GroupCollection">
      <summary>返回一次匹配中捕获的组的集。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.Match">
      <summary>表示单个正则表达式匹配的结果。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchCollection">
      <summary>表示通过以迭代方式将正则表达式模式应用于输入字符串所找到的成功匹配的集合。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.MatchEvaluator">
      <summary>表示期间找到正则表达式匹配每次调用的方法 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作。</summary>
      <param name="match">
        <see cref="T:System.Text.RegularExpressions.Match" /> 对象，表示单个正则表达式匹配期间 <see cref="Overload:System.Text.RegularExpressions.Regex.Replace" /> 方法操作。</param>
      <returns>由表示该方法返回一个字符串 <see cref="T:System.Text.RegularExpressions.MatchEvaluator" /> 委托。</returns>
    </member>
    <member name="T:System.Text.RegularExpressions.Regex">
      <summary>表示不可变的正则表达式。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexCompilationInfo">
      <summary>提供有关用于正则表达式编译为独立的程序集的正则表达式的信息。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexMatchTimeoutException">
      <summary>正则表达式模式匹配方法的执行时间超出其超时时间间隔时引发的异常。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexOptions">
      <summary>提供用于设置正则表达式选项的枚举值。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.None">
      <summary>指定不设置任何选项。 有关正则表达式引擎的默认行为的详细信息，请参阅中的"默认选项"部分 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase">
      <summary>指定不区分大小写的匹配。 有关详细信息，请参阅中的"不区分大小写匹配"一节 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Multiline">
      <summary>多行模式。 更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。 有关详细信息，请参阅中的"多行模式"部分 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture">
      <summary>指定唯一有效的捕获是显式命名或编号的 (?&lt;name&gt;…) 形式的组。 这使未命名的圆括号可以充当非捕获组，并且不会使表达式的语法 (?:...) 显得笨拙。 有关详细信息，请参阅中的"仅显式捕获"一节 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Compiled">
      <summary>指定将正则表达式编译为程序集。 这会产生更快的执行速度，但会增加启动时间。 此值不应分配给 <see cref="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" /> 属性时调用 <see cref="M:System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)" /> 方法。 有关详细信息，请参阅中的"已编译的正则表达式"一节 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.Singleline">
      <summary>指定单行模式。 更改点 （.） 的含义 使其匹配 （而不是除 \n 之外的所有字符） 的每个字符。 有关详细信息，请参阅中的"单行模式"部分 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace">
      <summary>消除模式中的非转义空白并启用由 # 标记的注释。 但是，此值不会影响或消除中的空白区域、 数值或标记的开头个人的令牌。 有关详细信息，请参阅的"忽略空白"部分 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.RightToLeft">
      <summary>指定搜索从右向左而不是从左向右进行。 有关详细信息，请参阅中的"从右到左模式"部分 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.ECMAScript">
      <summary>为表达式启用符合 ECMAScript 的行为。 可以使用此值仅在结合 <see cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase" />, ，<see cref="F:System.Text.RegularExpressions.RegexOptions.Multiline" />, ，和 <see cref="F:System.Text.RegularExpressions.RegexOptions.Compiled" /> 值。 该值与其他任何值一起使用均将导致异常。有关详细信息 <see cref="F:System.Text.RegularExpressions.RegexOptions.ECMAScript" /> 选项，请参阅中的"ECMAScript 匹配行为"一节 正则表达式选项 主题。</summary>
    </member>
    <member name="F:System.Text.RegularExpressions.RegexOptions.CultureInvariant">
      <summary>指定忽略语言中的区域性差异。 有关详细信息，请参阅中的"比较使用固定区域性"一节 正则表达式选项 主题。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunner">
      <summary>
        <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 类是已编译的正则表达式类的基类。</summary>
    </member>
    <member name="T:System.Text.RegularExpressions.RegexRunnerFactory">
      <summary>创建 <see cref="T:System.Text.RegularExpressions.RegexRunner" /> 的已编译的正则表达式类。</summary>
    </member>
    <member name="T:System.Threading.Barrier">
      <summary>使多个任务能够采用并行方式依据某种算法在多个阶段中协同工作。</summary>
    </member>
    <member name="T:System.Threading.BarrierPostPhaseException">
      <summary>时，将引发的异常的阶段后操作 <see cref="T:System.Threading.Barrier" /> 失败</summary>
    </member>
    <member name="T:System.Threading.Semaphore">
      <summary>限制可同时访问某一资源或资源池的线程数。</summary>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventArgs">
      <summary>为 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Threading.ThreadExceptionEventHandler">
      <summary>表示将处理的方法 <see cref="E:System.Windows.Forms.Application.ThreadException" /> 事件 <see cref="T:System.Windows.Forms.Application" />。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Threading.ThreadExceptionEventArgs" />。</param>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary>为 <see cref="E:System.Timers.Timer.Elapsed" /> 事件提供数据。</summary>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary>表示将用来处理 <see cref="E:System.Timers.Timer.Elapsed" /> 的 <see cref="T:System.Timers.Timer" /> 事件的方法。</summary>
      <param name="sender">事件源。</param>
      <param name="e">包含事件数据的 <see cref="T:System.Timers.ElapsedEventArgs" /> 对象。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary>在设定的间隔之后生成事件，带有生成重复事件的选项。若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。</summary>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary>设置在引用事件、 扩展程序或属性时，可视化设计器可以显示的说明。</summary>
    </member>
    <member name="T:System.Uri">
      <summary>提供统一资源标识符 (URI) 的对象表示形式和对 URI 各部分的轻松访问。</summary>
    </member>
    <member name="T:System.UriBuilder">
      <summary>提供用于统一资源标识符 (Uri) 自定义的构造函数，并修改 Uri <see cref="T:System.Uri" /> 类。</summary>
    </member>
    <member name="T:System.UriComponents">
      <summary>指定 <see cref="T:System.Uri" /> 的各个部分。</summary>
    </member>
    <member name="F:System.UriComponents.Scheme">
      <summary>
        <see cref="P:System.Uri.Scheme" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.UserInfo">
      <summary>
        <see cref="P:System.Uri.UserInfo" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Host">
      <summary>
        <see cref="P:System.Uri.Host" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Port">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Path">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Query">
      <summary>
        <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.Fragment">
      <summary>
        <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.StrongPort">
      <summary>
        <see cref="P:System.Uri.Port" /> 数据。 如果 <see cref="T:System.Uri" /> 中没有任何端口数据且已将默认端口分配给了 <see cref="P:System.Uri.Scheme" />，则会返回默认端口。 如果没有任何默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.NormalizedHost">
      <summary>
        <see cref="P:System.Uri.Host" /> 的正常化表格。</summary>
    </member>
    <member name="F:System.UriComponents.KeepDelimiter">
      <summary>指定应包括的分隔符。</summary>
    </member>
    <member name="F:System.UriComponents.SerializationInfoString">
      <summary>Uri 序列化程序需要的完整的 <see cref="T:System.Uri" /> 上下文。 该上下文包括 IPv6 作用域。</summary>
    </member>
    <member name="F:System.UriComponents.AbsoluteUri">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" />、<see cref="P:System.Uri.Query" /> 和 <see cref="P:System.Uri.Fragment" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HostAndPort">
      <summary>
        <see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。 如果在 Uri 中没有任何端口数据且已将默认端口分配给了 <see cref="P:System.Uri.Scheme" />，则会返回默认端口。 如果没有任何默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.StrongAuthority">
      <summary>
        <see cref="P:System.Uri.UserInfo" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。 如果 <see cref="T:System.Uri" /> 中没有任何端口数据且已将默认端口分配给了 <see cref="P:System.Uri.Scheme" />，则会返回默认端口。 如果没有任何默认端口，则返回 -1。</summary>
    </member>
    <member name="F:System.UriComponents.SchemeAndServer">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" /> 和 <see cref="P:System.Uri.Port" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.HttpRequestUrl">
      <summary>
        <see cref="P:System.Uri.Scheme" />、<see cref="P:System.Uri.Host" />、<see cref="P:System.Uri.Port" />、<see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。</summary>
    </member>
    <member name="F:System.UriComponents.PathAndQuery">
      <summary>
        <see cref="P:System.Uri.LocalPath" /> 和 <see cref="P:System.Uri.Query" /> 数据。 另请参阅：<see cref="P:System.Uri.PathAndQuery" />。</summary>
    </member>
    <member name="T:System.UriFormat">
      <summary>控制 URI 信息的转义方式。</summary>
    </member>
    <member name="F:System.UriFormat.UriEscaped">
      <summary>根据 RFC 2396 中的规则执行转义。</summary>
    </member>
    <member name="F:System.UriFormat.Unescaped">
      <summary>未执行任何转义。</summary>
    </member>
    <member name="F:System.UriFormat.SafeUnescaped">
      <summary>仍然在请求 URI 组件具有保留的含义的字符进行转义。 所有其他未转义。 请参阅“备注”。</summary>
    </member>
    <member name="T:System.UriFormatException">
      <summary>当检测到无效的统一资源标识符 (URI) 时引发的异常。</summary>
    </member>
    <member name="T:System.UriHostNameType">
      <summary>定义主机名称类型 <see cref="M:System.Uri.CheckHostName(System.String)" /> 方法。</summary>
    </member>
    <member name="F:System.UriHostNameType.Unknown">
      <summary>未提供的主机名的类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Basic">
      <summary>主机已设置，但不能确定的类型。</summary>
    </member>
    <member name="F:System.UriHostNameType.Dns">
      <summary>主机名是域名系统 (DNS) 样式主机名称。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv4">
      <summary>主机名是 Internet 协议 (IP) 版本 4 的主机地址。</summary>
    </member>
    <member name="F:System.UriHostNameType.IPv6">
      <summary>主机名是 Internet 协议 (IP) 版本 6 主机地址。</summary>
    </member>
    <member name="T:System.UriIdnScope">
      <summary>提供的可能值的配置设置的 <see cref="T:System.Configuration.IdnElement" /> 中 <see cref="N:System.Configuration" /> 命名空间。</summary>
    </member>
    <member name="F:System.UriIdnScope.None">
      <summary>此值将不转换任何 Unicode 域名使用 Punycode。 这是默认值是与.NET Framework 2.0 行为一致。</summary>
    </member>
    <member name="F:System.UriIdnScope.AllExceptIntranet">
      <summary>此值会将所有外部 Unicode 域名使用 Punycode 等效项 （IDN 名称）。 在这种情况下要处理本地 Intranet 上的国际名称，用于 Intranet DNS 服务器应支持 Unicode 名称。</summary>
    </member>
    <member name="F:System.UriIdnScope.All">
      <summary>此值将转换任何 Unicode 域名 （IDN 名称） 及其 Punycode 等效项。</summary>
    </member>
    <member name="T:System.UriKind">
      <summary>定义类型的 <see cref="T:System.Uri" />s 表示 <see cref="M:System.Uri.IsWellFormedUriString(System.String,System.UriKind)" /> 以及几个 <see cref="Overload:System.Uri.#ctor" /> 方法。</summary>
    </member>
    <member name="F:System.UriKind.RelativeOrAbsolute">
      <summary>这种 uri，该 Uri 是不确定的。</summary>
    </member>
    <member name="F:System.UriKind.Absolute">
      <summary>Uri 是绝对 Uri。</summary>
    </member>
    <member name="F:System.UriKind.Relative">
      <summary>Uri 是相对的 Uri。</summary>
    </member>
    <member name="T:System.UriParser">
      <summary>分析新的 URI 方案。 这是一个抽象类。</summary>
    </member>
    <member name="T:System.UriPartial">
      <summary>定义的 URI 的组成部分 <see cref="M:System.Uri.GetLeftPart(System.UriPartial)" /> 方法。</summary>
    </member>
    <member name="F:System.UriPartial.Scheme">
      <summary>URI 方案段。</summary>
    </member>
    <member name="F:System.UriPartial.Authority">
      <summary>URI 方案和授权段。</summary>
    </member>
    <member name="F:System.UriPartial.Path">
      <summary>URI 方案、 颁发机构和路径段。</summary>
    </member>
    <member name="F:System.UriPartial.Query">
      <summary>方案、 机构、 路径和查询的 uri 的段。</summary>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary>将转换 <see cref="T:System.String" /> 类型到 <see cref="T:System.Uri" /> 类型，反之亦然。</summary>
    </member>
    <member name="T:System.Web.AspNetHostingPermission">
      <summary>控制访问 ASP.NET 托管环境中的权限。 此类不能被继承。</summary>
    </member>
    <member name="T:System.Web.AspNetHostingPermissionAttribute">
      <summary>允许的操作安全 <see cref="T:System.Web.AspNetHostingPermission" /> 要应用于代码中使用声明性安全。 无法继承此类。</summary>
    </member>
    <member name="T:System.Web.AspNetHostingPermissionLevel">
      <summary>指定向 ASP.NET Web 应用程序授予的信任级别。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.None">
      <summary>指示不授予任何权限。 任何要求获得请求 <see cref="T:System.Web.AspNetHostingPermission" /> 将失败。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Minimal">
      <summary>表示要求提供受保护功能 <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> 级别将会成功。 此级别允许代码执行，但不是能与系统上存在的资源进行交互。 通过配置来授予此级别至少 <see cref="F:System.Web.AspNetHostingPermissionLevel.Minimal" /> 信任级别使用 信任 配置文件中的部分。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Low">
      <summary>指示对于任何请求所保护的功能级别小于或等于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> 级别将会成功。 此级别旨在允许在受限制环境中使用对有限资源的只读访问权限。 通过指定授予此级别 <see cref="F:System.Web.AspNetHostingPermissionLevel.Low" /> 信任级别中的 信任 配置文件中的部分。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Medium">
      <summary>指示对于任何请求所保护的功能级别小于或等于 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 级别将会成功。 通过配置来授予此级别至少 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 信任级别中的 信任 配置文件中的部分。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.High">
      <summary>指示对于任何请求所保护的功能级别小于或等于 High 信任级别将会成功。 此级别旨在用于高度受信任的托管代码应用程序需要使用的大部分托管支持完全受信任的访问的权限。 不会授予一些最高的权限 （例如，能够调入本机代码），但它提供一种方法来使用最低权限运行受信任的应用程序，或者为高度受信任的应用程序提供某种程度的限制。 通过配置来授予此级别至少 <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /> 信任级别中的 信任 配置文件中的部分。</summary>
    </member>
    <member name="F:System.Web.AspNetHostingPermissionLevel.Unrestricted">
      <summary>指示将授予的权限以使用所有功能的应用程序的所有需求。 这相当于授予 Full 信任级别中的 信任 在配置文件中的部分。</summary>
    </member>
    <member name="T:System.Windows.Input.ICommand">
      <summary>定义一个命令。</summary>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>标识 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类，当类型或属性被序列化时应使用此类。</summary>
    </member>
  </members>
</doc>