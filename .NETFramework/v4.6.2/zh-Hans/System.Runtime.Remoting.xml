<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Remoting</name>
  </assembly>
  <members>
    <member name="F:System.Runtime.Remoting.Channels.CommonTransportKeys.ConnectionId">
      <summary>与提供给每个传入套接字连接的唯一 ID 关联的传输密钥。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.CommonTransportKeys.IPAddress">
      <summary>与发出传入请求的 IP 地址关联的传输密钥。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.CommonTransportKeys.RequestUri">
      <summary>与发出请求的 URI 关联的传输密钥。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Services.RemotingClientProxy._tp">
      <summary>远程处理客户端代理对象内部透明的代理。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Services.RemotingClientProxy._type">
      <summary>指示当前代理表示的对象的类型。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Services.RemotingClientProxy._url">
      <summary>指示当前代理表示的对象的 URL。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSink" /> 类的新实例。</summary>
      <param name="nextSink">下一步 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> 接收器链中。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>以异步方式处理所提供的消息。</summary>
      <param name="msg">要处理的消息。</param>
      <param name="replySink">将接收对所提供的消息的答复接收器。</param>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> ，它提供一种方法可控制的异步消息调度后处理。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>请求异步处理的方法调用当前接收器。</summary>
      <param name="sinkStack">接收器调用当前接收器的信道堆栈。</param>
      <param name="msg">要处理的消息。</param>
      <param name="headers">要添加到将发往服务器的传出消息的标头。</param>
      <param name="stream">将发往传输接收器流。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>请求异步处理的响应方法调用当前接收器。</summary>
      <param name="sinkStack">接收器调用当前接收器的堆栈。</param>
      <param name="state">与当前接收器相关联的信息在请求方生成，并在响应端所需。</param>
      <param name="headers">从服务器响应流中检索标头。</param>
      <param name="stream">返回来自于传输接收器流。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>返回 <see cref="T:System.IO.Stream" /> 所提供的消息进行序列化到其上。</summary>
      <param name="msg">
        <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> 包含有关方法调用的详细信息。</param>
      <param name="headers">要添加到将发往服务器的传出消息的标头。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 所提供的消息进行序列化到其上。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>从当前接收器处理的请求消息。</summary>
      <param name="msg">要处理的消息。</param>
      <param name="requestHeaders">要添加到将发往服务器的传出消息的标头。</param>
      <param name="requestStream">将发往传输接收器流。</param>
      <param name="responseHeaders">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> 持有服务器返回的标头的接口。 此参数未经初始化即被传递。</param>
      <param name="responseStream">此方法返回时，包含 <see cref="T:System.IO.Stream" /> ，来自回传输接收器。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>以同步方式处理所提供的消息。</summary>
      <param name="msg">要处理的消息。</param>
      <returns>对已处理的消息的响应。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" /> 用给定的属性和提供程序的数据。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 配置属性，若要使用的新实例的 <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" />。</param>
      <param name="providerData">一个 <see cref="T:System.Collections.ICollection" /> 的 <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> 对象，其中包含要使用的新实例的提供程序数据 <see cref="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
      <summary>创建接收器链。</summary>
      <param name="channel">要为其构造此接收器链的通道。</param>
      <param name="url">要连接到对象或目标对象的通道 URI 的 URL。</param>
      <param name="remoteChannelData">描述在远程服务器的某个通道信道数据对象。</param>
      <returns>新构成的信道接收器链，第一个接收器或 null, ，指示此提供程序将不会或不能提供此终结点的连接。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" /> 类的新实例。</summary>
      <param name="protocol">
        <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol" /> ，将使用与当前实例的 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />。</param>
      <param name="nextSink">信道接收器链中的下一个接收器。</param>
      <param name="receiver">指示将接收的消息的序列化的新实例的通道 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>从方法调用的异步发送响应的请求处理。</summary>
      <param name="sinkStack">处于领先地位回服务器传输接收器的接收器堆栈。</param>
      <param name="state">是与当前接收器相关联，在请求方生成以及在响应端需要的信息。</param>
      <param name="msg">响应消息中。</param>
      <param name="headers">要添加到将发往客户端返回消息的标头。</param>
      <param name="stream">流将发回传输接收器。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>返回 <see cref="T:System.IO.Stream" /> 提供的响应消息进行序列化到其上。</summary>
      <param name="sinkStack">处于领先地位回服务器传输接收器的接收器堆栈。</param>
      <param name="state">是与当前接收器相关联，在请求方生成以及在响应端需要的信息。</param>
      <param name="msg">要序列化的响应消息。</param>
      <param name="headers">要放入到客户端的响应流中的标头。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 提供的响应消息进行序列化到其上。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>从当前接收器处理的请求消息。</summary>
      <param name="sinkStack">接收器调用当前接收器的信道堆栈。</param>
      <param name="requestMsg">包含请求的消息。</param>
      <param name="requestHeaders">检索从来自客户端的传入消息的标头。</param>
      <param name="requestStream">需要处理并传递到反序列化接收器流。</param>
      <param name="responseMsg">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 持有响应消息。 此参数未经初始化即被传递。</param>
      <param name="responseHeaders">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> 包含要添加到将发往客户端返回消息的标头。 此参数未经初始化即被传递。</param>
      <param name="responseStream">此方法返回时，包含 <see cref="T:System.IO.Stream" /> ，它是将发往传输接收器。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> 状态值，提供有关如何处理消息的信息。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" /> 带有提供的属性和提供程序的数据的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 配置属性，若要使用的新实例的 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />。</param>
      <param name="providerData">一个 <see cref="T:System.Collections.ICollection" /> 的 <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> 若要使用的新实例的 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>创建接收器链。</summary>
      <param name="channel">要为其创建信道接收器链通道。</param>
      <returns>新构成的信道接收器链的第一个接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
      <summary>返回对当前接收器与之关联的通道的通道数据。</summary>
      <param name="channelData">一个 <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore" /> 对象是用要返回的信道数据。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.CommonTransportKeys.#ctor">
      <summary>创建 <see cref="T:System.Runtime.Remoting.Channels.CommonTransportKeys" /> 的实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> 带有指定的配置属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用由客户端和服务器信道配置属性的值。</param>
      <param name="clientSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 实现将由客户端通道。</param>
      <param name="serverSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现将由服务器信道。</param>
      <exception cref="T:System.ArgumentException">配置属性的格式不正确。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /> 在指定端口上侦听的服务器信道的类。</summary>
      <param name="port">服务器信道侦听的端口。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.AddHookChannelUri(System.String)">
      <summary>添加信道挂钩应在其进行侦听的 URI。</summary>
      <param name="channelUri">有关应始终为空引用 (在 Visual Basic 中为 Nothing) <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" /></param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>返回将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</summary>
      <param name="url">新的接收器将把消息传送到的 URL。 可以为 null。</param>
      <param name="remoteChannelData">新的接收器将把消息传送到的远程主机的信道数据对象。 可以为 null。</param>
      <param name="objectURI">此方法返回时，包含将消息传递到指定的 URL 或信道数据对象的新信道消息接收器的 URI。 此参数未经初始化即被传递。</param>
      <returns>将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.GetUrlsForUri(System.String)">
      <summary>返回的所有 Url 的对象使用指定的 URI、 承载在当前数组 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />。</summary>
      <param name="objectURI">为其 URL 的所需的对象的 URI。</param>
      <returns>使用指定的 URI、 承载在当前对象的 Url 数组 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取远程的已知对象的 URI 的 URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> ，它持有人所熟知的远程对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>当前通道的 URI 或 null 如果指定的 URL 不是 HTTP URL。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.StartListening(System.Object)">
      <summary>指示当前的通道，以开始侦听请求。</summary>
      <param name="data">应始终为空引用 (在 Visual Basic 中为 Nothing) 为 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpChannel.StopListening(System.Object)">
      <summary>指示要停止侦听请求的当前通道。</summary>
      <param name="data">在其侦听信道挂钩的通道 URI。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" /> 使用指定的配置属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用通道的配置属性的值。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 要由通道实现。</param>
      <exception cref="T:System.ArgumentException">配置属性的格式不正确。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.#ctor(System.String,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" /> 带有指定的名称和接收器的类。</summary>
      <param name="name">新实例的名称 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel" />。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 通道使用。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>返回将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</summary>
      <param name="url">新的接收器将把消息传送到的 URL。 可以为 null。</param>
      <param name="remoteChannelData">新的接收器将把消息传送到的远程主机的信道数据对象。 可以为 null。</param>
      <param name="objectURI">此方法返回时，包含将消息传递到指定的 URL 或信道数据对象的新信道消息接收器的 URI。 此参数未经初始化即被传递。</param>
      <returns>将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpClientChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取远程的已知对象的 URI 的 URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> ，它持有人所熟知的远程对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>当前通道的 URI 或 null 如果指定的 URL 不是 HTTP URL。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.#ctor(System.Type,System.Object)">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> 类的新实例。</summary>
      <param name="type">此构造函数忽略 <paramref name="type" /> 参数。</param>
      <param name="srvID">此构造函数忽略 <paramref name="srvID" /> 参数。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>允许的 HTTP Web 请求的当前实例的处理。</summary>
      <param name="context">一个 <see cref="T:System.Web.HttpContext" /> ，它提供对内部服务器对象的引用 (例如， Request, ，Response, ，Session, ，和 Server) 用于处理 HTTP 请求。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory.#ctor">
      <summary>创建 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory" /> 的实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
      <summary>返回的实例 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> 类。</summary>
      <param name="context">一个实例 <see cref="T:System.Web.HttpContext" /> 类，该类提供对内部服务器对象的引用 (例如， Request, ，Response, ，Session, ，和 Server) 用于处理 HTTP 请求。</param>
      <param name="verb">HTTP 数据传输方法 (GET 或 POST) 为客户端使用。</param>
      <param name="url">
        <see cref="P:System.Web.HttpRequest.RawUrl" /> 请求的资源。</param>
      <param name="filePath">
        <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath" /> 对请求的资源。</param>
      <returns>一个新 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> 处理该请求。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
      <summary>使工厂可以重复使用指定 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" />。</summary>
      <param name="handler">
        <see cref="T:System.Web.IHttpHandler" /> 释放。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 使用指定的信道属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 存放当前通道的配置信息的信道属性。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 若要使用的新实例的 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" />。</param>
      <exception cref="T:System.ArgumentException">配置属性的格式不正确。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 在指定端口侦听的类。</summary>
      <param name="port">通道侦听的端口。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 类处理给定的名称，并在指定的端口上侦听。</summary>
      <param name="name">通道的名称。</param>
      <param name="port">通道侦听的端口。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel" /> 在指定的端口具有给定名称，这会在指定的端口上侦听，并使用指定的接收器类。</summary>
      <param name="name">通道的名称。</param>
      <param name="port">通道侦听的端口。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 通道使用。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.AddHookChannelUri(System.String)">
      <summary>添加信道挂钩必须侦听的 URI。</summary>
      <param name="channelUri">信道挂钩必须在其侦听的 URI。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetChannelUri">
      <summary>返回当前通道的 URI。</summary>
      <returns>当前通道的 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.GetUrlsForUri(System.String)">
      <summary>返回的所有 Url 的对象使用指定的 URI、 承载在当前数组 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />。</summary>
      <param name="objectUri">为其 Url 所需的对象的 URI。</param>
      <returns>使用指定的 URI、 承载在当前对象的 Url 数组 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取 Uri URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> ，它持有人所熟知的远程对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>通道 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StartListening(System.Object)">
      <summary>指示当前的通道，以开始侦听请求。</summary>
      <param name="data">应始终为 null 为 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Http.HttpServerChannel.StopListening(System.Object)">
      <summary>指示要停止侦听请求的当前通道。</summary>
      <param name="data">应始终为 null 为 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpChannel" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection.IsConnectingEndPointAuthorized(System.Net.EndPoint)">
      <summary>获取一个布尔值，该值指示是否授权的客户端的网络地址来连接上当前的通道。</summary>
      <param name="endPoint">
        <see cref="T:System.Net.EndPoint" /> 标识客户端的网络地址。</param>
      <returns>true 如果客户端的网络地址已经过授权;，否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection.IsConnectingIdentityAuthorized(System.Security.Principal.IIdentity)">
      <summary>获取一个布尔值，该值指示是否授权的客户端的用户标识来连接上当前的通道。</summary>
      <param name="identity">
        <see cref="T:System.Security.Principal.IIdentity" /> ，表示客户端的用户标识。</param>
      <returns>true 如果已获得授权的客户端的用户标识;，否则为 false。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 类中，激活仅客户端信道和服务器信道。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 带有指定的配置属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，指定要使用由客户端和服务器信道配置属性的值。</param>
      <param name="clientSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 实现将由客户端通道。</param>
      <param name="serverSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现将由服务器信道。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 带有指定的配置属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，指定要使用由客户端和服务器信道配置属性的值。</param>
      <param name="clientSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 实现将由客户端通道。</param>
      <param name="serverSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现将由服务器信道。</param>
      <param name="securityDescriptor">安全描述符中。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 在指定端口上侦听的服务器信道的类。</summary>
      <param name="portName">IPC 端口的名称。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>返回将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</summary>
      <param name="url">新的接收器应将消息传递到的 URL。 可以为 null。</param>
      <param name="remoteChannelData">新的接收器应将消息传递到的远程主机的信道数据对象。 可以为 null。</param>
      <param name="objectURI">此方法返回时，包含将消息传递到指定的 URL 或信道数据对象的新信道消息接收器的 URI。 此参数未经初始化即被传递。</param>
      <returns>将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.GetUrlsForUri(System.String)">
      <summary>返回的所有 Url 的对象使用指定的 URI、 承载在当前数组 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" />。</summary>
      <param name="objectURI">为其 Url 所需的对象的 URI。</param>
      <returns>使用指定的 URI、 承载在当前对象的 Url 数组 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" />。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取远程的已知对象的 URI 的 URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> ，它持有人所熟知的远程对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>当前通道的 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.StartListening(System.Object)">
      <summary>指示当前的通道，以开始侦听请求。</summary>
      <param name="data">可选的初始化信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcChannel.StopListening(System.Object)">
      <summary>指示要停止侦听请求的当前通道。</summary>
      <param name="data">通道的可选状态信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel" /> 使用指定的配置属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用通道的配置属性的值。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.#ctor(System.String,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel" /> 带有指定的名称和接收器的类。</summary>
      <param name="name">通道的名称。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 要由通道实现。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>返回将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</summary>
      <param name="url">新的接收器将消息传送 URL。 此参数可以为 null。</param>
      <param name="remoteChannelData">新的接收器将把消息传送到的远程主机的信道数据对象。 此参数可以为 null。</param>
      <param name="objectURI">此方法返回时，包含将消息传递到指定的 URL 或信道数据对象的新信道消息接收器的 URI。 此参数未经初始化即被传递。</param>
      <returns>将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</returns>
      <exception cref="T:System.Runtime.Remoting.RemotingException">未实现提供的接收器 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" />。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取对象 URI URL。</param>
      <param name="objectURI">此方法返回时， <see cref="T:System.String" /> 实例，保存远程已知对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.String" /> ，其中包含通道 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 使用指定的信道属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用通道的配置属性的值。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类具有指定的信道属性、 接收器和安全描述符。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用通道的配置属性的值。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
      <param name="securityDescriptor">一个 <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> 通道使用。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类具有指定的 IPC 端口名称。</summary>
      <param name="portName">要由通道的 IPC 端口的名称。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类，具有指定的通道名称和 IPC 端口名称。</summary>
      <param name="name">通道的名称。</param>
      <param name="portName">要由通道的 IPC 端口的名称。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 使用指定的通道名称、 IPC 端口名称和接收器的类。</summary>
      <param name="name">通道的名称。</param>
      <param name="portName">要由通道的 IPC 端口的名称。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri">
      <summary>返回当前通道的 URI。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含通道的 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri(System.String)">
      <summary>返回的所有 Url 的对象使用指定的 URI、 承载在当前数组 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 实例。</summary>
      <param name="objectUri">为其 Url 所需的对象的 URI。</param>
      <returns>使用指定的 URI、 承载在当前对象的 Url 数组 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 实例。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取远程的已知对象的 URI 的 URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> 实例，保存远程已知对象的 URI。</param>
      <returns>当前通道的 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening(System.Object)">
      <summary>指示当前的通道，以开始侦听请求。</summary>
      <param name="data">一个对象，指定未初始化状态，或 null, ，如果不想将特定状态传递到通道。</param>
      <exception cref="T:System.Exception">指定的侦听端口不可用。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening(System.Object)">
      <summary>指示要停止侦听请求的当前通道。</summary>
      <param name="data">一个对象，指定未初始化状态，或 null, ，如果不想将特定状态传递到通道。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.#ctor(System.Runtime.Remoting.Channels.IClientChannelSink)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSink" /> 类的新实例。</summary>
      <param name="nextSink">信道接收器链中的下一个接收器。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Messaging.IMessageSink)">
      <summary>以异步方式处理所提供的消息。</summary>
      <param name="msg">要处理的消息。</param>
      <param name="replySink">将接收对所提供的消息的答复接收器。</param>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Messaging.IMessageCtrl" /> ，它提供一种方法可控制的异步消息调度后处理。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.AsyncProcessRequest(System.Runtime.Remoting.Channels.IClientChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>请求异步处理的方法调用当前接收器。</summary>
      <param name="sinkStack">接收器调用当前接收器的信道堆栈。</param>
      <param name="msg">要处理的消息。</param>
      <param name="headers">要添加到消息发往服务器的传出标头。</param>
      <param name="stream">发往传输接收器流。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>请求异步处理的响应方法调用当前接收器。</summary>
      <param name="sinkStack">接收器调用当前接收器的堆栈。</param>
      <param name="state">与当前接收器相关联的状态。</param>
      <param name="headers">从服务器响应流中检索标头。</param>
      <param name="stream">返回的流从传输接收器。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.GetRequestStream(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>返回 <see cref="T:System.IO.Stream" /> 所提供的消息进行序列化到其上。</summary>
      <param name="msg">
        <see cref="T:System.Runtime.Remoting.Messaging.IMethodCallMessage" /> 包含有关方法调用的详细信息。</param>
      <param name="headers">要添加到消息发往服务器的传出标头。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 所提供的消息进行序列化到其上。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.ProcessMessage(System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>从当前接收器处理的请求消息。</summary>
      <param name="msg">要处理的消息。</param>
      <param name="requestHeaders">要添加到消息发往服务器的传出标头。</param>
      <param name="requestStream">将发往传输接收器流。</param>
      <param name="responseHeaders">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> 持有服务器返回的标头的接口。 此参数未经初始化即被传递。</param>
      <param name="responseStream">此方法返回时，包含 <see cref="T:System.IO.Stream" /> 传回从传输接收器。 此参数未经初始化即被传递。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage)">
      <summary>以同步方式处理所提供的消息。</summary>
      <param name="msg">要处理的消息。</param>
      <returns>对已处理的消息的响应。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" /> 用给定的属性和提供程序的数据。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 配置属性，若要使用的新实例的 <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />。</param>
      <param name="providerData">一个 <see cref="T:System.Collections.ICollection" /> 提供程序要使用的数据的新实例 <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelSender,System.String,System.Object)">
      <summary>创建接收器链。</summary>
      <param name="channel">要为其构造此接收器链的通道。</param>
      <param name="url">要连接到对象或目标对象的通道 URI 的 URL。</param>
      <param name="remoteChannelData">描述在远程服务器上的通道的通道的数据对象。</param>
      <returns>新构成的信道接收器链，第一个接收器或 null, ，指示此提供程序将不会或不能提供此终结点的连接。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" /> 类的新实例。</summary>
      <param name="protocol">
        <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol" /> ，将使用与当前实例的 <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" />。</param>
      <param name="nextSink">信道接收器链中的下一个接收器。</param>
      <param name="receiver">指示将接收的新实例序列化的消息的通道 <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>从当前接收器对从方法调用以异步方式发送的响应进行处理的请求。</summary>
      <param name="sinkStack">前导回服务器传输接收器的接收器堆栈。</param>
      <param name="state">与当前的接收器中，在请求方生成并在响应端所需的信息。</param>
      <param name="msg">响应消息中。</param>
      <param name="headers">要将添加到发往客户端返回消息的标头。</param>
      <param name="stream">流标题回传输接收器。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>返回 <see cref="T:System.IO.Stream" /> 提供的响应消息进行序列化到其上。</summary>
      <param name="sinkStack">前导回服务器传输接收器的接收器堆栈。</param>
      <param name="state">与当前的接收器中，在请求方生成并在响应端所需的信息。</param>
      <param name="msg">要序列化响应消息。</param>
      <param name="headers">要放入到客户端的响应流中的标头。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 提供的响应消息进行序列化到其上。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>从当前接收器处理的请求消息。</summary>
      <param name="sinkStack">的接收器堆栈该传输消息。</param>
      <param name="requestMsg">包含请求的消息。</param>
      <param name="requestHeaders">从来自客户端的传入消息中检索标头。</param>
      <param name="requestStream">需要处理并传递到反序列化接收器流。</param>
      <param name="responseMsg">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 持有响应消息。 此参数未经初始化即被传递。</param>
      <param name="responseHeaders">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> 包含要添加到发往客户端返回消息的标头。 此参数未经初始化即被传递。</param>
      <param name="responseStream">此方法返回时，包含 <see cref="T:System.IO.Stream" /> 即发回到传输接收器。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> 状态值，提供有关如何处理消息的信息。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider" /> 带有提供的属性和提供程序的数据的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 配置属性，若要使用的新实例的 <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />。</param>
      <param name="providerData">一个 <see cref="T:System.Collections.ICollection" /> 提供程序要使用的数据的新实例 <see cref="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>创建接收器链。</summary>
      <param name="channel">要为其创建信道接收器链通道。</param>
      <returns>新构成的信道接收器链的第一个接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
      <summary>返回对当前接收器与之关联的通道的通道数据。</summary>
      <param name="channelData">一个 <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore" /> 对象是用要返回的信道数据。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 类中，激活仅客户端信道和服务器信道。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 带有指定的配置属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用由客户端和服务器信道配置属性的值。</param>
      <param name="clientSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 实现将由客户端通道。</param>
      <param name="serverSinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现将由服务器信道。</param>
      <exception cref="T:System.ArgumentException">提供的信道属性格式不正确。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 在指定端口上侦听的服务器信道的类。</summary>
      <param name="port">服务器信道侦听的端口。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>返回将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</summary>
      <param name="url">新的接收器应将消息传递到的 URL。 可以为 null。</param>
      <param name="remoteChannelData">新的接收器应将消息传递到的远程主机的信道数据对象。 可以为 null。</param>
      <param name="objectURI">此方法返回时，包含将消息传递到指定的 URL 或信道数据对象的新信道消息接收器的 URI。 此参数未经初始化即被传递。</param>
      <returns>将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.GetUrlsForUri(System.String)">
      <summary>返回的所有 Url 的对象使用指定的 URI、 承载在当前数组 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" />。</summary>
      <param name="objectURI">为其 Url 所需的对象的 URI。</param>
      <returns>使用指定的 URI、 承载在当前对象的 Url 数组 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" />。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取远程的已知对象的 URI 的 URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> ，它持有人所熟知的远程对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>当前通道的 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.StartListening(System.Object)">
      <summary>指示当前的通道，以开始侦听请求。</summary>
      <param name="data">可选的初始化信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpChannel.StopListening(System.Object)">
      <summary>指示要停止侦听请求的当前通道。</summary>
      <param name="data">通道的可选状态信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> 使用指定的配置属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用通道的配置属性的值。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
      <exception cref="T:System.ArgumentException">配置属性的格式不正确。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.#ctor(System.String,System.Runtime.Remoting.Channels.IClientChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel" /> 带有指定的名称和接收器的类。</summary>
      <param name="name">通道的名称。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 要由通道实现。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.CreateMessageSink(System.String,System.Object,System.String@)">
      <summary>返回将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</summary>
      <param name="url">新的接收器将消息传送 URL。 可以为 null。</param>
      <param name="remoteChannelData">新的接收器将把消息传送到的远程主机的信道数据对象。 可以为 null。</param>
      <param name="objectURI">此方法返回时，包含将消息传递到指定的 URL 或信道数据对象的新信道消息接收器的 URI。 此参数未经初始化即被传递。</param>
      <returns>将消息传递到指定的 URL 或信道数据对象的信道消息接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取 Uri URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> 实例，保存远程已知对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>通道 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> 使用指定的信道属性和接收器的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，指定通道使用配置属性的值。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
      <exception cref="T:System.ArgumentException">提供的信道属性的格式设置错误。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> 与指定的信道属性、 接收器和授权提供程序的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它指定使用通道的配置属性的值。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
      <param name="authorizeCallback">
        <see cref="T:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection" /> 要由通道实现。</param>
      <exception cref="T:System.ArgumentException">提供的信道属性的格式设置错误。</exception>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> 在指定端口侦听的类。</summary>
      <param name="port">通道侦听的端口。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> 类处理给定的名称，并在指定的端口上侦听。</summary>
      <param name="name">通道的名称。</param>
      <param name="port">通道侦听的端口。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.#ctor(System.String,System.Int32,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel" /> 具有给定名称，这会在指定的端口上侦听，并使用指定的接收器类。</summary>
      <param name="name">通道的名称。</param>
      <param name="port">通道侦听的端口。</param>
      <param name="sinkProvider">
        <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 要由通道实现。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetChannelUri">
      <summary>返回当前通道的 URI。</summary>
      <returns>当前通道的 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.GetUrlsForUri(System.String)">
      <summary>返回的所有 Url 的对象使用指定的 URI、 承载在当前数组 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 实例。</summary>
      <param name="objectUri">为其 Url 所需的对象的 URI。</param>
      <returns>使用指定的 URI、 承载在当前对象的 Url 数组 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 实例。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.Parse(System.String,System.String@)">
      <summary>从指定的 URL 中提取的通道 URI 和远程的已知对象的 URI。</summary>
      <param name="url">要从中提取远程的已知对象的 URI 的 URL。</param>
      <param name="objectURI">此方法返回时，包含 <see cref="T:System.String" /> 实例，保存远程已知对象的 URI。 此参数未经初始化即被传递。</param>
      <returns>当前通道的 URI。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StartListening(System.Object)">
      <summary>指示当前的通道，以开始侦听请求。</summary>
      <param name="data">可选的初始化信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.StopListening(System.Object)">
      <summary>指示要停止侦听请求的当前通道。</summary>
      <param name="data">通道的可选状态信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.#ctor">
      <summary>创建 <see cref="T:System.Runtime.Remoting.MetadataServices.MetaData" /> 的实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceFileToAssemblyFile(System.String,System.String,System.String)">
      <summary>将指定的代码的源代码文件编译到一个运行时程序集文件。</summary>
      <param name="codePath">包含的源代码文件的路径。</param>
      <param name="assemblyPath">生成新的运行时程序集的位置。</param>
      <param name="strongNameFilename">要将编译为新的程序集的强名称。 可以是 <see cref="F:System.String.Empty" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertCodeSourceStreamToAssemblyFile(System.Collections.ArrayList,System.String,System.String)">
      <summary>编译到一个运行时程序集文件中指定代码源流。</summary>
      <param name="outCodeStreamList">一个 <see cref="T:System.Collections.ArrayList" /> 的源代码的流。</param>
      <param name="assemblyPath">生成新的运行时程序集的位置。</param>
      <param name="strongNameFilename">要将编译为新的运行时程序集的强名称。 可以是 <see cref="F:System.String.Empty" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList)">
      <summary>将 C# 代理源代码转换为指定的架构定义。</summary>
      <param name="clientProxy">指示要生成代理的类型。 如果 true, ，则生成简单代理 （也称为预包装代理） 自动加载信道，公开的远程对象的所有方法并提供对通道属性的访问。 如果 false, ，将生成一个透明代理，它公开的远程对象的所有方法。</param>
      <param name="outputDirectory">创建新 C# 源代码文件与代理的目录。</param>
      <param name="inputStream">包含 Web 服务描述语言 (WSDL) 格式的架构定义的输入的流。</param>
      <param name="outCodeStreamList">生成的代码流的文件名称的列表。 请注意， <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> 方法可以创建多个源代码流。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String)">
      <summary>将位于指定 URL 处的远程对象 C# 代理源代码转换为指定的架构定义。</summary>
      <param name="clientProxy">指示要生成代理的类型。 如果 true, ，则生成简单代理 （也称为预包装代理） 自动加载信道，公开的远程对象的所有方法并提供对通道属性的访问。 如果 false, ，将生成一个透明代理，它公开的远程对象的所有方法。</param>
      <param name="outputDirectory">创建新 C# 源代码文件与代理的目录。</param>
      <param name="inputStream">包含 Web 服务描述语言 (WSDL) 格式的架构定义的输入的流。</param>
      <param name="outCodeStreamList">生成的代码流的文件名称的列表。 请注意， <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> 方法可以创建多个源代码流。</param>
      <param name="proxyUrl">将位置由新的代理的目标远程对象的 URL。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)">
      <summary>将位于指定 URL 处和提供的类命名空间中的远程对象 C# 代理源代码转换为指定的架构定义。</summary>
      <param name="clientProxy">指示要生成代理的类型。 如果 true, ，则生成简单代理 （也称为预包装代理） 自动加载信道，公开的远程对象的所有方法并提供对通道属性的访问。 如果 false, ，将生成一个透明代理，它公开的远程对象的所有方法。</param>
      <param name="outputDirectory">创建新 C# 源代码文件与代理的目录。</param>
      <param name="inputStream">包含 Web 服务描述语言 (WSDL) 格式的架构定义的输入的流。</param>
      <param name="outCodeStreamList">生成的代码流的文件名称的列表。 请注意， <see cref="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertSchemaStreamToCodeSourceStream(System.Boolean,System.String,System.IO.Stream,System.Collections.ArrayList,System.String,System.String)" /> 方法可以创建多个源代码流。</param>
      <param name="proxyUrl">将位置由新的代理的目标远程对象的 URL。</param>
      <param name="proxyNamespace">新创建的代理服务器命名空间。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile(System.Runtime.Remoting.MetadataServices.ServiceType[],System.Runtime.Remoting.MetadataServices.SdlType,System.String)">
      <summary>将指定的服务类型转换为 XML 架构，并将其写入由名称指定的文件。</summary>
      <param name="types">
        <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 实例转换为 XML 架构。</param>
      <param name="sdlType">服务描述语言，用于表示 XML 架构的类型。</param>
      <param name="path">XML 文件的路径。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToFile(System.Type[],System.Runtime.Remoting.MetadataServices.SdlType,System.String)">
      <summary>将指定的对象类型转换为 XML 架构，并将其写入由名称指定的文件。</summary>
      <param name="types">要转换为 XML 架构的对象类型。</param>
      <param name="sdlType">服务描述语言，用于表示 XML 架构的类型。</param>
      <param name="path">XML 文件的路径。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream(System.Runtime.Remoting.MetadataServices.ServiceType[],System.Runtime.Remoting.MetadataServices.SdlType,System.IO.Stream)">
      <summary>将指定的服务类型转换为 XML 架构，并将其写入指定的流。</summary>
      <param name="serviceTypes">
        <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 实例转换为 XML 架构。</param>
      <param name="sdlType">服务描述语言，用于表示 XML 架构的类型。</param>
      <param name="outputStream">
        <see cref="T:System.IO.Stream" /> 架构写入。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.ConvertTypesToSchemaToStream(System.Type[],System.Runtime.Remoting.MetadataServices.SdlType,System.IO.Stream)">
      <summary>将指定的对象类型转换为 XML 架构，并将其写入指定的流。</summary>
      <param name="types">要转换为 XML 架构的对象类型。</param>
      <param name="sdlType">服务描述语言，用于表示 XML 架构的类型。</param>
      <param name="outputStream">
        <see cref="T:System.IO.Stream" /> 架构写入。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToFile(System.String,System.String)">
      <summary>从 URL 下载 XML 架构并将其写入指定的文件。</summary>
      <param name="url">XML 架构所在的位置的 URL。</param>
      <param name="path">在架构写到文件的路径。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.RetrieveSchemaFromUrlToStream(System.String,System.IO.Stream)">
      <summary>从 URL 下载 XML 架构并将其写入指定的流。</summary>
      <param name="url">XML 架构所在的位置的 URL。</param>
      <param name="outputStream">
        <see cref="T:System.IO.Stream" /> 架构写入。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.MetaData.SaveStreamToFile(System.IO.Stream,System.String)">
      <summary>将输入的流保存到具有指定名称的文件。</summary>
      <param name="inputStream">要写入到指定的文件的流。</param>
      <param name="path">输入的流写入到该文件。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.#ctor(System.Runtime.Remoting.Channels.IChannelReceiver,System.Runtime.Remoting.Channels.IServerChannelSink)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink" /> 类的新实例。</summary>
      <param name="receiver">指示将接收的新实例序列化的消息的通道 <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink" />。</param>
      <param name="nextSink">接收器链中的下一个接收器。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)">
      <summary>从当前接收器来自已以异步方式发送的方法调用的响应进行处理的请求。</summary>
      <param name="sinkStack">返回导致服务器传输接收器的接收器堆栈。</param>
      <param name="state">与当前的接收器中，在请求方生成并在响应端所需的信息。</param>
      <param name="msg">响应消息中。</param>
      <param name="headers">要将添加到发往客户端返回消息的标头。</param>
      <param name="stream">流标题回传输接收器。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)">
      <summary>返回 <see cref="T:System.IO.Stream" /> 提供的响应消息进行序列化到其上。</summary>
      <param name="sinkStack">返回导致服务器传输接收器的接收器堆栈。</param>
      <param name="state">与当前的接收器中，在请求方生成并在响应端所需的信息。</param>
      <param name="msg">要序列化的响应消息。</param>
      <param name="headers">要放入到客户端的响应流中的标头。</param>
      <returns>
        <see cref="T:System.IO.Stream" /> 提供的响应消息进行序列化到其上。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)">
      <summary>从当前接收器处理的请求消息。</summary>
      <param name="sinkStack">接收器调用当前接收器的信道堆栈。</param>
      <param name="requestMsg">包含请求的消息。</param>
      <param name="requestHeaders">检索从来自客户端的传入消息标头。</param>
      <param name="requestStream">需要处理并传递到反序列化接收器流。</param>
      <param name="responseMsg">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> 持有响应消息。 此参数未经初始化即被传递。</param>
      <param name="responseHeaders">此方法返回时，包含 <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> ，持有的标头添加到客户端返回邮件的标题。 此参数未经初始化即被传递。</param>
      <param name="responseStream">此方法返回时，包含 <see cref="T:System.IO.Stream" /> ，它是将发往传输接收器。 此参数未经初始化即被传递。</param>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> 状态值，提供有关如何处理消息的信息。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.#ctor">
      <summary>使用默认值初始化 <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.#ctor(System.Collections.IDictionary,System.Collections.ICollection)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider" /> 带有指定的属性和提供程序的数据的类。</summary>
      <param name="properties">一个 <see cref="T:System.Collections.IDictionary" /> 配置属性，若要使用的新实例的 <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider" />。</param>
      <param name="providerData">一个 <see cref="T:System.Collections.ICollection" /> 的 <see cref="T:System.Runtime.Remoting.Channels.SinkProviderData" /> 要使用的新实例的实例 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider" />。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.CreateSink(System.Runtime.Remoting.Channels.IChannelReceiver)">
      <summary>创建接收器链。</summary>
      <param name="channel">要为其创建信道接收器链通道。</param>
      <returns>新构成的信道接收器链的第一个接收器。</returns>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.GetChannelData(System.Runtime.Remoting.Channels.IChannelDataStore)">
      <summary>返回对当前接收器与之关联的通道的通道数据。</summary>
      <param name="localChannelData">一个 <see cref="T:System.Runtime.Remoting.Channels.IChannelDataStore" /> 对象是用要返回的信道数据。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.ServiceType.#ctor(System.Type)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 与对象的类 <see cref="T:System.Type" /> ，传递给 Web 服务描述语言 (WSDL) 生成器。</summary>
      <param name="type">该对象 <see cref="T:System.Type" /> ，传递给 WSDL 生成器。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.ServiceType.#ctor(System.Type,System.String)">
      <summary>新实例初始化 <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 类具有 URL 和 <see cref="T:System.Type" /> 传递到 Web 服务描述语言 (WSDL) 生成器的对象。</summary>
      <param name="type">该对象 <see cref="T:System.Type" /> ，传递给 WSDL 生成器。</param>
      <param name="url">可以处理的消息所发送到方法中指定的对象类型上的已知终结点 <paramref name="type" /> 参数。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SUDSGeneratorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.MetadataServices.SUDSGeneratorException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.MetadataServices.SUDSParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>初始化 <see cref="T:System.Runtime.Remoting.MetadataServices.SUDSParserException" /> 类的新实例。</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存关于所引发异常的序列化对象数据。</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含关于源或目标的上下文信息。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingClientProxy.#ctor">
      <summary>创建 <see cref="T:System.Runtime.Remoting.Services.RemotingClientProxy" /> 的实例。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingClientProxy.ConfigureProxy(System.Type,System.String)">
      <summary>内部。 通过加载通道，如果它们尚未加载并创建代理来自动配置代理。</summary>
      <param name="type">
        <see cref="T:System.Type" /> 类当前代理表示的对象类型。</param>
      <param name="url">当前代理表示的对象的 URL。</param>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingClientProxy.ConnectProxy">
      <summary>内部。 将代理连接到由指定的远程处理通道 <see cref="P:System.Runtime.Remoting.Services.RemotingClientProxy.Url" /> 属性。</summary>
    </member>
    <member name="M:System.Runtime.Remoting.Services.RemotingService.#ctor">
      <summary>创建 <see cref="T:System.Runtime.Remoting.Services.RemotingService" /> 的实例。</summary>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.NextChannelSink">
      <summary>获取下一个 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> 接收器链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> 接收器链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.NextSink">
      <summary>获取下一个 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 接收器链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 接收器链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSink.Properties">
      <summary>获取 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</summary>
      <returns>一个 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider.Next">
      <summary>获取或设置下一步 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 接收器提供程序链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 接收器提供程序链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.NextChannelSink">
      <summary>获取下一个 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> 接收器链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> 接收器链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Properties">
      <summary>获取 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</summary>
      <returns>一个 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel">
      <summary>获取或设置 TypeFilterLevel 值自动反序列化程序 BinaryServerFormatterSink 执行。</summary>
      <returns>TypeFilterLevel ，表示当前的自动反序列化级别。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.Next">
      <summary>获取或设置下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 接收器提供程序链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 接收器提供程序链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider.TypeFilterLevel">
      <summary>获取或设置 TypeFilterLevel 的自动反序列化值 BinaryServerFormatterSink 执行。</summary>
      <returns>TypeFilterLevel ，表示当前的自动反序列化级别。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelData">
      <summary>获取通道特定的数据。</summary>
      <returns>通道的数据。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，表示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelScheme">
      <summary>获取要挂钩到 (例如，"http") 的侦听器的类型。</summary>
      <returns>要挂钩到的侦听器类型。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.ChannelSinkChain">
      <summary>获取当前的通道使用信道接收器链。</summary>
      <returns>当前的通道使用信道接收器链。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.IsSecured">
      <summary>获取或设置一个布尔值，该值指示当前的通道是否安全。</summary>
      <returns>一个布尔值，该值指示当前实例是否安全。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.Item(System.Object)">
      <summary>返回指定的信道属性。</summary>
      <param name="key">要检索的通道属性的键。</param>
      <returns>一个 <see cref="T:System.Object" /> ，它表示由指定的信道属性 <paramref name="key" />。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 的与之关联的信道属性的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" /> 的与之关联的信道属性的键。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.Properties">
      <summary>获取 <see cref="T:System.Collections.IDictionary" /> 与当前通道关联的信道属性。</summary>
      <returns>一个 <see cref="T:System.Collections.IDictionary" /> 与当前通道关联的信道属性。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpChannel.WantsToListen">
      <summary>获取一个布尔值，该值指示当前实例是否要挂钩到外部侦听器服务。</summary>
      <returns>一个布尔值，该值指示是否 <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> 想要挂接到外部侦听器服务。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，表示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.IsSecured">
      <summary>获取或设置是否受保护的客户端通道。</summary>
      <returns>true 否则保护消息的客户端信道 false。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.Item(System.Object)">
      <summary>返回指定的信道属性。</summary>
      <param name="key">要检索的通道属性的键。</param>
      <returns>一个 <see cref="T:System.Object" /> ，它表示由指定的信道属性 <paramref name="key" />。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpClientChannel.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 的与之关联的信道属性的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" /> 的与之关联的信道属性的键。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler.IsReusable">
      <summary>获取一个布尔值，该值指示是否可以使用另一个请求 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" />。</summary>
      <returns>true 所有实例 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" />。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelData">
      <summary>获取通道特定的数据。</summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例，其中包含通道特定的数据。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 对象，其中包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，表示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelScheme">
      <summary>获取要挂钩到 (例如，"http") 的侦听器的类型。</summary>
      <returns>要挂钩到的侦听器类型。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.ChannelSinkChain">
      <summary>获取当前的通道使用信道接收器链。</summary>
      <returns>当前的通道使用信道接收器链。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Item(System.Object)">
      <summary>返回指定的信道属性。</summary>
      <param name="key">要检索的通道属性的键。</param>
      <returns>一个 <see cref="T:System.Object" /> ，它表示由指定的信道属性 <paramref name="key" />。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.Keys">
      <summary>获取 <see cref="T:System.Collections.ICollection" /> 与信道属性关联的键。</summary>
      <returns>一个 <see cref="T:System.Collections.ICollection" /> 与信道属性关联的键。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Http.HttpServerChannel.WantsToListen">
      <summary>获取一个布尔值，该值指示是否 <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> 想要挂接到外部侦听器服务。</summary>
      <returns>一个布尔值，该值指示是否 <see cref="T:System.Runtime.Remoting.Channels.IChannelReceiverHook" /> 想要挂接到外部侦听器服务。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.ChannelData">
      <summary>获取通道特定的数据。</summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例，其中包含通道特定的数据。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，表示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcChannel.IsSecured">
      <summary>获取或设置一个布尔值，该值指示当前的通道是否安全。</summary>
      <returns>一个布尔值，该值指示当前实例是否安全。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，指示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel.IsSecured">
      <summary>获取或设置一个布尔值，该值指示当前的通道是否安全。</summary>
      <returns>一个布尔值，该值指示当前实例是否安全。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData">
      <summary>获取通道特定的数据。</summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例，其中包含通道特定的数据。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，指示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured">
      <summary>获取或设置一个布尔值，该值指示当前的通道是否安全。</summary>
      <returns>一个布尔值，该值指示当前实例是否安全。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSink.NextChannelSink">
      <summary>获取下一个 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> 接收器链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSink" /> 接收器链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSink.NextSink">
      <summary>获取下一个 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 接收器链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Messaging.IMessageSink" /> 接收器链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSink.Properties">
      <summary>获取 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</summary>
      <returns>一个 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider.Next">
      <summary>获取或设置下一步 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 接收器提供程序链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IClientChannelSinkProvider" /> 接收器提供程序链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSink.NextChannelSink">
      <summary>获取下一个 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> 接收器链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> 接收器链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Properties">
      <summary>获取 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</summary>
      <returns>一个 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。 有关详细信息，请参阅Channel and Formatter Configuration Properties。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSink.TypeFilterLevel">
      <summary>获取或设置 TypeFilterLevel 的自动反序列化值 SoapServerFormatterSink 执行。</summary>
      <returns>TypeFilterLevel ，表示当前的自动反序列化级别。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.Next">
      <summary>获取或设置下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 接收器提供程序链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 接收器提供程序链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider.TypeFilterLevel">
      <summary>获取或设置 TypeFilterLevel 的自动反序列化值 SoapServerFormatterSink 执行。</summary>
      <returns>TypeFilterLevel ，表示当前的自动反序列化级别。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelData">
      <summary>获取通道特定的数据。</summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例，其中包含通道特定的数据。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> ，其中包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，表示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpChannel.IsSecured">
      <summary>获取或设置一个布尔值，该值指示当前的通道是否安全。</summary>
      <returns>一个布尔值，该值指示当前实例是否安全。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，表示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel.IsSecured">
      <summary>获取或设置一个布尔值，该值指示当前的通道是否安全</summary>
      <returns>一个布尔值，该值指示当前实例是否安全。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelData">
      <summary>获取通道特定的数据。</summary>
      <returns>一个 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例，包含通道特定的数据。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelName">
      <summary>获取当前通道的名称。</summary>
      <returns>一个 <see cref="T:System.String" /> 实例，它包含的通道的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.ChannelPriority">
      <summary>获取当前信道的优先级。</summary>
      <returns>一个整数，表示分配给该信道的优先级。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel.IsSecured">
      <summary>获取或设置一个布尔值，该值指示当前的通道是否安全。</summary>
      <returns>一个布尔值，该值指示当前实例是否安全。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.SdlChannelSink.NextChannelSink">
      <summary>获取下一个 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> 接收器链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> 接收器链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.SdlChannelSink.Properties">
      <summary>获取 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</summary>
      <returns>一个 <see cref="T:System.Collections.IDictionary" /> 的当前信道接收器属性。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider.Next">
      <summary>获取或设置下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 接收器提供程序链中。</summary>
      <returns>下一步 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 接收器提供程序链中。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.ServiceType.ObjectType">
      <summary>获取对象 <see cref="T:System.Type" /> ，传递给 Web 服务描述语言 (WSDL) 生成器。</summary>
      <returns>该对象 <see cref="T:System.Type" /> ，当前 <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 为已创建。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.MetadataServices.ServiceType.Url">
      <summary>获取一个对象的 URL <see cref="T:System.Type" /> ，传递给 Web 服务描述语言 (WSDL) 生成器。</summary>
      <returns>对象的 URL <see cref="T:System.Type" /> ，当前 <see cref="T:System.Runtime.Remoting.MetadataServices.ServiceType" /> 为已创建。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.AllowAutoRedirect">
      <summary>获取或设置一个值，该值指示是否启用服务器重定向的自动处理。</summary>
      <returns>一个布尔值，指示是否启用服务器重定向的自动处理。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Cookies">
      <summary>当前未实现此属性。 该属性返回 null (Nothing 在 Visual Basic 中)。</summary>
      <returns>用于当前代理的 cookie。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Domain">
      <summary>获取或设置要用于基本身份验证和摘要式身份验证的域名。</summary>
      <returns>要用于基本身份验证和摘要式身份验证的域的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.EnableCookies">
      <summary>当前未实现此属性。 该属性将引发 <see cref="T:System.NotSupportedException" />。</summary>
      <returns>一个布尔值，该值指示是否启用 cookie 从服务器收到的处理。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Password">
      <summary>获取或设置要用于基本身份验证和摘要式身份验证的密码。</summary>
      <returns>要用于基本身份验证和摘要式身份验证的密码。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Path">
      <summary>获取或设置要用于请求的服务器的基 URL。</summary>
      <returns>要请求使用的服务器的基 URL。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.PreAuthenticate">
      <summary>获取或设置一个值，该值指示是否启用预身份验证的请求。</summary>
      <returns>一个布尔值，该值指示是否启用预身份验证的请求。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.ProxyName">
      <summary>获取或设置要用于请求的代理服务器的名称。</summary>
      <returns>要用于请求的代理服务器的名称。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.ProxyPort">
      <summary>获取或设置要用于请求的代理服务器的端口号。</summary>
      <returns>要用于请求的代理服务器端口号。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Timeout">
      <summary>获取或设置的超时值以毫秒为单位用于进行同步调用。</summary>
      <returns>以毫秒为单位用于进行同步调用的超时。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Url">
      <summary>获取或设置要用于请求的服务器的基 URL。</summary>
      <returns>要请求使用的服务器的基 URL。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.UserAgent">
      <summary>获取或设置请求的 HTTP 标头的用户代理。</summary>
      <returns>请求用户代理 HTTP 标头。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingClientProxy.Username">
      <summary>获取或设置要为基本身份验证和摘要式身份验证发送的用户名。</summary>
      <returns>要为基本身份验证和摘要式身份验证发送的用户名。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Application">
      <summary>获取当前 HTTP 请求的应用程序对象的引用。</summary>
      <returns>对当前 HTTP 请求的应用程序对象的引用。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Context">
      <summary>获取当前 HTTP 服务器用于处理 Web 请求的 HTTP 特定上下文。</summary>
      <returns>当前的 HTTP 特定上下文，HTTP 服务器用于处理 Web 请求。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Server">
      <summary>获取 <see cref="T:System.Web.HttpServerUtility" /> 为当前请求。</summary>
      <returns>
        <see cref="T:System.Web.HttpServerUtility" /> 为当前请求。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.Session">
      <summary>获取 <see cref="T:System.Web.SessionState.HttpSessionState" /> 为当前请求。</summary>
      <returns>
        <see cref="T:System.Web.SessionState.HttpSessionState" /> 为当前请求。</returns>
    </member>
    <member name="P:System.Runtime.Remoting.Services.RemotingService.User">
      <summary>获取该用户的名义运行代码，它包括该用户的标识和用户所属的任何角色的安全上下文。</summary>
      <returns>用户的安全上下文。</returns>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSink">
      <summary>提供使用的客户端格式化程序接收器实现 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryClientFormatterSinkProvider">
      <summary>提供为二进制的客户端格式化程序接收器提供程序的实现。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink">
      <summary>提供使用的服务器格式化程序接收器实现 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol">
      <summary>指定要使用的协议 <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" /> 类。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol.Http">
      <summary>指示当前格式化程序接收器使用的 HTTP 协议，并因此需要特殊处理。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol.Other">
      <summary>表示与当前格式化程序接收器使用除 HTTP 之外的协议。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSinkProvider">
      <summary>提供使用的信道接收器提供程序的服务器格式化程序实现 <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.CommonTransportKeys">
      <summary>与通道所使用的公共值关联的传输密钥。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpChannel">
      <summary>为使用 HTTP 的远程调用实现的客户端信道协议传输消息。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpClientChannel">
      <summary>为使用 HTTP 的远程调用实现的客户端信道协议传输消息。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler">
      <summary>实现的 ASP.NET 处理程序将请求转发到的远程 HTTP 通道。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandlerFactory">
      <summary>初始化的新实例 <see cref="T:System.Runtime.Remoting.Channels.Http.HttpRemotingHandler" /> 类。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Http.HttpServerChannel">
      <summary>为使用 HTTP 的远程调用实现的服务器信道协议传输消息。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection">
      <summary>
        <see cref="T:System.Runtime.Remoting.Channels.IAuthorizeRemotingConnection" /> 接口提供了指示客户端是否有权连接当前信道，基于客户端的网络地址和用户标识的方法。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel">
      <summary>提供使用 IPC 协议传输消息的通道实现。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel">
      <summary>实现客户端信道使用 IPC 协议传输消息的远程调用。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel">
      <summary>实现远程调用服务器信道使用 IPC 系统传输消息。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapClientFormatterSink">
      <summary>提供使用的客户端格式化程序接收器实现 <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapClientFormatterSinkProvider">
      <summary>提供一个客户端格式化程序接收器提供程序的实现。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink">
      <summary>提供使用的服务器格式化程序接收器实现 <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol">
      <summary>指定要使用的协议 <see cref="T:System.Runtime.Remoting.Channels.SoapServerFormatterSink" /> 类。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol.Http">
      <summary>指示当前格式化程序接收器使用的 HTTP 协议，并因此需要特殊处理。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SoapServerFormatterSink.Protocol.Other">
      <summary>表示与当前格式化程序接收器使用除 HTTP 之外的协议。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SoapServerFormatterSinkProvider">
      <summary>提供使用的信道接收器提供程序的服务器格式化程序实现 <see cref="T:System.Runtime.Serialization.Formatters.Soap.SoapFormatter" />。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.SocketCachePolicy">
      <summary>指定从远程处理客户端上维护的缓存中删除客户端的策略。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SocketCachePolicy.Default">
      <summary>从缓存中移除套接字之后其最后一次使用的固定的时间。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.Channels.SocketCachePolicy.AbsoluteTimeout">
      <summary>从缓存中移除套接字在其创建后的固定的时间。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel">
      <summary>提供使用 TCP 协议传输消息的通道实现。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Tcp.TcpClientChannel">
      <summary>为远程调用实现使用 TCP 协议传输消息的客户端通道。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Channels.Tcp.TcpServerChannel">
      <summary>实现的服务器信道使用 TCP 协议传输消息的远程调用。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.MetaData">
      <summary>提供允许您使用 XML 架构的方法。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink">
      <summary>提供服务器的实现在服务器动态生成 Web 服务描述语言 (WSDL) 的信道接收器。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SdlChannelSinkProvider">
      <summary>为提供了实现服务器信道接收器提供程序创建 <see cref="T:System.Runtime.Remoting.MetadataServices.SdlChannelSink" /> 实例。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SdlType">
      <summary>指定用于描述应用程序提供的服务的架构类型。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.MetadataServices.SdlType.Sdl">
      <summary>指示基本服务描述语言 (SDL) 用于描述应用程序提供服务。 此值已废弃不用。</summary>
    </member>
    <member name="F:System.Runtime.Remoting.MetadataServices.SdlType.Wsdl">
      <summary>指示 Web 服务描述语言 (WSDL) 用于描述应用程序提供服务。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.ServiceType">
      <summary>将传递到远程终结点可以处理消息发送到类型上的方法与 Web 服务描述语言 (WSDL) 生成器的已知对象类型相关联。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SUDSGeneratorException">
      <summary>如果在生成的 Web 服务描述语言 (WSDL) 期间出错时引发的异常。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.MetadataServices.SUDSParserException">
      <summary>当分析 Web 服务描述语言 (WSDL) 的过程中发生错误时引发异常。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Services.RemotingClientProxy">
      <summary>已知对象，而生成的代理的抽象基类 Soapsuds 工具 (Soapsuds.exe)。</summary>
    </member>
    <member name="T:System.Runtime.Remoting.Services.RemotingService">
      <summary>提供用于远程处理的基实现 XML Web 服务。</summary>
    </member>
  </members>
</doc>