<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Composition.Registration</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.Composition.Registration.ExportBuilder">
      <summary>表示基于规则的导出的配置信息。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.ExportBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})">
      <summary>指定元数据键/值对添加到导出。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="name">元数据键。</param>
      <param name="itemFunc">采用类型和返回元数据值的函数。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AddMetadata(System.String,System.Object)">
      <summary>指定元数据键/值对添加到导出。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="name">元数据键。</param>
      <param name="value">元数据的值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AsContractName(System.String)">
      <summary>指定导出应使用命名的协定名称。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="contractName">协定名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AsContractType``1">
      <summary>指定导出应使用特定协定类型。</summary>
      <returns>当前对象，允许绑定。</returns>
      <typeparam name="T">使用协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.AsContractType(System.Type)">
      <summary>指定导出应使用特定协定类型。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="type">使用的协定类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ExportBuilder.Inherited">
      <summary>指定应继承此导出。</summary>
      <returns>当前对象，允许绑定。</returns>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.ImportBuilder">
      <summary>表示基于规则导入的配置信息。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.ImportBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AllowDefault">
      <summary>指定导入应授予的默认权限。</summary>
      <returns>当前对象，允许绑定。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AllowRecomposition">
      <summary>指定导入应 recomposable。</summary>
      <returns>当前对象，允许绑定。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsContractName(System.String)">
      <summary>指定导入应使用命名的协定名称。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="contractName">协定名称。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contractName" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="contractName" /> 是空字符串。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsContractType``1">
      <summary>指定导入应使用特定协定类型。</summary>
      <returns>当前对象，允许绑定。</returns>
      <typeparam name="T">使用协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsContractType(System.Type)">
      <summary>指定导入应使用特定协定类型。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="type">使用的协定类型。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.AsMany(System.Boolean)">
      <summary>指定导入基数。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="isMany"> 指定多个导入的true ;指定单个导入的 false 。默认值为 true。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.RequiredCreationPolicy(System.ComponentModel.Composition.CreationPolicy)">
      <summary>指定导入的需要的创建策略。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="requiredCreationPolicy">导入需要的创建策略。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ImportBuilder.Source(System.ComponentModel.Composition.ImportSource)">
      <summary>指定范围此导入可以满足的值的。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="source">指定范围导入的值可以是不够的。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.ParameterImportBuilder">
      <summary>表示基于规则的构造函数参数导入的配置。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ParameterImportBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.ParameterImportBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ParameterImportBuilder.Import``1">
      <summary>定义指定的参数为导入的参数。</summary>
      <returns>不应只引用和调用 <paramref name="T" />默认值，，但此方法。</returns>
      <typeparam name="T">定义参数的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.ParameterImportBuilder.Import``1(System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>定义指定的参数作为具有指定的配置的已导入的参数。</summary>
      <returns>不应只引用和调用 <paramref name="T" />默认值，，但此方法。</returns>
      <param name="configure">包含要对导入的参数的配置信息的对象。</param>
      <typeparam name="T">定义参数的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="configure" /> 为 null。</exception>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.PartBuilder">
      <summary>表示修饰的规则设置对类型 " managed extensibility framework 属性 (MEF)。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Func{System.Type,System.Object})">
      <summary>添加元数据类型匹配。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="name">元数据键。</param>
      <param name="itemFunc">返回元数据值的函数命名对象类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.AddMetadata(System.String,System.Object)">
      <summary>添加元数据类型匹配。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="name">元数据键。</param>
      <param name="value">元数据的值。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export">
      <summary>指定了匹配的类型应导出。</summary>
      <returns>当前对象，允许绑定。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export``1">
      <summary>使用指定的协定类型，指定了匹配的类型应导出。</summary>
      <returns>当前对象，允许绑定。</returns>
      <typeparam name="T">协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>指定了匹配的类型应导出，并为生成的导出提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="exportConfiguration">包含有关导出的配置信息的对象。默认值为 null。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.Export``1(System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>使用指定的协定类型，指定了匹配的类型应导出，并为生成的导出提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="exportConfiguration">包含有关导出的配置信息的对象。默认值为 null。</param>
      <typeparam name="T">协定的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces">
      <summary>指定应导出类型匹配的所有接口。</summary>
      <returns>当前对象，允许绑定。</returns>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type})">
      <summary>应在导出匹配的类型指定一组接口。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="interfaceFilter">指定组接口的性质。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportInterfaces(System.Predicate{System.Type},System.Action{System.Type,System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>应在导出的类型匹配指定组接口，并为生成的导出提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="interfaceFilter">指定组接口的性质。</param>
      <param name="exportConfiguration">包含有关导出的配置信息的对象。默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="interfaceFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>应在导出匹配的类型指定一组属性，可以使用指定的协定类型。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <typeparam name="T">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>指定匹配的类型应导出的属性。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>应在导出匹配的类型指定一组属性，并为这些导出提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <param name="exportConfiguration">包含有关导出的配置信息的对象。默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ExportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>使用指定的协定类型，应在导出匹配的类型指定一组属性，并为生成的导出提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <param name="exportConfiguration">包含有关导出的配置信息的对象。默认值为 null。</param>
      <typeparam name="T">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>在应标记为导入使用指定的协定类型，匹配的类型指定一组属性。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <typeparam name="T">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo})">
      <summary>在应导入匹配的类型指定一组属性。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties``1(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>使用指定的协定类型，应在标记为导入的类型匹配指定一组属性，并为生成的导入提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <param name="importConfiguration">包含有关导入的配置信息的对象。默认值为 null。</param>
      <typeparam name="T">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.ImportProperties(System.Predicate{System.Reflection.PropertyInfo},System.Action{System.Reflection.PropertyInfo,System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>在应标记为导入的类型匹配指定一组属性，并为生成的导入提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">指定一组属性的性质。</param>
      <param name="importConfiguration">包含有关导入的配置信息的对象。默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo})">
      <summary>指定匹配的类型应用作一个导入的构造函数。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="constructorFilter">从选择一个构造函数将构造函数的函数。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructorFilter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructorFilter" /> 返回 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="constructorFilter" /> 返回未与目标类型的构造函数。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.SelectConstructor(System.Func{System.Reflection.ConstructorInfo[],System.Reflection.ConstructorInfo},System.Action{System.Reflection.ParameterInfo,System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>指定匹配的类型应用作一个导入的构造函数，并为生成的导入提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="constructorFilter">从选择一个构造函数将构造函数的函数。</param>
      <param name="importConfiguration">一个包含要导入的构造函数的配置信息的对象。默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constructorFilter" /> 为 null。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="constructorFilter" /> 返回 null。</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="constructorFilter" /> 返回未与目标类型的构造函数。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder.SetCreationPolicy(System.ComponentModel.Composition.CreationPolicy)">
      <summary>在匹配类型指定创建策略。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="creationPolicy">创建策略。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.PartBuilder`1">
      <summary>扩展 <see cref="T:System.ComponentModel.Composition.Registration.PartBuilder" /> 类允许使用表达式选择成员。</summary>
      <typeparam name="T">目标的类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>指定应导出为指定的协定类型的属性。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <typeparam name="TContract">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>指定应导出的属性。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>指定应导出为指定的协定类型的属性，并为生成的导出提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <param name="exportConfiguration">包含有关导出的配置信息的对象。默认值为 null。</param>
      <typeparam name="TContract">协定的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ExportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ExportBuilder})">
      <summary>指定应导出的属性，并为生成的导出提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <param name="exportConfiguration">包含有关导出的配置信息的对象。默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>指定使用指定的协定名称，应导入属性。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <typeparam name="TContract">使用的协定类型。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>指定应导入属性。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty``1(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>指定应导入使用指定的协定名称，属性，并为生成的导入提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <param name="importConfiguration">包含有关导入的配置信息的对象。默认值为 null。</param>
      <typeparam name="TContract">使用的协定名称。</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.ImportProperty(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Action{System.ComponentModel.Composition.Registration.ImportBuilder})">
      <summary>指定应导入属性，并为生成的导入提供配置信息。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="propertyFilter">该表达式导致对目标属性。</param>
      <param name="importConfiguration">包含有关导入的配置信息的对象。默认值为 null。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyFilter" /> 为 null。</exception>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.PartBuilder`1.SelectConstructor(System.Linq.Expressions.Expression{System.Func{System.ComponentModel.Composition.Registration.ParameterImportBuilder,`0}})">
      <summary>指定应用作一个导入的构造函数。</summary>
      <returns>当前对象，允许绑定。</returns>
      <param name="constructorFilter">通过使用所需的构造函数，构造 <paramref name="T" /> 的表达式。它仅用于引用，而实际调用。</param>
    </member>
    <member name="T:System.ComponentModel.Composition.Registration.RegistrationBuilder">
      <summary>表示关联约定描述修饰的实体规则与 managed extensibility framework 属性的反射 (MEF)上下文。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.#ctor">
      <summary>初始化 <see cref="T:System.ComponentModel.Composition.Registration.RegistrationBuilder" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType``1">
      <summary>获取表示规则适用于指定类型的强类型对象。</summary>
      <returns>表示规则的强类型对象。</returns>
      <typeparam name="T">类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForType(System.Type)">
      <summary>获取表示规则适用于指定类型的对象。</summary>
      <returns>表示规则的对象。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom``1">
      <summary>获取表示规则适用于所有类型实现了指定类型，但是，不适用于一个指定类型的强类型对象。</summary>
      <returns>表示规则的强类型对象。</returns>
      <typeparam name="T">类型。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesDerivedFrom(System.Type)">
      <summary>获取表示规则适用于所有类型实现了指定类型，但是，不适用于一个指定类型的对象。</summary>
      <returns>表示规则的对象。</returns>
      <param name="type">类型。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching(System.Predicate{System.Type})">
      <summary>获取表示规则适用于所有类型与指定谓词相匹配的对象。</summary>
      <returns>表示规则的对象。</returns>
      <param name="typeFilter">要匹配的谓词。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.ForTypesMatching``1(System.Predicate{System.Type})">
      <summary>获取表示规则适用于所有类型与指定谓词相匹配的强类型对象。</summary>
      <returns>表示规则的强类型对象。</returns>
      <param name="typeFilter">要匹配的谓词。</param>
      <typeparam name="T">
        <see cref="T:System.ComponentModel.Composition.Registration.PartBuilder'1" /> 对象的类型返回的。</typeparam>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>为指定的成员在只反射上下文中提供自定义属性列表，如表示。</summary>
      <returns>此反射上下文表示指定的成员自定义特性的集合。</returns>
      <param name="member">自定义属性将返回的成员。</param>
      <param name="declaredAttributes">成员的特性的集合在其当前上下文。</param>
    </member>
    <member name="M:System.ComponentModel.Composition.Registration.RegistrationBuilder.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>对指定的参数在只反射上下文中提供自定义属性列表，如表示。</summary>
      <returns>在只反射上下文中指示指定的参数自定义特性的集合。</returns>
      <param name="parameter">自定义属性将返回的参数。</param>
      <param name="declaredAttributes">参数的属性集合中的当前上下文。</param>
    </member>
  </members>
</doc>